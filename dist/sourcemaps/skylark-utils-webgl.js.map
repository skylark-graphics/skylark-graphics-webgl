{"version":3,"sources":["skylark-utils-webgl.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","webgl","EventDispatcher","Vector2","x","y","this","Matrix4","elements","arguments","console","error","Quaternion","z","w","_x","_y","_z","_w","undefined","Vector3","Matrix3","Texture","image","mapping","wrapS","wrapT","magFilter","minFilter","format","type","anisotropy","encoding","Object","defineProperty","value","textureId","uuid","_Math","generateUUID","name","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","LinearFilter","LinearMipMapLinearFilter","RGBAFormat","UnsignedByteType","offset","repeat","center","rotation","matrixAutoUpdate","matrix","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","version","onUpdate","Vector4","WebGLRenderTarget","width","height","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","call","activeCubeFace","activeMipMapLevel","DataTexture","data","NearestFilter","Box3","min","max","Infinity","Sphere","radius","Plane","normal","constant","Frustum","p0","p1","p2","p3","p4","p5","planes","Color","r","g","b","set","setRGB","WebGLAnimation","onAnimationFrame","time","frame","isAnimating","animationLoop","context","requestAnimationFrame","start","stop","setAnimationLoop","callback","setContext","WebGLAttributes","gl","createBuffer","attribute","bufferType","array","usage","dynamic","DYNAMIC_DRAW","STATIC_DRAW","buffer","bindBuffer","bufferData","onUploadCallback","FLOAT","Float32Array","Float64Array","warn","Uint16Array","UNSIGNED_SHORT","Int16Array","SHORT","Uint32Array","UNSIGNED_INT","Int32Array","INT","Int8Array","BYTE","Uint8Array","UNSIGNED_BYTE","bytesPerElement","BYTES_PER_ELEMENT","updateBuffer","updateRange","count","bufferSubData","subarray","get","isInterleavedBufferAttribute","buffers","remove","deleteBuffer","update","WeakMap","Euler","order","_order","DefaultOrder","Layers","mask","Object3D","onRotationChange","quaternion","setFromEuler","onQuaternionChange","setFromQuaternion","object3DId","parent","children","up","DefaultUp","clone","position","scale","onChange","defineProperties","enumerable","modelViewMatrix","normalMatrix","matrixWorld","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","layers","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Camera","matrixWorldInverse","projectionMatrix","projectionMatrixInverse","OrthographicCamera","left","right","top","bottom","near","far","zoom","view","updateProjectionMatrix","Face3","a","c","color","materialIndex","isVector3","vertexNormals","Array","isArray","isColor","vertexColors","Geometry","geometryId","vertices","colors","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","BufferAttribute","itemSize","normalized","TypeError","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Uint16BufferAttribute","Int32BufferAttribute","Uint32BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","DirectGeometry","normals","uvs","uvs2","groups","arrayMax","l","BufferGeometry","bufferGeometryId","index","attributes","morphAttributes","drawRange","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","parameters","fromBufferGeometry","BoxBufferGeometry","mergeVertices","buildPlane","u","v","udir","vdir","gridX","gridY","ix","iy","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","vector","numberOfVertices","d","indices","scope","addGroup","groupStart","Math","floor","setIndex","addAttribute","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","Material","materialId","fog","lights","blending","NormalBlending","side","FrontSide","flatShading","NoColors","opacity","transparent","blendSrc","SrcAlphaFactor","blendDst","OneMinusSrcAlphaFactor","blendEquation","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","LessEqualDepth","depthTest","depthWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","overdraw","needsUpdate","MeshBasicMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","MultiplyOperation","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","setValues","ShaderMaterial","defines","uniforms","vertexShader","fragmentShader","linewidth","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","uv","uv2","index0AttributeName","uniformsNeedUpdate","Ray","origin","direction","Triangle","Mesh","geometry","material","random","drawMode","TrianglesDrawMode","updateMorphTargets","WebGLBackground","renderer","state","objects","render","renderList","scene","camera","forceClear","background","setClear","clearColor","clearAlpha","autoClear","clear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","boxMesh","ShaderLib","cube","BackSide","removeAttribute","onBeforeRender","copyPosition","tCube","isTexture","planeCamera","planeMesh","renderBufferDirect","alpha","getClearColor","setClearColor","getClearAlpha","setClearAlpha","WebGLBufferRenderer","info","capabilities","setMode","mode","drawArrays","renderInstances","extension","isWebGL2","maxInstancedCount","WebGLCapabilities","getMaxAnisotropy","maxAnisotropy","getParameter","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getMaxPrecision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","floatVertexTextures","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","numIntersection","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","getNormalMatrix","i4","plane","copy","applyMatrix4","toArray","localClippingEnabled","renderingShadows","init","enableLocalClipping","enabled","beginShadows","endShadows","setState","cache","fromCache","nGlobal","lGlobal","clippingState","WebGLExtensions","getExtension","WebGLGeometries","onGeometryDispose","event","target","buffergeometry","geometries","removeEventListener","wireframeAttributes","memory","object","addEventListener","isBufferGeometry","isGeometry","_bufferGeometry","setFromObject","geometryAttributes","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","getWireframeAttribute","geometryIndex","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","instanceCount","calls","TRIANGLES","triangles","TRIANGLE_STRIP","TRIANGLE_FAN","LINES","lines","LINE_STRIP","LINE_LOOP","POINTS","points","reset","textures","programs","autoReset","absNumericalSort","abs","WebGLMorphtargets","program","objectInfluences","morphTargetInfluences","influences","influencesList","influence","sort","morphInfluences","getUniforms","setValue","WebGLObjects","updateList","updateFromObject","dispose","CubeTexture","images","CubeReflectionMapping","UniformContainer","seq","flatten","nBlocks","blockSize","firstElem","n","arrayCacheF32","arraysEqual","copyArray","allocTexUnits","arrayCacheI32","allocTextureUnit","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2f","uniform2fv","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4f","uniform4fv","setValue2fm","uniformMatrix2fv","mat2array","setValue3fm","uniformMatrix3fv","mat3array","setValue4fm","uniformMatrix4fv","mat4array","setValueT1","unit","setTexture2D","emptyTexture","setValueT6","setTextureCube","emptyCubeTexture","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","size","updateCache","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","PureArrayUniform","StructuredUniform","addUniform","container","uniformObject","parseUniform","path","pathLength","RePathPart","lastIndex","match","exec","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","addLineNumbers","string","WebGLShader","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMapping","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","generateExtensions","rendererExtensions","chunks","envMapCubeUV","bumpMap","normalMap","objectSpaceNormalMap","filter","filterEmptyLine","generateDefines","fetchAttributeLocations","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","parseIncludes","include","ShaderChunk","pattern","unrollLoops","end","snippet","unroll","parseInt","WebGLProgram","code","shadowMapTypeDefine","shadowMapType","PCFShadowMap","PCFSoftShadowMap","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","MixOperation","AddOperation","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","createProgram","isRawShaderMaterial","supportsVertexTextures","maxBones","useFog","fogExp","emissiveMap","displacementMap","roughnessMap","metalnessMap","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","sizeAttenuation","gradientMap","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","programLog","getProgramInfoLog","trim","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","log","prefix","deleteShader","cachedUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","allocateBones","skeleton","bones","nVertexUniforms","nVertexMatrices","getTextureEncodingFromMap","gammaOverrideLinear","isWebGLRenderTarget","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","currentRenderTarget","getRenderTarget","gammaOutput","gammaInput","envMapMode","normalMapType","ObjectSpaceNormalMap","isFogExp2","maxMorphTargets","maxMorphNormals","directional","point","spot","rectArea","hemi","shadowMap","DoubleSide","getProgramCode","onBeforeCompile","toString","acquireProgram","p","pl","programInfo","releaseProgram","indexOf","WebGLProperties","properties","key","painterSortStable","reversePainterSortStable","WebGLRenderList","renderItemsIndex","opaque","group","renderItem","renderItems","WebGLRenderLists","hash","list","lists","UniformsCache","light","shadow","shadowBias","shadowRadius","shadowMapSize","distance","coneCos","penumbraCos","decay","shadowCameraNear","shadowCameraFar","skyColor","groundColor","halfWidth","halfHeight","WebGLLights","setup","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","intensity","isAmbientLight","isDirectionalLight","multiplyScalar","setFromMatrixPosition","vector3","sub","transformDirection","bias","mapSize","directionalShadowMap","directionalShadowMatrix","isSpotLight","cos","angle","penumbra","spotShadowMap","spotShadowMatrix","isRectAreaLight","matrix42","identity","matrix4","premultiply","extractRotation","isPointLight","pointShadowMap","pointShadowMatrix","isHemisphereLight","normalize","ambient","stateID","shadowsLength","WebGLRenderState","lightsArray","shadowsArray","pushLight","pushShadow","shadowLight","setupLights","WebGLRenderStates","renderState","renderStates","BasicDepthPacking","displacementScale","displacementBias","referencePosition","nearDistance","farDistance","WebGLShadowMap","_renderer","_objects","getDepthMaterial","lightPositionWorld","result","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","useSkinning","variantIndex","_MorphingFlag","_SkinningFlag","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","isMeshDistanceMaterial","renderObject","shadowCamera","test","isMesh","isLine","isPoints","_frustum","intersectsObject","multiplyMatrices","k","kl","groupMaterial","depthMaterial","_lightPositionWorld","_projScreenMatrix","_shadowMapSize","_maxShadowMapSize","_lookTarget","_NumberOfMaterialVariants","0","1","2","cubeDirections","cubeUps","cube2DViewPorts","RGBADepthPacking","distanceMaterial","autoUpdate","_gl","_state","disable","BLEND","setTest","setScissorTest","faceCount","il","vpWidth","vpHeight","pars","isSpotLightShadow","shadowMatrix","makeTranslation","lookAt","updateMatrixWorld","multiply","setRenderTarget","face","add","vpDimensions","setFromMatrix","WebGLState","utils","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","equals","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","enable","DEPTH_TEST","depthMask","setFunc","NeverDepth","NEVER","AlwaysDepth","ALWAYS","LessDepth","LESS","LEQUAL","EqualDepth","EQUAL","GreaterEqualDepth","GEQUAL","GreaterDepth","GREATER","NotEqualDepth","NOTEQUAL","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","clearStencil","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","initAttributes","newAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enabledAttributes","enableVertexAttribArray","attributeDivisors","disableUnusedAttributes","disableVertexAttribArray","enabledCapabilities","getCompressedTextureFormats","compressedTextureFormats","formats","COMPRESSED_TEXTURE_FORMATS","useProgram","currentProgram","setBlending","NoBlending","currentBlendingEnabled","CustomBlending","currentBlendEquation","currentBlendEquationAlpha","blendEquationSeparate","convert","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","blendFuncSeparate","currentBlending","currentPremultipledAlpha","FUNC_ADD","ONE","ONE_MINUS_SRC_ALPHA","AdditiveBlending","blendFunc","SubtractiveBlending","ZERO","ONE_MINUS_SRC_COLOR","MultiplyBlending","SRC_COLOR","SRC_ALPHA","setMaterial","frontFaceCW","CULL_FACE","setFlipSided","colorBuffer","setPolygonOffset","currentFlipSided","frontFace","CW","CCW","setCullFace","cullFace","CullFaceNone","currentCullFace","CullFaceBack","BACK","CullFaceFront","FRONT","FRONT_AND_BACK","setLineWidth","currentLineWidth","lineWidthAvailable","lineWidth","factor","POLYGON_OFFSET_FILL","currentPolygonOffsetFactor","currentPolygonOffsetUnits","SCISSOR_TEST","activeTexture","webglSlot","TEXTURE0","currentTextureSlot","webglType","webglTexture","boundTexture","currentBoundTextures","emptyTextures","compressedTexImage2D","currentScissor","currentViewport","maxVertexAttributes","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glVersion","VERSION","parseFloat","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","WebGLTextures","clampToMaxSize","maxSize","canvas","document","createElementNS","getContext","drawImage","isPowerOfTwo","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","ImageBitmap","_canvas","floorPowerOfTwo","textureNeedsPowerOfTwo","textureNeedsGenerateMipmaps","generateMipmap","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","glFormat","glType","RGB","RGB32F","HALF_FLOAT","RGB16F","RGB8","RGBA32F","RGBA16F","RGBA8","filterFallback","f","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LINEAR","onTextureDispose","deallocateTexture","isVideoTexture","_videoTextures","onRenderTargetDispose","renderTarget","deallocateRenderTarget","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","isWebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","slot","updateVideoTexture","__version","complete","uploadTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isCompressedTexture","isDataTexture","cubeImage","isPowerOfTwoImage","glInternalFormat","setTextureParameters","mipmap","j","jl","RGBFormat","setTextureCubeDynamic","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","CLAMP_TO_EDGE","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DepthFormat","UnsignedShortType","UnsignedIntType","DepthStencilFormat","DEPTH_STENCIL","UnsignedInt248Type","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","isCube","webglDepthTexture","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","WebGLUtils","RepeatWrapping","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","UnsignedShort565Type","UNSIGNED_SHORT_5_6_5","ByteType","ShortType","IntType","HALF_FLOAT_OES","AlphaFormat","ALPHA","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","SubtractEquation","FUNC_SUBTRACT","ReverseSubtractEquation","FUNC_REVERSE_SUBTRACT","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","DstAlphaFactor","DST_ALPHA","OneMinusDstAlphaFactor","ONE_MINUS_DST_ALPHA","DstColorFactor","DST_COLOR","OneMinusDstColorFactor","ONE_MINUS_DST_COLOR","SrcAlphaSaturateFactor","SRC_ALPHA_SATURATE","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","MinEquation","MaxEquation","MIN","MAX","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","Group","PerspectiveCamera","fov","aspect","focus","filmGauge","filmOffset","ArrayCamera","cameras","WebVRManager","isPresenting","device","onVRDisplayPresentChange","eyeParameters","getEyeParameters","renderWidth","renderHeight","currentPixelRatio","getPixelRatio","currentSize","getSize","setDrawingBufferSize","animation","findGamepad","gamepads","navigator","getGamepads","gamepad","startsWith","updateControllers","controllers","controller","pose","hasPosition","fromArray","orientation","compose","standingMatrix","decompose","buttonId","triggers","buttons","pressed","dispatchEvent","frameData","poseTarget","standingMatrixInverse","VRFrameData","tempQuaternion","tempPosition","cameraL","bounds","cameraR","cameraVR","userHeight","getController","getDevice","setDevice","setPoseTarget","getCamera","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","poseObject","setFromRotationMatrix","applyQuaternion","leftViewMatrix","rightViewMatrix","getInverse","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","getStandingMatrix","submitFrame","WebXRManager","session","frameOfRef","onSessionEvent","inputSources","inputSource","onSessionEnd","setFramebuffer","updateCamera","getDevicePose","baseLayer","views","getViewport","getViewMatrix","inputPose","getInputPose","targetRay","transformMatrix","pointerMatrix","onAnimationFrameCallback","XRDevice","setCompatibleXRDevice","setSession","XRWebGLLayer","requestFrameOfReference","frameOfReferenceType","then","getInputSources","THREE","WebGLRenderer","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","initGLContext","_currentScissor","_scissor","_currentViewport","_viewport","morphtargets","programCache","_this","renderLists","_premultipliedAlpha","bufferRenderer","indexedBufferRenderer","onContextLost","preventDefault","_isContextLost","onContextRestore","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","renderObjectImmediate","renderBufferImmediate","setupVertexAttributes","isInstancedBufferGeometry","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","vertexAttribPointer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","vr","projectObject","sortObjects","isLight","currentRenderState","isSprite","intersectsSprite","_vector3","currentRenderList","isImmediateRenderObject","renderObjects","overrideMaterial","isArrayCamera","_currentArrayCamera","camera2","_width","_height","setProgram","_currentGeometryProgram","onAfterRender","initMaterial","materialProperties","lightsHash","lightsStateHash","_clipping","programChange","UniformsUtils","numSupportedMorphTargets","numSupportedMorphNormals","ambientLightColor","directionalLights","spotLights","rectAreaLights","pointLights","hemisphereLights","progUniforms","uniformsList","seqWithValue","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","_currentCamera","useCache","_currentMaterialId","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","setOptional","boneTexture","sqrt","ceilPowerOfTwo","boneMatrices","boneTextureSize","toneMappingExposure","toneMappingWhitePoint","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshDepthMaterial","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","ltc_1","UniformsLib","LTC_1","ltc_2","LTC_2","upload","diffuse","emissive","emissiveIntensity","flipEnvMap","maxMipLevel","uvScaleMap","updateMatrix","uvTransform","dashSize","totalSize","gapSize","fogColor","isFog","fogNear","fogFar","fogDensity","density","specular","shininess","bumpScale","normalScale","negate","roughness","metalness","envMapIntensity","clearCoat","clearCoatRoughness","textureUnit","REVISION","_context","_alpha","_depth","_stencil","_antialias","antialias","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","domElement","_framebuffer","_currentFramebuffer","_currentScissorTest","_scissorTest","contextAttributes","rangeMin","rangeMax","message","getContextAttributes","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","setSize","updateStyle","style","setViewport","getDrawingBufferSize","pixelRatio","getCurrentViewport","setScissor","boolean","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","determinant","updateBuffers","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","TriangleStripDrawMode","TriangleFanDrawMode","isLineSegments","isLineLoop","compile","traverse","isCamera","opaqueObjects","transparentObjects","warned","setTexture","readRenderTargetPixels","restore","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","Scene","InterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","Sprite","float32Array","LOD","levels","Skeleton","boneInverses","slice","calculateInverses","Bone","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","initBones","bind","normalizeSkinWeights","linecap","linejoin","Line","LineSegments","LineLoop","Points","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","e","edge1","edge2","vertex","edge","edges","keys","index1","index2","getX","fromBufferAttribute","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","EPS","pu","pv","sliceCount","subVectors","crossVectors","PolyhedronGeometry","detail","PolyhedronBufferGeometry","subdivide","getVertexByIndex","subdivideFace","cols","pow","aj","lerp","bj","rows","pushVertex","appplyRadius","vertexBuffer","generateUVs","azimuth","PI","inclination","uvBuffer","correctUVs","correctSeam","x0","x1","x2","centroid","uvA","uvB","uvC","divideScalar","azi","correctUV","atan2","computeVertexNormals","normalizeNormals","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","t","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","generateBufferData","generateSegment","generateIndices","P","getPointAt","N","frames","B","sin","computeFrenetFrames","TorusKnotGeometry","tube","q","heightScale","TorusKnotBufferGeometry","calculatePositionOnCurve","cu","su","quOverP","cs","P1","P2","T","addVectors","cx","cy","TorusGeometry","arc","TorusBufferGeometry","linkedList","dim","clockwise","last","signedArea","insertNode","removeNode","filterPoints","again","steiner","area","prev","earcutLinked","ear","minX","minY","invSize","pass","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","zOrder","maxZ","nextZ","prevZ","intersects","locallyInside","isValidDiagonal","splitPolygon","eliminateHoles","holeIndices","outerNode","len","queue","getLeftmost","compareX","eliminateHole","hole","findHoleBridge","m","hx","hy","qx","tan","mx","my","tanMin","sortLinked","tail","numMerges","pSize","qSize","inSize","leftmost","ax","ay","bx","by","px","py","intersectsPolygon","middleInside","q1","q2","inside","a2","Node","b2","an","bp","sum","removeDupEndPts","addContour","contour","ExtrudeGeometry","shapes","ExtrudeBufferGeometry","addShape","shape","scalePt2","pt","vec","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","Number","EPSILON","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","sign","buildLidFaces","verticesArray","bevelEnabled","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","h","hl","holes","ahole","s","sl","slen1","slen2","f4","placeholder","addVertex","nextIndex","uvgen","generateTopUV","addUV","generateSideWallUV","vector2","curveSegments","bevelThickness","bevelSize","extrudePath","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","ShapeUtils","isClockWise","triangulateShape","concat","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","toJSON","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","clamp","inverseSegments","phi","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","computeFaceNormals","sourceVertices","face1","face2","dot","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","generateTorso","slope","indexRow","theta","sinTheta","cosTheta","indexArray","generateCap","centerIndexStart","centerIndexEnd","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","RawShaderMaterial","STANDARD","TangentSpaceNormalMap","PHYSICAL","TOON","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","onStart","itemStart","url","itemEnd","itemError","resolveURL","setURLModifier","transform","FileLoader","manager","DefaultLoadingManager","CompressedTextureLoader","_parser","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","t0","t1","c0","c1","c2","c3","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t3","CatmullRomCurve3","curveType","CatmullRom","v0","v1","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","QuadraticBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezier","CubicBezierCurve","v2","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","CurvePath","curves","autoClose","Path","currentPoint","setFromPoints","Shape","Light","HemisphereLight","LightShadow","SpotLightShadow","SpotLight","power","PointLight","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","constructor","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","times","values","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","tracks","resetDuration","getTrackTypeForValueTypeName","typeName","toLowerCase","parseKeyframeTrack","json","trackType","flattenJSON","parse","MaterialLoader","BufferGeometryLoader","Loader","JSONLoader","withCredentials","ObjectLoader","texturePath","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPaths","chars","from","String","resolution","line_height","yMax","yMin","underlineThickness","paths","offsetX","offsetY","char","ret","createPath","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","FontLoader","AudioLoader","StereoCamera","eyeSep","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","AudioListener","AudioContext","gain","createGain","connect","destination","Audio","listener","getInput","autoplay","loop","startTime","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","prototype","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","LoopRepeat","_loopCount","_startTime","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InstancedInterleavedBuffer","InstancedBufferAttribute","Raycaster","ray","params","threshold","PointCloud","ascSort","intersectObject","raycaster","recursive","raycast","Clock","autoStart","oldTime","elapsedTime","running","Spherical","Cylindrical","Box2","Line3","ImmediateRenderObject","VertexNormalsHelper","hex","nNormals","objGeometry","positions","SpotLightHelper","cone","getBoneList","boneList","isBone","SkeletonHelper","color1","color2","bone","VertexColors","PointLightHelper","sphereSize","RectAreaLightHelper","line","HemisphereLightHelper","rotateY","getAttribute","GridHelper","divisions","step","halfSize","PolarGridHelper","radials","circles","FaceNormalsHelper","DirectionalLightHelper","lightPlane","targetLine","CameraHelper","addLine","addPoint","pointMap","FaceColors","colorFrustum","colorCone","colorUp","colorTarget","colorCross","BoxHelper","Box3Helper","box","computeBoundingSphere","PlaneHelper","positions2","ArrowHelper","dir","headLength","headWidth","lineGeometry","coneGeometry","translate","setDirection","setLength","AxesHelper","Face4","MeshFaceMaterial","materials","MultiMaterial","isMultiMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","DynamicBufferAttribute","setDynamic","Int8Attribute","Uint8Attribute","Uint8ClampedAttribute","Int16Attribute","Uint16Attribute","Int32Attribute","Uint32Attribute","Float32Attribute","Float64Attribute","ClosedSplineCurve3","SplineCurve3","Spline","AxisHelper","BoundingBoxHelper","EdgesHelper","WireframeHelper","XHRLoader","BinaryTextureLoader","Projector","projectVector","project","unprojectVector","unproject","pickingRay","CanvasRenderer","LensFlare","isInteger","isFinite","Function","assign","output","source","nextKey","_listeners","listeners","hasEventListener","listenerArray","splice","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","FlatShading","SmoothShading","UVMapping","RGBEFormat","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","RAD2DEG","lut","d0","d1","d2","d3","toUpperCase","euclideanModulo","mapLinear","a1","b1","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","ceil","isVector2","setScalar","scalar","setX","setY","setComponent","getComponent","addScalar","addScaledVector","subScalar","divide","applyMatrix3","clampScalar","minVal","maxVal","clampLength","round","roundToZero","cross","lengthSq","manhattanLength","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","lerpVectors","getY","rotateAround","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","te","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrixColumn","makeBasis","scaleX","scaleY","scaleZ","makeRotationFromEuler","euler","isEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","zero","one","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","applyToBufferAttribute","getZ","setXYZ","transpose","tmp","setPosition","throwOnDegenerate","t11","t12","t13","t14","det","msg","detInv","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","axis","tx","ty","makeScale","makeShear","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","sx","sy","sz","invSX","invSY","invSZ","makePerspective","makeOrthographic","slerp","qa","qb","qm","slerpFlat","dst","src0","srcOffset0","src1","srcOffset1","y0","z0","w0","y1","z1","w1","sqrSin","tDir","onChangeCallback","s1","s2","s3","setFromAxisAngle","halfAngle","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","angleTo","acos","rotateTowards","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","setZ","multiplyVectors","applyEuler","applyAxisAngle","qy","qz","qw","iz","iw","az","bz","projectOnVector","projectOnPlane","planeNormal","reflect","dz","setFromSpherical","setFromSphericalCoords","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixScale","isMatrix3","setFromMatrix4","transposeIntoArray","setUvTransform","rotate","ImageUtils","getDataURL","ImageData","putImageData","toDataURL","create","meta","isRootObject","metadata","generator","wrap","transformUv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon","epsilon2","getW","isBox3","setFromArray","maxX","maxY","setFromBufferAttribute","makeEmpty","expandByPoint","setFromCenterAndSize","expandByObject","isEmpty","getCenter","expandByVector","expandByScalar","containsPoint","containsBox","intersectsBox","intersectsSphere","closestPoint","sphere","clampPoint","intersectsPlane","intersectsTriangle","satForAxes","axes","testAxis","extents","f0","f1","f2","triangleNormal","triangle","distanceToPoint","clampedPoint","getBoundingSphere","intersect","union","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","delta","denominator","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","sprite","negRadius","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","envmap_physical_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","merge","merged","uniforms_src","uniforms_dst","parameter_src","ColorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","setHex","setStyle","setHSL","hue2rgb","handleAlpha","charAt","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","SRGBToLinear","copyLinearToSRGB","LinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","hsl","addColors","lerpHSL","hslA","hslB","specularmap","envmap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","basic","lambert","phong","standard","dashed","tFlip","equirect","tEquirect","distanceRGBA","physical","RotationOrders","asin","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","toggle","isObject3D","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","force","serialize","library","element","extractFromCache","JSON","stringify","uuids","isOrthographicCamera","setViewOffset","fullWidth","fullHeight","clearViewOffset","zoomW","zoomH","scaleW","scaleH","computeBoundingBox","obj","addFace","tempNormals","tempUVs","tempUVs2","cb","ab","fl","vA","vB","vC","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","verticesMap","unique","changes","precisionPoints","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","isBufferAttribute","setArray","copyAt","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","getIndex","clearGroups","setDrawRange","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","array2","morphAttribute","isMaterial","newValue","currentValue","isRoot","srcPlanes","dstPlanes","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","vab","vac","vbc","vap","vbp","vcp","d4","vc","d5","d6","vb","va","setDrawMode","morphTargetDictionary","ml","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","inverseMatrix","tempA","tempB","tempC","faceIndex","fvA","fvB","fvC","faceMaterial","tl","targets","uvs_f","isGroup","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","isInterleavedBuffer","transformVertex","vertexPosition","mvPosition","alignedPosition","rotatedPosition","viewWorldMatrix","intersectPoint","worldScale","addLevel","getObjectForDistance","matrixPosition","offsetMatrix","identityMatrix","getBoneByName","gbone","pos","rotq","scl","sw","skinWeight","computeLineDistances","positionAttribute","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","testPoint","rayPointDistanceSq","localThresholdSq","distanceToRay","localThreshold","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","hasHoles","outerLen","pts","holeIndex","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","Geometries","freeze","Materials","Cache","files","file","loading","load","cached","setTimeout","dataUriRegex","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","open","callbacks","status","overrideMimeType","header","requestHeader","setRequestHeader","send","setPath","setResponseType","setWithCredentials","setMimeType","loadTexture","loader","texDatas","loaded","mipmapCount","isCubemap","texData","crossOrigin","onImageLoad","onImageError","substr","src","setCrossOrigin","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","tangent","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","aCPx","aCPy","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","arraySlice","to","isTypedArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","compareTime","sortedArray","nValues","srcOffset","jsonKeys","valuePropertyName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","track","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","shift","timeOffset","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","jsonTracks","frameTime","fps","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","shading","typedArray","TYPED_ARRAYS","drawcalls","offsets","Handlers","handlers","regex","onLoadStart","onLoadProgress","onLoadComplete","initMaterials","createMaterial","BlendingMode","textureLoader","materialLoader","fullPath","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","substring","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","details","geometryShapes","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","setOptions","res","blob","imageBitmap","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","webkitAudioContext","bufferCopy","decodeAudioData","audioBuffer","instance","eyeRight","eyeLeft","xmin","xmax","eyeSepOnProjection","ymax","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","setValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setBuffer","play","createBufferSource","onended","onEnded","pause","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","RESERVED_CHARS_RE","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","reservedRe","RegExp","wordChar","wordCharOrDot","directoryRe","nodeRe","objectRe","propertyRe","trackRe","supportedObjectNames","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","performance","Date","getElapsedTime","getDelta","newTime","other","makeSafe","setFromCartesianCoords","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","startEnd_startP","objPos","objNorm","coneLength","coneWidth","boneMatrix","matrixWorldInv","setPoint","setColor","LineStrip","LinePieces","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","copyIndicesArray","addIndex","addDrawCall","clearDrawCalls","computeOffsets","getArrays","addShapeList","wrapAround","wrapRGB","metal","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","shadowMapCullFace","renderReverseSided","renderSingleSided","standing","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","attach","CubeGeometry","langx","threejs","mixin","main"],"mappings":"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","file":"../skylark-utils-webgl.js","sourcesContent":["define('skylark-utils/skylark',[\"skylark-langx/skylark\"], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-utils-webgl/webgl',[\r\n    \"skylark-utils/skylark\"\r\n], function(skylark) {\r\n\treturn skylark.webgl = skylark.webgl || {};\r\n});\ndefine('skylark-utils-webgl/primitives/three',[],function() {\n\t'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\t( function () {\n\n\t\t\tObject.assign = function ( target ) {\n\n\t\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t\t}\n\n\t\t\t\tvar output = Object( target );\n\n\t\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\n\t\t\t};\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return false;\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tvar REVISION = '96dev';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _Math = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: ( function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar lut = [];\n\n\t\t\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t\t\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t\t\t}\n\n\t\t\treturn function generateUUID() {\n\n\t\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\t\tvar uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\n\n\t\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\t\treturn uuid.toUpperCase();\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * _Math.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * _Math.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min = new Vector2();\n\t\t\tvar max = new Vector2();\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tmin.set( minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function extractRotation( m ) {\n\n\t\t\t\t// this method does not support reflection matrices\n\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar me = m.elements;\n\n\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\t\tte[ 3 ] = 0;\n\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\t\tte[ 7 ] = 0;\n\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\t\tte[ 11 ] = 0;\n\n\t\t\t\tte[ 12 ] = 0;\n\t\t\t\tte[ 13 ] = 0;\n\t\t\t\tte[ 14 ] = 0;\n\t\t\t\tte[ 15 ] = 1;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function () {\n\n\t\t\tvar zero = new Vector3( 0, 0, 0 );\n\t\t\tvar one = new Vector3( 1, 1, 1 );\n\n\t\t\treturn function makeRotationFromQuaternion( q ) {\n\n\t\t\t\treturn this.compose( zero, q, one );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar x = new Vector3();\n\t\t\tvar y = new Vector3();\n\t\t\tvar z = new Vector3();\n\n\t\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tz.subVectors( eye, target );\n\n\t\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t\tz.z = 1;\n\n\t\t\t\t}\n\n\t\t\t\tz.normalize();\n\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\t\t// up and z are parallel\n\n\t\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t\tz.x += 0.0001;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz.z += 0.0001;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tz.normalize();\n\t\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t\t}\n\n\t\t\t\tx.normalize();\n\t\t\t\ty.crossVectors( z, x );\n\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn attribute;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 12 ] = v.x;\n\t\t\tte[ 13 ] = v.y;\n\t\t\tte[ 14 ] = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t        te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t        te[ 1 ] = ( xy + wz ) * sx;\n\t\t        te[ 2 ] = ( xz - wy ) * sx;\n\t\t        te[ 3 ] = 0;\n\n\t\t        te[ 4 ] = ( xy - wz ) * sy;\n\t\t        te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t        te[ 6 ] = ( yz + wx ) * sy;\n\t\t        te[ 7 ] = 0;\n\n\t\t        te[ 8 ] = ( xz + wy ) * sz;\n\t\t        te[ 9 ] = ( yz - wx ) * sz;\n\t\t        te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t        te[ 11 ] = 0;\n\n\t\t        te[ 12 ] = position.x;\n\t\t        te[ 13 ] = position.y;\n\t\t        te[ 14 ] = position.z;\n\t\t        te[ 15 ] = 1;\n\n\t\t        return this;\n\n\t\t},\n\n\t\tdecompose: function () {\n\n\t\t\tvar vector = new Vector3();\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t\t// if determine is negative, we need to invert one scale\n\t\t\t\tvar det = this.determinant();\n\t\t\t\tif ( det < 0 ) sx = - sx;\n\n\t\t\t\tposition.x = te[ 12 ];\n\t\t\t\tposition.y = te[ 13 ];\n\t\t\t\tposition.z = te[ 14 ];\n\n\t\t\t\t// scale the rotation part\n\t\t\t\tmatrix.copy( this );\n\n\t\t\t\tvar invSX = 1 / sx;\n\t\t\t\tvar invSY = 1 / sy;\n\t\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\t\tscale.x = sx;\n\t\t\t\tscale.y = sy;\n\t\t\t\tscale.z = sz;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function () {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar r;\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\t\tif ( r < EPS ) {\n\n\t\t\t\t\tr = 0;\n\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t\t}\n\n\t\t\t\tthis._x = v1.x;\n\t\t\t\tthis._y = v1.y;\n\t\t\t\tthis._z = v1.z;\n\t\t\t\tthis._w = r;\n\n\t\t\t\treturn this.normalize();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) return this;\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) return this;\n\t\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\treturn this.normalize();\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function applyEuler( euler ) {\n\n\t\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyAxisAngle: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function unproject( camera ) {\n\n\t\t\t\treturn this.applyMatrix4( matrix.getInverse( camera.projectionMatrix ) ).applyMatrix4( camera.matrixWorld );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min = new Vector3();\n\t\t\tvar max = new Vector3();\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( vector ) {\n\n\t\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n\t\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\t\treturn this.sub( v1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\treflect: function () {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function reflect( normal ) {\n\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn attribute;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = image.width;\n\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) return;\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new Vector4();\n\t\t\t\t\tmax = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : true;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t */\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t\tthis.activeMipMapLevel = 0;\n\n\t}\n\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function () {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tvar scope, i, l;\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\tfunction traverse( node ) {\n\n\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn function expandByObject( object ) {\n\n\t\t\t\tscope = this;\n\n\t\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\t\tobject.traverse( traverse );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: ( function () {\n\n\t\t\tvar closestPoint = new Vector3();\n\n\t\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: ( function () {\n\n\t\t\t// triangle centered vertices\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\t// triangle edge vectors\n\t\t\tvar f0 = new Vector3();\n\t\t\tvar f1 = new Vector3();\n\t\t\tvar f2 = new Vector3();\n\n\t\t\tvar testAxis = new Vector3();\n\n\t\t\tvar center = new Vector3();\n\t\t\tvar extents = new Vector3();\n\n\t\t\tvar triangleNormal = new Vector3();\n\n\t\t\tfunction satForAxes( axes ) {\n\n\t\t\t\tvar i, j;\n\n\t\t\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t\t\ttestAxis.fromArray( axes, i );\n\t\t\t\t\t// project the aabb onto the seperating axis\n\t\t\t\t\tvar r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );\n\t\t\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\t\t\tvar p0 = v0.dot( testAxis );\n\t\t\t\t\tvar p1 = v1.dot( testAxis );\n\t\t\t\t\tvar p2 = v2.dot( testAxis );\n\t\t\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn function intersectsTriangle( triangle ) {\n\n\t\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\t// compute box center and extents\n\t\t\t\tthis.getCenter( center );\n\t\t\t\textents.subVectors( this.max, center );\n\n\t\t\t\t// translate triangle to aabb origin\n\t\t\t\tv0.subVectors( triangle.a, center );\n\t\t\t\tv1.subVectors( triangle.b, center );\n\t\t\t\tv2.subVectors( triangle.c, center );\n\n\t\t\t\t// compute edge vectors for triangle\n\t\t\t\tf0.subVectors( v1, v0 );\n\t\t\t\tf1.subVectors( v2, v1 );\n\t\t\t\tf2.subVectors( v0, v2 );\n\n\t\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\t\tvar axes = [\n\t\t\t\t\t0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,\n\t\t\t\t\tf0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,\n\t\t\t\t\t- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0\n\t\t\t\t];\n\t\t\t\tif ( ! satForAxes( axes ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\t// test 3 face normals from the aabb\n\t\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\t\tif ( ! satForAxes( axes ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\t// finally testing the face normal of the triangle\n\t\t\t\t// use already existing triangle edge vectors here\n\t\t\t\ttriangleNormal.crossVectors( f0, f1 );\n\t\t\t\taxes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];\n\t\t\t\treturn satForAxes( axes );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetBoundingSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function getBoundingSphere( target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t\ttarget = new Sphere();\n\n\t\t\t\t}\n\n\t\t\t\tthis.getCenter( target.center );\n\n\t\t\t\ttarget.radius = this.getSize( v1 ).length() * 0.5;\n\n\t\t\t\treturn target;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar points = [\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3()\n\t\t\t];\n\n\t\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t\t// transform of empty box is an empty box.\n\t\t\t\tif ( this.isEmpty() ) return this;\n\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\t\tthis.setFromPoints( points );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function () {\n\n\t\t\tvar box = new Box3();\n\n\t\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\t\tvar center = this.center;\n\n\t\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n\t\t\t\t}\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectLine( line, target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\t\ttarget = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tvar direction = line.delta( v1 );\n\n\t\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t\t// line is coplanar, return origin\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar m1 = new Matrix3();\n\n\t\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\n\t\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsObject( object ) {\n\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSprite: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function () {\n\n\t\t\tvar p = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\tvar planes = this.planes;\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t\t// corner at max distance\n\n\t\t\t\t\tp.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t\tp.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t\tp.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\t\tif ( plane.distanceToPoint( p ) < 0 ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n\tvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n\tvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\\n\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\n\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n\tvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogPosition = mvPosition.xyz;\\n#endif\\n\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying vec3 vFogPosition;\\n#endif\\n\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\tfloat fogDepth = length( vFogPosition );\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying vec3 vFogPosition;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lights_pars_begin = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n#endif\\n\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#ifndef STANDARD\\n\\t\\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#endif\\n#endif\\n\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n#endif\\n\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\\n\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n\tvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n\";\n\n\tvar normal_fragment_maps = \"#ifdef USE_NORMALMAP\\n\\t#ifdef OBJECTSPACE_NORMALMAP\\n\\t\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\t#ifdef FLIP_SIDED\\n\\t\\t\\tnormal = - normal;\\n\\t\\t#endif\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\tnormal = normalize( normalMatrix * normal );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\t#ifdef OBJECTSPACE_NORMALMAP\\n\\t\\tuniform mat3 normalMatrix;\\n\\t#else\\n\\t\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\t\\tmapN.xy *= normalScale;\\n\\t\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\treturn normalize( tsn * mapN );\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n\tvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n\tvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n\tvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\n\";\n\n\tvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\n\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n\tvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\\n\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n\tvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tvar UniformsUtils = {\n\n\t\tmerge: function ( uniforms ) {\n\n\t\t\tvar merged = {};\n\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn merged;\n\n\t\t},\n\n\t\tclone: function ( uniforms_src ) {\n\n\t\t\tvar uniforms_dst = {};\n\n\t\t\tfor ( var u in uniforms_src ) {\n\n\t\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\n\t\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n\t\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n\t\t\t\t\t\tparameter_src.isTexture ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uniforms_dst;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function () {\n\n\t\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\t\tif ( t < 0 ) t += 1;\n\t\t\t\tif ( t > 1 ) t -= 1;\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\t\tif ( s === 0 ) {\n\n\t\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) return;\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\t// color keywords\n\t\t\t\tvar hex = ColorKeywords[ style ];\n\n\t\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t\t// red\n\t\t\t\t\tthis.setHex( hex );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// unknown color\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function () {\n\n\t\t\tfunction SRGBToLinear( c ) {\n\n\t\t\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t\t\t}\n\n\t\t\treturn function copySRGBToLinear( color ) {\n\n\t\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcopyLinearToSRGB: function () {\n\n\t\t\tfunction LinearToSRGB( c ) {\n\n\t\t\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t\t\t}\n\n\t\t\treturn function copyLinearToSRGB( color ) {\n\n\t\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function () {\n\n\t\t\tvar hsl = {};\n\n\t\t\treturn function ( h, s, l ) {\n\n\t\t\t\tthis.getHSL( hsl );\n\n\t\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function () {\n\n\t\t\tvar hslA = { h: 0, s: 0, l: 0 };\n\t\t\tvar hslB = { h: 0, s: 0, l: 0 };\n\n\t\t\treturn function lerpHSL( color, alpha ) {\n\n\t\t\t\tthis.getHSL( hslA );\n\t\t\t\tcolor.getHSL( hslB );\n\n\t\t\t\tvar h = _Math.lerp( hslA.h, hslB.h, alpha );\n\t\t\t\tvar s = _Math.lerp( hslA.s, hslB.s, alpha );\n\t\t\t\tvar l = _Math.lerp( hslA.l, hslB.l, alpha );\n\n\t\t\t\tthis.setHSL( h, s, l );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: {\n\t\t\t\ttCube: { value: null },\n\t\t\t\ttFlip: { value: - 1 },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t},\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearCoat: { value: 0 },\n\t\t\t\tclearCoatRoughness: { value: 0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tif ( isAnimating === false ) return;\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) return;\n\t\t\t\tif ( animationLoop === null ) return;\n\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl ) {\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = gl.FLOAT;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = gl.FLOAT;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = gl.SHORT;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = gl.INT;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = gl.BYTE;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( attribute.dynamic === false ) {\n\n\t\t\t\tgl.bufferData( bufferType, array, gl.STATIC_DRAW );\n\n\t\t\t} else if ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else if ( updateRange.count === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = _Math.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function () {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\tvar q = new Quaternion();\n\n\t\t\treturn function reorder( newOrder ) {\n\n\t\t\t\tq.setFromEuler( this );\n\n\t\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tvar object3DId = 0;\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation.onChange( onRotationChange );\n\t\tquaternion.onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function () {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar q1 = new Quaternion();\n\n\t\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateOnWorldAxis: function () {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\tvar q1 = new Quaternion();\n\n\t\t\treturn function rotateOnWorldAxis( axis, angle ) {\n\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\t\tthis.quaternion.premultiply( q1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateOnAxis: function () {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function translateX( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function translateY( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function translateZ( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function () {\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function worldToLocal( vector ) {\n\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\t// This method does not support objects with rotated and/or translated parent(s)\n\n\t\t\tvar m1 = new Matrix4();\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function lookAt( x, y, z ) {\n\n\t\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t\tvector.copy( x );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( x, y, z );\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.isCamera ) {\n\n\t\t\t\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\t\t}\n\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\t\tthis.children.push( object );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) return this;\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar scale = new Vector3();\n\n\t\t\treturn function getWorldQuaternion( target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\t\ttarget = new Quaternion();\n\n\t\t\t\t}\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, target, scale );\n\n\t\t\t\treturn target;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldScale: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldScale( target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\t\ttarget = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, target );\n\n\t\t\t\treturn target;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) return;\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) object.name = this.name;\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\t\tif ( this.visible === false ) object.visible = false;\n\t\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) recursive = true;\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar geometryId = 0; // Geometry uses even numbers as Id\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: geometryId += 2 } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj = new Object3D();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\t\tvar tempNormals = [];\n\t\t\tvar tempUVs = [];\n\t\t\tvar tempUVs2 = [];\n\n\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tvar offset = new Vector3();\n\n\t\t\treturn function center() {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t\tthis.boundingBox.getCenter( offset ).negate();\n\n\t\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\t\tif ( uv === undefined ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tuvs1.push( uvCopy );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) mesh.updateMatrix();\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\t\tthis.array = array;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) return - Infinity;\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj = new Object3D();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcenter: function () {\n\n\t\t\tvar offset = new Vector3();\n\n\t\t\treturn function center() {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t\tthis.boundingBox.getCenter( offset ).negate();\n\n\t\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tvar box = new Box3();\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function computeBoundingSphere() {\n\n\t\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t\t}\n\n\t\t\t\tvar position = this.attributes.position;\n\n\t\t\t\tif ( position ) {\n\n\t\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t\tbox.setFromBufferAttribute( position );\n\t\t\t\t\tbox.getCenter( center );\n\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t\tvector.x = position.getX( i );\n\t\t\t\t\t\tvector.y = position.getY( i );\n\t\t\t\t\t\tvector.z = position.getZ( i );\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function normalizeNormals() {\n\n\t\t\t\tvar normals = this.attributes.normal;\n\n\t\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t\tvector.x = normals.getX( i );\n\t\t\t\t\tvector.y = normals.getY( i );\n\t\t\t\t\tvector.z = normals.getZ( i );\n\n\t\t\t\t\tvector.normalize();\n\n\t\t\t\t\tnormals.setXYZ( i, vector.x, vector.y, vector.z );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: array\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: attribute.normalized\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tBoxGeometry.prototype = Object.create( Geometry.prototype );\n\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t// BoxBufferGeometry\n\n\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'BoxBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tvar scope = this;\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\t\tdepth = depth || 1;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar numberOfVertices = 0;\n\t\tvar groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tvar segmentWidth = width / gridX;\n\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\tvar widthHalf = width / 2;\n\t\t\tvar heightHalf = height / 2;\n\t\t\tvar depthHalf = depth / 2;\n\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\tvar vertexCounter = 0;\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar ix, iy;\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\t\tthis.lights = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\t\tthis.visible = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) return;\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\t\tif ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\t\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\n\t\t\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\n\n\t\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\t\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\t\tif ( this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\t\tif ( this.morphTargets === true ) data.morphTargets = true;\n\t\t\tif ( this.skinning === true ) data.skinning = true;\n\n\t\t\tif ( this.visible === false ) data.visible = false;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.lights = source.lights;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.overdraw = source.overdraw;\n\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function recast( t ) {\n\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t\t// point behind the ray\n\n\t\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t\t}\n\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\t\treturn v1.distanceToSquared( point );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdistanceSqToSegment: function () {\n\n\t\t\tvar segCenter = new Vector3();\n\t\t\tvar segDir = new Vector3();\n\t\t\tvar diff = new Vector3();\n\n\t\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t\t// defined by v0 and v1\n\t\t\t\t// It can also set two optional targets :\n\t\t\t\t// - The closest point on the ray\n\t\t\t\t// - The closest point on the segment\n\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\t\tvar c = diff.lengthSq();\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\t\tif ( det > 0 ) {\n\n\t\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\t\textDet = segExtent * det;\n\n\t\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t\t}\n\n\t\t\t\treturn sqrDist;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectSphere( sphere, target ) {\n\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\t\tvar tca = v1.dot( this.direction );\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\t\tvar t0 = tca - thc;\n\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\t\tvar t1 = tca + thc;\n\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t\t// test to see if t0 is behind the ray:\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\t\treturn this.at( t0, target );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) return null;\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: ( function () {\n\n\t\t\tvar v = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectTriangle: function () {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\tvar diff = new Vector3();\n\t\t\tvar edge1 = new Vector3();\n\t\t\tvar edge2 = new Vector3();\n\t\t\tvar normal = new Vector3();\n\n\t\t\treturn function intersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t\tedge1.subVectors( b, a );\n\t\t\t\tedge2.subVectors( c, a );\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\t\tvar sign;\n\n\t\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\t\tsign = 1;\n\n\t\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\t\tsign = - 1;\n\t\t\t\t\tDdN = - DdN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tdiff.subVectors( this.origin, a );\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t\t// b1 < 0, no intersection\n\t\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t\t// b2 < 0, no intersection\n\t\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// b1+b2 > 1, no intersection\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Line intersects triangle, check if ray does.\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t\t// t < 0, no intersection\n\t\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Ray intersects triangle.\n\t\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function () {\n\n\t\t\tvar v0 = new Vector3();\n\n\t\t\treturn function getNormal( a, b, c, target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\t\ttarget = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\ttarget.subVectors( c, b );\n\t\t\t\tv0.subVectors( a, b );\n\t\t\t\ttarget.cross( v0 );\n\n\t\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function getBarycoord( point, a, b, c, target ) {\n\n\t\t\t\tv0.subVectors( c, a );\n\t\t\t\tv1.subVectors( b, a );\n\t\t\t\tv2.subVectors( point, a );\n\n\t\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\t\tvar dot12 = v1.dot( v2 );\n\n\t\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\t\ttarget = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\t// collinear or singular triangle\n\t\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t\t}\n\n\t\t\t\tvar invDenom = 1 / denom;\n\t\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t\t// barycentric coordinates must always sum to 1\n\t\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function containsPoint( point, a, b, c ) {\n\n\t\t\t\tTriangle.getBarycoord( point, a, b, c, v1 );\n\n\t\t\t\treturn ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );\n\n\t\t\t};\n\n\t\t}()\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function getArea() {\n\n\t\t\t\tv0.subVectors( this.c, this.b );\n\t\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function () {\n\n\t\t\tvar vab = new Vector3();\n\t\t\tvar vac = new Vector3();\n\t\t\tvar vbc = new Vector3();\n\t\t\tvar vap = new Vector3();\n\t\t\tvar vbp = new Vector3();\n\t\t\tvar vcp = new Vector3();\n\n\t\t\treturn function closestPointToPoint( p, target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\t\ttarget = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\t\tvar v, w;\n\n\t\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t\tvab.subVectors( b, a );\n\t\t\t\tvac.subVectors( c, a );\n\t\t\t\tvap.subVectors( p, a );\n\t\t\t\tvar d1 = vab.dot( vap );\n\t\t\t\tvar d2 = vac.dot( vap );\n\t\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\t\treturn target.copy( a );\n\n\t\t\t\t}\n\n\t\t\t\tvbp.subVectors( p, b );\n\t\t\t\tvar d3 = vab.dot( vbp );\n\t\t\t\tvar d4 = vac.dot( vbp );\n\t\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\t\treturn target.copy( b );\n\n\t\t\t\t}\n\n\t\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\t\treturn target.copy( a ).addScaledVector( vab, v );\n\n\t\t\t\t}\n\n\t\t\t\tvcp.subVectors( p, c );\n\t\t\t\tvar d5 = vab.dot( vcp );\n\t\t\t\tvar d6 = vac.dot( vcp );\n\t\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\t\treturn target.copy( c );\n\n\t\t\t\t}\n\n\t\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\t\treturn target.copy( a ).addScaledVector( vac, w );\n\n\t\t\t\t}\n\n\t\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t\tvbc.subVectors( c, b );\n\t\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\t\treturn target.copy( b ).addScaledVector( vbc, w ); // edge region of BC\n\n\t\t\t\t}\n\n\t\t\t\t// face region\n\t\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t\t// u = va * denom\n\t\t\t\tv = vb * denom;\n\t\t\t\tw = vc * denom;\n\t\t\t\treturn target.copy( a ).addScaledVector( vab, v ).addScaledVector( vac, w );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.drawMode = TrianglesDrawMode;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tsetDrawMode: function ( value ) {\n\n\t\t\tthis.drawMode = value;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.drawMode = source.drawMode;\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphTargets[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\tvar vA = new Vector3();\n\t\t\tvar vB = new Vector3();\n\t\t\tvar vC = new Vector3();\n\n\t\t\tvar tempA = new Vector3();\n\t\t\tvar tempB = new Vector3();\n\t\t\tvar tempC = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tvar barycoord = new Vector3();\n\n\t\t\tvar intersectionPoint = new Vector3();\n\t\t\tvar intersectionPointWorld = new Vector3();\n\n\t\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\t\tTriangle.getBarycoord( point, p1, p2, p3, barycoord );\n\n\t\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\t\treturn uv1.clone();\n\n\t\t\t}\n\n\t\t\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\t\tvar intersect;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t\t\t}\n\n\t\t\t\tif ( intersect === null ) return null;\n\n\t\t\t\tintersectionPointWorld.copy( point );\n\t\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\t\treturn {\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\t\tobject: object\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, uv, a, b, c ) {\n\n\t\t\t\tvA.fromBufferAttribute( position, a );\n\t\t\t\tvB.fromBufferAttribute( position, b );\n\t\t\t\tvC.fromBufferAttribute( position, c );\n\n\t\t\t\tvar intersection = checkIntersection( object, material, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uv ) {\n\n\t\t\t\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\t\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\t\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar face = new Face3( a, b, c );\n\t\t\t\t\tTriangle.getNormal( vA, vB, vC, face.normal );\n\n\t\t\t\t\tintersection.face = face;\n\n\t\t\t\t}\n\n\t\t\t\treturn intersection;\n\n\t\t\t}\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar material = this.material;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\tif ( material === undefined ) return;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\t// Check boundingBox before continuing\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t\t}\n\n\t\t\t\tvar intersection;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar a, b, c;\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\tvar drawRange = geometry.drawRange;\n\t\t\t\t\tvar i, j, il, jl;\n\t\t\t\t\tvar group, groupMaterial;\n\t\t\t\t\tvar start, end;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar uvs;\n\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeCamera, planeMesh;\n\t\tvar boxMesh;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && background.isCubeTexture ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tuniforms: ShaderLib.cube.uniforms,\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: true,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.removeAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.removeAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.tCube.value = background;\n\n\t\t\t\trenderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeCamera === undefined ) {\n\n\t\t\t\t\tplaneCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t\t\t\t);\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.map = background;\n\n\t\t\t\t// TODO Push this to renderList\n\n\t\t\t\trenderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ capabilities.isWebGL2 ? 'drawArraysInstanced' : 'drawArraysInstancedANGLE' ]( mode, start, count, geometry.maxInstancedCount );\n\n\t\t\tinfo.update( count, mode, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\t\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info ) {\n\n\t\tvar geometries = {};\n\t\tvar wireframeAttributes = {};\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tdelete geometries[ geometry.id ];\n\n\t\t\tvar attribute = wireframeAttributes[ buffergeometry.id ];\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\tdelete wireframeAttributes[ buffergeometry.id ];\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry ) return buffergeometry;\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\t\tif ( attribute ) return attribute;\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\t// console.time( 'wireframe' );\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryAttributes.position.array;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// console.timeEnd( 'wireframe' );\n\n\t\t\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\n\t\t\tattributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\twireframeAttributes[ geometry.id ] = attribute;\n\n\t\t\treturn attribute;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\n\t\t\t} else {\n\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ capabilities.isWebGL2 ? 'drawElementsInstanced' : 'drawElementsInstancedANGLE' ]( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\n\n\t\t\tinfo.update( count, mode, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase gl.TRIANGLES:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.TRIANGLE_STRIP:\n\t\t\t\tcase gl.TRIANGLE_FAN:\n\t\t\t\t\trender.triangles += instanceCount * ( count - 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINES:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_STRIP:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_LOOP:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.POINTS:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\tvar length = objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\t// Remove current morphAttributes\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\t\tif ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\tif ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\t// Add morphAttributes\n\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence ) {\n\n\t\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tif ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\t\t\t\t\t\tif ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t}\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( geometries, info ) {\n\n\t\tvar updateList = {};\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateList = {};\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [renderer] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'renderer' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (renderer factorizations):\n\t *\n\t * .upload( gl, seq, values, renderer )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (renderer factorizations):\n\t *\n\t * .setValue( gl, name, value )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .set( gl, obj, prop )\n\t *\n\t * \t\tsets uniform from object and property with same name than uniform\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Base for inner nodes (including the root) ---\n\n\tfunction UniformContainer() {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) return false;\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( renderer, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValue1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) return;\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValue1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) return;\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValue2fv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValue3fv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValue4fv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValue2fm( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValue3fm( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValue4fm( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, renderer ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = renderer.allocTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, renderer ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = renderer.allocTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValue2iv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValue3iv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValue4iv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\n\tfunction setValue1fv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\tfunction setValue1iv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\tfunction setValueV3a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\tfunction setValueV4a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\tfunction setValueM3a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\tfunction setValueM4a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1a( gl, v, renderer ) {\n\n\t\tvar cache = this.cache;\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( renderer, n );\n\n\t\tif ( arraysEqual( cache, units ) === false ) {\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\t\t\tcopyArray( cache, units );\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6a( gl, v, renderer ) {\n\n\t\tvar cache = this.cache;\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( renderer, n );\n\n\t\tif ( arraysEqual( cache, units ) === false ) {\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\t\t\tcopyArray( cache, units );\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tUniformContainer.call( this ); // mix-in\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, renderer ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], renderer );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program, renderer ) {\n\n\t\tUniformContainer.call( this );\n\n\t\tthis.renderer = renderer;\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || ( parameters.normalMap && ! parameters.objectSpaceNormalMap ) || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\tfunction parseIncludes( string ) {\n\n\t\tvar pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\t\tfunction replace( match, include ) {\n\n\t\t\tvar replace = ShaderChunk[ include ];\n\n\t\t\tif ( replace === undefined ) {\n\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t}\n\n\t\t\treturn parseIncludes( replace );\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction unrollLoops( string ) {\n\n\t\tvar pattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\tvar unroll = '';\n\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t}\n\n\t\t\treturn unroll;\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = shader.vertexShader;\n\t\tvar fragmentShader = shader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customExtensions = capabilities.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\tparameters.envMap && ( capabilities.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = parseIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = parseIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( capabilities.isWebGL2 && ! material.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( material.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program, renderer );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.name = shader.name;\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'phong',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\"\n\t\t];\n\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\t\tencoding = GammaEncoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\t\t\tvar precision = capabilities.precision;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tshaderID: shaderID,\n\n\t\t\t\tprecision: precision,\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexColors: material.vertexColors,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\tarray.push( material.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( material.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\t\tarray.push( renderer.gammaOutput );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( material, shader, parameters, code ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar programInfo = programs[ p ];\n\n\t\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\t\tprogram = programInfo;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program && b.program && a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t\trenderItemsIndex ++;\n\n\t\t}\n\n\t\tfunction sort() {\n\n\t\t\tif ( opaque.length > 1 ) opaque.sort( painterSortStable );\n\t\t\tif ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = {};\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar hash = scene.id + ',' + camera.id;\n\t\t\tvar list = lists[ hash ];\n\n\t\t\tif ( list === undefined ) {\n\n\t\t\t\t// console.log( 'THREE.WebGLRenderLists:', hash );\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists[ hash ] = list;\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = {};\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tvar count = 0;\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar state = {\n\n\t\t\tid: count ++,\n\n\t\t\thash: {\n\t\t\t\tstateID: - 1,\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\t\t\t\tshadowsLength: - 1\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\n\t\t};\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.hash.stateID = state.id;\n\t\t\tstate.hash.directionalLength = directionalLength;\n\t\t\tstate.hash.pointLength = pointLength;\n\t\t\tstate.hash.spotLength = spotLength;\n\t\t\tstate.hash.rectAreaLength = rectAreaLength;\n\t\t\tstate.hash.hemiLength = hemiLength;\n\t\t\tstate.hash.shadowsLength = shadows.length;\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = {};\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates[ scene.id ] === undefined ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates[ scene.id ] = {};\n\t\t\t\trenderStates[ scene.id ][ camera.id ] = renderState;\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates[ scene.id ][ camera.id ] === undefined ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates[ scene.id ][ camera.id ] = renderState;\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates[ scene.id ][ camera.id ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = {};\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum(),\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),\n\n\t\t\t_lookTarget = new Vector3(),\n\t\t\t_lightPositionWorld = new Vector3(),\n\n\t\t\t_MorphingFlag = 1,\n\t\t\t_SkinningFlag = 2,\n\n\t\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tvar cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t\tvar cube2DViewPorts = [\n\t\t\tnew Vector4(), new Vector4(), new Vector4(),\n\t\t\tnew Vector4(), new Vector4(), new Vector4()\n\t\t];\n\n\t\t// init\n\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\t\tvar depthMaterial = new MeshDepthMaterial( {\n\n\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning\n\n\t\t\t} );\n\n\t\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\t\t//\n\n\t\t\tvar distanceMaterial = new MeshDistanceMaterial( {\n\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning\n\n\t\t\t} );\n\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t\t}\n\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\t\tif ( lights.length === 0 ) return;\n\n\t\t\t// TODO Clean up (needed in case of contextlost)\n\t\t\tvar _gl = _renderer.context;\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.disable( _gl.BLEND );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tvar faceCount;\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\t\t\t\tvar isPointLight = light && light.isPointLight;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t\t// following orientation:\n\t\t\t\t\t//\n\t\t\t\t\t//  xzXZ\n\t\t\t\t\t//   y Y\n\t\t\t\t\t//\n\t\t\t\t\t// X - Positive x direction\n\t\t\t\t\t// x - Negative x direction\n\t\t\t\t\t// Y - Positive y direction\n\t\t\t\t\t// y - Negative y direction\n\t\t\t\t\t// Z - Positive z direction\n\t\t\t\t\t// z - Negative z direction\n\n\t\t\t\t\t// positive X\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative X\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Z\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative Z\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Y\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t\t// negative Y\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.isSpotLightShadow ) {\n\n\t\t\t\t\tshadow.update( light );\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowMap = shadow.map;\n\t\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\tfaceCount = 6;\n\n\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t\t// equal to inverse of the light's position\n\n\t\t\t\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaceCount = 1;\n\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\t// compute shadow matrix\n\n\t\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t\t);\n\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t\t// run a single pass if not\n\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t\trenderObject( scene, camera, shadowCamera, isPointLight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t};\n\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar materialVariants = _depthMaterials;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( ! customMaterial ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\t\tif ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.isSkinnedMesh && material.skinning === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n\t\t\t\tvar variantIndex = 0;\n\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tresult.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( isPointLight && result.isMeshDistanceMaterial ) {\n\n\t\t\t\tresult.referencePosition.copy( lightPositionWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, utils, capabilities ) {\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar compressedTextureFormats = null;\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( gl.VERSION );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( gl.DEPTH_TEST );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( gl.CULL_FACE );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getCompressedTextureFormats() {\n\n\t\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\t\tcompressedTextureFormats = [];\n\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_astc' ) ) {\n\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn compressedTextureFormats;\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( gl.BLEND );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( gl.BLEND );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( gl.CULL_FACE )\n\t\t\t\t: enable( gl.CULL_FACE );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( gl.CULL_FACE );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.CULL_FACE );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcompressedTextureFormats = null;\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar _videoTextures = {};\n\t\tvar _canvas;\n\n\t\t//\n\n\t\tfunction clampToMaxSize( image, maxSize ) {\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t\t// premultiplied alpha.\n\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction makePowerOfTwo( image ) {\n\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t\t\t_canvas.width = _Math.floorPowerOfTwo( image.width );\n\t\t\t\t_canvas.height = _Math.floorPowerOfTwo( image.height );\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, _canvas.width, _canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + _canvas.width + 'x' + _canvas.height );\n\n\t\t\t\treturn _canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) return false;\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {\n\n\t\t\treturn texture.generateMipmaps && isPowerOfTwo &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( glFormat, glType ) {\n\n\t\t\tif ( ! capabilities.isWebGL2 ) return glFormat;\n\n\t\t\tif ( glFormat === _gl.RGB ) {\n\n\t\t\t\tif ( glType === _gl.FLOAT ) return _gl.RGB32F;\n\t\t\t\tif ( glType === _gl.HALF_FLOAT ) return _gl.RGB16F;\n\t\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) return _gl.RGB8;\n\n\t\t\t}\n\n\t\t\tif ( glFormat === _gl.RGBA ) {\n\n\t\t\t\tif ( glType === _gl.FLOAT ) return _gl.RGBA32F;\n\t\t\t\tif ( glType === _gl.HALF_FLOAT ) return _gl.RGBA16F;\n\t\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) return _gl.RGBA8;\n\n\t\t\t}\n\n\t\t\treturn glFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n\t\t\t\treturn _gl.NEAREST;\n\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\tdelete _videoTextures[ texture.id ];\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t\t} else {\n\n\t\t\t\t// 2D texture\n\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\t// remove all webgl properties\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) return;\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image.length === 6 ) {\n\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\t\tvar cubeImage = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, texture, image.width, image.height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\t\tif ( texture.type === HalfFloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\t\timage = makePowerOfTwo( image );\n\n\t\t\t}\n\n\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tif ( ! capabilities.isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t} else if ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar id = texture.id;\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures[ id ] !== frame ) {\n\n\t\t\t\t_videoTextures[ id ] = frame;\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === RepeatWrapping ) return gl.REPEAT;\n\t\t\tif ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;\n\t\t\tif ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;\n\n\t\t\tif ( p === NearestFilter ) return gl.NEAREST;\n\t\t\tif ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;\n\t\t\tif ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;\n\n\t\t\tif ( p === LinearFilter ) return gl.LINEAR;\n\t\t\tif ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;\n\t\t\tif ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;\n\n\t\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;\n\n\t\t\tif ( p === ByteType ) return gl.BYTE;\n\t\t\tif ( p === ShortType ) return gl.SHORT;\n\t\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\t\tif ( p === IntType ) return gl.INT;\n\t\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) return gl.HALF_FLOAT;\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\t\tif ( p === RGBFormat ) return gl.RGB;\n\t\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\t\tif ( p === AddEquation ) return gl.FUNC_ADD;\n\t\t\tif ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;\n\t\t\tif ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;\n\n\t\t\tif ( p === ZeroFactor ) return gl.ZERO;\n\t\t\tif ( p === OneFactor ) return gl.ONE;\n\t\t\tif ( p === SrcColorFactor ) return gl.SRC_COLOR;\n\t\t\tif ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;\n\t\t\tif ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;\n\t\t\tif ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;\n\t\t\tif ( p === DstAlphaFactor ) return gl.DST_ALPHA;\n\t\t\tif ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;\n\n\t\t\tif ( p === DstColorFactor ) return gl.DST_COLOR;\n\t\t\tif ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;\n\t\t\tif ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === MinEquation || p === MaxEquation ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\tif ( p === MinEquation ) return gl.MIN;\n\t\t\t\t\tif ( p === MaxEquation ) return gl.MAX;\n\n\t\t\t\t}\n\n\t\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) return gl.UNSIGNED_INT_24_8;\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebVRManager( renderer ) {\n\n\t\tvar scope = this;\n\n\t\tvar device = null;\n\t\tvar frameData = null;\n\n\t\tvar poseTarget = null;\n\n\t\tvar controllers = [];\n\t\tvar standingMatrix = new Matrix4();\n\t\tvar standingMatrixInverse = new Matrix4();\n\n\t\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\n\n\t\t\tframeData = new window.VRFrameData();\n\t\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t\t}\n\n\t\tvar matrixWorldInverse = new Matrix4();\n\t\tvar tempQuaternion = new Quaternion();\n\t\tvar tempPosition = new Vector3();\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\n\t\tcameraL.layers.enable( 1 );\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\n\t\tcameraR.layers.enable( 2 );\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tfunction isPresenting() {\n\n\t\t\treturn device !== null && device.isPresenting === true;\n\n\t\t}\n\n\t\tvar currentSize, currentPixelRatio;\n\n\t\tfunction onVRDisplayPresentChange() {\n\n\t\t\tif ( isPresenting() ) {\n\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\t\tvar renderWidth = eyeParameters.renderWidth;\n\t\t\t\tvar renderHeight = eyeParameters.renderHeight;\n\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\t\tcurrentSize = renderer.getSize();\n\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\n\n\t\t\t\tanimation.start();\n\n\t\t\t} else if ( scope.enabled ) {\n\n\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t\t\tanimation.stop();\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar triggers = [];\n\n\t\tfunction findGamepad( id ) {\n\n\t\t\tvar gamepads = navigator.getGamepads && navigator.getGamepads();\n\n\t\t\tfor ( var i = 0, j = 0, l = gamepads.length; i < l; i ++ ) {\n\n\t\t\t\tvar gamepad = gamepads[ i ];\n\n\t\t\t\tif ( gamepad && ( gamepad.id === 'Daydream Controller' ||\n\t\t\t\t\tgamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||\n\t\t\t\t\tgamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||\n\t\t\t\t\tgamepad.id.startsWith( 'Spatial Controller' ) ) ) {\n\n\t\t\t\t\tif ( j === id ) return gamepad;\n\n\t\t\t\t\tj ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateControllers() {\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar gamepad = findGamepad( i );\n\n\t\t\t\tif ( gamepad !== undefined && gamepad.pose !== undefined ) {\n\n\t\t\t\t\tif ( gamepad.pose === null ) return;\n\n\t\t\t\t\t//  Pose\n\n\t\t\t\t\tvar pose = gamepad.pose;\n\n\t\t\t\t\tif ( pose.hasPosition === false ) controller.position.set( 0.2, - 0.6, - 0.05 );\n\n\t\t\t\t\tif ( pose.position !== null ) controller.position.fromArray( pose.position );\n\t\t\t\t\tif ( pose.orientation !== null ) controller.quaternion.fromArray( pose.orientation );\n\t\t\t\t\tcontroller.matrix.compose( controller.position, controller.quaternion, controller.scale );\n\t\t\t\t\tcontroller.matrix.premultiply( standingMatrix );\n\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.quaternion, controller.scale );\n\t\t\t\t\tcontroller.matrixWorldNeedsUpdate = true;\n\t\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t\t//  Trigger\n\n\t\t\t\t\tvar buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;\n\n\t\t\t\t\tif ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\n\n\t\t\t\t\t\ttriggers[ i ] = gamepad.buttons[ buttonId ].pressed;\n\n\t\t\t\t\t\tif ( triggers[ i ] === true ) {\n\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectstart' } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectend' } );\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'select' } );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontroller.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.enabled = false;\n\t\tthis.userHeight = 1.6;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new Group();\n\t\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller;\n\n\t\t};\n\n\t\tthis.getDevice = function () {\n\n\t\t\treturn device;\n\n\t\t};\n\n\t\tthis.setDevice = function ( value ) {\n\n\t\t\tif ( value !== undefined ) device = value;\n\n\t\t\tanimation.setContext( value );\n\n\t\t};\n\n\t\tthis.setPoseTarget = function ( object ) {\n\n\t\t\tif ( object !== undefined ) poseTarget = object;\n\n\t\t};\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tif ( device === null ) {\n\n\t\t\t\tcamera.position.set( 0, scope.userHeight, 0 );\n\t\t\t\treturn camera;\n\n\t\t\t}\n\n\t\t\tdevice.depthNear = camera.near;\n\t\t\tdevice.depthFar = camera.far;\n\n\t\t\tdevice.getFrameData( frameData );\n\n\t\t\t//\n\n\t\t\tvar stageParameters = device.stageParameters;\n\n\t\t\tif ( stageParameters ) {\n\n\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\n\n\t\t\t} else {\n\n\t\t\t\tstandingMatrix.makeTranslation( 0, scope.userHeight, 0 );\n\n\t\t\t}\n\n\n\t\t\tvar pose = frameData.pose;\n\t\t\tvar poseObject = poseTarget !== null ? poseTarget : camera;\n\n\t\t\t// We want to manipulate poseObject by its position and quaternion components since users may rely on them.\n\t\t\tposeObject.matrix.copy( standingMatrix );\n\t\t\tposeObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );\n\n\t\t\tif ( pose.orientation !== null ) {\n\n\t\t\t\ttempQuaternion.fromArray( pose.orientation );\n\t\t\t\tposeObject.quaternion.multiply( tempQuaternion );\n\n\t\t\t}\n\n\t\t\tif ( pose.position !== null ) {\n\n\t\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\n\t\t\t\ttempPosition.fromArray( pose.position );\n\t\t\t\ttempPosition.applyQuaternion( tempQuaternion );\n\t\t\t\tposeObject.position.add( tempPosition );\n\n\t\t\t}\n\n\t\t\tposeObject.updateMatrixWorld();\n\n\t\t\tif ( device.isPresenting === false ) return camera;\n\n\t\t\t//\n\n\t\t\tcameraL.near = camera.near;\n\t\t\tcameraR.near = camera.near;\n\n\t\t\tcameraL.far = camera.far;\n\t\t\tcameraR.far = camera.far;\n\n\t\t\tcameraVR.matrixWorld.copy( camera.matrixWorld );\n\t\t\tcameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );\n\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\t\t// TODO (mrdoob) Double check this code\n\n\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\n\n\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\n\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t\tvar parent = poseObject.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\t\t// HACK (mrdoob)\n\t\t\t// https://github.com/w3c/webvr/issues/203\n\n\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t//\n\n\t\t\tvar layers = device.getLayers();\n\n\t\t\tif ( layers.length ) {\n\n\t\t\t\tvar layer = layers[ 0 ];\n\n\t\t\t\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\n\n\t\t\t\t\tcameraL.bounds.fromArray( layer.leftBounds );\n\n\t\t\t\t}\n\n\t\t\t\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\n\n\t\t\t\t\tcameraR.bounds.fromArray( layer.rightBounds );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tupdateControllers();\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\treturn standingMatrix;\n\n\t\t};\n\n\t\tthis.isPresenting = isPresenting;\n\n\t\t// Animation Loop\n\n\t\tvar animation = new WebGLAnimation();\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tanimation.setAnimationLoop( callback );\n\n\t\t};\n\n\t\tthis.submitFrame = function () {\n\n\t\t\tif ( isPresenting() ) device.submitFrame();\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\tif ( typeof window !== 'undefined' ) {\n\n\t\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar device = null;\n\t\tvar session = null;\n\n\t\tvar frameOfRef = null;\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar inputSources = [];\n\n\t\tfunction isPresenting() {\n\n\t\t\treturn session !== null && frameOfRef !== null;\n\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new Group();\n\t\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller;\n\n\t\t};\n\n\t\tthis.getDevice = function () {\n\n\t\t\treturn device;\n\n\t\t};\n\n\t\tthis.setDevice = function ( value ) {\n\n\t\t\tif ( value !== undefined ) device = value;\n\t\t\tif ( value instanceof XRDevice ) gl.setCompatibleXRDevice( value );\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tvar controller = controllers[ inputSources.indexOf( event.inputSource ) ];\n\t\t\tif ( controller ) controller.dispatchEvent( { type: event.type } );\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\tanimation.stop();\n\n\t\t}\n\n\t\tthis.setSession = function ( value, options ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\tsession.baseLayer = new XRWebGLLayer( session, gl );\n\t\t\t\tsession.requestFrameOfReference( options.frameOfReferenceType ).then( function ( value ) {\n\n\t\t\t\t\tframeOfRef = value;\n\n\t\t\t\t\trenderer.setFramebuffer( session.baseLayer.framebuffer );\n\n\t\t\t\t\tanimation.setContext( session );\n\t\t\t\t\tanimation.start();\n\n\t\t\t\t} );\n\n\t\t\t\t//\n\n\t\t\t\tinputSources = session.getInputSources();\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', function () {\n\n\t\t\t\t\tinputSources = session.getInputSources();\n\t\t\t\t\tconsole.log( inputSources );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tif ( isPresenting() ) {\n\n\t\t\t\tvar parent = camera.parent;\n\t\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\t\t// apply camera.parent to cameraVR\n\n\t\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t\t}\n\n\t\t\t\t// update camera and its children\n\n\t\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\t\tvar children = camera.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t\t}\n\n\t\t\t\treturn cameraVR;\n\n\t\t\t}\n\n\t\t\treturn camera;\n\n\t\t};\n\n\t\tthis.isPresenting = isPresenting;\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getDevicePose( frameOfRef );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar layer = session.baseLayer;\n\t\t\t\tvar views = frame.views;\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = layer.getViewport( view );\n\t\t\t\t\tvar viewMatrix = pose.getViewMatrix( view );\n\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t\t// HACK (mrdoob)\n\t\t\t\t\t\t// https://github.com/w3c/webvr/issues/203\n\n\t\t\t\t\t\tcameraVR.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar inputSource = inputSources[ i ];\n\n\t\t\t\tif ( inputSource ) {\n\n\t\t\t\t\tvar inputPose = frame.getInputPose( inputSource, frameOfRef );\n\n\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\tif ( 'targetRay' in inputPose ) {\n\n\t\t\t\t\t\t\tcontroller.matrix.elements = inputPose.targetRay.transformMatrix;\n\n\t\t\t\t\t\t} else if ( 'pointerMatrix' in inputPose ) {\n\n\t\t\t\t\t\t\t// DEPRECATED\n\n\t\t\t\t\t\t\tcontroller.matrix.elements = inputPose.pointerMatrix;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\n\t\t\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t\t// DEPRECATED\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );\n\t\t\treturn new THREE.Matrix4();\n\n\t\t};\n\n\t\tthis.submitFrame = function () {};\n\n\t}\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\t\tthis.context = null;\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.gammaInput = false;\n\t\tthis.gammaOutput = false;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t_isContextLost = false,\n\n\t\t\t// internal state cache\n\n\t\t\t_framebuffer = null,\n\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\n\t\t\t// geometry and program caching\n\n\t\t\t_currentGeometryProgram = {\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false\n\t\t\t},\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t//\n\n\t\t\t_usedTextureUnits = 0,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3();\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( ! capabilities.isWebGL2 ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, utils, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\t\tobjects = new WebGLObjects( geometries, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.context = _gl;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// vr\n\n\t\tvar vr = ( 'xr' in navigator ) ? new WebXRManager( _this ) : new WebVRManager( _this );\n\n\t\tthis.vr = vr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.loseContext();\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.restoreContext();\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) return;\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( vr.isPresenting() ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = width * _pixelRatio;\n\t\t\t_canvas.height = height * _pixelRatio;\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width * _pixelRatio,\n\t\t\t\theight: _height * _pixelRatio\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = width * pixelRatio;\n\t\t\t_canvas.height = height * pixelRatio;\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function () {\n\n\t\t\treturn _currentViewport;\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\t_viewport.set( x, _height - y - height, width, height );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\t_scissor.set( x, _height - y - height, width, height );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\n\t\t\tvr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.normalMatrix.determinant() < 0 );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = Infinity;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdataCount = index.count;\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\tdataCount = position.count;\n\n\t\t\t}\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) return;\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t}\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( material, program, geometry ) {\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry & ! capabilities.isWebGL2 ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( vr.isPresenting() ) return;\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) animation.setContext( window );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\tvr.setAnimationLoop( callback );\n\n\t\t\tanimation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost ) return;\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tcamera = vr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, _this.sortObjects );\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset ) this.info.reset();\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\trenderTarget = null;\n\n\t\t\t}\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\n\n\t\t\t}\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tvr.submitFrame();\n\n\t\t\t}\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\t/*\n\t\t// TODO Duplicated code (Frustum)\n\n\t\tvar _sphere = new Sphere();\n\n\t\tfunction isObjectViewable( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSpriteViewable( sprite ) {\n\n\t\t\t_sphere.center.set( 0, 0, 0 );\n\t\t\t_sphere.radius = 0.7071067811865476;\n\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSphereViewable( sphere ) {\n\n\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\t\tif ( numPlanes === 0 ) return true;\n\n\t\t\tvar planes = _this.clippingPlanes,\n\n\t\t\t\tcenter = sphere.center,\n\t\t\t\tnegRad = - sphere.radius,\n\t\t\t\ti = 0;\n\n\t\t\tdo {\n\n\t\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t\t} while ( ++ i !== numPlanes );\n\n\t\t\treturn true;\n\n\t\t}\n\t\t*/\n\n\t\tfunction projectObject( object, camera, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tif ( 'viewport' in camera2 ) { // XR\n\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar bounds = camera2.bounds;\n\n\t\t\t\t\t\t\t\tvar x = bounds.x * _width;\n\t\t\t\t\t\t\t\tvar y = bounds.y * _height;\n\t\t\t\t\t\t\t\tvar width = bounds.z * _width;\n\t\t\t\t\t\t\t\tvar height = bounds.w * _height;\n\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t\t_currentGeometryProgram.program = null;\n\t\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, fog, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsHash = materialProperties.lightsHash;\n\t\t\tvar lightsStateHash = lights.state.hash;\n\n\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.code !== code ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( lightsHash.stateID !== lightsStateHash.stateID ||\n\t\t\t\tlightsHash.directionalLength !== lightsStateHash.directionalLength ||\n\t\t\t\tlightsHash.pointLength !== lightsStateHash.pointLength ||\n\t\t\t\tlightsHash.spotLength !== lightsStateHash.spotLength ||\n\t\t\t\tlightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||\n\t\t\t\tlightsHash.hemiLength !== lightsStateHash.hemiLength ||\n\t\t\t\tlightsHash.shadowsLength !== lightsStateHash.shadowsLength ) {\n\n\t\t\t\tlightsHash.stateID = lightsStateHash.stateID;\n\t\t\t\tlightsHash.directionalLength = lightsStateHash.directionalLength;\n\t\t\t\tlightsHash.pointLength = lightsStateHash.pointLength;\n\t\t\t\tlightsHash.spotLength = lightsStateHash.spotLength;\n\t\t\t\tlightsHash.rectAreaLength = lightsStateHash.rectAreaLength;\n\t\t\t\tlightsHash.hemiLength = lightsStateHash.hemiLength;\n\t\t\t\tlightsHash.shadowsLength = lightsStateHash.shadowsLength;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\n\n\t\t\t\t// Computing code again as onBeforeCompile may have changed the shaders\n\t\t\t\tcode = programCache.getProgramCode( material, parameters );\n\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = fog;\n\n\t\t\t// store the light setup it was created for\n\t\t\tif ( lightsHash === undefined ) {\n\n\t\t\t\tmaterialProperties.lightsHash = lightsHash = {};\n\n\t\t\t}\n\n\t\t\tlightsHash.stateID = lightsStateHash.stateID;\n\t\t\tlightsHash.directionalLength = lightsStateHash.directionalLength;\n\t\t\tlightsHash.pointLength = lightsStateHash.pointLength;\n\t\t\tlightsHash.spotLength = lightsStateHash.spotLength;\n\t\t\tlightsHash.rectAreaLength = lightsStateHash.rectAreaLength;\n\t\t\tlightsHash.hemiLength = lightsStateHash.hemiLength;\n\t\t\tlightsHash.shadowsLength = lightsStateHash.shadowsLength;\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t\t_usedTextureUnits = 0;\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tvar lightsHash = materialProperties.lightsHash;\n\t\t\tvar lightsStateHash = lights.state.hash;\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate === false ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.lights && ( lightsHash.stateID !== lightsStateHash.stateID ||\n\t\t\t\t\tlightsHash.directionalLength !== lightsStateHash.directionalLength ||\n\t\t\t\t\tlightsHash.pointLength !== lightsStateHash.pointLength ||\n\t\t\t\t\tlightsHash.spotLength !== lightsStateHash.spotLength ||\n\t\t\t\t\tlightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||\n\t\t\t\t\tlightsHash.hemiLength !== lightsStateHash.hemiLength ||\n\t\t\t\t\tlightsHash.shadowsLength !== lightsStateHash.shadowsLength ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate ) {\n\n\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\tmaterial.needsUpdate = false;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\t\t\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( material.lights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\t\tm_uniforms.color.value = material.color;\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tif ( material.map.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tmaterial.map.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tif ( material.map.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tmaterial.map.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value = fog.color;\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value = material.specular;\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\t// Textures\n\n\t\tfunction allocTextureUnit() {\n\n\t\t\tvar textureUnit = _usedTextureUnits;\n\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t\t}\n\n\t\t\t_usedTextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\tthis.allocTextureUnit = allocTextureUnit;\n\n\t\t// this.setTexture2D = setTexture2D;\n\t\tthis.setTexture2D = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTexture = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTexture( texture, slot ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTextureCube = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t\t// backwards compatibility: peel texture.texture\n\t\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t\t// TODO: unify these code paths\n\t\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() );\n\n\t\t//\n\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tvar width = texture.image.width;\n\t\t\tvar height = texture.image.height;\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\tthis.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, level || 0, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\tthis.setTexture2D( dstTexture, 0 );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tFogExp2.prototype.clone = function () {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t};\n\n\tFogExp2.prototype.toJSON = function ( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tFog.prototype.clone = function () {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t};\n\n\tFog.prototype.toJSON = function ( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.fog = null;\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\t\tthis.array = array;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.map = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.lights = false;\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.map = source.map;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar geometry;\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( geometry === undefined ) {\n\n\t\t\tgeometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\tgeometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\tgeometry.addAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\tgeometry.addAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar intersectPoint = new Vector3();\n\t\t\tvar worldScale = new Vector3();\n\t\t\tvar mvPosition = new Vector3();\n\n\t\t\tvar alignedPosition = new Vector2();\n\t\t\tvar rotatedPosition = new Vector2();\n\t\t\tvar viewWorldMatrix = new Matrix4();\n\n\t\t\tvar vA = new Vector3();\n\t\t\tvar vB = new Vector3();\n\t\t\tvar vC = new Vector3();\n\n\t\t\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t\t\t// compute position in camera space\n\t\t\t\talignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t\t\t// to check if rotation is not zero\n\t\t\t\tif ( sin !== undefined ) {\n\n\t\t\t\t\trotatedPosition.x = ( cos * alignedPosition.x ) - ( sin * alignedPosition.y );\n\t\t\t\t\trotatedPosition.y = ( sin * alignedPosition.x ) + ( cos * alignedPosition.y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trotatedPosition.copy( alignedPosition );\n\n\t\t\t\t}\n\n\n\t\t\t\tvertexPosition.copy( mvPosition );\n\t\t\t\tvertexPosition.x += rotatedPosition.x;\n\t\t\t\tvertexPosition.y += rotatedPosition.y;\n\n\t\t\t\t// transform to world space\n\t\t\t\tvertexPosition.applyMatrix4( viewWorldMatrix );\n\n\t\t\t}\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tworldScale.setFromMatrixScale( this.matrixWorld );\n\t\t\t\tviewWorldMatrix.getInverse( this.modelViewMatrix ).premultiply( this.matrixWorld );\n\t\t\t\tmvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\t\tvar rotation = this.material.rotation;\n\t\t\t\tvar sin, cos;\n\t\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t\t}\n\n\t\t\t\tvar center = this.center;\n\n\t\t\t\ttransformVertex( vA.set( - 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\n\t\t\t\ttransformVertex( vB.set( 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\n\t\t\t\ttransformVertex( vC.set( 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\n\n\t\t\t\t// check first triangle\n\t\t\t\tvar intersect = raycaster.ray.intersectTriangle( vA, vB, vC, false, intersectPoint );\n\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\t// check second triangle\n\t\t\t\t\ttransformVertex( vB.set( - 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\n\t\t\t\t\tintersect = raycaster.ray.intersectTriangle( vA, vC, vB, false, intersectPoint );\n\t\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\tface: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\t\treturn this;\n\n\t\t}\n\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) distance = 0;\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar matrixPosition = new Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tupdate: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar levels = this.levels;\n\n\t\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: ( function () {\n\n\t\t\tvar offsetMatrix = new Matrix4();\n\t\t\tvar identityMatrix = new Matrix4();\n\n\t\t\treturn function update() {\n\n\t\t\t\tvar bones = this.bones;\n\t\t\t\tvar boneInverses = this.boneInverses;\n\t\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t\t// flatten bone matrices to array\n\n\t\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\n\n\t\t\t\t\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t\toffsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\tvar bones = this.initBones();\n\t\tvar skeleton = new Skeleton( bones );\n\n\t\tthis.bind( skeleton, this.matrixWorld );\n\n\t\tthis.normalizeSkinWeights();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tinitBones: function () {\n\n\t\t\tvar bones = [], bone, gbone;\n\t\t\tvar i, il;\n\n\t\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\t\t\t// first, create array of 'Bone' objects from geometry data\n\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t\t// create new 'Bone' object\n\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t\tbones.push( bone );\n\n\t\t\t\t\t// apply values\n\n\t\t\t\t\tbone.name = gbone.name;\n\t\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t\t}\n\n\t\t\t\t// second, create bone hierarchy\n\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\n\n\t\t\t\t\t\t// subsequent bones in the hierarchy\n\n\t\t\t\t\t\tbones[ gbone.parent ].add( bones[ i ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// topmost bone, immediate child of the skinned mesh\n\n\t\t\t\t\t\tthis.add( bones[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// now the bones are part of the scene graph and children of the skinned mesh.\n\t\t\t// let's update the corresponding matrices\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn bones;\n\n\t\t},\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar scale, i;\n\n\t\t\tif ( this.geometry && this.geometry.isGeometry ) {\n\n\t\t\t\tfor ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\t\tscale = 1.0 / sw.manhattanLength();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.geometry && this.geometry.isBufferGeometry ) {\n\n\t\t\t\tvar vec = new Vector4();\n\n\t\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\t\tfor ( i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\t\tscale = 1.0 / vec.manhattanLength();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcomputeLineDistances: ( function () {\n\n\t\t\tvar start = new Vector3();\n\t\t\tvar end = new Vector3();\n\n\t\t\treturn function computeLineDistances() {\n\n\t\t\t\tvar geometry = this.geometry;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\t\tlineDistances[ i ] += start.distanceTo( end );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar precision = raycaster.linePrecision;\n\t\t\t\tvar precisionSq = precision * precision;\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar vStart = new Vector3();\n\t\t\t\tvar vEnd = new Vector3();\n\t\t\t\tvar interSegment = new Vector3();\n\t\t\t\tvar interRay = new Vector3();\n\t\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: ( function () {\n\n\t\t\tvar start = new Vector3();\n\t\t\tvar end = new Vector3();\n\n\t\t\treturn function computeLineDistances() {\n\n\t\t\t\tvar geometry = this.geometry;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t\tend.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\tstart.copy( vertices[ i ] );\n\t\t\t\t\t\tend.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}() )\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar object = this;\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\t\t\tsphere.radius += threshold;\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\t\tvar position = new Vector3();\n\t\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\t\tray.closestPointToPoint( point, intersectPoint );\n\t\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tappplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction appplyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.1.2)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode ) return triangles;\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) return start;\n\t\tif ( ! end ) end = start;\n\n\t\tvar p = start, again;\n\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) break;\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) return;\n\n\t\t// interlink polygon nodes in z-order\n\n\t\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\t\tvar stop = ear, prev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertice leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\t// first look for points inside the triangle in increasing z-order\n\n\t\tvar p = ear.nextZ;\n\n\t\twhile ( p && p.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\t\tp = p.nextZ;\n\n\t\t}\n\n\t\t// then look for points in decreasing z-order\n\n\t\tp = ear.prevZ;\n\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\n\t\tdo {\n\n\t\t\tvar a = p.prev, b = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn p;\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\n\t\tvar a = start;\n\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [], i, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) list.steiner = true;\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) return p;\n\t\t\t\t\t\tif ( hy === p.next.y ) return p.next;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) return null;\n\n\t\tif ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m.next;\n\n\t\twhile ( p !== stop ) {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn m;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\n\t\tdo {\n\n\t\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) break;\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\t\telse list = e;\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start, leftmost = start;\n\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x ) leftmost = p;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\t\tlocallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n\t}\n\n\t// signed area of a triangle\n\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tif ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||\n\t\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;\n\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t\t\t area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\t\t\tintersects( p, p.next, a, b ) ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {\n\n\t\t\t\tinside = ! inside;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\t\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertice index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertice nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline is bevel\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar ahole, h, hl; // looping of holes\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar b, bs, t, z,\n\t\t\t\tvert, vlen = vertices.length,\n\t\t\t\tface, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [],\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbs = bevelSize;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tvar s;\n\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar j, k;\n\t\t\t\ti = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tvar s = 0,\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float> // how far from text outline is bevel\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = thetaStart + thetaLength;\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t\t// also check if holes are in the opposite direction\n\n\t\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 0.5;\n\t\tthis.metalness = 0.5;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearCoat = 0.0;\n\t\tthis.clearCoatRoughness = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearCoat = source.clearCoat;\n\t\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  gradientMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMeshPhongMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.gradientMap = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\t\t\treturn this;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FileLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = window.decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) data = window.atob( data );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( CompressedTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( DataTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction ImageLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( ImageLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( CubeTextureLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction TextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( TextureLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g$/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) t1 = 0;\n\t\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 40;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.matrix = new Matrix4();\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdate: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow( ) {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) return; // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) return; // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.textures = {};\n\n\t}\n\n\tObject.assign( MaterialLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\t\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\n\t\t\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\t\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n\t\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\t\treturn material;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( BufferGeometryLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader() {}\n\n\tLoader.Handlers = {\n\n\t\thandlers: [],\n\n\t\tadd: function ( regex, loader ) {\n\n\t\t\tthis.handlers.push( regex, loader );\n\n\t\t},\n\n\t\tget: function ( file ) {\n\n\t\t\tvar handlers = this.handlers;\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t};\n\n\tObject.assign( Loader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tonLoadStart: function () {},\n\n\t\tonLoadProgress: function () {},\n\n\t\tonLoadComplete: function () {},\n\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\t\tvar array = [];\n\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tcreateMaterial: ( function () {\n\n\t\t\tvar BlendingMode = {\n\t\t\t\tNoBlending: NoBlending,\n\t\t\t\tNormalBlending: NormalBlending,\n\t\t\t\tAdditiveBlending: AdditiveBlending,\n\t\t\t\tSubtractiveBlending: SubtractiveBlending,\n\t\t\t\tMultiplyBlending: MultiplyBlending,\n\t\t\t\tCustomBlending: CustomBlending\n\t\t\t};\n\n\t\t\tvar color = new Color();\n\t\t\tvar textureLoader = new TextureLoader();\n\t\t\tvar materialLoader = new MaterialLoader();\n\n\t\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t\t// convert from old material format\n\n\t\t\t\tvar textures = {};\n\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar uuid = _Math.generateUUID();\n\n\t\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\t\treturn uuid;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar json = {\n\t\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t\t};\n\n\t\t\t\tfor ( var name in m ) {\n\n\t\t\t\t\tvar value = m[ name ];\n\n\t\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\t\tjson.normalScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\t\treturn materialLoader.parse( json );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\t// Merges multi-byte utf-8 characters.\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) return './';\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction JSONLoader( manager ) {\n\n\t\tif ( typeof manager === 'boolean' ) {\n\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\tmanager = undefined;\n\n\t\t}\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.withCredentials = false;\n\n\t}\n\n\tObject.assign( JSONLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === 'string' ) ? this.texturePath : LoaderUtils.extractUrlBase( url );\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\t\tvar type = metadata.type;\n\n\t\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: ( function () {\n\n\t\t\tfunction parseModel( json, geometry ) {\n\n\t\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t\t}\n\n\t\t\t\tvar i, j, fi,\n\n\t\t\t\t\toffset, zLength,\n\n\t\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\t\ttype,\n\t\t\t\t\tisQuad,\n\t\t\t\t\thasMaterial,\n\t\t\t\t\thasFaceVertexUv,\n\t\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\t\tfaces = json.faces,\n\t\t\t\t\tvertices = json.vertices,\n\t\t\t\t\tnormals = json.normals,\n\t\t\t\t\tcolors = json.colors,\n\n\t\t\t\t\tscale = json.scale,\n\n\t\t\t\t\tnUvLayers = 0;\n\n\n\t\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t\t// disregard empty arrays\n\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = vertices.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\tvertex = new Vector3();\n\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = faces.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\ttype = faces[ offset ++ ];\n\n\t\t\t\t\tisQuad = isBitSet( type, 0 );\n\t\t\t\t\thasMaterial = isBitSet( type, 1 );\n\t\t\t\t\thasFaceVertexUv = isBitSet( type, 3 );\n\t\t\t\t\thasFaceNormal = isBitSet( type, 4 );\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\thasFaceColor = isBitSet( type, 6 );\n\t\t\t\t\thasFaceVertexColor = isBitSet( type, 7 );\n\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface = new Face3();\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseSkin( json, geometry ) {\n\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar x = json.skinWeights[ i ];\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar a = json.skinIndices[ i ];\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.bones = json.bones;\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseMorphing( json, geometry ) {\n\n\t\t\t\tvar scale = json.scale;\n\n\t\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseAnimations( json, geometry ) {\n\n\t\t\t\tvar outputAnimations = [];\n\n\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\tvar animations = [];\n\n\t\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\t\tanimations.push( json.animation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t\t}\n\n\t\t\t\t// parse implicit morph animations\n\t\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t\t}\n\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t\t}\n\n\t\t\treturn function parse( json, texturePath ) {\n\n\t\t\t\tif ( json.data !== undefined ) {\n\n\t\t\t\t\t// Geometry 4.0 spec\n\t\t\t\t\tjson = json.data;\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.scale !== undefined ) {\n\n\t\t\t\t\tjson.scale = 1.0 / json.scale;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tjson.scale = 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = new Geometry();\n\n\t\t\t\tparseModel( json, geometry );\n\t\t\t\tparseSkin( json, geometry );\n\t\t\t\tparseMorphing( json, geometry );\n\t\t\t\tparseAnimations( json, geometry );\n\n\t\t\t\tgeometry.computeFaceNormals();\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\t\treturn { geometry: geometry };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.texturePath = '';\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.texturePath === '' ) {\n\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t\t}\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url + '. Use THREE.JSONLoader instead.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar geometryLoader = new JSONLoader();\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.texturePath ).geometry;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tarray.push( loader.parse( data.materials[ j ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) clip.uuid = data.uuid;\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.texturePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\tthis.options = undefined;\n\n\t}\n\n\tImageBitmapLoader.prototype = {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) onError( e );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t} );\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( /* value */ ) {\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) return [];\n\n\t\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) size = 100;\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) return;\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FontLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( context === undefined ) {\n\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( AudioLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: ( function () {\n\n\t\t\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\n\n\t\t\tvar eyeRight = new Matrix4();\n\t\t\tvar eyeLeft = new Matrix4();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\n\n\t\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t\tinstance = this;\n\t\t\t\t\tfocus = camera.focus;\n\t\t\t\t\tfov = camera.fov;\n\t\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\t\tnear = camera.near;\n\t\t\t\t\tfar = camera.far;\n\t\t\t\t\tzoom = camera.zoom;\n\n\t\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\t\teyeSep = this.eyeSep / 2;\n\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t\t// translate xOffset\n\n\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t\t// for left eye\n\n\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t\t// for right eye\n\n\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CubeCamera( near, far, cubeResolution ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar fov = 90, aspect = 1;\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderTarget.activeCubeFace = 0;\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 1;\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 2;\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 3;\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 4;\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderTarget.activeCubeFace = 5;\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar renderTarget = this.renderTarget;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTarget.activeCubeFace = i;\n\t\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\t\t\tvar scale = new Vector3();\n\n\t\t\tvar orientation = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tvar listener = this.context.listener;\n\t\t\t\tvar up = this.up;\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t\tlistener.positionX.setValueAtTime( position.x, this.context.currentTime );\n\t\t\t\t\tlistener.positionY.setValueAtTime( position.y, this.context.currentTime );\n\t\t\t\t\tlistener.positionZ.setValueAtTime( position.z, this.context.currentTime );\n\t\t\t\t\tlistener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );\n\t\t\t\t\tlistener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );\n\t\t\t\t\tlistener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );\n\t\t\t\t\tlistener.upX.setValueAtTime( up.x, this.context.currentTime );\n\t\t\t\t\tlistener.upY.setValueAtTime( up.y, this.context.currentTime );\n\t\t\t\t\tlistener.upZ.setValueAtTime( up.z, this.context.currentTime );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.loop = false;\n\t\tthis.startTime = 0;\n\t\tthis.offset = 0;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) this.play();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function () {\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar source = this.context.createBufferSource();\n\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.playbackRate.setValueAtTime( this.playbackRate, this.startTime );\n\t\t\tthis.startTime = this.context.currentTime;\n\t\t\tsource.start( this.startTime, this.offset );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.offset = 0;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) value = [];\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\t\t\tvar scale = new Vector3();\n\n\t\t\tvar orientation = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tvar panner = this.panner;\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\t\torientation.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t\t\tpanner.setPosition( position.x, position.y, position.z );\n\t\t\t\tpanner.setOrientation( orientation.x, orientation.y, orientation.z );\n\n\t\t\t};\n\n\t\t} )()\n\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param  {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: ( function () {\n\n\t\t\tvar reservedRe = new RegExp( '[' + RESERVED_CHARS_RE + ']', 'g' );\n\n\t\t\treturn function sanitizeNodeName( name ) {\n\n\t\t\t\treturn name.replace( /\\s/g, '_' ).replace( reservedRe, '' );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tparseTrackName: function () {\n\n\t\t\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t\t\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t\t\t// instead, we exclude reserved characters and match everything else.\n\t\t\tvar wordChar = '[^' + RESERVED_CHARS_RE + ']';\n\t\t\tvar wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t\t\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t\t\t// be matched to parse the rest of the track name.\n\t\t\tvar directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', wordChar );\n\n\t\t\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\t\t\tvar nodeRe = /(WCOD+)?/.source.replace( 'WCOD', wordCharOrDot );\n\n\t\t\t// Object on target node, and accessor. May not contain reserved\n\t\t\t// characters. Accessor may contain any character except closing bracket.\n\t\t\tvar objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', wordChar );\n\n\t\t\t// Property and accessor. May not contain reserved characters. Accessor may\n\t\t\t// contain any non-bracket characters.\n\t\t\tvar propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', wordChar );\n\n\t\t\tvar trackRe = new RegExp( ''\n\t\t\t\t+ '^'\n\t\t\t\t+ directoryRe\n\t\t\t\t+ nodeRe\n\t\t\t\t+ objectRe\n\t\t\t\t+ propertyRe\n\t\t\t\t+ '$'\n\t\t\t);\n\n\t\t\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\t\t\treturn function parseTrackName( trackName ) {\n\n\t\t\t\tvar matches = trackRe.exec( trackName );\n\n\t\t\t\tif ( ! matches ) {\n\n\t\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t\t}\n\n\t\t\t\tvar results = {\n\t\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t\t};\n\n\t\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t\t// include '.' characters).\n\t\t\t\t\tif ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t\t}\n\n\t\t\t\treturn results;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t * \t-\tInstead pass this object as 'root'.\n\t *\n\t * \t-\tYou can also add and remove objects later when the mixer\n\t * \t\tis running.\n\t *\n\t * Note:\n\t *\n\t *  \tObjects of this class appear as one object to the mixer,\n\t *  \tso cache control of the individual objects must be done\n\t *  \ton the group.\n\t *\n\t * Limitation:\n\t *\n\t * \t- \tThe animated properties must be compatible among the\n\t * \t\tall objects in the group.\n\t *\n\t *  -\tA single property can either be controlled through a\n\t *  \ttarget group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = [];\t\t\t\t\t// inside: string\n\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length,\n\t\t\t\tknownObject = undefined;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\t\tthis.paused = false;\t\t\t\t// true -> zero effective time scale\n\t\tthis.enabled = true;\t\t\t\t// false -> zero effective weight\n\n\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0;\t\t\t// restart clip\n\t\t\tthis._loopCount = - 1;\t// forget previous loops\n\t\t\tthis._startTime = null;\t// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else break handle_stop;\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\tthis.time = time;\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.time = time;\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tremove_empty_map: {\n\n\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) return null;\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n\t\tBufferAttribute.call( this, array, itemSize );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axiz.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function () {\n\n\t\t\tvar startP = new Vector3();\n\t\t\tvar startEnd = new Vector3();\n\n\t\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\t\tstartP.subVectors( point, this.start );\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\t\tif ( clampToLine ) {\n\n\t\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t\t}\n\n\t\t\t\treturn t;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length * 3;\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n\tVertexNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\t\tvar faces = objGeometry.faces;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar vector2 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tthis.light.updateMatrixWorld();\n\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\tvar boneMatrix = new Matrix4();\n\t\tvar matrixWorldInv = new Matrix4();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tvar bones = this.bones;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tmatrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\t\tvar bone = bones[ i ];\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\t\tposition.setXYZ( j, vector.x, vector.y, vector.z );\n\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\t\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\n\n\t\t\t\t\tj += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction RectAreaLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );\n\n\t\tthis.line = new Line( geometry, material );\n\t\tthis.add( this.line );\n\n\n\t\tthis.update();\n\n\t}\n\n\tRectAreaLightHelper.prototype = Object.create( Object3D.prototype );\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\n\tRectAreaLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tRectAreaLightHelper.prototype.update = function () {\n\n\t\t// calculate new dimensions of the helper\n\n\t\tvar hx = this.light.width * 0.5;\n\t\tvar hy = this.light.height * 0.5;\n\n\t\tvar position = this.line.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\t// update vertices\n\n\t\tarray[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;\n\t\tarray[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;\n\t\tarray[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;\n\t\tarray[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;\n\t\tarray[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;\n\n\t\tposition.needsUpdate = true;\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.line.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.line.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = VertexColors;\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\tvar color1 = new Color();\n\t\tvar color2 = new Color();\n\n\t\treturn function update() {\n\n\t\t\tvar mesh = this.children[ 0 ];\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t\tcolor1.copy( this.light.color );\n\t\t\t\tcolor2.copy( this.light.groundColor );\n\n\t\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\t\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\n\n\t\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.create( LineSegments.prototype );\n\tGridHelper.prototype.constructor = GridHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t\t// FaceNormalsHelper only supports THREE.Geometry\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.update();\n\n\t}\n\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n\tFaceNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t\t.divideScalar( 3 )\n\t\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar v3 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t\tv3.subVectors( v2, v1 );\n\n\t\t\tthis.lightPlane.lookAt( v3 );\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt( v3 );\n\t\t\tthis.targetLine.scale.z = v3.length();\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry, pointMap;\n\n\t\tvar vector = new Vector3();\n\t\tvar camera = new Camera();\n\n\t\tfunction setPoint( point, x, y, z ) {\n\n\t\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\t\tvar points = pointMap[ point ];\n\n\t\t\tif ( points !== undefined ) {\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\t\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function update() {\n\n\t\t\tgeometry = this.geometry;\n\t\t\tpointMap = this.pointMap;\n\n\t\t\tvar w = 1, h = 1;\n\n\t\t\t// we need just camera projection matrix\n\t\t\t// world matrix must be identity\n\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t\t// center / target\n\n\t\t\tsetPoint( 'c', 0, 0, - 1 );\n\t\t\tsetPoint( 't', 0, 0, 1 );\n\n\t\t\t// near\n\n\t\t\tsetPoint( 'n1', - w, - h, - 1 );\n\t\t\tsetPoint( 'n2', w, - h, - 1 );\n\t\t\tsetPoint( 'n3', - w, h, - 1 );\n\t\t\tsetPoint( 'n4', w, h, - 1 );\n\n\t\t\t// far\n\n\t\t\tsetPoint( 'f1', - w, - h, 1 );\n\t\t\tsetPoint( 'f2', w, - h, 1 );\n\t\t\tsetPoint( 'f3', - w, h, 1 );\n\t\t\tsetPoint( 'f4', w, h, 1 );\n\n\t\t\t// up\n\n\t\t\tsetPoint( 'u1', w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( 'u2', - w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( 'u3', 0, h * 2, - 1 );\n\n\t\t\t// cross\n\n\t\t\tsetPoint( 'cf1', - w, 0, 1 );\n\t\t\tsetPoint( 'cf2', w, 0, 1 );\n\t\t\tsetPoint( 'cf3', 0, - h, 1 );\n\t\t\tsetPoint( 'cf4', 0, h, 1 );\n\n\t\t\tsetPoint( 'cn1', - w, 0, - 1 );\n\t\t\tsetPoint( 'cn2', w, 0, - 1 );\n\t\t\tsetPoint( 'cn3', 0, - h, - 1 );\n\t\t\tsetPoint( 'cn4', 0, h, - 1 );\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = ( function () {\n\n\t\tvar box = new Box3();\n\n\t\treturn function update( object ) {\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t\t}\n\n\t\t\tif ( this.object !== undefined ) {\n\n\t\t\t\tbox.setFromObject( this.object );\n\n\t\t\t}\n\n\t\t\tif ( box.isEmpty() ) return;\n\n\t\t\tvar min = box.min;\n\t\t\tvar max = box.max;\n\n\t\t\t/*\n\t\t\t  5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\n\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\n\t\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\tthis.geometry.computeBoundingSphere();\n\n\t\t};\n\n\t} )();\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, hex ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar lineGeometry, coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tif ( lineGeometry === undefined ) {\n\n\t\t\tlineGeometry = new BufferGeometry();\n\t\t\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = ( function () {\n\n\t\tvar axis = new Vector3();\n\t\tvar radians;\n\n\t\treturn function setDirection( dir ) {\n\n\t\t\t// dir is assumed to be normalized\n\n\t\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\t\tradians = Math.acos( dir.y );\n\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.copy( color );\n\t\tthis.cone.material.color.copy( color );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\n\tvar LinePieces = 1;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) materials = [];\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( _Math, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn _Math.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn _Math.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function getPosition() {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t\t};\n\n\t\t}(),\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebVRManager.prototype, {\n\n\t\tstanding: {\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tAudio.prototype.load = function ( file ) {\n\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\tvar scope = this;\n\t\tvar audioLoader = new AudioLoader();\n\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\tscope.setBuffer( buffer );\n\n\t\t} );\n\t\treturn this;\n\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction Projector() {\n\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\t\tthis.projectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\n\t\t};\n\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\n\t\t};\n\n\t\tthis.pickingRay = function () {\n\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t\t};\n\n\t}\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\t\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tthis.clear = function () {};\n\t\tthis.render = function () {};\n\t\tthis.setClearColor = function () {};\n\t\tthis.setSize = function () {};\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\n\n\t}\n\n\tvar exports = {};\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.ShaderLib = ShaderLib;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.FogExp2 = FogExp2;\n\texports.Fog = Fog;\n\texports.Scene = Scene;\n\texports.Sprite = Sprite;\n\texports.LOD = LOD;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.Skeleton = Skeleton;\n\texports.Bone = Bone;\n\texports.Mesh = Mesh;\n\texports.LineSegments = LineSegments;\n\texports.LineLoop = LineLoop;\n\texports.Line = Line;\n\texports.Points = Points;\n\texports.Group = Group;\n\texports.VideoTexture = VideoTexture;\n\texports.DataTexture = DataTexture;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CubeTexture = CubeTexture;\n\texports.CanvasTexture = CanvasTexture;\n\texports.DepthTexture = DepthTexture;\n\texports.Texture = Texture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.TextureLoader = TextureLoader;\n\texports.ObjectLoader = ObjectLoader;\n\texports.MaterialLoader = MaterialLoader;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.LoadingManager = LoadingManager;\n\texports.JSONLoader = JSONLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.FontLoader = FontLoader;\n\texports.FileLoader = FileLoader;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.Cache = Cache;\n\texports.AudioLoader = AudioLoader;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.SpotLight = SpotLight;\n\texports.PointLight = PointLight;\n\texports.RectAreaLight = RectAreaLight;\n\texports.HemisphereLight = HemisphereLight;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DirectionalLight = DirectionalLight;\n\texports.AmbientLight = AmbientLight;\n\texports.LightShadow = LightShadow;\n\texports.Light = Light;\n\texports.StereoCamera = StereoCamera;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.CubeCamera = CubeCamera;\n\texports.ArrayCamera = ArrayCamera;\n\texports.Camera = Camera;\n\texports.AudioListener = AudioListener;\n\texports.PositionalAudio = PositionalAudio;\n\texports.AudioContext = AudioContext;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.Audio = Audio;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.PropertyMixer = PropertyMixer;\n\texports.PropertyBinding = PropertyBinding;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.AnimationUtils = AnimationUtils;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationClip = AnimationClip;\n\texports.Uniform = Uniform;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.BufferGeometry = BufferGeometry;\n\texports.Geometry = Geometry;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.Face3 = Face3;\n\texports.Object3D = Object3D;\n\texports.Raycaster = Raycaster;\n\texports.Layers = Layers;\n\texports.EventDispatcher = EventDispatcher;\n\texports.Clock = Clock;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.Interpolant = Interpolant;\n\texports.Triangle = Triangle;\n\texports.Math = _Math;\n\texports.Spherical = Spherical;\n\texports.Cylindrical = Cylindrical;\n\texports.Plane = Plane;\n\texports.Frustum = Frustum;\n\texports.Sphere = Sphere;\n\texports.Ray = Ray;\n\texports.Matrix4 = Matrix4;\n\texports.Matrix3 = Matrix3;\n\texports.Box3 = Box3;\n\texports.Box2 = Box2;\n\texports.Line3 = Line3;\n\texports.Euler = Euler;\n\texports.Vector4 = Vector4;\n\texports.Vector3 = Vector3;\n\texports.Vector2 = Vector2;\n\texports.Quaternion = Quaternion;\n\texports.Color = Color;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.VertexNormalsHelper = VertexNormalsHelper;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.PointLightHelper = PointLightHelper;\n\texports.RectAreaLightHelper = RectAreaLightHelper;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.GridHelper = GridHelper;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.FaceNormalsHelper = FaceNormalsHelper;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.CameraHelper = CameraHelper;\n\texports.BoxHelper = BoxHelper;\n\texports.Box3Helper = Box3Helper;\n\texports.PlaneHelper = PlaneHelper;\n\texports.ArrowHelper = ArrowHelper;\n\texports.AxesHelper = AxesHelper;\n\texports.Shape = Shape;\n\texports.Path = Path;\n\texports.ShapePath = ShapePath;\n\texports.Font = Font;\n\texports.CurvePath = CurvePath;\n\texports.Curve = Curve;\n\texports.ImageUtils = ImageUtils;\n\texports.ShapeUtils = ShapeUtils;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.PointsMaterial = PointsMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.Material = Material;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.BufferAttribute = BufferAttribute;\n\texports.ArcCurve = ArcCurve;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.EllipseCurve = EllipseCurve;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.SplineCurve = SplineCurve;\n\texports.REVISION = REVISION;\n\texports.MOUSE = MOUSE;\n\texports.CullFaceNone = CullFaceNone;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.FrontSide = FrontSide;\n\texports.BackSide = BackSide;\n\texports.DoubleSide = DoubleSide;\n\texports.FlatShading = FlatShading;\n\texports.SmoothShading = SmoothShading;\n\texports.NoColors = NoColors;\n\texports.FaceColors = FaceColors;\n\texports.VertexColors = VertexColors;\n\texports.NoBlending = NoBlending;\n\texports.NormalBlending = NormalBlending;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.CustomBlending = CustomBlending;\n\texports.AddEquation = AddEquation;\n\texports.SubtractEquation = SubtractEquation;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.MinEquation = MinEquation;\n\texports.MaxEquation = MaxEquation;\n\texports.ZeroFactor = ZeroFactor;\n\texports.OneFactor = OneFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.NeverDepth = NeverDepth;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.EqualDepth = EqualDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterDepth = GreaterDepth;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.MixOperation = MixOperation;\n\texports.AddOperation = AddOperation;\n\texports.NoToneMapping = NoToneMapping;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.UVMapping = UVMapping;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.ByteType = ByteType;\n\texports.ShortType = ShortType;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.IntType = IntType;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.FloatType = FloatType;\n\texports.HalfFloatType = HalfFloatType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.AlphaFormat = AlphaFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBAFormat = RGBAFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.RGBEFormat = RGBEFormat;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LoopPingPong = LoopPingPong;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.LinearEncoding = LinearEncoding;\n\texports.sRGBEncoding = sRGBEncoding;\n\texports.GammaEncoding = GammaEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.CubeGeometry = BoxGeometry;\n\texports.Face4 = Face4;\n\texports.LineStrip = LineStrip;\n\texports.LinePieces = LinePieces;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MultiMaterial = MultiMaterial;\n\texports.PointCloud = PointCloud;\n\texports.Particle = Particle;\n\texports.ParticleSystem = ParticleSystem;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Vertex = Vertex;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.Spline = Spline;\n\texports.AxisHelper = AxisHelper;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.EdgesHelper = EdgesHelper;\n\texports.WireframeHelper = WireframeHelper;\n\texports.XHRLoader = XHRLoader;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.GeometryUtils = GeometryUtils;\n\texports.Projector = Projector;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.SceneUtils = SceneUtils;\n\texports.LensFlare = LensFlare;\n\n\treturn exports;\t\n\n});\n\ndefine('skylark-utils-webgl/main',[\r\n    \"skylark-langx/langx\",\r\n    \"./webgl\",\r\n    \"./primitives/three\"\r\n], function(langx,webgl,threejs) {\r\n    langx.mixin(webgl,threejs);\r\n\r\n    return webgl;\r\n});\r\n\ndefine('skylark-utils-webgl', ['skylark-utils-webgl/main'], function (main) { return main; });\n\n"]}