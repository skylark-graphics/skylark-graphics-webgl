{"version":3,"sources":["skylark-utils-webgl-all.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","createAssigner","keysFunc","defaults","obj","arguments","Object","index","source","keys","l","key","advise","dispatcher","type","advice","receiveArguments","signal","previous","around","advised","this","remove","target","next","nextId","aspect","methodName","existing","executionId","before","results","after","newResults","undefined","call","allKeys","isObject","createEvent","props","e","CustomEvent","safeMixin","debounce","fn","wait","timeout","later","clearTimeout","setTimeout","values","_","Array","clone","src","checkCloneMethod","copy","isArray","isPlainObject","compact","array","filter","item","dasherize","str","replace","toLowerCase","deserializeValue","value","test","JSON","parse","each","callback","undef","flatten","isArrayLike","result","j","funcArg","context","arg","idx","payload","isFunction","getQueryParams","url","location","href","segs","params","queryParam","nv","grep","out","has","path","inArray","indexOf","inherit","ctor","f","prototype","object","constructor","isString","isHtmlNode","isBoolean","isDocument","nodeType","DOCUMENT_NODE","isEqual","a","b","eq","isWindow","getPrototypeOf","isDefined","Node","isInstanceOf","Number","String","Boolean","isNumber","isSameOrigin","origin","protocol","hostname","port","startsWith","isEmptyObject","name","isMatch","attrs","makeArray","offset","startWith","concat","slice","elements","defer","requestAnimationFrame","setTimeoutout","noop","proxy","proxyFn","unshift","TypeError","toPixel","parseFloat","trim","removeItem","items","splice","_mixin","deep","safe","_parseMixinArgs","shift","sources","mixin","fallback","prop","substitute","template","transform","thisObject","getObject","match","retVal","getValue","_k","reverse","v","format","toString","uid","_uid","uniq","uniqueId","prefix","idCounter","langx","PGLISTENERS","Symbol","deepEq","SymbolProto","aStack","bStack","className","valueOf","areArrays","aCtor","bCtor","f1","extendClass","options","proto","_super","superclass","noOverrided","_constructor","superFn","tmp","overrided","ret","get","defineProperty","serialMixins","mixins","clss","cls","clsMixines","mergeMixins","newCtor","xtor","Function","create","__proto__","__mixin__","createClass","parent","innerParent","init","klassName","__mixins__","partial","delegate","TMP","getAbsoluteUrl","document","createElement","class2type","Deferred","self","p","promise","Promise","resolve","reject","_resolve","_reject","added","state","isResolved","isRejected","then","onResolved","onRejected","onProgress","progress","__ctx__","always","handler","done","fail","pipe","resolveWith","_resolved","listener","error","reason","rejectWith","_rejected","errback","progback","all","first","race","when","valueOrPromise","receivedPromise","err","d","data","immediate","Evented","on","events","selector","ctx","one","_hub","trigger","eventName","listeners","len","reCompact","listened","event","evtArr","_events","listenTo","listening","listeningTo","_listeningTo","listeningEvents","listeningEvent","listenToOnce","off","evts","liveEvents","unlistenTo","Stateful","attributes","cid","cidPrefix","collection","set","changed","validationError","idAttribute","toJSON","attr","val","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","_pending","clear","hasChanged","changedAttributes","diff","old","previousAttributes","isNew","isValid","validate","SimpleQueryEngine","query","arr","cache","buildFn","execute","sortSet","sort","aValue","attribute","bValue","descending","start","count","total","Infinity","queryObject","required","matches","QueryResults","addIterativeMethod","method","isPromise","async","parallel","rets","func","series","waterful","ArrayStore","queryEngine","idProperty","getIdentity","put","Math","random","overwrite","add","setData","identifier","Xhr","mimeToDataType","mime","htmlType","jsonType","scriptTypeRE","xmlTypeRE","appendQuery","serializeData","processData","param","traditional","toUpperCase","serialize","scope","t","hash","jsonpID","rscript","blankRE","XhrDefaultOptions","beforeSend","success","complete","global","accepts","script","json","xml","html","text","crossDomain","xhrFields","withCredentials","escape","_request","xhr","XMLHttpRequest","dataType","handleAs","mimeType","headers","isFormData","FormData","basicAuthorizationToken","user","password","deferred","contentType","overrideMimeType","finish","onloadend","onabort","onprogress","ontimeout","status","getResponseHeader","responseText","eval","responseXML","Blob","xhrObj","response","reponse","statusText","evt","open","hdr","setRequestHeader","send","abort","request","post","patch","del","defaultOptions","Restful","getBaseUrl","baseEndpoint","baseUrl","server","basePath","_head","_get","_post","verb","_put","_delete","_patch","retrieve","update","delete","camelCase","n","klass","lowerFirst","charAt","returnTrue","returnFalse","serializeValue","stringify","upperFirst","URL","webkitURL","webgl","EventDispatcher","Vector2","x","y","Matrix4","console","Quaternion","z","w","_x","_y","_z","_w","Vector3","Matrix3","Texture","image","mapping","wrapS","wrapT","magFilter","minFilter","anisotropy","encoding","textureId","uuid","_Math","generateUUID","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","ClampToEdgeWrapping","LinearFilter","LinearMipMapLinearFilter","RGBAFormat","UnsignedByteType","repeat","center","rotation","matrixAutoUpdate","matrix","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","LinearEncoding","version","onUpdate","Vector4","WebGLRenderTarget","width","height","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","DataTexture","NearestFilter","Box3","min","max","Sphere","radius","Plane","normal","constant","Frustum","p0","p1","p2","p3","p4","p5","planes","Color","r","g","setRGB","WebGLAnimation","onAnimationFrame","time","frame","isAnimating","animationLoop","stop","setAnimationLoop","setContext","WebGLAttributes","gl","createBuffer","bufferType","usage","dynamic","DYNAMIC_DRAW","STATIC_DRAW","buffer","bindBuffer","bufferData","onUploadCallback","FLOAT","Float32Array","Float64Array","warn","Uint16Array","UNSIGNED_SHORT","Int16Array","SHORT","Uint32Array","UNSIGNED_INT","Int32Array","INT","Int8Array","BYTE","Uint8Array","UNSIGNED_BYTE","bytesPerElement","BYTES_PER_ELEMENT","updateBuffer","updateRange","bufferSubData","subarray","isInterleavedBufferAttribute","buffers","deleteBuffer","WeakMap","Euler","order","_order","DefaultOrder","Layers","mask","Object3D","onRotationChange","quaternion","setFromEuler","onQuaternionChange","setFromQuaternion","object3DId","children","up","DefaultUp","position","scale","onChange","defineProperties","enumerable","modelViewMatrix","normalMatrix","matrixWorld","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","layers","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Camera","matrixWorldInverse","projectionMatrix","projectionMatrixInverse","OrthographicCamera","left","right","top","bottom","near","far","zoom","view","updateProjectionMatrix","Face3","c","color","materialIndex","isVector3","vertexNormals","isColor","vertexColors","Geometry","geometryId","vertices","colors","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","BufferAttribute","itemSize","normalized","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Uint16BufferAttribute","Int32BufferAttribute","Uint32BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","DirectGeometry","normals","uvs","uvs2","groups","arrayMax","BufferGeometry","bufferGeometryId","morphAttributes","drawRange","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","parameters","fromBufferGeometry","BoxBufferGeometry","mergeVertices","buildPlane","u","udir","vdir","gridX","gridY","ix","iy","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","vector","numberOfVertices","indices","addGroup","groupStart","floor","setIndex","addAttribute","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","Material","materialId","fog","lights","blending","NormalBlending","side","FrontSide","flatShading","NoColors","opacity","transparent","blendSrc","SrcAlphaFactor","blendDst","OneMinusSrcAlphaFactor","blendEquation","AddEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","LessEqualDepth","depthTest","depthWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","overdraw","needsUpdate","MeshBasicMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","combine","MultiplyOperation","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","setValues","ShaderMaterial","defines","uniforms","vertexShader","fragmentShader","linewidth","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","uv","uv2","index0AttributeName","uniformsNeedUpdate","Ray","direction","Triangle","Mesh","geometry","material","drawMode","TrianglesDrawMode","updateMorphTargets","WebGLBackground","renderer","objects","render","renderList","scene","camera","forceClear","background","setClear","clearColor","clearAlpha","autoClear","autoClearColor","autoClearDepth","autoClearStencil","isCubeTexture","boxMesh","ShaderLib","cube","BackSide","removeAttribute","onBeforeRender","copyPosition","tCube","isTexture","planeCamera","planeMesh","renderBufferDirect","alpha","getClearColor","setClearColor","getClearAlpha","setClearAlpha","WebGLBufferRenderer","info","capabilities","setMode","mode","drawArrays","renderInstances","extension","isWebGL2","maxInstancedCount","WebGLCapabilities","getMaxAnisotropy","maxAnisotropy","getParameter","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getMaxPrecision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","floatVertexTextures","WebGLClipping","resetGlobalState","uniform","globalState","numGlobalPlanes","numPlanes","numIntersection","projectPlanes","dstOffset","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","viewNormalMatrix","getNormalMatrix","i4","plane","applyMatrix4","toArray","localClippingEnabled","renderingShadows","enableLocalClipping","enabled","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","WebGLExtensions","getExtension","WebGLGeometries","onGeometryDispose","buffergeometry","geometries","removeEventListener","wireframeAttributes","memory","addEventListener","isBufferGeometry","isGeometry","_bufferGeometry","setFromObject","geometryAttributes","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","getWireframeAttribute","geometryIndex","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","instanceCount","calls","TRIANGLES","triangles","TRIANGLE_STRIP","TRIANGLE_FAN","LINES","lines","LINE_STRIP","LINE_LOOP","POINTS","points","reset","textures","programs","autoReset","absNumericalSort","abs","WebGLMorphtargets","program","objectInfluences","morphTargetInfluences","influences","influencesList","influence","morphInfluences","getUniforms","setValue","WebGLObjects","updateList","updateFromObject","dispose","CubeTexture","images","CubeReflectionMapping","UniformContainer","seq","nBlocks","blockSize","firstElem","arrayCacheF32","arraysEqual","copyArray","allocTexUnits","arrayCacheI32","allocTextureUnit","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2f","uniform2fv","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4f","uniform4fv","setValue2fm","uniformMatrix2fv","mat2array","setValue3fm","uniformMatrix3fv","mat3array","setValue4fm","uniformMatrix4fv","mat4array","setValueT1","unit","setTexture2D","emptyTexture","setValueT6","setTextureCube","emptyCubeTexture","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","getSingularSetter","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","size","updateCache","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","getPureArraySetter","SingleUniform","activeInfo","PureArrayUniform","StructuredUniform","addUniform","container","uniformObject","parseUniform","pathLength","RePathPart","lastIndex","exec","matchEnd","idIsIndex","subscript","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","addLineNumbers","string","WebGLShader","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getEncodingComponents","sRGBEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","GammaEncoding","getTexelDecodingFunction","functionName","components","getTexelEncodingFunction","getToneMappingFunction","toneMapping","toneMappingName","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","generateExtensions","rendererExtensions","chunks","envMapCubeUV","bumpMap","normalMap","objectSpaceNormalMap","filterEmptyLine","generateDefines","fetchAttributeLocations","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","parseIncludes","include","ShaderChunk","pattern","unrollLoops","end","snippet","unroll","parseInt","WebGLProgram","code","shadowMapTypeDefine","shadowMapType","PCFShadowMap","PCFSoftShadowMap","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","CubeRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","MixOperation","AddOperation","prefixVertex","prefixFragment","gammaFactorDefine","gammaFactor","customExtensions","customDefines","createProgram","isRawShaderMaterial","supportsVertexTextures","maxBones","useFog","fogExp","emissiveMap","displacementMap","roughnessMap","metalnessMap","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","sizeAttenuation","gradientMap","physicallyCorrectLights","NoToneMapping","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","isShaderMaterial","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","log","deleteShader","cachedUniforms","cachedAttributes","getAttributes","destroy","deleteProgram","programIdCount","usedTimes","WebGLPrograms","allocateBones","skeleton","bones","nVertexUniforms","nVertexMatrices","getTextureEncodingFromMap","gammaOverrideLinear","isWebGLRenderTarget","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","currentRenderTarget","getRenderTarget","gammaOutput","gammaInput","envMapMode","normalMapType","ObjectSpaceNormalMap","isFogExp2","maxMorphTargets","maxMorphNormals","directional","point","spot","rectArea","hemi","shadowMap","DoubleSide","getProgramCode","onBeforeCompile","acquireProgram","pl","programInfo","releaseProgram","WebGLProperties","properties","painterSortStable","reversePainterSortStable","WebGLRenderList","renderItemsIndex","opaque","group","renderItem","renderItems","WebGLRenderLists","list","lists","UniformsCache","light","shadow","shadowBias","shadowRadius","shadowMapSize","distance","coneCos","penumbraCos","decay","shadowCameraNear","shadowCameraFar","skyColor","groundColor","halfWidth","halfHeight","WebGLLights","setup","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","intensity","isAmbientLight","isDirectionalLight","multiplyScalar","setFromMatrixPosition","vector3","sub","transformDirection","bias","mapSize","directionalShadowMap","directionalShadowMatrix","isSpotLight","cos","angle","penumbra","spotShadowMap","spotShadowMatrix","isRectAreaLight","matrix42","identity","matrix4","premultiply","extractRotation","isPointLight","pointShadowMap","pointShadowMatrix","isHemisphereLight","normalize","ambient","stateID","shadowsLength","WebGLRenderState","lightsArray","shadowsArray","pushLight","pushShadow","shadowLight","setupLights","WebGLRenderStates","renderState","renderStates","BasicDepthPacking","displacementScale","displacementBias","referencePosition","nearDistance","farDistance","WebGLShadowMap","_renderer","_objects","getDepthMaterial","lightPositionWorld","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","useSkinning","variantIndex","_MorphingFlag","_SkinningFlag","keyA","keyB","materialsForVariant","_materialCache","cachedMaterial","isMeshDistanceMaterial","renderObject","shadowCamera","isMesh","isLine","isPoints","_frustum","intersectsObject","multiplyMatrices","k","kl","groupMaterial","depthMaterial","_lightPositionWorld","_projScreenMatrix","_shadowMapSize","_maxShadowMapSize","_lookTarget","_NumberOfMaterialVariants","0","1","2","cubeDirections","cubeUps","cube2DViewPorts","RGBADepthPacking","distanceMaterial","autoUpdate","_gl","_state","disable","BLEND","setTest","setScissorTest","faceCount","il","vpWidth","vpHeight","pars","isSpotLightShadow","shadowMatrix","makeTranslation","lookAt","updateMatrixWorld","multiply","setRenderTarget","face","vpDimensions","setFromMatrix","WebGLState","utils","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","equals","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","enable","DEPTH_TEST","depthMask","setFunc","NeverDepth","NEVER","AlwaysDepth","ALWAYS","LessDepth","LESS","LEQUAL","EqualDepth","EQUAL","GreaterEqualDepth","GEQUAL","GreaterDepth","GREATER","NotEqualDepth","NOTEQUAL","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","stencil","clearStencil","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","initAttributes","newAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enabledAttributes","enableVertexAttribArray","attributeDivisors","disableUnusedAttributes","disableVertexAttribArray","enabledCapabilities","getCompressedTextureFormats","compressedTextureFormats","formats","COMPRESSED_TEXTURE_FORMATS","useProgram","currentProgram","setBlending","NoBlending","currentBlendingEnabled","CustomBlending","currentBlendEquation","currentBlendEquationAlpha","blendEquationSeparate","convert","currentBlendSrc","currentBlendDst","currentBlendSrcAlpha","currentBlendDstAlpha","blendFuncSeparate","currentBlending","currentPremultipledAlpha","FUNC_ADD","ONE","ONE_MINUS_SRC_ALPHA","AdditiveBlending","blendFunc","SubtractiveBlending","ZERO","ONE_MINUS_SRC_COLOR","MultiplyBlending","SRC_COLOR","SRC_ALPHA","setMaterial","frontFaceCW","CULL_FACE","setFlipSided","colorBuffer","setPolygonOffset","currentFlipSided","frontFace","CW","CCW","setCullFace","cullFace","CullFaceNone","currentCullFace","CullFaceBack","BACK","CullFaceFront","FRONT","FRONT_AND_BACK","setLineWidth","currentLineWidth","lineWidthAvailable","lineWidth","factor","POLYGON_OFFSET_FILL","currentPolygonOffsetFactor","currentPolygonOffsetUnits","SCISSOR_TEST","activeTexture","webglSlot","TEXTURE0","currentTextureSlot","webglType","webglTexture","boundTexture","currentBoundTextures","emptyTextures","compressedTexImage2D","currentScissor","currentViewport","maxVertexAttributes","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glVersion","VERSION","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","WebGLTextures","clampToMaxSize","maxSize","canvas","createElementNS","getContext","drawImage","isPowerOfTwo","makePowerOfTwo","HTMLImageElement","HTMLCanvasElement","ImageBitmap","_canvas","floorPowerOfTwo","textureNeedsPowerOfTwo","textureNeedsGenerateMipmaps","generateMipmap","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","glFormat","glType","RGB","RGB32F","HALF_FLOAT","RGB16F","RGB8","RGBA32F","RGBA16F","RGBA8","filterFallback","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LINEAR","onTextureDispose","deallocateTexture","isVideoTexture","_videoTextures","onRenderTargetDispose","renderTarget","deallocateRenderTarget","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","isWebGLRenderTargetCube","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","slot","updateVideoTexture","__version","uploadTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","isCompressed","isCompressedTexture","isDataTexture","cubeImage","isPowerOfTwoImage","glInternalFormat","setTextureParameters","mipmap","jl","RGBFormat","setTextureCubeDynamic","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","CLAMP_TO_EDGE","FloatType","HalfFloatType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DepthFormat","UnsignedShortType","UnsignedIntType","DepthStencilFormat","DEPTH_STENCIL","UnsignedInt248Type","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthTexture","isCube","webglDepthTexture","setupDepthRenderbuffer","createRenderbuffer","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","WebGLUtils","RepeatWrapping","REPEAT","MirroredRepeatWrapping","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LinearMipMapNearestFilter","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UnsignedShort4444Type","UNSIGNED_SHORT_4_4_4_4","UnsignedShort5551Type","UNSIGNED_SHORT_5_5_5_1","UnsignedShort565Type","UNSIGNED_SHORT_5_6_5","ByteType","ShortType","IntType","HALF_FLOAT_OES","AlphaFormat","ALPHA","LuminanceFormat","LUMINANCE","LuminanceAlphaFormat","LUMINANCE_ALPHA","SubtractEquation","FUNC_SUBTRACT","ReverseSubtractEquation","FUNC_REVERSE_SUBTRACT","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","DstAlphaFactor","DST_ALPHA","OneMinusDstAlphaFactor","ONE_MINUS_DST_ALPHA","DstColorFactor","DST_COLOR","OneMinusDstColorFactor","ONE_MINUS_DST_COLOR","SrcAlphaSaturateFactor","SRC_ALPHA_SATURATE","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","RGB_ETC1_Format","COMPRESSED_RGB_ETC1_WEBGL","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","MinEquation","MaxEquation","MIN","MAX","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","Group","PerspectiveCamera","fov","focus","filmGauge","filmOffset","ArrayCamera","cameras","WebVRManager","isPresenting","device","onVRDisplayPresentChange","eyeParameters","getEyeParameters","renderWidth","renderHeight","currentPixelRatio","getPixelRatio","currentSize","getSize","setDrawingBufferSize","animation","findGamepad","gamepads","navigator","getGamepads","gamepad","updateControllers","controllers","controller","pose","hasPosition","fromArray","orientation","compose","standingMatrix","decompose","buttonId","triggers","buttons","pressed","dispatchEvent","frameData","poseTarget","standingMatrixInverse","VRFrameData","tempQuaternion","tempPosition","cameraL","bounds","cameraR","cameraVR","userHeight","getController","getDevice","setDevice","setPoseTarget","getCamera","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","poseObject","setFromRotationMatrix","applyQuaternion","leftViewMatrix","rightViewMatrix","getInverse","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","getStandingMatrix","submitFrame","WebXRManager","session","frameOfRef","onSessionEvent","inputSources","inputSource","onSessionEnd","setFramebuffer","updateCamera","getDevicePose","baseLayer","views","getViewport","getViewMatrix","inputPose","getInputPose","targetRay","transformMatrix","pointerMatrix","onAnimationFrameCallback","XRDevice","setCompatibleXRDevice","setSession","XRWebGLLayer","requestFrameOfReference","frameOfReferenceType","getInputSources","THREE","WebGLRenderer","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","initGLContext","_currentScissor","_scissor","_currentViewport","_viewport","morphtargets","programCache","_this","renderLists","_premultipliedAlpha","bufferRenderer","indexedBufferRenderer","onContextLost","preventDefault","_isContextLost","onContextRestore","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReference","renderObjectImmediate","renderBufferImmediate","setupVertexAttributes","isInstancedBufferGeometry","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","vertexAttribPointer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","vr","projectObject","sortObjects","isLight","currentRenderState","isSprite","intersectsSprite","_vector3","currentRenderList","isImmediateRenderObject","renderObjects","overrideMaterial","isArrayCamera","_currentArrayCamera","camera2","_width","_height","setProgram","_currentGeometryProgram","onAfterRender","initMaterial","materialProperties","lightsHash","lightsStateHash","_clipping","programChange","UniformsUtils","numSupportedMorphTargets","numSupportedMorphNormals","ambientLightColor","directionalLights","spotLights","rectAreaLights","pointLights","hemisphereLights","progUniforms","uniformsList","seqWithValue","_usedTextureUnits","_clippingEnabled","_localClippingEnabled","_currentCamera","useCache","_currentMaterialId","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","LN2","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","setOptional","boneTexture","sqrt","ceilPowerOfTwo","boneMatrices","boneTextureSize","toneMappingExposure","toneMappingWhitePoint","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshDepthMaterial","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","ltc_1","UniformsLib","LTC_1","ltc_2","LTC_2","upload","diffuse","emissive","emissiveIntensity","flipEnvMap","maxMipLevel","uvScaleMap","updateMatrix","uvTransform","dashSize","totalSize","gapSize","fogColor","isFog","fogNear","fogFar","fogDensity","density","specular","shininess","bumpScale","normalScale","negate","roughness","metalness","envMapIntensity","clearCoat","clearCoatRoughness","textureUnit","REVISION","_context","_alpha","_depth","_stencil","_antialias","antialias","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","domElement","_framebuffer","_currentFramebuffer","_currentScissorTest","_scissorTest","contextAttributes","rangeMin","rangeMax","message","getContextAttributes","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","setSize","updateStyle","style","setViewport","getDrawingBufferSize","pixelRatio","getCurrentViewport","setScissor","boolean","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","determinant","updateBuffers","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","TriangleStripDrawMode","TriangleFanDrawMode","isLineSegments","isLineLoop","compile","traverse","isCamera","opaqueObjects","transparentObjects","warned","setTexture","readRenderTargetPixels","restore","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","Scene","InterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","Sprite","float32Array","LOD","levels","Skeleton","boneInverses","calculateInverses","Bone","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","initBones","bind","normalizeSkinWeights","linecap","linejoin","Line","LineSegments","LineLoop","Points","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","edge1","edge2","vertex","edge","edges","index1","index2","getX","fromBufferAttribute","ParametricGeometry","slices","stacks","ParametricBufferGeometry","EPS","pu","pv","sliceCount","subVectors","crossVectors","PolyhedronGeometry","detail","PolyhedronBufferGeometry","subdivide","getVertexByIndex","subdivideFace","cols","pow","aj","lerp","bj","rows","pushVertex","appplyRadius","vertexBuffer","generateUVs","azimuth","PI","inclination","uvBuffer","correctUVs","correctSeam","x0","x1","x2","centroid","uvA","uvB","uvC","divideScalar","azi","correctUV","atan2","computeVertexNormals","normalizeNormals","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","generateBufferData","generateSegment","generateIndices","P","getPointAt","N","frames","B","sin","computeFrenetFrames","TorusKnotGeometry","tube","q","heightScale","TorusKnotBufferGeometry","calculatePositionOnCurve","cu","su","quOverP","cs","P1","P2","T","addVectors","cx","cy","TorusGeometry","arc","TorusBufferGeometry","linkedList","dim","clockwise","last","signedArea","insertNode","removeNode","filterPoints","again","steiner","area","earcutLinked","ear","minX","minY","invSize","pass","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","zOrder","maxZ","nextZ","prevZ","intersects","locallyInside","isValidDiagonal","splitPolygon","eliminateHoles","holeIndices","outerNode","queue","getLeftmost","compareX","eliminateHole","hole","findHoleBridge","m","hx","hy","qx","tan","mx","my","tanMin","sortLinked","tail","numMerges","pSize","qSize","inSize","leftmost","ax","ay","bx","by","px","py","intersectsPolygon","middleInside","q1","q2","inside","a2","b2","an","bp","sum","removeDupEndPts","addContour","contour","ExtrudeGeometry","shapes","ExtrudeBufferGeometry","addShape","shape","scalePt2","pt","vec","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","EPSILON","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","sign","buildLidFaces","verticesArray","bevelEnabled","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","h","hl","holes","ahole","s","sl","slen1","slen2","f4","placeholder","addVertex","nextIndex","uvgen","generateTopUV","addUV","generateSideWallUV","vector2","curveSegments","bevelThickness","bevelSize","extrudePath","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","ShapeUtils","isClockWise","triangulateShape","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","TextGeometry","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","clamp","inverseSegments","phi","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","geometry2","thresholdDot","DEG2RAD","computeFaceNormals","sourceVertices","face1","face2","dot","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","generateTorso","slope","indexRow","theta","sinTheta","cosTheta","indexArray","generateCap","centerIndexStart","centerIndexEnd","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","RawShaderMaterial","STANDARD","TangentSpaceNormalMap","PHYSICAL","TOON","LoadingManager","onLoad","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","FileLoader","manager","DefaultLoadingManager","CompressedTextureLoader","_parser","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","t0","t1","c0","c1","c2","c3","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t3","CatmullRomCurve3","curveType","CatmullRom","v0","v1","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","QuadraticBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezier","CubicBezierCurve","v2","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","CurvePath","curves","autoClose","Path","currentPoint","setFromPoints","Shape","Light","HemisphereLight","LightShadow","SpotLightShadow","SpotLight","power","PointLight","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","times","interpolation","AnimationUtils","convertArray","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","tracks","resetDuration","getTrackTypeForValueTypeName","typeName","parseKeyframeTrack","trackType","flattenJSON","MaterialLoader","BufferGeometryLoader","Loader","JSONLoader","ObjectLoader","texturePath","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPaths","chars","from","resolution","line_height","yMax","yMin","underlineThickness","paths","offsetX","offsetY","char","createPath","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","FontLoader","AudioLoader","StereoCamera","eyeSep","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","AudioListener","AudioContext","gain","createGain","connect","destination","Audio","getInput","autoplay","loop","startTime","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","inUse","bindingsPerObject","AnimationAction","mixer","clip","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","endingStart","ZeroCurvatureEnding","endingEnd","interpolant","createInterpolant","settings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","LoopRepeat","_loopCount","_startTime","timeScale","_effectiveTimeScale","weight","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InstancedInterleavedBuffer","InstancedBufferAttribute","Raycaster","ray","threshold","PointCloud","ascSort","intersectObject","raycaster","recursive","raycast","Clock","autoStart","oldTime","elapsedTime","running","Spherical","Cylindrical","Box2","Line3","ImmediateRenderObject","VertexNormalsHelper","hex","nNormals","objGeometry","positions","SpotLightHelper","cone","getBoneList","boneList","isBone","SkeletonHelper","color1","color2","bone","VertexColors","PointLightHelper","sphereSize","RectAreaLightHelper","line","HemisphereLightHelper","rotateY","getAttribute","GridHelper","divisions","step","halfSize","PolarGridHelper","radials","circles","FaceNormalsHelper","DirectionalLightHelper","lightPlane","targetLine","CameraHelper","addLine","addPoint","pointMap","FaceColors","colorFrustum","colorCone","colorUp","colorTarget","colorCross","BoxHelper","Box3Helper","box","computeBoundingSphere","PlaneHelper","positions2","ArrowHelper","dir","headLength","headWidth","lineGeometry","coneGeometry","translate","setDirection","setLength","AxesHelper","Face4","MeshFaceMaterial","materials","MultiMaterial","isMultiMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","DynamicBufferAttribute","setDynamic","Int8Attribute","Uint8Attribute","Uint8ClampedAttribute","Int16Attribute","Uint16Attribute","Int32Attribute","Uint32Attribute","Float32Attribute","Float64Attribute","ClosedSplineCurve3","SplineCurve3","Spline","AxisHelper","BoundingBoxHelper","EdgesHelper","WireframeHelper","XHRLoader","BinaryTextureLoader","Projector","projectVector","project","unprojectVector","unproject","pickingRay","CanvasRenderer","LensFlare","isInteger","isFinite","assign","output","nextKey","_listeners","hasEventListener","listenerArray","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","FlatShading","SmoothShading","UVMapping","RGBEFormat","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","RAD2DEG","lut","d0","d1","d2","d3","euclideanModulo","mapLinear","a1","b1","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","ceil","isVector2","setScalar","scalar","setX","setY","setComponent","getComponent","addScalar","addScaledVector","subScalar","divide","applyMatrix3","clampScalar","minVal","maxVal","clampLength","round","roundToZero","cross","lengthSq","manhattanLength","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","lerpVectors","getY","rotateAround","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","te","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrixColumn","makeBasis","scaleX","scaleY","scaleZ","makeRotationFromEuler","euler","isEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","zero","eye","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","applyToBufferAttribute","getZ","setXYZ","transpose","setPosition","throwOnDegenerate","t11","t12","t13","t14","det","msg","detInv","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","axis","tx","ty","makeScale","makeShear","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","sx","sy","sz","invSX","invSY","invSZ","makePerspective","makeOrthographic","slerp","qa","qb","qm","slerpFlat","dst","src0","srcOffset0","src1","srcOffset1","y0","z0","w0","y1","z1","w1","sqrSin","tDir","onChangeCallback","s1","s2","s3","setFromAxisAngle","halfAngle","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","angleTo","acos","rotateTowards","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","setZ","multiplyVectors","applyEuler","applyAxisAngle","qy","qz","qw","iz","iw","az","bz","projectOnVector","projectOnPlane","planeNormal","reflect","dz","setFromSpherical","setFromSphericalCoords","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixScale","isMatrix3","setFromMatrix4","transposeIntoArray","setUvTransform","rotate","ImageUtils","getDataURL","ImageData","putImageData","toDataURL","meta","isRootObject","metadata","generator","wrap","transformUv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon","epsilon2","getW","isBox3","setFromArray","maxX","maxY","setFromBufferAttribute","makeEmpty","expandByPoint","setFromCenterAndSize","expandByObject","isEmpty","getCenter","expandByVector","expandByScalar","containsPoint","containsBox","intersectsBox","intersectsSphere","closestPoint","sphere","clampPoint","intersectsPlane","intersectsTriangle","satForAxes","axes","testAxis","extents","f0","f2","triangleNormal","triangle","distanceToPoint","clampedPoint","getBoundingSphere","intersect","union","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","delta","denominator","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","sprite","negRadius","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","envmap_physical_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","merge","merged","uniforms_src","uniforms_dst","parameter_src","ColorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","setHex","setStyle","setHSL","hue2rgb","handleAlpha","copyGammaToLinear","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","SRGBToLinear","copyLinearToSRGB","LinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","hsl","addColors","lerpHSL","hslA","hslB","specularmap","envmap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","basic","lambert","phong","standard","dashed","tFlip","equirect","tEquirect","distanceRGBA","physical","RotationOrders","asin","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","toggle","isObject3D","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","force","library","element","extractFromCache","uuids","isOrthographicCamera","setViewOffset","fullWidth","fullHeight","clearViewOffset","zoomW","zoomH","scaleW","scaleH","computeBoundingBox","addFace","tempNormals","tempUVs","tempUVs2","cb","ab","fl","vA","vB","vC","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","verticesMap","unique","precisionPoints","faceIndicesToRemove","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","getNormalIndex","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","isBufferAttribute","setArray","copyAt","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","getIndex","clearGroups","setDrawRange","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","array2","morphAttribute","isMaterial","newValue","currentValue","isRoot","srcPlanes","dstPlanes","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","vab","vac","vbc","vap","vbp","vcp","d4","vc","d5","d6","vb","va","setDrawMode","morphTargetDictionary","ml","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","inverseMatrix","tempA","tempB","tempC","faceIndex","fvA","fvB","fvC","faceMaterial","tl","targets","uvs_f","isGroup","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","isInterleavedBuffer","transformVertex","vertexPosition","mvPosition","alignedPosition","rotatedPosition","viewWorldMatrix","intersectPoint","worldScale","addLevel","getObjectForDistance","matrixPosition","offsetMatrix","identityMatrix","getBoneByName","gbone","pos","rotq","scl","sw","skinWeight","computeLineDistances","positionAttribute","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","testPoint","rayPointDistanceSq","localThresholdSq","distanceToRay","localThreshold","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","hasHoles","outerLen","pts","holeIndex","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","Geometries","freeze","Materials","Cache","files","file","loading","load","cached","dataUriRegex","dataUriRegexResult","isBase64","decodeURIComponent","atob","responseType","charCodeAt","parser","DOMParser","parseFromString","callbacks","header","requestHeader","setPath","setResponseType","setWithCredentials","setMimeType","loadTexture","loader","texDatas","loaded","mipmapCount","isCubemap","texData","crossOrigin","onImageLoad","onImageError","substr","setCrossOrigin","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","getLength","lengths","getLengths","cacheArcLengths","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","isCatmullRomCurve3","intPoint","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","tangent","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","aCPx","aCPy","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","arraySlice","to","isTypedArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","compareTime","sortedArray","nValues","srcOffset","jsonKeys","valuePropertyName","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","track","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","endTime","nKeys","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","jsonTracks","frameTime","fps","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","shading","typedArray","TYPED_ARRAYS","drawcalls","offsets","Handlers","handlers","regex","onLoadStart","onLoadProgress","onLoadComplete","initMaterials","createMaterial","BlendingMode","textureLoader","materialLoader","fullPath","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","extractUrlBase","lastIndexOf","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","morphAnimationClips","substring","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","details","geometryShapes","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","setOptions","res","blob","imageBitmap","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","webkitAudioContext","bufferCopy","decodeAudioData","audioBuffer","instance","eyeRight","eyeLeft","xmin","xmax","eyeSepOnProjection","ymax","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","setValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setBuffer","play","createBufferSource","onended","onEnded","pause","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","restoreOriginalState","RESERVED_CHARS_RE","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","reservedRe","RegExp","wordChar","wordCharOrDot","directoryRe","nodeRe","objectRe","propertyRe","trackRe","supportedObjectNames","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","_updateWeight","timeRunning","_updateTimeScale","clipTime","_updateTime","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","remove_empty_map","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","performance","Date","getElapsedTime","getDelta","newTime","other","makeSafe","setFromCartesianCoords","distanceSq","closestPointToPointParameter","startP","startEnd","clampToLine","startEnd2","startEnd_startP","objPos","objNorm","coneLength","coneWidth","boneMatrix","matrixWorldInv","setPoint","setColor","LineStrip","LinePieces","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","copyIndicesArray","addIndex","addDrawCall","clearDrawCalls","computeOffsets","getArrays","addShapeList","wrapAround","wrapRGB","metal","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","shadowMapCullFace","renderReverseSided","renderSingleSided","standing","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","attach","CubeGeometry","threejs","main"],"mappings":"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","file":"../skylark-utils-webgl-all.js","sourcesContent":["define('skylark-langx/skylark',[], function() {\r\n    var skylark = {\r\n\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx/langx',[\"./skylark\"], function(skylark) {\r\n    \"use strict\";\r\n    var toString = {}.toString,\r\n        concat = Array.prototype.concat,\r\n        indexOf = Array.prototype.indexOf,\r\n        slice = Array.prototype.slice,\r\n        filter = Array.prototype.filter,\r\n        hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n\r\n    var  PGLISTENERS = Symbol ? Symbol() : '__pglisteners';\r\n\r\n    // An internal function for creating assigner functions.\r\n    function createAssigner(keysFunc, defaults) {\r\n        return function(obj) {\r\n          var length = arguments.length;\r\n          if (defaults) obj = Object(obj);\r\n          if (length < 2 || obj == null) return obj;\r\n          for (var index = 1; index < length; index++) {\r\n            var source = arguments[index],\r\n                keys = keysFunc(source),\r\n                l = keys.length;\r\n            for (var i = 0; i < l; i++) {\r\n              var key = keys[i];\r\n              if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n            }\r\n          }\r\n          return obj;\r\n       };\r\n    }\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    var eq, deepEq;\r\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\r\n\r\n    eq = function(a, b, aStack, bStack) {\r\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n        if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n        // `null` or `undefined` only equal to itself (strict comparison).\r\n        if (a == null || b == null) return false;\r\n        // `NaN`s are equivalent, but non-reflexive.\r\n        if (a !== a) return b !== b;\r\n        // Exhaust primitive checks\r\n        var type = typeof a;\r\n        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n        return deepEq(a, b, aStack, bStack);\r\n    };\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    deepEq = function(a, b, aStack, bStack) {\r\n        // Unwrap any wrapped objects.\r\n        //if (a instanceof _) a = a._wrapped;\r\n        //if (b instanceof _) b = b._wrapped;\r\n        // Compare `[[Class]]` names.\r\n        var className = toString.call(a);\r\n        if (className !== toString.call(b)) return false;\r\n        switch (className) {\r\n            // Strings, numbers, regular expressions, dates, and booleans are compared by value.\r\n            case '[object RegExp]':\r\n            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n            case '[object String]':\r\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n                // equivalent to `new String(\"5\")`.\r\n                return '' + a === '' + b;\r\n            case '[object Number]':\r\n                // `NaN`s are equivalent, but non-reflexive.\r\n                // Object(NaN) is equivalent to NaN.\r\n                if (+a !== +a) return +b !== +b;\r\n                // An `egal` comparison is performed for other numeric values.\r\n                return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n            case '[object Date]':\r\n            case '[object Boolean]':\r\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n                // millisecond representations. Note that invalid dates with millisecond representations\r\n                // of `NaN` are not equivalent.\r\n                return +a === +b;\r\n            case '[object Symbol]':\r\n                return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n        }\r\n\r\n        var areArrays = className === '[object Array]';\r\n        if (!areArrays) {\r\n            if (typeof a != 'object' || typeof b != 'object') return false;\r\n            // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n            // from different frames are.\r\n            var aCtor = a.constructor, bCtor = b.constructor;\r\n            if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\r\n                               isFunction(bCtor) && bCtor instanceof bCtor)\r\n                          && ('constructor' in a && 'constructor' in b)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n        // Initializing stack of traversed objects.\r\n        // It's done here since we only need them for objects and arrays comparison.\r\n        aStack = aStack || [];\r\n        bStack = bStack || [];\r\n        var length = aStack.length;\r\n        while (length--) {\r\n            // Linear search. Performance is inversely proportional to the number of\r\n            // unique nested structures.\r\n            if (aStack[length] === a) return bStack[length] === b;\r\n        }\r\n\r\n        // Add the first object to the stack of traversed objects.\r\n        aStack.push(a);\r\n        bStack.push(b);\r\n\r\n        // Recursively compare objects and arrays.\r\n        if (areArrays) {\r\n            // Compare array lengths to determine if a deep comparison is necessary.\r\n            length = a.length;\r\n            if (length !== b.length) return false;\r\n            // Deep compare the contents, ignoring non-numeric properties.\r\n            while (length--) {\r\n                if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n            }\r\n        } else {\r\n            // Deep compare objects.\r\n            var keys = Object.keys(a), key;\r\n            length = keys.length;\r\n            // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n            if (Object.keys(b).length !== length) return false;\r\n            while (length--) {\r\n                // Deep compare each member\r\n                key = keys[length];\r\n                if (!(b[key]!==undefined && eq(a[key], b[key], aStack, bStack))) return false;\r\n            }\r\n        }\r\n        // Remove the first object from the stack of traversed objects.\r\n        aStack.pop();\r\n        bStack.pop();\r\n        return true;\r\n    };\r\n\r\n    var undefined, nextId = 0;\r\n    function advise(dispatcher, type, advice, receiveArguments){\r\n        var previous = dispatcher[type];\r\n        var around = type == \"around\";\r\n        var signal;\r\n        if(around){\r\n            var advised = advice(function(){\r\n                return previous.advice(this, arguments);\r\n            });\r\n            signal = {\r\n                remove: function(){\r\n                    if(advised){\r\n                        advised = dispatcher = advice = null;\r\n                    }\r\n                },\r\n                advice: function(target, args){\r\n                    return advised ?\r\n                        advised.apply(target, args) :  // called the advised function\r\n                        previous.advice(target, args); // cancelled, skip to next one\r\n                }\r\n            };\r\n        }else{\r\n            // create the remove handler\r\n            signal = {\r\n                remove: function(){\r\n                    if(signal.advice){\r\n                        var previous = signal.previous;\r\n                        var next = signal.next;\r\n                        if(!next && !previous){\r\n                            delete dispatcher[type];\r\n                        }else{\r\n                            if(previous){\r\n                                previous.next = next;\r\n                            }else{\r\n                                dispatcher[type] = next;\r\n                            }\r\n                            if(next){\r\n                                next.previous = previous;\r\n                            }\r\n                        }\r\n\r\n                        // remove the advice to signal that this signal has been removed\r\n                        dispatcher = advice = signal.advice = null;\r\n                    }\r\n                },\r\n                id: nextId++,\r\n                advice: advice,\r\n                receiveArguments: receiveArguments\r\n            };\r\n        }\r\n        if(previous && !around){\r\n            if(type == \"after\"){\r\n                // add the listener to the end of the list\r\n                // note that we had to change this loop a little bit to workaround a bizarre IE10 JIT bug\r\n                while(previous.next && (previous = previous.next)){}\r\n                previous.next = signal;\r\n                signal.previous = previous;\r\n            }else if(type == \"before\"){\r\n                // add to beginning\r\n                dispatcher[type] = signal;\r\n                signal.next = previous;\r\n                previous.previous = signal;\r\n            }\r\n        }else{\r\n            // around or first one just replaces\r\n            dispatcher[type] = signal;\r\n        }\r\n        return signal;\r\n    }\r\n    function aspect(type){\r\n        return function(target, methodName, advice, receiveArguments){\r\n            var existing = target[methodName], dispatcher;\r\n            if(!existing || existing.target != target){\r\n                // no dispatcher in place\r\n                target[methodName] = dispatcher = function(){\r\n                    var executionId = nextId;\r\n                    // before advice\r\n                    var args = arguments;\r\n                    var before = dispatcher.before;\r\n                    while(before){\r\n                        args = before.advice.apply(this, args) || args;\r\n                        before = before.next;\r\n                    }\r\n                    // around advice\r\n                    if(dispatcher.around){\r\n                        var results = dispatcher.around.advice(this, args);\r\n                    }\r\n                    // after advice\r\n                    var after = dispatcher.after;\r\n                    while(after && after.id < executionId){\r\n                        if(after.receiveArguments){\r\n                            var newResults = after.advice.apply(this, args);\r\n                            // change the return value only if a new value was returned\r\n                            results = newResults === undefined ? results : newResults;\r\n                        }else{\r\n                            results = after.advice.call(this, results, args);\r\n                        }\r\n                        after = after.next;\r\n                    }\r\n                    return results;\r\n                };\r\n                if(existing){\r\n                    dispatcher.around = {advice: function(target, args){\r\n                        return existing.apply(target, args);\r\n                    }};\r\n                }\r\n                dispatcher.target = target;\r\n            }\r\n            var results = advise((dispatcher || existing), type, advice, receiveArguments);\r\n            advice = null;\r\n            return results;\r\n        };\r\n    }\r\n\r\n    var f1 = function() {\r\n        function extendClass(ctor, props, options) {\r\n            // Copy the properties to the prototype of the class.\r\n            var proto = ctor.prototype,\r\n                _super = ctor.superclass.prototype,\r\n                noOverrided = options && options.noOverrided;\r\n\r\n            for (var name in props) {\r\n                if (name === \"constructor\") {\r\n                    continue;\r\n                }\r\n\r\n                // Check if we're overwriting an existing function\r\n                var prop = props[name];\r\n                if (typeof props[name] == \"function\") {\r\n                    proto[name] =  !prop._constructor && !noOverrided && typeof _super[name] == \"function\" ?\r\n                          (function(name, fn, superFn) {\r\n                            return function() {\r\n                                var tmp = this.overrided;\r\n\r\n                                // Add a new ._super() method that is the same method\r\n                                // but on the super-class\r\n                                this.overrided = superFn;\r\n\r\n                                // The method only need to be bound temporarily, so we\r\n                                // remove it when we're done executing\r\n                                var ret = fn.apply(this, arguments);\r\n\r\n                                this.overrided = tmp;\r\n\r\n                                return ret;\r\n                            };\r\n                        })(name, prop, _super[name]) :\r\n                        prop;\r\n                } else if (typeof prop == \"object\" && prop!==null && (prop.get || prop.value !== undefined)) {\r\n                    Object.defineProperty(proto,name,prop);\r\n                } else {\r\n                    proto[name] = prop;\r\n                }\r\n            }\r\n            return ctor;\r\n        }\r\n\r\n        function serialMixins(ctor,mixins) {\r\n            var result = [];\r\n\r\n            mixins.forEach(function(mixin){\r\n                if (has(mixin,\"__mixins__\")) {\r\n                     throw new Error(\"nested mixins\");\r\n                }\r\n                var clss = [];\r\n                while (mixin) {\r\n                    clss.unshift(mixin);\r\n                    mixin = mixin.superclass;\r\n                }\r\n                result = result.concat(clss);\r\n            });\r\n\r\n            result = uniq(result);\r\n\r\n            result = result.filter(function(mixin){\r\n                var cls = ctor;\r\n                while (cls) {\r\n                    if (mixin === cls) {\r\n                        return false;\r\n                    }\r\n                    if (has(cls,\"__mixins__\")) {\r\n                        var clsMixines = cls[\"__mixins__\"];\r\n                        for (var i=0; i<clsMixines.length;i++) {\r\n                            if (clsMixines[i]===mixin) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    cls = cls.superclass;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (result.length>0) {\r\n                return result;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function mergeMixins(ctor,mixins) {\r\n            var newCtor =ctor;\r\n            for (var i=0;i<mixins.length;i++) {\r\n                var xtor = new Function();\r\n                xtor.prototype = Object.create(newCtor.prototype);\r\n                xtor.__proto__ = newCtor;\r\n                xtor.superclass = null;\r\n                mixin(xtor.prototype,mixins[i].prototype);\r\n                xtor.prototype.__mixin__ = mixins[i];\r\n                newCtor = xtor;\r\n            }\r\n\r\n            return newCtor;\r\n        }\r\n\r\n        return function createClass(props, parent, mixins,options) {\r\n            if (isArray(parent)) {\r\n                options = mixins;\r\n                mixins = parent;\r\n                parent = null;\r\n            }\r\n            parent = parent || Object;\r\n\r\n            if (isDefined(mixins) && !isArray(mixins)) {\r\n                options = mixins;\r\n                mixins = false;\r\n            }\r\n\r\n            var innerParent = parent;\r\n\r\n            if (mixins) {\r\n                mixins = serialMixins(innerParent,mixins);\r\n            }\r\n\r\n            if (mixins) {\r\n                innerParent = mergeMixins(innerParent,mixins);\r\n            }\r\n\r\n\r\n            var _constructor = props.constructor;\r\n            if (_constructor === Object) {\r\n                _constructor = function() {\r\n                    if (this.init) {\r\n                        return this.init.apply(this, arguments);\r\n                    }\r\n                };\r\n            };\r\n\r\n            var klassName = props.klassName || \"\",\r\n                ctor = new Function(\r\n                    \"return function \" + klassName + \"() {\" +\r\n                    \"var inst = this,\" +\r\n                    \" ctor = arguments.callee;\" +\r\n                    \"if (!(inst instanceof ctor)) {\" +\r\n                    \"inst = Object.create(ctor.prototype);\" +\r\n                    \"}\" +\r\n                    \"return ctor._constructor.apply(inst, arguments) || inst;\" + \r\n                    \"}\"\r\n                )();\r\n\r\n\r\n            ctor._constructor = _constructor;\r\n            // Populate our constructed prototype object\r\n            ctor.prototype = Object.create(innerParent.prototype);\r\n\r\n            // Enforce the constructor to be what we expect\r\n            ctor.prototype.constructor = ctor;\r\n            ctor.superclass = parent;\r\n\r\n            // And make this class extendable\r\n            ctor.__proto__ = innerParent;\r\n\r\n            if (mixins) {\r\n                ctor.__mixins__ = mixins;\r\n            }\r\n\r\n            if (!ctor.partial) {\r\n                ctor.partial = function(props, options) {\r\n                    return extendClass(this, props, options);\r\n                };\r\n            }\r\n            if (!ctor.inherit) {\r\n                ctor.inherit = function(props, mixins,options) {\r\n                    return createClass(props, this, mixins,options);\r\n                };\r\n            }\r\n\r\n            ctor.partial(props, options);\r\n\r\n            return ctor;\r\n        };\r\n    }\r\n\r\n    var createClass = f1();\r\n\r\n\r\n    // Retrieve all the property names of an object.\r\n    function allKeys(obj) {\r\n        if (!isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function createEvent(type, props) {\r\n        var e = new CustomEvent(type, props);\r\n\r\n        return safeMixin(e, props);\r\n    }\r\n    \r\n    function debounce(fn, wait) {\r\n        var timeout,\r\n            args,\r\n            later = function() {\r\n                fn.apply(null, args);\r\n            };\r\n\r\n        return function() {\r\n            args = arguments;\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n\r\n    var delegate = (function() {\r\n        // boodman/crockford delegation w/ cornford optimization\r\n        function TMP() {}\r\n        return function(obj, props) {\r\n            TMP.prototype = obj;\r\n            var tmp = new TMP();\r\n            TMP.prototype = null;\r\n            if (props) {\r\n                mixin(tmp, props);\r\n            }\r\n            return tmp; // Object\r\n        };\r\n    })();\r\n\r\n\r\n    // Retrieve the values of an object's properties.\r\n    function values(obj) {\r\n        var keys = _.keys(obj);\r\n        var length = keys.length;\r\n        var values = Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            values[i] = obj[keys[i]];\r\n        }\r\n        return values;\r\n    }\r\n    \r\n    function clone( /*anything*/ src,checkCloneMethod) {\r\n        var copy;\r\n        if (src === undefined || src === null) {\r\n            copy = src;\r\n        } else if (checkCloneMethod && src.clone) {\r\n            copy = src.clone();\r\n        } else if (isArray(src)) {\r\n            copy = [];\r\n            for (var i = 0; i < src.length; i++) {\r\n                copy.push(clone(src[i]));\r\n            }\r\n        } else if (isPlainObject(src)) {\r\n            copy = {};\r\n            for (var key in src) {\r\n                copy[key] = clone(src[key]);\r\n            }\r\n        } else {\r\n            copy = src;\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function dasherize(str) {\r\n        return str.replace(/::/g, '/')\r\n            .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n            .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n            .replace(/_/g, '-')\r\n            .toLowerCase();\r\n    }\r\n\r\n    function deserializeValue(value) {\r\n        try {\r\n            return value ?\r\n                value == \"true\" ||\r\n                (value == \"false\" ? false :\r\n                    value == \"null\" ? null :\r\n                    +value + \"\" == value ? +value :\r\n                    /^[\\[\\{]/.test(value) ? JSON.parse(value) :\r\n                    value) : value;\r\n        } catch (e) {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    function each(obj, callback) {\r\n        var length, key, i, undef, value;\r\n\r\n        if (obj) {\r\n            length = obj.length;\r\n\r\n            if (length === undef) {\r\n                // Loop object items\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        value = obj[key];\r\n                        if (callback.call(value, key, value) === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Loop array items\r\n                for (i = 0; i < length; i++) {\r\n                    value = obj[i];\r\n                    if (callback.call(value, i, value) === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function funcArg(context, arg, idx, payload) {\r\n        return isFunction(arg) ? arg.call(context, idx, payload) : arg;\r\n    }\r\n\r\n    var getAbsoluteUrl = (function() {\r\n        var a;\r\n\r\n        return function(url) {\r\n            if (!a) a = document.createElement('a');\r\n            a.href = url;\r\n\r\n            return a.href;\r\n        };\r\n    })();\r\n\r\n    function getQueryParams(url) {\r\n        var url = url || window.location.href,\r\n            segs = url.split(\"?\"),\r\n            params = {};\r\n\r\n        if (segs.length > 1) {\r\n            segs[1].split(\"&\").forEach(function(queryParam) {\r\n                var nv = queryParam.split('=');\r\n                params[nv[0]] = nv[1];\r\n            });\r\n        }\r\n        return params;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n\r\n    function has(obj, path) {\r\n        if (!isArray(path)) {\r\n            return obj != null && hasOwnProperty.call(obj, path);\r\n        }\r\n        var length = path.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var key = path[i];\r\n            if (obj == null || !hasOwnProperty.call(obj, key)) {\r\n                return false;\r\n            }\r\n            obj = obj[key];\r\n        }\r\n        return !!length;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function inherit(ctor, base) {\r\n        var f = function() {};\r\n        f.prototype = base.prototype;\r\n\r\n        ctor.prototype = new f();\r\n    }\r\n\r\n    function isArray(object) {\r\n        return object && object.constructor === Array;\r\n    }\r\n\r\n    function isArrayLike(obj) {\r\n        return !isString(obj) && !isHtmlNode(obj) && typeof obj.length == 'number' && !isFunction(obj);\r\n    }\r\n\r\n    function isBoolean(obj) {\r\n        return typeof(obj) === \"boolean\";\r\n    }\r\n\r\n    function isDocument(obj) {\r\n        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;\r\n    }\r\n\r\n\r\n\r\n  // Perform a deep comparison to check if two objects are equal.\r\n    function isEqual(a, b) {\r\n        return eq(a, b);\r\n    }\r\n\r\n    function isFunction(value) {\r\n        return type(value) == \"function\";\r\n    }\r\n\r\n    function isObject(obj) {\r\n        return type(obj) == \"object\";\r\n    }\r\n\r\n    function isPlainObject(obj) {\r\n        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;\r\n    }\r\n\r\n    function isString(obj) {\r\n        return typeof obj === 'string';\r\n    }\r\n\r\n    function isWindow(obj) {\r\n        return obj && obj == obj.window;\r\n    }\r\n\r\n    function isDefined(obj) {\r\n        return typeof obj !== 'undefined';\r\n    }\r\n\r\n    function isHtmlNode(obj) {\r\n        return obj && (obj instanceof Node);\r\n    }\r\n\r\n    function isInstanceOf( /*Object*/ value, /*Type*/ type) {\r\n        //Tests whether the value is an instance of a type.\r\n        if (value === undefined) {\r\n            return false;\r\n        } else if (value === null || type == Object) {\r\n            return true;\r\n        } else if (typeof value === \"number\") {\r\n            return type === Number;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else if (typeof value === \"boolean\") {\r\n            return type === Boolean;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else {\r\n            return (value instanceof type) || (value && value.isInstanceOf ? value.isInstanceOf(type) : false);\r\n        }\r\n    }\r\n\r\n    function isNumber(obj) {\r\n        return typeof obj == 'number';\r\n    }\r\n\r\n    function isSameOrigin(href) {\r\n        if (href) {\r\n            var origin = location.protocol + '//' + location.hostname;\r\n            if (location.port) {\r\n                origin += ':' + location.port;\r\n            }\r\n            return href.startsWith(origin);\r\n        }\r\n    }\r\n\r\n\r\n    function isEmptyObject(obj) {\r\n        var name;\r\n        for (name in obj) {\r\n            if (obj[name] !== null) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Returns whether an object has a given set of `key:value` pairs.\r\n    function isMatch(object, attrs) {\r\n        var keys = keys(attrs), length = keys.length;\r\n        if (object == null) return !length;\r\n        var obj = Object(object);\r\n        for (var i = 0; i < length; i++) {\r\n          var key = keys[i];\r\n          if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n        }\r\n        return true;\r\n    }    \r\n\r\n    // Retrieve the names of an object's own properties.\r\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n    function keys(obj) {\r\n        if (isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) if (has(obj, key)) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n    function defer(fn) {\r\n        if (requestAnimationFrame) {\r\n            requestAnimationFrame(fn);\r\n        } else {\r\n            setTimeoutout(fn);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function noop() {\r\n    }\r\n\r\n    function proxy(fn, context) {\r\n        var args = (2 in arguments) && slice.call(arguments, 2)\r\n        if (isFunction(fn)) {\r\n            var proxyFn = function() {\r\n                return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);\r\n            }\r\n            return proxyFn;\r\n        } else if (isString(context)) {\r\n            if (args) {\r\n                args.unshift(fn[context], fn)\r\n                return proxy.apply(null, args)\r\n            } else {\r\n                return proxy(fn[context], fn);\r\n            }\r\n        } else {\r\n            throw new TypeError(\"expected function\");\r\n        }\r\n    }\r\n\r\n\r\n    function toPixel(value) {\r\n        // style values can be floats, client code may want\r\n        // to round for integer pixels.\r\n        return parseFloat(value) || 0;\r\n    }\r\n\r\n    var type = (function() {\r\n        var class2type = {};\r\n\r\n        // Populate the class2type map\r\n        each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(i, name) {\r\n            class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n        });\r\n\r\n        return function type(obj) {\r\n            return obj == null ? String(obj) :\r\n                class2type[toString.call(obj)] || \"object\";\r\n        };\r\n    })();\r\n\r\n    function trim(str) {\r\n        return str == null ? \"\" : String.prototype.trim.call(str);\r\n    }\r\n\r\n    function removeItem(items, item) {\r\n        if (isArray(items)) {\r\n            var idx = items.indexOf(item);\r\n            if (idx != -1) {\r\n                items.splice(idx, 1);\r\n            }\r\n        } else if (isPlainObject(items)) {\r\n            for (var key in items) {\r\n                if (items[key] == item) {\r\n                    delete items[key];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function _mixin(target, source, deep, safe) {\r\n        for (var key in source) {\r\n            if (!source.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            if (safe && target[key] !== undefined) {\r\n                continue;\r\n            }\r\n            if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\r\n                if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\r\n                    target[key] = {};\r\n                }\r\n                if (isArray(source[key]) && !isArray(target[key])) {\r\n                    target[key] = [];\r\n                }\r\n                _mixin(target[key], source[key], deep, safe);\r\n            } else if (source[key] !== undefined) {\r\n                target[key] = source[key]\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function _parseMixinArgs(args) {\r\n        var params = slice.call(arguments, 0),\r\n            target = params.shift(),\r\n            deep = false;\r\n        if (isBoolean(params[params.length - 1])) {\r\n            deep = params.pop();\r\n        }\r\n\r\n        return {\r\n            target: target,\r\n            sources: params,\r\n            deep: deep\r\n        };\r\n    }\r\n\r\n    function mixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, false);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    function result(obj, path, fallback) {\r\n        if (!isArray(path)) {\r\n            path = [path]\r\n        };\r\n        var length = path.length;\r\n        if (!length) {\r\n          return isFunction(fallback) ? fallback.call(obj) : fallback;\r\n        }\r\n        for (var i = 0; i < length; i++) {\r\n          var prop = obj == null ? void 0 : obj[path[i]];\r\n          if (prop === void 0) {\r\n            prop = fallback;\r\n            i = length; // Ensure we don't continue iterating.\r\n          }\r\n          obj = isFunction(prop) ? prop.call(obj) : prop;\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    function safeMixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, true);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    function substitute( /*String*/ template,\r\n        /*Object|Array*/\r\n        map,\r\n        /*Function?*/\r\n        transform,\r\n        /*Object?*/\r\n        thisObject) {\r\n        // summary:\r\n        //    Performs parameterized substitutions on a string. Throws an\r\n        //    exception if any parameter is unmatched.\r\n        // template:\r\n        //    a string with expressions in the form `${key}` to be replaced or\r\n        //    `${key:format}` which specifies a format function. keys are case-sensitive.\r\n        // map:\r\n        //    hash to search for substitutions\r\n        // transform:\r\n        //    a function to process all parameters before substitution takes\r\n\r\n\r\n        thisObject = thisObject || window;\r\n        transform = transform ?\r\n            proxy(thisObject, transform) : function(v) {\r\n                return v;\r\n            };\r\n\r\n        function getObject(key, map) {\r\n            if (key.match(/\\./)) {\r\n                var retVal,\r\n                    getValue = function(keys, obj) {\r\n                        var _k = keys.pop();\r\n                        if (_k) {\r\n                            if (!obj[_k]) return null;\r\n                            return getValue(keys, retVal = obj[_k]);\r\n                        } else {\r\n                            return retVal;\r\n                        }\r\n                    };\r\n                return getValue(key.split(\".\").reverse(), map);\r\n            } else {\r\n                return map[key];\r\n            }\r\n        }\r\n\r\n        return template.replace(/\\$\\{([^\\s\\:\\}]+)(?:\\:([^\\s\\:\\}]+))?\\}/g,\r\n            function(match, key, format) {\r\n                var value = getObject(key, map);\r\n                if (format) {\r\n                    value = getObject(format, thisObject).call(thisObject, value, key);\r\n                }\r\n                return transform(value, key).toString();\r\n            }); // String\r\n    }\r\n\r\n    var _uid = 1;\r\n\r\n    function uid(obj) {\r\n        return obj._uid || (obj._uid = _uid++);\r\n    }\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    var idCounter = 0;\r\n    function uniqueId (prefix) {\r\n        var id = ++idCounter + '';\r\n        return prefix ? prefix + id : id;\r\n    }\r\n\r\n    var Deferred = function() {\r\n        var self = this,\r\n            p = this.promise = new Promise(function(resolve, reject) {\r\n                self._resolve = resolve;\r\n                self._reject = reject;\r\n            }),\r\n           added = {\r\n                state : function() {\r\n                    if (self.isResolved()) {\r\n                        return 'resolved';\r\n                    }\r\n                    if (self.isRejected()) {\r\n                        return 'rejected';\r\n                    }\r\n                    return 'pending';\r\n                },\r\n                then : function(onResolved,onRejected,onProgress) {\r\n                    if (onProgress) {\r\n                        this.progress(onProgress);\r\n                    }\r\n                    return mixin(Promise.prototype.then.call(this,\r\n                            onResolved && function(args) {\r\n                                if (args && args.__ctx__ !== undefined) {\r\n                                    return onResolved.apply(args.__ctx__,args);\r\n                                } else {\r\n                                    return onResolved(args);\r\n                                }\r\n                            },\r\n                            onRejected && function(args){\r\n                                if (args && args.__ctx__ !== undefined) {\r\n                                    return onRejected.apply(args.__ctx__,args);\r\n                                } else {\r\n                                    return onRejected(args);\r\n                                }\r\n                            }),added);\r\n                },\r\n                always: function(handler) {\r\n                    //this.done(handler);\r\n                    //this.fail(handler);\r\n                    this.then(handler,handler);\r\n                    return this;\r\n                },\r\n                done : function(handler) {\r\n                    return this.then(handler);\r\n                },\r\n                fail : function(handler) { \r\n                    //return mixin(Promise.prototype.catch.call(this,handler),added);\r\n                    return this.then(null,handler);\r\n                }, \r\n                progress : function(handler) {\r\n                    self[PGLISTENERS].push(handler);\r\n                    return this;\r\n                }\r\n\r\n            };\r\n\r\n        added.pipe = added.then;\r\n        mixin(p,added);\r\n\r\n        this[PGLISTENERS] = [];\r\n\r\n        //this.resolve = Deferred.prototype.resolve.bind(this);\r\n        //this.reject = Deferred.prototype.reject.bind(this);\r\n        //this.progress = Deferred.prototype.progress.bind(this);\r\n\r\n    };\r\n\r\n    Deferred.prototype.resolve = function(value) {\r\n        var args = slice.call(arguments);\r\n        return this.resolveWith(null,args);\r\n    };\r\n\r\n    Deferred.prototype.resolveWith = function(context,args) {\r\n        args = args ? makeArray(args) : []; \r\n        args.__ctx__ = context;\r\n        this._resolve(args);\r\n        this._resolved = true;\r\n        return this;\r\n    };\r\n\r\n    Deferred.prototype.progress = function(value) {\r\n        try {\r\n          return this[PGLISTENERS].forEach(function (listener) {\r\n            return listener(value);\r\n          });\r\n        } catch (error) {\r\n          this.reject(error);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    Deferred.prototype.reject = function(reason) {\r\n        var args = slice.call(arguments);\r\n        return this.rejectWith(null,args);\r\n    };\r\n\r\n    Deferred.prototype.rejectWith = function(context,args) {\r\n        args = args ? makeArray(args) : []; \r\n        args.__ctx__ = context;\r\n        this._reject(args);\r\n        this._rejected = true;\r\n        return this;\r\n    };\r\n\r\n    Deferred.prototype.isResolved = function() {\r\n        return !!this._resolved;\r\n    };\r\n\r\n    Deferred.prototype.isRejected = function() {\r\n        return !!this._rejected;\r\n    };\r\n\r\n    Deferred.prototype.then = function(callback, errback, progback) {\r\n        var p = result(this,\"promise\");\r\n        return p.then(callback, errback, progback);\r\n    };\r\n\r\n    Deferred.prototype.done  = Deferred.prototype.then;\r\n\r\n    Deferred.all = function(array) {\r\n        return Promise.all(array);\r\n    };\r\n\r\n    Deferred.first = function(array) {\r\n        return Promise.race(array);\r\n    };\r\n\r\n\r\n    Deferred.when = function(valueOrPromise, callback, errback, progback) {\r\n        var receivedPromise = valueOrPromise && typeof valueOrPromise.then === \"function\";\r\n        var nativePromise = receivedPromise && valueOrPromise instanceof Promise;\r\n\r\n        if (!receivedPromise) {\r\n            if (arguments.length > 1) {\r\n                return callback ? callback(valueOrPromise) : valueOrPromise;\r\n            } else {\r\n                return new Deferred().resolve(valueOrPromise);\r\n            }\r\n//        } else if (!nativePromise) {\r\n//            var deferred = new Deferred(valueOrPromise.cancel);\r\n//            valueOrPromise.then(deferred.resolve, deferred.reject, deferred.progress);\r\n//            valueOrPromise = deferred.promise;\r\n        }\r\n\r\n        if (callback || errback || progback) {\r\n            return valueOrPromise.then(callback, errback, progback);\r\n        }\r\n        return valueOrPromise;\r\n    };\r\n\r\n    Deferred.reject = function(err) {\r\n        var d = new Deferred();\r\n        d.reject(err);\r\n        return d.promise;\r\n    };\r\n\r\n    Deferred.resolve = function(data) {\r\n        var d = new Deferred();\r\n        d.resolve(data);\r\n        return d.promise;\r\n    };\r\n\r\n    Deferred.immediate = Deferred.resolve;\r\n\r\n    var Evented = createClass({\r\n        on: function(events, selector, data, callback, ctx, /*used internally*/ one) {\r\n            var self = this,\r\n                _hub = this._hub || (this._hub = {});\r\n\r\n            if (isPlainObject(events)) {\r\n                ctx = callback;\r\n                each(events, function(type, fn) {\r\n                    self.on(type, selector, data, fn, ctx, one);\r\n                });\r\n                return this;\r\n            }\r\n\r\n            if (!isString(selector) && !isFunction(callback)) {\r\n                ctx = callback;\r\n                callback = data;\r\n                data = selector;\r\n                selector = undefined;\r\n            }\r\n\r\n            if (isFunction(data)) {\r\n                ctx = callback;\r\n                callback = data;\r\n                data = null;\r\n            }\r\n\r\n            if (isString(events)) {\r\n                events = events.split(/\\s/)\r\n            }\r\n\r\n            events.forEach(function(name) {\r\n                (_hub[name] || (_hub[name] = [])).push({\r\n                    fn: callback,\r\n                    selector: selector,\r\n                    data: data,\r\n                    ctx: ctx,\r\n                    one: one\r\n                });\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        one: function(events, selector, data, callback, ctx) {\r\n            return this.on(events, selector, data, callback, ctx, 1);\r\n        },\r\n\r\n        trigger: function(e /*,argument list*/ ) {\r\n            if (!this._hub) {\r\n                return this;\r\n            }\r\n\r\n            var self = this;\r\n\r\n            if (isString(e)) {\r\n                e = new CustomEvent(e);\r\n            }\r\n\r\n            Object.defineProperty(e,\"target\",{\r\n                value : this\r\n            });\r\n\r\n            var args = slice.call(arguments, 1);\r\n            if (isDefined(args)) {\r\n                args = [e].concat(args);\r\n            } else {\r\n                args = [e];\r\n            }\r\n            [e.type || e.name, \"all\"].forEach(function(eventName) {\r\n                var listeners = self._hub[eventName];\r\n                if (!listeners) {\r\n                    return;\r\n                }\r\n\r\n                var len = listeners.length,\r\n                    reCompact = false;\r\n\r\n                for (var i = 0; i < len; i++) {\r\n                    var listener = listeners[i];\r\n                    if (e.data) {\r\n                        if (listener.data) {\r\n                            e.data = mixin({}, listener.data, e.data);\r\n                        }\r\n                    } else {\r\n                        e.data = listener.data || null;\r\n                    }\r\n                    listener.fn.apply(listener.ctx, args);\r\n                    if (listener.one) {\r\n                        listeners[i] = null;\r\n                        reCompact = true;\r\n                    }\r\n                }\r\n\r\n                if (reCompact) {\r\n                    self._hub[eventName] = compact(listeners);\r\n                }\r\n\r\n            });\r\n            return this;\r\n        },\r\n\r\n        listened: function(event) {\r\n            var evtArr = ((this._hub || (this._events = {}))[event] || []);\r\n            return evtArr.length > 0;\r\n        },\r\n\r\n        listenTo: function(obj, event, callback, /*used internally*/ one) {\r\n            if (!obj) {\r\n                return this;\r\n            }\r\n\r\n            // Bind callbacks on obj,\r\n            if (isString(callback)) {\r\n                callback = this[callback];\r\n            }\r\n\r\n            if (one) {\r\n                obj.one(event, callback, this);\r\n            } else {\r\n                obj.on(event, callback, this);\r\n            }\r\n\r\n            //keep track of them on listening.\r\n            var listeningTo = this._listeningTo || (this._listeningTo = []),\r\n                listening;\r\n\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                if (listeningTo[i].obj == obj) {\r\n                    listening = listeningTo[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (!listening) {\r\n                listeningTo.push(\r\n                    listening = {\r\n                        obj: obj,\r\n                        events: {}\r\n                    }\r\n                );\r\n            }\r\n            var listeningEvents = listening.events,\r\n                listeningEvent = listeningEvents[event] = listeningEvents[event] || [];\r\n            if (listeningEvent.indexOf(callback) == -1) {\r\n                listeningEvent.push(callback);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        listenToOnce: function(obj, event, callback) {\r\n            return this.listenTo(obj, event, callback, 1);\r\n        },\r\n\r\n        off: function(events, callback) {\r\n            var _hub = this._hub || (this._hub = {});\r\n            if (isString(events)) {\r\n                events = events.split(/\\s/)\r\n            }\r\n\r\n            events.forEach(function(name) {\r\n                var evts = _hub[name];\r\n                var liveEvents = [];\r\n\r\n                if (evts && callback) {\r\n                    for (var i = 0, len = evts.length; i < len; i++) {\r\n                        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\r\n                            liveEvents.push(evts[i]);\r\n                    }\r\n                }\r\n\r\n                if (liveEvents.length) {\r\n                    _hub[name] = liveEvents;\r\n                } else {\r\n                    delete _hub[name];\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n        unlistenTo: function(obj, event, callback) {\r\n            var listeningTo = this._listeningTo;\r\n            if (!listeningTo) {\r\n                return this;\r\n            }\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                var listening = listeningTo[i];\r\n\r\n                if (obj && obj != listening.obj) {\r\n                    continue;\r\n                }\r\n\r\n                var listeningEvents = listening.events;\r\n                for (var eventName in listeningEvents) {\r\n                    if (event && event != eventName) {\r\n                        continue;\r\n                    }\r\n\r\n                    listeningEvent = listeningEvents[eventName];\r\n\r\n                    for (var j = 0; j < listeningEvent.length; j++) {\r\n                        if (!callback || callback == listeningEvent[i]) {\r\n                            listening.obj.off(eventName, listeningEvent[i], this);\r\n                            listeningEvent[i] = null;\r\n                        }\r\n                    }\r\n\r\n                    listeningEvent = listeningEvents[eventName] = compact(listeningEvent);\r\n\r\n                    if (isEmptyObject(listeningEvent)) {\r\n                        listeningEvents[eventName] = null;\r\n                    }\r\n\r\n                }\r\n\r\n                if (isEmptyObject(listeningEvents)) {\r\n                    listeningTo[i] = null;\r\n                }\r\n            }\r\n\r\n            listeningTo = this._listeningTo = compact(listeningTo);\r\n            if (isEmptyObject(listeningTo)) {\r\n                this._listeningTo = null;\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    var Stateful = Evented.inherit({\r\n        init : function(attributes, options) {\r\n            var attrs = attributes || {};\r\n            options || (options = {});\r\n            this.cid = uniqueId(this.cidPrefix);\r\n            this.attributes = {};\r\n            if (options.collection) this.collection = options.collection;\r\n            if (options.parse) attrs = this.parse(attrs, options) || {};\r\n            var defaults = result(this, 'defaults');\r\n            attrs = mixin({}, defaults, attrs);\r\n            this.set(attrs, options);\r\n            this.changed = {};\r\n        },\r\n\r\n        // A hash of attributes whose current and previous value differ.\r\n        changed: null,\r\n\r\n        // The value returned during the last failed validation.\r\n        validationError: null,\r\n\r\n        // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\r\n        // CouchDB users may want to set this to `\"_id\"`.\r\n        idAttribute: 'id',\r\n\r\n        // The prefix is used to create the client id which is used to identify models locally.\r\n        // You may want to override this if you're experiencing name clashes with model ids.\r\n        cidPrefix: 'c',\r\n\r\n\r\n        // Return a copy of the model's `attributes` object.\r\n        toJSON: function(options) {\r\n          return clone(this.attributes);\r\n        },\r\n\r\n\r\n        // Get the value of an attribute.\r\n        get: function(attr) {\r\n          return this.attributes[attr];\r\n        },\r\n\r\n        // Returns `true` if the attribute contains a value that is not null\r\n        // or undefined.\r\n        has: function(attr) {\r\n          return this.get(attr) != null;\r\n        },\r\n\r\n        // Set a hash of model attributes on the object, firing `\"change\"`. This is\r\n        // the core primitive operation of a model, updating the data and notifying\r\n        // anyone who needs to know about the change in state. The heart of the beast.\r\n        set: function(key, val, options) {\r\n          if (key == null) return this;\r\n\r\n          // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n          var attrs;\r\n          if (typeof key === 'object') {\r\n            attrs = key;\r\n            options = val;\r\n          } else {\r\n            (attrs = {})[key] = val;\r\n          }\r\n\r\n          options || (options = {});\r\n\r\n          // Run validation.\r\n          if (!this._validate(attrs, options)) return false;\r\n\r\n          // Extract attributes and options.\r\n          var unset      = options.unset;\r\n          var silent     = options.silent;\r\n          var changes    = [];\r\n          var changing   = this._changing;\r\n          this._changing = true;\r\n\r\n          if (!changing) {\r\n            this._previousAttributes = clone(this.attributes);\r\n            this.changed = {};\r\n          }\r\n\r\n          var current = this.attributes;\r\n          var changed = this.changed;\r\n          var prev    = this._previousAttributes;\r\n\r\n          // For each `set` attribute, update or delete the current value.\r\n          for (var attr in attrs) {\r\n            val = attrs[attr];\r\n            if (!isEqual(current[attr], val)) changes.push(attr);\r\n            if (!isEqual(prev[attr], val)) {\r\n              changed[attr] = val;\r\n            } else {\r\n              delete changed[attr];\r\n            }\r\n            unset ? delete current[attr] : current[attr] = val;\r\n          }\r\n\r\n          // Update the `id`.\r\n          if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\r\n\r\n          // Trigger all relevant attribute changes.\r\n          if (!silent) {\r\n            if (changes.length) this._pending = options;\r\n            for (var i = 0; i < changes.length; i++) {\r\n              this.trigger('change:' + changes[i], this, current[changes[i]], options);\r\n            }\r\n          }\r\n\r\n          // You might be wondering why there's a `while` loop here. Changes can\r\n          // be recursively nested within `\"change\"` events.\r\n          if (changing) return this;\r\n          if (!silent) {\r\n            while (this._pending) {\r\n              options = this._pending;\r\n              this._pending = false;\r\n              this.trigger('change', this, options);\r\n            }\r\n          }\r\n          this._pending = false;\r\n          this._changing = false;\r\n          return this;\r\n        },\r\n\r\n        // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\r\n        // if the attribute doesn't exist.\r\n        unset: function(attr, options) {\r\n          return this.set(attr, void 0, mixin({}, options, {unset: true}));\r\n        },\r\n\r\n        // Clear all attributes on the model, firing `\"change\"`.\r\n        clear: function(options) {\r\n          var attrs = {};\r\n          for (var key in this.attributes) attrs[key] = void 0;\r\n          return this.set(attrs, mixin({}, options, {unset: true}));\r\n        },\r\n\r\n        // Determine if the model has changed since the last `\"change\"` event.\r\n        // If you specify an attribute name, determine if that attribute has changed.\r\n        hasChanged: function(attr) {\r\n          if (attr == null) return !isEmptyObject(this.changed);\r\n          return this.changed[attr] !== undefined;\r\n        },\r\n\r\n        // Return an object containing all the attributes that have changed, or\r\n        // false if there are no changed attributes. Useful for determining what\r\n        // parts of a view need to be updated and/or what attributes need to be\r\n        // persisted to the server. Unset attributes will be set to undefined.\r\n        // You can also pass an attributes object to diff against the model,\r\n        // determining if there *would be* a change.\r\n        changedAttributes: function(diff) {\r\n          if (!diff) return this.hasChanged() ? clone(this.changed) : false;\r\n          var old = this._changing ? this._previousAttributes : this.attributes;\r\n          var changed = {};\r\n          for (var attr in diff) {\r\n            var val = diff[attr];\r\n            if (isEqual(old[attr], val)) continue;\r\n            changed[attr] = val;\r\n          }\r\n          return !isEmptyObject(changed) ? changed : false;\r\n        },\r\n\r\n        // Get the previous value of an attribute, recorded at the time the last\r\n        // `\"change\"` event was fired.\r\n        previous: function(attr) {\r\n          if (attr == null || !this._previousAttributes) return null;\r\n          return this._previousAttributes[attr];\r\n        },\r\n\r\n        // Get all of the attributes of the model at the time of the previous\r\n        // `\"change\"` event.\r\n        previousAttributes: function() {\r\n          return clone(this._previousAttributes);\r\n        },\r\n\r\n        // Create a new model with identical attributes to this one.\r\n        clone: function() {\r\n          return new this.constructor(this.attributes);\r\n        },\r\n\r\n        // A model is new if it has never been saved to the server, and lacks an id.\r\n        isNew: function() {\r\n          return !this.has(this.idAttribute);\r\n        },\r\n\r\n        // Check if the model is currently in a valid state.\r\n        isValid: function(options) {\r\n          return this._validate({}, mixin({}, options, {validate: true}));\r\n        },\r\n\r\n        // Run validation against the next complete set of model attributes,\r\n        // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\r\n        _validate: function(attrs, options) {\r\n          if (!options.validate || !this.validate) return true;\r\n          attrs = mixin({}, this.attributes, attrs);\r\n          var error = this.validationError = this.validate(attrs, options) || null;\r\n          if (!error) return true;\r\n          this.trigger('invalid', this, error, mixin(options, {validationError: error}));\r\n          return false;\r\n        }\r\n    });\r\n\r\n    var SimpleQueryEngine = function(query, options){\r\n        // summary:\r\n        //      Simple query engine that matches using filter functions, named filter\r\n        //      functions or objects by name-value on a query object hash\r\n        //\r\n        // description:\r\n        //      The SimpleQueryEngine provides a way of getting a QueryResults through\r\n        //      the use of a simple object hash as a filter.  The hash will be used to\r\n        //      match properties on data objects with the corresponding value given. In\r\n        //      other words, only exact matches will be returned.\r\n        //\r\n        //      This function can be used as a template for more complex query engines;\r\n        //      for example, an engine can be created that accepts an object hash that\r\n        //      contains filtering functions, or a string that gets evaluated, etc.\r\n        //\r\n        //      When creating a new dojo.store, simply set the store's queryEngine\r\n        //      field as a reference to this function.\r\n        //\r\n        // query: Object\r\n        //      An object hash with fields that may match fields of items in the store.\r\n        //      Values in the hash will be compared by normal == operator, but regular expressions\r\n        //      or any object that provides a test() method are also supported and can be\r\n        //      used to match strings by more complex expressions\r\n        //      (and then the regex's or object's test() method will be used to match values).\r\n        //\r\n        // options: dojo/store/api/Store.QueryOptions?\r\n        //      An object that contains optional information such as sort, start, and count.\r\n        //\r\n        // returns: Function\r\n        //      A function that caches the passed query under the field \"matches\".  See any\r\n        //      of the \"query\" methods on dojo.stores.\r\n        //\r\n        // example:\r\n        //      Define a store with a reference to this engine, and set up a query method.\r\n        //\r\n        //  |   var myStore = function(options){\r\n        //  |       //  ...more properties here\r\n        //  |       this.queryEngine = SimpleQueryEngine;\r\n        //  |       //  define our query method\r\n        //  |       this.query = function(query, options){\r\n        //  |           return QueryResults(this.queryEngine(query, options)(this.data));\r\n        //  |       };\r\n        //  |   };\r\n\r\n        // create our matching query function\r\n        switch(typeof query){\r\n            default:\r\n                throw new Error(\"Can not query with a \" + typeof query);\r\n            case \"object\": case \"undefined\":\r\n                var queryObject = query;\r\n                query = function(object){\r\n                    for(var key in queryObject){\r\n                        var required = queryObject[key];\r\n                        if(required && required.test){\r\n                            // an object can provide a test method, which makes it work with regex\r\n                            if(!required.test(object[key], object)){\r\n                                return false;\r\n                            }\r\n                        }else if(required != object[key]){\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                };\r\n                break;\r\n            case \"string\":\r\n                // named query\r\n                if(!this[query]){\r\n                    throw new Error(\"No filter function \" + query + \" was found in store\");\r\n                }\r\n                query = this[query];\r\n                // fall through\r\n            case \"function\":\r\n                // fall through\r\n        }\r\n        \r\n        function filter(arr, callback, thisObject){\r\n            // summary:\r\n            //      Returns a new Array with those items from arr that match the\r\n            //      condition implemented by callback.\r\n            // arr: Array\r\n            //      the array to iterate over.\r\n            // callback: Function|String\r\n            //      a function that is invoked with three arguments (item,\r\n            //      index, array). The return of this function is expected to\r\n            //      be a boolean which determines whether the passed-in item\r\n            //      will be included in the returned array.\r\n            // thisObject: Object?\r\n            //      may be used to scope the call to callback\r\n            // returns: Array\r\n            // description:\r\n            //      This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when\r\n            //      run over sparse arrays, this implementation passes the \"holes\" in the sparse array to\r\n            //      the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array.\r\n            //      For more details, see:\r\n            //      https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter\r\n            // example:\r\n            //  | // returns [2, 3, 4]\r\n            //  | array.filter([1, 2, 3, 4], function(item){ return item>1; });\r\n\r\n            // TODO: do we need \"Ctr\" here like in map()?\r\n            var i = 0, l = arr && arr.length || 0, out = [], value;\r\n            if(l && typeof arr == \"string\") arr = arr.split(\"\");\r\n            if(typeof callback == \"string\") callback = cache[callback] || buildFn(callback);\r\n            if(thisObject){\r\n                for(; i < l; ++i){\r\n                    value = arr[i];\r\n                    if(callback.call(thisObject, value, i, arr)){\r\n                        out.push(value);\r\n                    }\r\n                }\r\n            }else{\r\n                for(; i < l; ++i){\r\n                    value = arr[i];\r\n                    if(callback(value, i, arr)){\r\n                        out.push(value);\r\n                    }\r\n                }\r\n            }\r\n            return out; // Array\r\n        }\r\n\r\n        function execute(array){\r\n            // execute the whole query, first we filter\r\n            var results = filter(array, query);\r\n            // next we sort\r\n            var sortSet = options && options.sort;\r\n            if(sortSet){\r\n                results.sort(typeof sortSet == \"function\" ? sortSet : function(a, b){\r\n                    for(var sort, i=0; sort = sortSet[i]; i++){\r\n                        var aValue = a[sort.attribute];\r\n                        var bValue = b[sort.attribute];\r\n                        // valueOf enables proper comparison of dates\r\n                        aValue = aValue != null ? aValue.valueOf() : aValue;\r\n                        bValue = bValue != null ? bValue.valueOf() : bValue;\r\n                        if (aValue != bValue){\r\n                            // modified by lwf 2016/07/09\r\n                            //return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;\r\n                            return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;\r\n                        }\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n            // now we paginate\r\n            if(options && (options.start || options.count)){\r\n                var total = results.length;\r\n                results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));\r\n                results.total = total;\r\n            }\r\n            return results;\r\n        }\r\n        execute.matches = query;\r\n        return execute;\r\n    };\r\n\r\n    var QueryResults = function(results){\r\n        // summary:\r\n        //      A function that wraps the results of a store query with additional\r\n        //      methods.\r\n        // description:\r\n        //      QueryResults is a basic wrapper that allows for array-like iteration\r\n        //      over any kind of returned data from a query.  While the simplest store\r\n        //      will return a plain array of data, other stores may return deferreds or\r\n        //      promises; this wrapper makes sure that *all* results can be treated\r\n        //      the same.\r\n        //\r\n        //      Additional methods include `forEach`, `filter` and `map`.\r\n        // results: Array|dojo/promise/Promise\r\n        //      The result set as an array, or a promise for an array.\r\n        // returns:\r\n        //      An array-like object that can be used for iterating over.\r\n        // example:\r\n        //      Query a store and iterate over the results.\r\n        //\r\n        //  |   store.query({ prime: true }).forEach(function(item){\r\n        //  |       //  do something\r\n        //  |   });\r\n\r\n        if(!results){\r\n            return results;\r\n        }\r\n\r\n        var isPromise = !!results.then;\r\n        // if it is a promise it may be frozen\r\n        if(isPromise){\r\n            results = Object.delegate(results);\r\n        }\r\n        function addIterativeMethod(method){\r\n            // Always add the iterative methods so a QueryResults is\r\n            // returned whether the environment is ES3 or ES5\r\n            results[method] = function(){\r\n                var args = arguments;\r\n                var result = Deferred.when(results, function(results){\r\n                    //Array.prototype.unshift.call(args, results);\r\n                    return QueryResults(Array.prototype[method].apply(results, args));\r\n                });\r\n                // forEach should only return the result of when()\r\n                // when we're wrapping a promise\r\n                if(method !== \"forEach\" || isPromise){\r\n                    return result;\r\n                }\r\n            };\r\n        }\r\n\r\n        addIterativeMethod(\"forEach\");\r\n        addIterativeMethod(\"filter\");\r\n        addIterativeMethod(\"map\");\r\n        if(results.total == null){\r\n            results.total = Deferred.when(results, function(results){\r\n                return results.length;\r\n            });\r\n        }\r\n        return results; // Object\r\n    };\r\n\r\n    var async = {\r\n        parallel : function(arr,args,ctx) {\r\n            var rets = [];\r\n            ctx = ctx || null;\r\n            args = args || [];\r\n\r\n            each(arr,function(i,func){\r\n                rets.push(func.apply(ctx,args));\r\n            });\r\n\r\n            return Deferred.all(rets);\r\n        },\r\n\r\n        series : function(arr,args,ctx) {\r\n            var rets = [],\r\n                d = new Deferred(),\r\n                p = d.promise;\r\n\r\n            ctx = ctx || null;\r\n            args = args || [];\r\n\r\n            d.resolve();\r\n            each(arr,function(i,func){\r\n                p = p.then(function(){\r\n                    return func.apply(ctx,args);\r\n                });\r\n                rets.push(p);\r\n            });\r\n\r\n            return Deferred.all(rets);\r\n        },\r\n\r\n        waterful : function(arr,args,ctx) {\r\n            var d = new Deferred(),\r\n                p = d.promise;\r\n\r\n            ctx = ctx || null;\r\n            args = args || [];\r\n\r\n            d.resolveWith(ctx,args);\r\n\r\n            each(arr,function(i,func){\r\n                p = p.then(func);\r\n            });\r\n            return p;\r\n        }\r\n    };\r\n\r\n    var ArrayStore = createClass({\r\n        \"klassName\": \"ArrayStore\",\r\n\r\n        \"queryEngine\": SimpleQueryEngine,\r\n        \r\n        \"idProperty\": \"id\",\r\n\r\n\r\n        get: function(id){\r\n            // summary:\r\n            //      Retrieves an object by its identity\r\n            // id: Number\r\n            //      The identity to use to lookup the object\r\n            // returns: Object\r\n            //      The object in the store that matches the given id.\r\n            return this.data[this.index[id]];\r\n        },\r\n\r\n        getIdentity: function(object){\r\n            return object[this.idProperty];\r\n        },\r\n\r\n        put: function(object, options){\r\n            var data = this.data,\r\n                index = this.index,\r\n                idProperty = this.idProperty;\r\n            var id = object[idProperty] = (options && \"id\" in options) ? options.id : idProperty in object ? object[idProperty] : Math.random();\r\n            if(id in index){\r\n                // object exists\r\n                if(options && options.overwrite === false){\r\n                    throw new Error(\"Object already exists\");\r\n                }\r\n                // replace the entry in data\r\n                data[index[id]] = object;\r\n            }else{\r\n                // add the new object\r\n                index[id] = data.push(object) - 1;\r\n            }\r\n            return id;\r\n        },\r\n\r\n        add: function(object, options){\r\n            (options = options || {}).overwrite = false;\r\n            // call put with overwrite being false\r\n            return this.put(object, options);\r\n        },\r\n\r\n        remove: function(id){\r\n            // summary:\r\n            //      Deletes an object by its identity\r\n            // id: Number\r\n            //      The identity to use to delete the object\r\n            // returns: Boolean\r\n            //      Returns true if an object was removed, falsy (undefined) if no object matched the id\r\n            var index = this.index;\r\n            var data = this.data;\r\n            if(id in index){\r\n                data.splice(index[id], 1);\r\n                // now we have to reindex\r\n                this.setData(data);\r\n                return true;\r\n            }\r\n        },\r\n        query: function(query, options){\r\n            // summary:\r\n            //      Queries the store for objects.\r\n            // query: Object\r\n            //      The query to use for retrieving objects from the store.\r\n            // options: dojo/store/api/Store.QueryOptions?\r\n            //      The optional arguments to apply to the resultset.\r\n            // returns: dojo/store/api/Store.QueryResults\r\n            //      The results of the query, extended with iterative methods.\r\n            //\r\n            // example:\r\n            //      Given the following store:\r\n            //\r\n            //  |   var store = new Memory({\r\n            //  |       data: [\r\n            //  |           {id: 1, name: \"one\", prime: false },\r\n            //  |           {id: 2, name: \"two\", even: true, prime: true},\r\n            //  |           {id: 3, name: \"three\", prime: true},\r\n            //  |           {id: 4, name: \"four\", even: true, prime: false},\r\n            //  |           {id: 5, name: \"five\", prime: true}\r\n            //  |       ]\r\n            //  |   });\r\n            //\r\n            //  ...find all items where \"prime\" is true:\r\n            //\r\n            //  |   var results = store.query({ prime: true });\r\n            //\r\n            //  ...or find all items where \"even\" is true:\r\n            //\r\n            //  |   var results = store.query({ even: true });\r\n            return QueryResults(this.queryEngine(query, options)(this.data));\r\n        },\r\n\r\n        setData: function(data){\r\n            // summary:\r\n            //      Sets the given data as the source for this store, and indexes it\r\n            // data: Object[]\r\n            //      An array of objects to use as the source of data.\r\n            if(data.items){\r\n                // just for convenience with the data format IFRS expects\r\n                this.idProperty = data.identifier || this.idProperty;\r\n                data = this.data = data.items;\r\n            }else{\r\n                this.data = data;\r\n            }\r\n            this.index = {};\r\n            for(var i = 0, l = data.length; i < l; i++){\r\n                this.index[data[i][this.idProperty]] = i;\r\n            }\r\n        },\r\n\r\n        init: function(options) {\r\n            for(var i in options){\r\n                this[i] = options[i];\r\n            }\r\n            this.setData(this.data || []);\r\n        }\r\n\r\n    });\r\n\r\n    var Xhr = (function(){\r\n        var jsonpID = 0,\r\n            document = window.document,\r\n            key,\r\n            name,\r\n            rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            scriptTypeRE = /^(?:text|application)\\/javascript/i,\r\n            xmlTypeRE = /^(?:text|application)\\/xml/i,\r\n            jsonType = 'application/json',\r\n            htmlType = 'text/html',\r\n            blankRE = /^\\s*$/;\r\n\r\n        var XhrDefaultOptions = {\r\n            async: true,\r\n\r\n            // Default type of request\r\n            type: 'GET',\r\n            // Callback that is executed before request\r\n            beforeSend: noop,\r\n            // Callback that is executed if the request succeeds\r\n            success: noop,\r\n            // Callback that is executed the the server drops error\r\n            error: noop,\r\n            // Callback that is executed on request complete (both: error and success)\r\n            complete: noop,\r\n            // The context for the callbacks\r\n            context: null,\r\n            // Whether to trigger \"global\" Ajax events\r\n            global: true,\r\n\r\n            // MIME types mapping\r\n            // IIS returns Javascript as \"application/x-javascript\"\r\n            accepts: {\r\n                script: 'text/javascript, application/javascript, application/x-javascript',\r\n                json: 'application/json',\r\n                xml: 'application/xml, text/xml',\r\n                html: 'text/html',\r\n                text: 'text/plain'\r\n            },\r\n            // Whether the request is to another domain\r\n            crossDomain: false,\r\n            // Default timeout\r\n            timeout: 0,\r\n            // Whether data should be serialized to string\r\n            processData: true,\r\n            // Whether the browser should be allowed to cache GET responses\r\n            cache: true,\r\n\r\n            xhrFields : {\r\n                withCredentials : true\r\n            }\r\n        };\r\n\r\n        function mimeToDataType(mime) {\r\n            if (mime) {\r\n                mime = mime.split(';', 2)[0];\r\n            }\r\n            if (mime) {\r\n                if (mime == htmlType) {\r\n                    return \"html\";\r\n                } else if (mime == jsonType) {\r\n                    return \"json\";\r\n                } else if (scriptTypeRE.test(mime)) {\r\n                    return \"script\";\r\n                } else if (xmlTypeRE.test(mime)) {\r\n                    return \"xml\";\r\n                }\r\n            }\r\n            return \"text\";\r\n        }\r\n\r\n        function appendQuery(url, query) {\r\n            if (query == '') return url\r\n            return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n        }\r\n\r\n        // serialize payload and append it to the URL for GET requests\r\n        function serializeData(options) {\r\n            options.data = options.data || options.query;\r\n            if (options.processData && options.data && type(options.data) != \"string\") {\r\n                options.data = param(options.data, options.traditional);\r\n            }\r\n            if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) {\r\n                options.url = appendQuery(options.url, options.data);\r\n                options.data = undefined;\r\n            }\r\n        }\r\n\r\n        function serialize(params, obj, traditional, scope) {\r\n            var t, array = isArray(obj),\r\n                hash = isPlainObject(obj)\r\n            each(obj, function(key, value) {\r\n                t =type(value);\r\n                if (scope) key = traditional ? scope :\r\n                    scope + '[' + (hash || t == 'object' || t == 'array' ? key : '') + ']'\r\n                // handle data in serializeArray() format\r\n                if (!scope && array) params.add(value.name, value.value)\r\n                // recurse into nested objects\r\n                else if (t == \"array\" || (!traditional && t == \"object\"))\r\n                    serialize(params, value, traditional, key)\r\n                else params.add(key, value)\r\n            })\r\n        }\r\n\r\n        var param = function(obj, traditional) {\r\n            var params = []\r\n            params.add = function(key, value) {\r\n                if (isFunction(value)) value = value()\r\n                if (value == null) value = \"\"\r\n                this.push(escape(key) + '=' + escape(value))\r\n            }\r\n            serialize(params, obj, traditional)\r\n            return params.join('&').replace(/%20/g, '+')\r\n        };\r\n\r\n        var Xhr = Evented.inherit({\r\n            klassName : \"Xhr\",\r\n\r\n            _request  : function(args) {\r\n                var _ = this._,\r\n                    self = this,\r\n                    options = mixin({},XhrDefaultOptions,_.options,args),\r\n                    xhr = _.xhr = new XMLHttpRequest();\r\n\r\n                serializeData(options)\r\n\r\n                var dataType = options.dataType || options.handleAs,\r\n                    mime = options.mimeType || options.accepts[dataType],\r\n                    headers = options.headers,\r\n                    xhrFields = options.xhrFields,\r\n                    isFormData = options.data && options.data instanceof FormData,\r\n                    basicAuthorizationToken = options.basicAuthorizationToken,\r\n                    type = options.type,\r\n                    url = options.url,\r\n                    async = options.async,\r\n                    user = options.user , \r\n                    password = options.password,\r\n                    deferred = new Deferred(),\r\n                    contentType = isFormData ? false : 'application/x-www-form-urlencoded';\r\n\r\n                if (xhrFields) {\r\n                    for (name in xhrFields) {\r\n                        xhr[name] = xhrFields[name];\r\n                    }\r\n                }\r\n\r\n                if (mime && mime.indexOf(',') > -1) {\r\n                    mime = mime.split(',', 2)[0];\r\n                }\r\n                if (mime && xhr.overrideMimeType) {\r\n                    xhr.overrideMimeType(mime);\r\n                }\r\n\r\n                //if (dataType) {\r\n                //    xhr.responseType = dataType;\r\n                //}\r\n\r\n                var finish = function() {\r\n                    xhr.onloadend = noop;\r\n                    xhr.onabort = noop;\r\n                    xhr.onprogress = noop;\r\n                    xhr.ontimeout = noop;\r\n                    xhr = null;\r\n                }\r\n                var onloadend = function() {\r\n                    var result, error = false\r\n                    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && getAbsoluteUrl(url).startsWith('file:'))) {\r\n                        dataType = dataType || mimeToDataType(options.mimeType || xhr.getResponseHeader('content-type'));\r\n\r\n                        result = xhr.responseText;\r\n                        try {\r\n                            if (dataType == 'script') {\r\n                                eval(result);\r\n                            } else if (dataType == 'xml') {\r\n                                result = xhr.responseXML;\r\n                            } else if (dataType == 'json') {\r\n                                result = blankRE.test(result) ? null : JSON.parse(result);\r\n                            } else if (dataType == \"blob\") {\r\n                                result = Blob([xhrObj.response]);\r\n                            } else if (dataType == \"arraybuffer\") {\r\n                                result = xhr.reponse;\r\n                            }\r\n                        } catch (e) { \r\n                            error = e;\r\n                        }\r\n\r\n                        if (error) {\r\n                            deferred.reject(error,xhr.status,xhr);\r\n                        } else {\r\n                            deferred.resolve(result,xhr.status,xhr);\r\n                        }\r\n                    } else {\r\n                        deferred.reject(new Error(xhr.statusText),xhr.status,xhr);\r\n                    }\r\n                    finish();\r\n                };\r\n\r\n                var onabort = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"abort\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n \r\n                var ontimeout = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"timeout\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n\r\n                var onprogress = function(evt) {\r\n                    if (deferred) {\r\n                        deferred.progress(evt,xhr.status,xhr);\r\n                    }\r\n                }\r\n\r\n                xhr.onloadend = onloadend;\r\n                xhr.onabort = onabort;\r\n                xhr.ontimeout = ontimeout;\r\n                xhr.onprogress = onprogress;\r\n\r\n                xhr.open(type, url, async, user, password);\r\n               \r\n                if (headers) {\r\n                    for ( var key in headers) {\r\n                        var value = headers[key];\r\n \r\n                        if(key.toLowerCase() === 'content-type'){\r\n                            contentType = headers[hdr];\r\n                        } else {\r\n                           xhr.setRequestHeader(key, value);\r\n                        }\r\n                    }\r\n                }   \r\n\r\n                if  (contentType && contentType !== false){\r\n                    xhr.setRequestHeader('Content-Type', contentType);\r\n                }\r\n\r\n                if(!headers || !('X-Requested-With' in headers)){\r\n                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n                }\r\n\r\n\r\n                //If basicAuthorizationToken is defined set its value into \"Authorization\" header\r\n                if (basicAuthorizationToken) {\r\n                    xhr.setRequestHeader(\"Authorization\", basicAuthorizationToken);\r\n                }\r\n\r\n                xhr.send(options.data ? options.data : null);\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            \"abort\": function() {\r\n                var _ = this._,\r\n                    xhr = _.xhr;\r\n\r\n                if (xhr) {\r\n                    xhr.abort();\r\n                }    \r\n            },\r\n\r\n\r\n            \"request\": function(args) {\r\n                return this._request(args);\r\n            },\r\n\r\n            get : function(args) {\r\n                args = args || {};\r\n                args.type = \"GET\";\r\n                return this._request(args);\r\n            },\r\n\r\n            post : function(args) {\r\n                args = args || {};\r\n                args.type = \"POST\";\r\n                return this._request(args);\r\n            },\r\n\r\n            patch : function(args) {\r\n                args = args || {};\r\n                args.type = \"PATCH\";\r\n                return this._request(args);\r\n            },\r\n\r\n            put : function(args) {\r\n                args = args || {};\r\n                args.type = \"PUT\";\r\n                return this._request(args);\r\n            },\r\n\r\n            del : function(args) {\r\n                args = args || {};\r\n                args.type = \"DELETE\";\r\n                return this._request(args);\r\n            },\r\n\r\n            \"init\": function(options) {\r\n                this._ = {\r\n                    options : options || {}\r\n                };\r\n            }\r\n        });\r\n\r\n        [\"request\",\"get\",\"post\",\"put\",\"del\",\"patch\"].forEach(function(name){\r\n            Xhr[name] = function(url,args) {\r\n                var xhr = new Xhr({\"url\" : url});\r\n                return xhr[name](args);\r\n            };\r\n        });\r\n\r\n        Xhr.defaultOptions = XhrDefaultOptions;\r\n        Xhr.param = param;\r\n\r\n        return Xhr;\r\n    })();\r\n\r\n    var Restful = Evented.inherit({\r\n        \"klassName\" : \"Restful\",\r\n\r\n        \"idAttribute\": \"id\",\r\n        \r\n        getBaseUrl : function(args) {\r\n            //$$baseEndpoint : \"/files/${fileId}/comments\",\r\n            var baseEndpoint = String.substitute(this.baseEndpoint,args),\r\n                baseUrl = this.server + this.basePath + baseEndpoint;\r\n            if (args[this.idAttribute]!==undefined) {\r\n                baseUrl = baseUrl + \"/\" + args[this.idAttribute]; \r\n            }\r\n            return baseUrl;\r\n        },\r\n        _head : function(args) {\r\n            //get resource metadata .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n        },\r\n        _get : function(args) {\r\n            //get resource ,one or list .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, null if list\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            return Xhr.get(this.getBaseUrl(args),args);\r\n        },\r\n        _post  : function(args,verb) {\r\n            //create or move resource .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            //verb : the verb ,ex: copy,touch,trash,untrash,watch\r\n            var url = this.getBaseUrl(args);\r\n            if (verb) {\r\n                url = url + \"/\" + verb;\r\n            }\r\n            return Xhr.post(url, args);\r\n        },\r\n\r\n        _put  : function(args,verb) {\r\n            //update resource .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            //verb : the verb ,ex: copy,touch,trash,untrash,watch\r\n            var url = this.getBaseUrl(args);\r\n            if (verb) {\r\n                url = url + \"/\" + verb;\r\n            }\r\n            return Xhr.put(url, args);\r\n        },\r\n\r\n        _delete : function(args) {\r\n            //delete resource . \r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}         \r\n\r\n            // HTTP request : DELETE http://center.utilhub.com/registry/v1/apps/{appid}\r\n            var url = this.getBaseUrl(args);\r\n            return Xhr.del(url);\r\n        },\r\n\r\n        _patch : function(args){\r\n            //update resource metadata. \r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            var url = this.getBaseUrl(args);\r\n            return Xhr.patch(url, args);\r\n        },\r\n        query: function(params) {\r\n            \r\n            return this._post(params);\r\n        },\r\n\r\n        retrieve: function(params) {\r\n            return this._get(params);\r\n        },\r\n\r\n        create: function(params) {\r\n            return this._post(params);\r\n        },\r\n\r\n        update: function(params) {\r\n            return this._put(params);\r\n        },\r\n\r\n        delete: function(params) {\r\n            // HTTP request : DELETE http://center.utilhub.com/registry/v1/apps/{appid}\r\n            return this._delete(params);\r\n        },\r\n\r\n        patch: function(params) {\r\n           // HTTP request : PATCH http://center.utilhub.com/registry/v1/apps/{appid}\r\n            return this._patch(params);\r\n        },\r\n        init: function(params) {\r\n            mixin(this,params);\r\n //           this._xhr = XHRx();\r\n       }\r\n\r\n\r\n    });\r\n\r\n    function langx() {\r\n        return langx;\r\n    }\r\n\r\n    mixin(langx, {\r\n        after: aspect(\"after\"),\r\n\r\n        allKeys: allKeys,\r\n\r\n        around: aspect(\"around\"),\r\n\r\n        ArrayStore : ArrayStore,\r\n\r\n        async : async,\r\n        \r\n        before: aspect(\"before\"),\r\n\r\n        camelCase: function(str) {\r\n            return str.replace(/-([\\da-z])/g, function(a) {\r\n                return a.toUpperCase().replace('-', '');\r\n            });\r\n        },\r\n\r\n        clone: clone,\r\n\r\n        compact: compact,\r\n\r\n        createEvent : createEvent,\r\n\r\n        dasherize: dasherize,\r\n\r\n        debounce: debounce,\r\n\r\n        defaults : createAssigner(allKeys, true),\r\n\r\n        delegate: delegate,\r\n\r\n        Deferred: Deferred,\r\n\r\n        Evented: Evented,\r\n\r\n        defer: defer,\r\n\r\n        deserializeValue: deserializeValue,\r\n\r\n        each: each,\r\n\r\n        first : function(items,n) {\r\n            if (n) {\r\n                return items.slice(0,n);\r\n            } else {\r\n                return items[0];\r\n            }\r\n        },\r\n\r\n        flatten: flatten,\r\n\r\n        funcArg: funcArg,\r\n\r\n        getQueryParams: getQueryParams,\r\n\r\n        has: has,\r\n\r\n        inArray: inArray,\r\n\r\n        isArray: isArray,\r\n\r\n        isArrayLike: isArrayLike,\r\n\r\n        isBoolean: isBoolean,\r\n\r\n        isDefined: function(v) {\r\n            return v !== undefined;\r\n        },\r\n\r\n        isDocument: isDocument,\r\n\r\n        isEmptyObject: isEmptyObject,\r\n\r\n        isEqual: isEqual,\r\n\r\n        isFunction: isFunction,\r\n\r\n        isHtmlNode: isHtmlNode,\r\n\r\n        isMatch: isMatch,\r\n\r\n        isNumber: isNumber,\r\n\r\n        isObject: isObject,\r\n\r\n        isPlainObject: isPlainObject,\r\n\r\n        isString: isString,\r\n\r\n        isSameOrigin: isSameOrigin,\r\n\r\n        isWindow: isWindow,\r\n\r\n        keys: keys,\r\n\r\n        klass: function(props, parent,mixins, options) {\r\n            return createClass(props, parent, mixins,options);\r\n        },\r\n\r\n        lowerFirst: function(str) {\r\n            return str.charAt(0).toLowerCase() + str.slice(1);\r\n        },\r\n\r\n        makeArray: makeArray,\r\n\r\n        map: map,\r\n\r\n        mixin: mixin,\r\n\r\n        noop : noop,\r\n\r\n        proxy: proxy,\r\n\r\n        removeItem: removeItem,\r\n\r\n        Restful: Restful,\r\n\r\n        result : result,\r\n        \r\n        returnTrue: function() {\r\n            return true;\r\n        },\r\n\r\n        returnFalse: function() {\r\n            return false;\r\n        },\r\n\r\n        safeMixin: safeMixin,\r\n\r\n        serializeValue: function(value) {\r\n            return JSON.stringify(value)\r\n        },\r\n\r\n        Stateful: Stateful,\r\n\r\n        substitute: substitute,\r\n\r\n        toPixel: toPixel,\r\n\r\n        trim: trim,\r\n\r\n        type: type,\r\n\r\n        uid: uid,\r\n\r\n        uniq: uniq,\r\n\r\n        uniqueId: uniqueId,\r\n\r\n        upperFirst: function(str) {\r\n            return str.charAt(0).toUpperCase() + str.slice(1);\r\n        },\r\n\r\n        URL: typeof window !== \"undefined\" ? window.URL || window.webkitURL : null,\r\n\r\n        values: values,\r\n\r\n        Xhr: Xhr\r\n\r\n    });\r\n\r\n    return skylark.langx = langx;\r\n});\ndefine('skylark-utils/skylark',[\"skylark-langx/skylark\"], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-utils-webgl/webgl',[\r\n    \"skylark-utils/skylark\"\r\n], function(skylark) {\r\n\treturn skylark.webgl = skylark.webgl || {};\r\n});\ndefine('skylark-utils-webgl/primitives/three',[],function() {\n\t'use strict';\n\n\t// Polyfills\n\n\tif ( Number.EPSILON === undefined ) {\n\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\n\n\t}\n\n\tif ( Number.isInteger === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n\t\tNumber.isInteger = function ( value ) {\n\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\n\n\t\t};\n\n\t}\n\n\t//\n\n\tif ( Math.sign === undefined ) {\n\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n\t\tMath.sign = function ( x ) {\n\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\n\n\t\t};\n\n\t}\n\n\tif ( 'name' in Function.prototype === false ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n\t\tObject.defineProperty( Function.prototype, 'name', {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\tif ( Object.assign === undefined ) {\n\n\t\t// Missing in IE\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n\t\t( function () {\n\n\t\t\tObject.assign = function ( target ) {\n\n\t\t\t\tif ( target === undefined || target === null ) {\n\n\t\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\n\n\t\t\t\t}\n\n\t\t\t\tvar output = Object( target );\n\n\t\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\n\n\t\t\t\t\tvar source = arguments[ index ];\n\n\t\t\t\t\tif ( source !== undefined && source !== null ) {\n\n\t\t\t\t\t\tfor ( var nextKey in source ) {\n\n\t\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\n\n\t\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\n\t\t\t};\n\n\t\t} )();\n\n\t}\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\n\tfunction EventDispatcher() {}\n\n\tObject.assign( EventDispatcher.prototype, {\n\n\t\taddEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\t\tlisteners[ type ] = [];\n\n\t\t\t}\n\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\t\tlisteners[ type ].push( listener );\n\n\t\t\t}\n\n\t\t},\n\n\t\thasEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return false;\n\n\t\t\tvar listeners = this._listeners;\n\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t\t},\n\n\t\tremoveEventListener: function ( type, listener ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tvar index = listenerArray.indexOf( listener );\n\n\t\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tdispatchEvent: function ( event ) {\n\n\t\t\tif ( this._listeners === undefined ) return;\n\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[ event.type ];\n\n\t\t\tif ( listenerArray !== undefined ) {\n\n\t\t\t\tevent.target = this;\n\n\t\t\t\tvar array = listenerArray.slice( 0 );\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tvar REVISION = '96dev';\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar FrontFaceDirectionCW = 0;\n\tvar FrontFaceDirectionCCW = 1;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar Uncharted2ToneMapping = 3;\n\tvar CineonToneMapping = 4;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar SphericalReflectionMapping = 305;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar _Math = {\n\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\n\t\tgenerateUUID: ( function () {\n\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\t\tvar lut = [];\n\n\t\t\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t\t\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t\t\t}\n\n\t\t\treturn function generateUUID() {\n\n\t\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\t\tvar uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\t\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\t\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\n\t\t\t\t\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\n\n\t\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\t\treturn uuid.toUpperCase();\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclamp: function ( value, min, max ) {\n\n\t\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t\t},\n\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\t\teuclideanModulo: function ( n, m ) {\n\n\t\t\treturn ( ( n % m ) + m ) % m;\n\n\t\t},\n\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t\t},\n\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\t\tlerp: function ( x, y, t ) {\n\n\t\t\treturn ( 1 - t ) * x + t * y;\n\n\t\t},\n\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\t\tsmoothstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * ( 3 - 2 * x );\n\n\t\t},\n\n\t\tsmootherstep: function ( x, min, max ) {\n\n\t\t\tif ( x <= min ) return 0;\n\t\t\tif ( x >= max ) return 1;\n\n\t\t\tx = ( x - min ) / ( max - min );\n\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t\t},\n\n\t\t// Random integer from <low, high> interval\n\n\t\trandInt: function ( low, high ) {\n\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t\t},\n\n\t\t// Random float from <low, high> interval\n\n\t\trandFloat: function ( low, high ) {\n\n\t\t\treturn low + Math.random() * ( high - low );\n\n\t\t},\n\n\t\t// Random float from <-range/2, range/2> interval\n\n\t\trandFloatSpread: function ( range ) {\n\n\t\t\treturn range * ( 0.5 - Math.random() );\n\n\t\t},\n\n\t\tdegToRad: function ( degrees ) {\n\n\t\t\treturn degrees * _Math.DEG2RAD;\n\n\t\t},\n\n\t\tradToDeg: function ( radians ) {\n\n\t\t\treturn radians * _Math.RAD2DEG;\n\n\t\t},\n\n\t\tisPowerOfTwo: function ( value ) {\n\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t\t},\n\n\t\tceilPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t\t},\n\n\t\tfloorPowerOfTwo: function ( value ) {\n\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author egraether / http://egraether.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tfunction Vector2( x, y ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\n\t}\n\n\tObject.defineProperties( Vector2.prototype, {\n\n\t\t\"width\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.x = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t\"height\": {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.y = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tisVector2: true,\n\n\t\tset: function ( x, y ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v ) {\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min = new Vector2();\n\t\t\tvar max = new Vector2();\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tmin.set( minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y;\n\n\t\t},\n\n\t\tcross: function ( v ) {\n\n\t\t\treturn this.x * v.y - this.y * v.x;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tangle: function () {\n\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\t\tvar angle = Math.atan2( this.y, this.x );\n\n\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\n\n\t\t\treturn angle;\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateAround: function ( center, angle ) {\n\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author jordi_ros / http://plattsoft.com\n\t * @author D1plo1d / http://github.com/D1plo1d\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author timknip / http://www.floorplanner.com/\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Matrix4() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\tisMatrix4: true,\n\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, 1, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new Matrix4().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyPosition: function ( m ) {\n\n\t\t\tvar te = this.elements, me = m.elements;\n\n\t\t\tte[ 12 ] = me[ 12 ];\n\t\t\tte[ 13 ] = me[ 13 ];\n\t\t\tte[ 14 ] = me[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\n\n\t\t\tthis.set(\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\textractRotation: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function extractRotation( m ) {\n\n\t\t\t\t// this method does not support reflection matrices\n\n\t\t\t\tvar te = this.elements;\n\t\t\t\tvar me = m.elements;\n\n\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\n\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\n\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\t\t\tte[ 3 ] = 0;\n\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\t\t\tte[ 7 ] = 0;\n\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\t\t\tte[ 11 ] = 0;\n\n\t\t\t\tte[ 12 ] = 0;\n\t\t\t\tte[ 13 ] = 0;\n\t\t\t\tte[ 14 ] = 0;\n\t\t\t\tte[ 15 ] = 1;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakeRotationFromEuler: function ( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\n\n\t\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - c * f;\n\t\t\t\tte[ 8 ] = d;\n\n\t\t\t\tte[ 1 ] = af + be * d;\n\t\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\t\tte[ 9 ] = - b * c;\n\n\t\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\t\tte[ 6 ] = be + af * d;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce + df * b;\n\t\t\t\tte[ 4 ] = de * b - cf;\n\t\t\t\tte[ 8 ] = a * d;\n\n\t\t\t\tte[ 1 ] = a * f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b;\n\n\t\t\t\tte[ 2 ] = cf * b - de;\n\t\t\t\tte[ 6 ] = df + ce * b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\t\tte[ 0 ] = ce - df * b;\n\t\t\t\tte[ 4 ] = - a * f;\n\t\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\t\tte[ 1 ] = cf + de * b;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\t\tte[ 2 ] = - a * d;\n\t\t\t\tte[ 6 ] = b;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = be * d - af;\n\t\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\t\tte[ 1 ] = c * f;\n\t\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\t\tte[ 2 ] = - d;\n\t\t\t\tte[ 6 ] = b * c;\n\t\t\t\tte[ 10 ] = a * c;\n\n\t\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\t\tte[ 1 ] = f;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = - b * e;\n\n\t\t\t\tte[ 2 ] = - d * e;\n\t\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\t\tte[ 0 ] = c * e;\n\t\t\t\tte[ 4 ] = - f;\n\t\t\t\tte[ 8 ] = d * e;\n\n\t\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\t\tte[ 5 ] = a * e;\n\t\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\t\tte[ 6 ] = b * e;\n\t\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t\t}\n\n\t\t\t// bottom row\n\t\t\tte[ 3 ] = 0;\n\t\t\tte[ 7 ] = 0;\n\t\t\tte[ 11 ] = 0;\n\n\t\t\t// last column\n\t\t\tte[ 12 ] = 0;\n\t\t\tte[ 13 ] = 0;\n\t\t\tte[ 14 ] = 0;\n\t\t\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationFromQuaternion: function () {\n\n\t\t\tvar zero = new Vector3( 0, 0, 0 );\n\t\t\tvar one = new Vector3( 1, 1, 1 );\n\n\t\t\treturn function makeRotationFromQuaternion( q ) {\n\n\t\t\t\treturn this.compose( zero, q, one );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar x = new Vector3();\n\t\t\tvar y = new Vector3();\n\t\t\tvar z = new Vector3();\n\n\t\t\treturn function lookAt( eye, target, up ) {\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tz.subVectors( eye, target );\n\n\t\t\t\tif ( z.lengthSq() === 0 ) {\n\n\t\t\t\t\t// eye and target are in the same position\n\n\t\t\t\t\tz.z = 1;\n\n\t\t\t\t}\n\n\t\t\t\tz.normalize();\n\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t\tif ( x.lengthSq() === 0 ) {\n\n\t\t\t\t\t// up and z are parallel\n\n\t\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t\t\tz.x += 0.0001;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz.z += 0.0001;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tz.normalize();\n\t\t\t\t\tx.crossVectors( up, z );\n\n\t\t\t\t}\n\n\t\t\t\tx.normalize();\n\t\t\t\ty.crossVectors( z, x );\n\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m, n ) {\n\n\t\t\tif ( n !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\t\tv1.applyMatrix4( this );\n\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn attribute;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t\t//TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn (\n\t\t\t\tn41 * (\n\t\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t\t - n13 * n24 * n32\n\t\t\t\t\t - n14 * n22 * n33\n\t\t\t\t\t + n12 * n24 * n33\n\t\t\t\t\t + n13 * n22 * n34\n\t\t\t\t\t - n12 * n23 * n34\n\t\t\t\t) +\n\t\t\t\tn42 * (\n\t\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t\t - n11 * n24 * n33\n\t\t\t\t\t + n14 * n21 * n33\n\t\t\t\t\t - n13 * n21 * n34\n\t\t\t\t\t + n13 * n24 * n31\n\t\t\t\t\t - n14 * n23 * n31\n\t\t\t\t) +\n\t\t\t\tn43 * (\n\t\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t\t - n11 * n22 * n34\n\t\t\t\t\t - n14 * n21 * n32\n\t\t\t\t\t + n12 * n21 * n34\n\t\t\t\t\t + n14 * n22 * n31\n\t\t\t\t\t - n12 * n24 * n31\n\t\t\t\t) +\n\t\t\t\tn44 * (\n\t\t\t\t\t- n13 * n22 * n31\n\t\t\t\t\t - n11 * n23 * n32\n\t\t\t\t\t + n11 * n22 * n33\n\t\t\t\t\t + n13 * n21 * n32\n\t\t\t\t\t - n12 * n21 * n33\n\t\t\t\t\t + n12 * n23 * n31\n\t\t\t\t)\n\n\t\t\t);\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPosition: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 12 ] = v.x;\n\t\t\tte[ 13 ] = v.y;\n\t\t\tte[ 14 ] = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\n\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\tme = m.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\n\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 4 ] = t12 * detInv;\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\t\tte[ 8 ] = t13 * detInv;\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\t\tte[ 12 ] = t14 * detInv;\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tscale: function ( v ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x, y = v.y, z = v.z;\n\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxScaleOnAxis: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t\t},\n\n\t\tmakeTranslation: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationX: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, 0,\n\t\t\t\t0, c, - s, 0,\n\t\t\t\t0, s, c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationY: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\t c, 0, s, 0,\n\t\t\t\t 0, 1, 0, 0,\n\t\t\t\t- s, 0, c, 0,\n\t\t\t\t 0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationZ: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\t\tthis.set(\n\n\t\t\t\tc, - s, 0, 0,\n\t\t\t\ts, c, 0, 0,\n\t\t\t\t0, 0, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeRotationAxis: function ( axis, angle ) {\n\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\t\tvar c = Math.cos( angle );\n\t\t\tvar s = Math.sin( angle );\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\n\t\t\tvar tx = t * x, ty = t * y;\n\n\t\t\tthis.set(\n\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\t return this;\n\n\t\t},\n\n\t\tmakeScale: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\tx, 0, 0, 0,\n\t\t\t\t0, y, 0, 0,\n\t\t\t\t0, 0, z, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeShear: function ( x, y, z ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, y, z, 0,\n\t\t\t\tx, 1, z, 0,\n\t\t\t\tx, y, 1, 0,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcompose: function ( position, quaternion, scale ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\t        te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\t        te[ 1 ] = ( xy + wz ) * sx;\n\t\t        te[ 2 ] = ( xz - wy ) * sx;\n\t\t        te[ 3 ] = 0;\n\n\t\t        te[ 4 ] = ( xy - wz ) * sy;\n\t\t        te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\t        te[ 6 ] = ( yz + wx ) * sy;\n\t\t        te[ 7 ] = 0;\n\n\t\t        te[ 8 ] = ( xz + wy ) * sz;\n\t\t        te[ 9 ] = ( yz - wx ) * sz;\n\t\t        te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\t        te[ 11 ] = 0;\n\n\t\t        te[ 12 ] = position.x;\n\t\t        te[ 13 ] = position.y;\n\t\t        te[ 14 ] = position.z;\n\t\t        te[ 15 ] = 1;\n\n\t\t        return this;\n\n\t\t},\n\n\t\tdecompose: function () {\n\n\t\t\tvar vector = new Vector3();\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function decompose( position, quaternion, scale ) {\n\n\t\t\t\tvar te = this.elements;\n\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t\t\t// if determine is negative, we need to invert one scale\n\t\t\t\tvar det = this.determinant();\n\t\t\t\tif ( det < 0 ) sx = - sx;\n\n\t\t\t\tposition.x = te[ 12 ];\n\t\t\t\tposition.y = te[ 13 ];\n\t\t\t\tposition.z = te[ 14 ];\n\n\t\t\t\t// scale the rotation part\n\t\t\t\tmatrix.copy( this );\n\n\t\t\t\tvar invSX = 1 / sx;\n\t\t\t\tvar invSY = 1 / sy;\n\t\t\t\tvar invSZ = 1 / sz;\n\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\n\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\n\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\n\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\t\tscale.x = sx;\n\t\t\t\tscale.y = sy;\n\t\t\t\tscale.z = sz;\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tif ( far === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / ( right - left );\n\t\t\tvar y = 2 * near / ( top - bottom );\n\n\t\t\tvar a = ( right + left ) / ( right - left );\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\n\t\t\tvar c = - ( far + near ) / ( far - near );\n\t\t\tvar d = - 2 * far * near / ( far - near );\n\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / ( right - left );\n\t\t\tvar h = 1.0 / ( top - bottom );\n\t\t\tvar p = 1.0 / ( far - near );\n\n\t\t\tvar x = ( right + left ) * w;\n\t\t\tvar y = ( top + bottom ) * h;\n\t\t\tvar z = ( far + near ) * p;\n\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Quaternion( x, y, z, w ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Quaternion, {\n\n\t\tslerp: function ( qa, qb, qm, t ) {\n\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t\t},\n\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\t\tvar s = 1 - t,\n\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t\t// Normalize in case we just did a lerp:\n\t\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tdst[ dstOffset ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Quaternion.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tw: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._w;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._w = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Quaternion.prototype, {\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t\t},\n\n\t\tcopy: function ( quaternion ) {\n\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromEuler: function ( euler, update ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\n\t\t\tvar c1 = cos( x / 2 );\n\t\t\tvar c2 = cos( y / 2 );\n\t\t\tvar c3 = cos( z / 2 );\n\n\t\t\tvar s1 = sin( x / 2 );\n\t\t\tvar s2 = sin( y / 2 );\n\t\t\tvar s3 = sin( z / 2 );\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t\t}\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos( halfAngle );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\t\ttrace = m11 + m22 + m33,\n\t\t\t\ts;\n\n\t\t\tif ( trace > 0 ) {\n\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\t\tthis._x = 0.25 * s;\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t\t} else if ( m22 > m33 ) {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\t\tthis._y = 0.25 * s;\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t\t} else {\n\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\t\tthis._z = 0.25 * s;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromUnitVectors: function () {\n\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar r;\n\n\t\t\tvar EPS = 0.000001;\n\n\t\t\treturn function setFromUnitVectors( vFrom, vTo ) {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\n\n\t\t\t\tif ( r < EPS ) {\n\n\t\t\t\t\tr = 0;\n\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\n\n\t\t\t\t}\n\n\t\t\t\tthis._x = v1.x;\n\t\t\t\tthis._y = v1.y;\n\t\t\t\tthis._z = v1.z;\n\t\t\t\tthis._w = r;\n\n\t\t\t\treturn this.normalize();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tangleTo: function ( q ) {\n\n\t\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t\t},\n\n\t\trotateTowards: function ( q, step ) {\n\n\t\t\tvar angle = this.angleTo( q );\n\n\t\t\tif ( angle === 0 ) return this;\n\n\t\t\tvar t = Math.min( 1, step / angle );\n\n\t\t\tthis.slerp( q, t );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tinverse: function () {\n\n\t\t\t// quaternion is assumed to have unit length\n\n\t\t\treturn this.conjugate();\n\n\t\t},\n\n\t\tconjugate: function () {\n\n\t\t\tthis._x *= - 1;\n\t\t\tthis._y *= - 1;\n\t\t\tthis._z *= - 1;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\tvar l = this.length();\n\n\t\t\tif ( l === 0 ) {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\n\t\t\t} else {\n\n\t\t\t\tl = 1 / l;\n\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\n\t\t\t}\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( q, p ) {\n\n\t\t\tif ( p !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions( this, q );\n\n\t\t},\n\n\t\tpremultiply: function ( q ) {\n\n\t\t\treturn this.multiplyQuaternions( q, this );\n\n\t\t},\n\n\t\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tslerp: function ( qb, t ) {\n\n\t\t\tif ( t === 0 ) return this;\n\t\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\t\tthis._w = - qb._w;\n\t\t\t\tthis._x = - qb._x;\n\t\t\t\tthis._y = - qb._y;\n\t\t\t\tthis._z = - qb._z;\n\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t\t} else {\n\n\t\t\t\tthis.copy( qb );\n\n\t\t\t}\n\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\t\treturn this.normalize();\n\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( quaternion ) {\n\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis._x = array[ offset ];\n\t\t\tthis._y = array[ offset + 1 ];\n\t\t\tthis._z = array[ offset + 2 ];\n\t\t\tthis._w = array[ offset + 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector3( x, y, z ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\n\t}\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tisVector3: true,\n\n\t\tset: function ( x, y, z ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyEuler: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function applyEuler( euler ) {\n\n\t\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyAxisAngle: function () {\n\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix3: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t\t// calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t\t// calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tproject: function ( camera ) {\n\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t\t},\n\n\t\tunproject: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function unproject( camera ) {\n\n\t\t\t\treturn this.applyMatrix4( matrix.getInverse( camera.projectionMatrix ) ).applyMatrix4( camera.matrixWorld );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttransformDirection: function ( m ) {\n\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\n\t\t\tvar x = this.x, y = this.y, z = this.z;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\t\treturn this.normalize();\n\n\t\t},\n\n\t\tdivide: function ( v ) {\n\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min = new Vector3();\n\t\t\tvar max = new Vector3();\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t\t},\n\n\t\t// TODO lengthSquared?\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tcross: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\t\treturn this.crossVectors( v, w );\n\n\t\t\t}\n\n\t\t\treturn this.crossVectors( this, v );\n\n\t\t},\n\n\t\tcrossVectors: function ( a, b ) {\n\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tprojectOnVector: function ( vector ) {\n\n\t\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n\t\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n\t\t},\n\n\t\tprojectOnPlane: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\t\treturn this.sub( v1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\treflect: function () {\n\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function reflect( normal ) {\n\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tangleTo: function ( v ) {\n\n\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t\t// clamp, to handle numerical problems\n\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t\t},\n\n\t\tdistanceTo: function ( v ) {\n\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t\t},\n\n\t\tdistanceToSquared: function ( v ) {\n\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t\t},\n\n\t\tmanhattanDistanceTo: function ( v ) {\n\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t\t},\n\n\t\tsetFromSpherical: function ( s ) {\n\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t\t},\n\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\t\tthis.y = Math.cos( phi ) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCylindrical: function ( c ) {\n\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t\t},\n\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\t\tthis.x = radius * Math.sin( theta );\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos( theta );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixPosition: function ( m ) {\n\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 12 ];\n\t\t\tthis.y = e[ 13 ];\n\t\t\tthis.z = e[ 14 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixScale: function ( m ) {\n\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t * @author tschw\n\t */\n\n\tfunction Matrix3() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tisMatrix3: true,\n\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tidentity: function () {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0,\n\t\t\t\t0, 1, 0,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().fromArray( this.elements );\n\n\t\t},\n\n\t\tcopy: function ( m ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix4: function ( m ) {\n\n\t\t\tvar me = m.elements;\n\n\t\t\tthis.set(\n\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t\t);\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyToBufferAttribute: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function applyToBufferAttribute( attribute ) {\n\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tv1.x = attribute.getX( i );\n\t\t\t\t\tv1.y = attribute.getY( i );\n\t\t\t\t\tv1.z = attribute.getZ( i );\n\n\t\t\t\t\tv1.applyMatrix3( this );\n\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\n\n\t\t\t\t}\n\n\t\t\t\treturn attribute;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tmultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( this, m );\n\n\t\t},\n\n\t\tpremultiply: function ( m ) {\n\n\t\t\treturn this.multiplyMatrices( m, this );\n\n\t\t},\n\n\t\tmultiplyMatrices: function ( a, b ) {\n\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdeterminant: function () {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t\t},\n\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\n\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\n\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\n\n\t\t\t}\n\n\t\t\tvar me = matrix.elements,\n\t\t\t\tte = this.elements,\n\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\n\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\t\tif ( det === 0 ) {\n\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n\t\t\t\tif ( throwOnDegenerate === true ) {\n\n\t\t\t\t\tthrow new Error( msg );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( msg );\n\n\t\t\t\t}\n\n\t\t\t\treturn this.identity();\n\n\t\t\t}\n\n\t\t\tvar detInv = 1 / det;\n\n\t\t\tte[ 0 ] = t11 * detInv;\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\t\tte[ 3 ] = t12 * detInv;\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\t\tte[ 6 ] = t13 * detInv;\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranspose: function () {\n\n\t\t\tvar tmp, m = this.elements;\n\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetNormalMatrix: function ( matrix4 ) {\n\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\n\n\t\t},\n\n\t\ttransposeIntoArray: function ( r ) {\n\n\t\t\tvar m = this.elements;\n\n\t\t\tr[ 0 ] = m[ 0 ];\n\t\t\tr[ 1 ] = m[ 3 ];\n\t\t\tr[ 2 ] = m[ 6 ];\n\t\t\tr[ 3 ] = m[ 1 ];\n\t\t\tr[ 4 ] = m[ 4 ];\n\t\t\tr[ 5 ] = m[ 7 ];\n\t\t\tr[ 6 ] = m[ 2 ];\n\t\t\tr[ 7 ] = m[ 5 ];\n\t\t\tr[ 8 ] = m[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\t\tvar c = Math.cos( rotation );\n\t\t\tvar s = Math.sin( rotation );\n\n\t\t\tthis.set(\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t\t0, 0, 1\n\t\t\t);\n\n\t\t},\n\n\t\tscale: function ( sx, sy ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotate: function ( theta ) {\n\n\t\t\tvar c = Math.cos( theta );\n\t\t\tvar s = Math.sin( theta );\n\n\t\t\tvar te = this.elements;\n\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\t\tte[ 0 ] = c * a11 + s * a21;\n\t\t\tte[ 3 ] = c * a12 + s * a22;\n\t\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( tx, ty ) {\n\n\t\t\tvar te = this.elements;\n\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( matrix ) {\n\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\n\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tvar te = this.elements;\n\n\t\t\tarray[ offset ] = te[ 0 ];\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\t\treturn array;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar ImageUtils = {\n\n\t\tgetDataURL: function ( image ) {\n\n\t\t\tvar canvas;\n\n\t\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\t\tcanvas = image;\n\n\t\t\t} else {\n\n\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = image.width;\n\t\t\t\tcanvas.height = image.height;\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\n\t\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t\t} else {\n\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t */\n\n\tvar textureId = 0;\n\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t}\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Texture,\n\n\t\tisTexture: true,\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\t\tthis.mapping = source.mapping;\n\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\n\t\t\tthis.anisotropy = source.anisotropy;\n\n\t\t\tthis.format = source.format;\n\t\t\tthis.type = source.type;\n\n\t\t\tthis.offset.copy( source.offset );\n\t\t\tthis.repeat.copy( source.repeat );\n\t\t\tthis.center.copy( source.center );\n\t\t\tthis.rotation = source.rotation;\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy( source.matrix );\n\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t\t}\n\n\t\t\tvar output = {\n\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\n\t\t\t\tmapping: this.mapping,\n\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\t\trotation: this.rotation,\n\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\t\tformat: this.format,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\n\t\t\t\tflipY: this.flipY\n\n\t\t\t};\n\n\t\t\tif ( this.image !== undefined ) {\n\n\t\t\t\t// TODO: Move to THREE.Image\n\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// process single image\n\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject ) {\n\n\t\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t},\n\n\t\ttransformUv: function ( uv ) {\n\n\t\t\tif ( this.mapping !== UVMapping ) return;\n\n\t\t\tuv.applyMatrix3( this.matrix );\n\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.flipY ) {\n\n\t\t\t\tuv.y = 1 - uv.y;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author philogb / http://blog.thejit.org/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author egraether / http://egraether.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Vector4( x, y, z, w ) {\n\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t\tthis.z = z || 0;\n\t\tthis.w = ( w !== undefined ) ? w : 1;\n\n\t}\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tisVector4: true,\n\n\t\tset: function ( x, y, z, w ) {\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetX: function ( x ) {\n\n\t\t\tthis.x = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( y ) {\n\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( z ) {\n\n\t\t\tthis.z = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( w ) {\n\n\t\t\tthis.w = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponent: function ( index, value ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: this.x = value; break;\n\t\t\t\tcase 1: this.y = value; break;\n\t\t\t\tcase 2: this.z = value; break;\n\t\t\t\tcase 3: this.w = value; break;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetComponent: function ( index ) {\n\n\t\t\tswitch ( index ) {\n\n\t\t\t\tcase 0: return this.x;\n\t\t\t\tcase 1: return this.y;\n\t\t\t\tcase 2: return this.z;\n\t\t\t\tcase 3: return this.w;\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t\t},\n\n\t\tcopy: function ( v ) {\n\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tadd: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\t\treturn this.addVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScaledVector: function ( v, s ) {\n\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( v, w ) {\n\n\t\t\tif ( w !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\t\treturn this.subVectors( v, w );\n\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubScalar: function ( s ) {\n\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsubVectors: function ( a, b ) {\n\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( scalar ) {\n\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( m ) {\n\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\n\t\t\tvar e = m.elements;\n\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdivideScalar: function ( scalar ) {\n\n\t\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t\t},\n\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t\t// q is assumed to be normalized\n\n\t\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\n\n\t\t\tif ( s < 0.0001 ) {\n\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\n\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar angle, x, y, z,\t\t// variables for result\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\t\tte = m.elements,\n\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t\t}\n\n\t\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\t\tangle = Math.PI;\n\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\n\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.set( x, y, z, angle );\n\n\t\t\t\treturn this; // return 180 deg rotation\n\n\t\t\t}\n\n\t\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = ( m32 - m23 ) / s;\n\t\t\tthis.y = ( m13 - m31 ) / s;\n\t\t\tthis.z = ( m21 - m12 ) / s;\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmin: function ( v ) {\n\n\t\t\tthis.x = Math.min( this.x, v.x );\n\t\t\tthis.y = Math.min( this.y, v.y );\n\t\t\tthis.z = Math.min( this.z, v.z );\n\t\t\tthis.w = Math.min( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmax: function ( v ) {\n\n\t\t\tthis.x = Math.max( this.x, v.x );\n\t\t\tthis.y = Math.max( this.y, v.y );\n\t\t\tthis.z = Math.max( this.z, v.z );\n\t\t\tthis.w = Math.max( this.w, v.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclamp: function ( min, max ) {\n\n\t\t\t// assumes min < max, componentwise\n\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclampScalar: function () {\n\n\t\t\tvar min, max;\n\n\t\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\t\tif ( min === undefined ) {\n\n\t\t\t\t\tmin = new Vector4();\n\t\t\t\t\tmax = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\n\n\t\t\t\treturn this.clamp( min, max );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclampLength: function ( min, max ) {\n\n\t\t\tvar length = this.length();\n\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t\t},\n\n\t\tfloor: function () {\n\n\t\t\tthis.x = Math.floor( this.x );\n\t\t\tthis.y = Math.floor( this.y );\n\t\t\tthis.z = Math.floor( this.z );\n\t\t\tthis.w = Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tceil: function () {\n\n\t\t\tthis.x = Math.ceil( this.x );\n\t\t\tthis.y = Math.ceil( this.y );\n\t\t\tthis.z = Math.ceil( this.z );\n\t\t\tthis.w = Math.ceil( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tround: function () {\n\n\t\t\tthis.x = Math.round( this.x );\n\t\t\tthis.y = Math.round( this.y );\n\t\t\tthis.z = Math.round( this.z );\n\t\t\tthis.w = Math.round( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\troundToZero: function () {\n\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.x = - this.x;\n\t\t\tthis.y = - this.y;\n\t\t\tthis.z = - this.z;\n\t\t\tthis.w = - this.w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdot: function ( v ) {\n\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t\t},\n\n\t\tlengthSq: function () {\n\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t\t},\n\n\t\tlength: function () {\n\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t\t},\n\n\t\tmanhattanLength: function () {\n\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\treturn this.divideScalar( this.length() || 1 );\n\n\t\t},\n\n\t\tsetLength: function ( length ) {\n\n\t\t\treturn this.normalize().multiplyScalar( length );\n\n\t\t},\n\n\t\tlerp: function ( v, alpha ) {\n\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t\t},\n\n\t\tequals: function ( v ) {\n\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.x = array[ offset ];\n\t\t\tthis.y = array[ offset + 1 ];\n\t\t\tthis.z = array[ offset + 2 ];\n\t\t\tthis.w = array[ offset + 3 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.x;\n\t\t\tarray[ offset + 1 ] = this.y;\n\t\t\tarray[ offset + 2 ] = this.z;\n\t\t\tarray[ offset + 3 ] = this.w;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX( index );\n\t\t\tthis.y = attribute.getY( index );\n\t\t\tthis.z = attribute.getZ( index );\n\t\t\tthis.w = attribute.getW( index );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author szimek / https://github.com/szimek/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Marius Kintel / https://github.com/kintel\n\t */\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\tfunction WebGLRenderTarget( width, height, options ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\toptions = options || {};\n\n\t\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\n\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : true;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: WebGLRenderTarget,\n\n\t\tisWebGLRenderTarget: true,\n\n\t\tsetSize: function ( width, height ) {\n\n\t\t\tif ( this.width !== width || this.height !== height ) {\n\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\n\t\t\t\tthis.dispose();\n\n\t\t\t}\n\n\t\t\tthis.viewport.set( 0, 0, width, height );\n\t\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\tthis.viewport.copy( source.viewport );\n\n\t\t\tthis.texture = source.texture.clone();\n\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com\n\t */\n\n\tfunction WebGLRenderTargetCube( width, height, options ) {\n\n\t\tWebGLRenderTarget.call( this, width, height, options );\n\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\t\tthis.activeMipMapLevel = 0;\n\n\t}\n\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n\tDataTexture.prototype = Object.create( Texture.prototype );\n\tDataTexture.prototype.constructor = DataTexture;\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box3.prototype, {\n\n\t\tisBox3: true,\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromArray: function ( array ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tvar x = array[ i ];\n\t\t\t\tvar y = array[ i + 1 ];\n\t\t\t\tvar z = array[ i + 2 ];\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromBufferAttribute: function ( attribute ) {\n\n\t\t\tvar minX = + Infinity;\n\t\t\tvar minY = + Infinity;\n\t\t\tvar minZ = + Infinity;\n\n\t\t\tvar maxX = - Infinity;\n\t\t\tvar maxY = - Infinity;\n\t\t\tvar maxZ = - Infinity;\n\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\tvar x = attribute.getX( i );\n\t\t\t\tvar y = attribute.getY( i );\n\t\t\t\tvar z = attribute.getZ( i );\n\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\t\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t\t}\n\n\t\t\tthis.min.set( minX, minY, minZ );\n\t\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\treturn this.expandByObject( object );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByObject: function () {\n\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\n\t\t\tvar scope, i, l;\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\tfunction traverse( node ) {\n\n\t\t\t\tvar geometry = node.geometry;\n\n\t\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tvar attribute = geometry.attributes.position;\n\n\t\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn function expandByObject( object ) {\n\n\t\t\t\tscope = this;\n\n\t\t\t\tobject.updateMatrixWorld( true );\n\n\t\t\t\tobject.traverse( traverse );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t\t},\n\n\t\tintersectsSphere: ( function () {\n\n\t\t\tvar closestPoint = new Vector3();\n\n\t\t\treturn function intersectsSphere( sphere ) {\n\n\t\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\n\n\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\t\tvar min, max;\n\n\t\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t\t} else {\n\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t\t}\n\n\t\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t\t} else {\n\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t\t}\n\n\t\t\treturn ( min <= plane.constant && max >= plane.constant );\n\n\t\t},\n\n\t\tintersectsTriangle: ( function () {\n\n\t\t\t// triangle centered vertices\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\t// triangle edge vectors\n\t\t\tvar f0 = new Vector3();\n\t\t\tvar f1 = new Vector3();\n\t\t\tvar f2 = new Vector3();\n\n\t\t\tvar testAxis = new Vector3();\n\n\t\t\tvar center = new Vector3();\n\t\t\tvar extents = new Vector3();\n\n\t\t\tvar triangleNormal = new Vector3();\n\n\t\t\tfunction satForAxes( axes ) {\n\n\t\t\t\tvar i, j;\n\n\t\t\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t\t\t\ttestAxis.fromArray( axes, i );\n\t\t\t\t\t// project the aabb onto the seperating axis\n\t\t\t\t\tvar r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );\n\t\t\t\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\t\t\t\tvar p0 = v0.dot( testAxis );\n\t\t\t\t\tvar p1 = v1.dot( testAxis );\n\t\t\t\t\tvar p2 = v2.dot( testAxis );\n\t\t\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\t\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn function intersectsTriangle( triangle ) {\n\n\t\t\t\tif ( this.isEmpty() ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\t// compute box center and extents\n\t\t\t\tthis.getCenter( center );\n\t\t\t\textents.subVectors( this.max, center );\n\n\t\t\t\t// translate triangle to aabb origin\n\t\t\t\tv0.subVectors( triangle.a, center );\n\t\t\t\tv1.subVectors( triangle.b, center );\n\t\t\t\tv2.subVectors( triangle.c, center );\n\n\t\t\t\t// compute edge vectors for triangle\n\t\t\t\tf0.subVectors( v1, v0 );\n\t\t\t\tf1.subVectors( v2, v1 );\n\t\t\t\tf2.subVectors( v0, v2 );\n\n\t\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\t\t\tvar axes = [\n\t\t\t\t\t0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,\n\t\t\t\t\tf0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,\n\t\t\t\t\t- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0\n\t\t\t\t];\n\t\t\t\tif ( ! satForAxes( axes ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\t// test 3 face normals from the aabb\n\t\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\t\t\tif ( ! satForAxes( axes ) ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\t// finally testing the face normal of the triangle\n\t\t\t\t// use already existing triangle edge vectors here\n\t\t\t\ttriangleNormal.crossVectors( f0, f1 );\n\t\t\t\taxes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];\n\t\t\t\treturn satForAxes( axes );\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetBoundingSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function getBoundingSphere( target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Box3: .getBoundingSphere() target is now required' );\n\t\t\t\t\ttarget = new Sphere();\n\n\t\t\t\t}\n\n\t\t\t\tthis.getCenter( target.center );\n\n\t\t\t\ttarget.radius = this.getSize( v1 ).length() * 0.5;\n\n\t\t\t\treturn target;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar points = [\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3(),\n\t\t\t\tnew Vector3()\n\t\t\t];\n\n\t\t\treturn function applyMatrix4( matrix ) {\n\n\t\t\t\t// transform of empty box is an empty box.\n\t\t\t\tif ( this.isEmpty() ) return this;\n\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\t\t\tthis.setFromPoints( points );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Sphere( center, radius ) {\n\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\n\n\t}\n\n\tObject.assign( Sphere.prototype, {\n\n\t\tset: function ( center, radius ) {\n\n\t\t\tthis.center.copy( center );\n\t\t\tthis.radius = radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function () {\n\n\t\t\tvar box = new Box3();\n\n\t\t\treturn function setFromPoints( points, optionalCenter ) {\n\n\t\t\t\tvar center = this.center;\n\n\t\t\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\t\t\tcenter.copy( optionalCenter );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbox.setFromPoints( points ).getCenter( center );\n\n\t\t\t\t}\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( sphere ) {\n\n\t\t\tthis.center.copy( sphere.center );\n\t\t\tthis.radius = sphere.radius;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tempty: function () {\n\n\t\t\treturn ( this.radius <= 0 );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsSphere( this );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.copy( point );\n\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t\ttarget.sub( this.center ).normalize();\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t\t}\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetBoundingBox: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\n\t\t\t\ttarget = new Box3();\n\n\t\t\t}\n\n\t\t\ttarget.set( this.center, this.center );\n\t\t\ttarget.expandByScalar( this.radius );\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.center.applyMatrix4( matrix );\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.center.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( sphere ) {\n\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Plane( normal, constant ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\n\n\t}\n\n\tObject.assign( Plane.prototype, {\n\n\t\tset: function ( normal, constant ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetComponents: function ( x, y, z, w ) {\n\n\t\t\tthis.normal.set( x, y, z );\n\t\t\tthis.constant = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\n\n\t\t\tthis.normal.copy( normal );\n\t\t\tthis.constant = - point.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCoplanarPoints: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function setFromCoplanarPoints( a, b, c ) {\n\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\n\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( plane ) {\n\n\t\t\tthis.normal.copy( plane.normal );\n\t\t\tthis.constant = plane.constant;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalize: function () {\n\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\t\tthis.constant *= inverseNormalLength;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnegate: function () {\n\n\t\t\tthis.constant *= - 1;\n\t\t\tthis.normal.negate();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn this.normal.dot( point ) + this.constant;\n\n\t\t},\n\n\t\tdistanceToSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t\t},\n\n\t\tprojectPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t\t},\n\n\t\tintersectLine: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectLine( line, target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\n\t\t\t\t\ttarget = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tvar direction = line.delta( v1 );\n\n\t\t\t\tvar denominator = this.normal.dot( direction );\n\n\t\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t\t// line is coplanar, return origin\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\t\t\treturn target.copy( line.start );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\t\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\t\t\treturn undefined;\n\n\t\t\t\t}\n\n\t\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsLine: function ( line ) {\n\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\t\tvar startSign = this.distanceToPoint( line.start );\n\t\t\tvar endSign = this.distanceToPoint( line.end );\n\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsPlane( this );\n\n\t\t},\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn sphere.intersectsPlane( this );\n\n\t\t},\n\n\t\tcoplanarPoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t\t},\n\n\t\tapplyMatrix4: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar m1 = new Matrix3();\n\n\t\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\n\n\t\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\n\n\t\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.constant -= offset.dot( this.normal );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( plane ) {\n\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tthis.planes = [\n\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t\t];\n\n\t}\n\n\tObject.assign( Frustum.prototype, {\n\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tplanes[ 0 ].copy( p0 );\n\t\t\tplanes[ 1 ].copy( p1 );\n\t\t\tplanes[ 2 ].copy( p2 );\n\t\t\tplanes[ 3 ].copy( p3 );\n\t\t\tplanes[ 4 ].copy( p4 );\n\t\t\tplanes[ 5 ].copy( p5 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( frustum ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromMatrix: function ( m ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tintersectsObject: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsObject( object ) {\n\n\t\t\t\tvar geometry = object.geometry;\n\n\t\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere )\n\t\t\t\t\t.applyMatrix4( object.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSprite: function () {\n\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function intersectsSprite( sprite ) {\n\n\t\t\t\tsphere.center.set( 0, 0, 0 );\n\t\t\t\tsphere.radius = 0.7071067811865476;\n\t\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = - sphere.radius;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t},\n\n\t\tintersectsBox: function () {\n\n\t\t\tvar p = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\tvar planes = this.planes;\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tvar plane = planes[ i ];\n\n\t\t\t\t\t// corner at max distance\n\n\t\t\t\t\tp.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t\tp.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t\tp.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\t\tif ( plane.distanceToPoint( p ) < 0 ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t} );\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\n\n\tvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\n\n\tvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\\n\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\n\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\n\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\n\n\tvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogPosition = mvPosition.xyz;\\n#endif\\n\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying vec3 vFogPosition;\\n#endif\\n\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\tfloat fogDepth = length( vFogPosition );\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying vec3 vFogPosition;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar lights_pars_begin = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n#endif\\n\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#ifndef STANDARD\\n\\t\\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#endif\\n#endif\\n\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n#endif\\n\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\\n\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\\n\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\n\n\tvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\\n\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n\";\n\n\tvar normal_fragment_maps = \"#ifdef USE_NORMALMAP\\n\\t#ifdef OBJECTSPACE_NORMALMAP\\n\\t\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\t#ifdef FLIP_SIDED\\n\\t\\t\\tnormal = - normal;\\n\\t\\t#endif\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\tnormal = normalize( normalMatrix * normal );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\t#ifdef OBJECTSPACE_NORMALMAP\\n\\t\\tuniform mat3 normalMatrix;\\n\\t#else\\n\\t\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\t\\tmapN.xy *= normalScale;\\n\\t\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\treturn normalize( tsn * mapN );\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\n\n\tvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\n\n\tvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\n\n\tvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\n\";\n\n\tvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\n\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\n\n\tvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\\n\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\n\n\tvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\n\n\tvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniform Utilities\n\t */\n\n\tvar UniformsUtils = {\n\n\t\tmerge: function ( uniforms ) {\n\n\t\t\tvar merged = {};\n\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\n\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\n\n\t\t\t\tfor ( var p in tmp ) {\n\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn merged;\n\n\t\t},\n\n\t\tclone: function ( uniforms_src ) {\n\n\t\t\tvar uniforms_dst = {};\n\n\t\t\tfor ( var u in uniforms_src ) {\n\n\t\t\t\tuniforms_dst[ u ] = {};\n\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\n\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\n\n\t\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\n\t\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n\t\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n\t\t\t\t\t\tparameter_src.isTexture ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\n\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn uniforms_dst;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\n\tfunction Color( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tObject.assign( Color.prototype, {\n\n\t\tisColor: true,\n\n\t\tr: 1, g: 1, b: 1,\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetScalar: function ( scalar ) {\n\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHex: function ( hex ) {\n\n\t\t\thex = Math.floor( hex );\n\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRGB: function ( r, g, b ) {\n\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetHSL: function () {\n\n\t\t\tfunction hue2rgb( p, q, t ) {\n\n\t\t\t\tif ( t < 0 ) t += 1;\n\t\t\t\tif ( t > 1 ) t -= 1;\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\t\t\t\tif ( t < 1 / 2 ) return q;\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\t\t\t\treturn p;\n\n\t\t\t}\n\n\t\t\treturn function setHSL( h, s, l ) {\n\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\t\th = _Math.euclideanModulo( h, 1 );\n\t\t\t\ts = _Math.clamp( s, 0, 1 );\n\t\t\t\tl = _Math.clamp( l, 0, 1 );\n\n\t\t\t\tif ( s === 0 ) {\n\n\t\t\t\t\tthis.r = this.g = this.b = l;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\t\t\tvar q = ( 2 * l ) - p;\n\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetStyle: function ( style ) {\n\n\t\t\tfunction handleAlpha( string ) {\n\n\t\t\t\tif ( string === undefined ) return;\n\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar m;\n\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t\t// rgb / hsl\n\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[ 1 ];\n\t\t\t\tvar components = m[ 2 ];\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\n\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\n\n\t\t\t\t// hex color\n\n\t\t\t\tvar hex = m[ 1 ];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif ( size === 3 ) {\n\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( style && style.length > 0 ) {\n\n\t\t\t\t// color keywords\n\t\t\t\tvar hex = ColorKeywords[ style ];\n\n\t\t\t\tif ( hex !== undefined ) {\n\n\t\t\t\t\t// red\n\t\t\t\t\tthis.setHex( hex );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// unknown color\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t\t},\n\n\t\tcopy: function ( color ) {\n\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\n\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\n\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\n\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\n\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopySRGBToLinear: function () {\n\n\t\t\tfunction SRGBToLinear( c ) {\n\n\t\t\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n\t\t\t}\n\n\t\t\treturn function copySRGBToLinear( color ) {\n\n\t\t\t\tthis.r = SRGBToLinear( color.r );\n\t\t\t\tthis.g = SRGBToLinear( color.g );\n\t\t\t\tthis.b = SRGBToLinear( color.b );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcopyLinearToSRGB: function () {\n\n\t\t\tfunction LinearToSRGB( c ) {\n\n\t\t\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n\t\t\t}\n\n\t\t\treturn function copyLinearToSRGB( color ) {\n\n\t\t\t\tthis.r = LinearToSRGB( color.r );\n\t\t\t\tthis.g = LinearToSRGB( color.g );\n\t\t\t\tthis.b = LinearToSRGB( color.b );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tconvertSRGBToLinear: function () {\n\n\t\t\tthis.copySRGBToLinear( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconvertLinearToSRGB: function () {\n\n\t\t\tthis.copyLinearToSRGB( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetHex: function () {\n\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t\t},\n\n\t\tgetHexString: function () {\n\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t\t},\n\n\t\tgetHSL: function ( target ) {\n\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\n\n\t\t\t}\n\n\t\t\tvar r = this.r, g = this.g, b = this.b;\n\n\t\t\tvar max = Math.max( r, g, b );\n\t\t\tvar min = Math.min( r, g, b );\n\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = ( min + max ) / 2.0;\n\n\t\t\tif ( min === max ) {\n\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\n\t\t\t} else {\n\n\t\t\t\tvar delta = max - min;\n\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\t\tswitch ( max ) {\n\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\n\t\t\treturn target;\n\n\t\t},\n\n\t\tgetStyle: function () {\n\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t\t},\n\n\t\toffsetHSL: function () {\n\n\t\t\tvar hsl = {};\n\n\t\t\treturn function ( h, s, l ) {\n\n\t\t\t\tthis.getHSL( hsl );\n\n\t\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\n\n\t\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tadd: function ( color ) {\n\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddColors: function ( color1, color2 ) {\n\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddScalar: function ( s ) {\n\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsub: function ( color ) {\n\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiply: function ( color ) {\n\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmultiplyScalar: function ( s ) {\n\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerp: function ( color, alpha ) {\n\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tlerpHSL: function () {\n\n\t\t\tvar hslA = { h: 0, s: 0, l: 0 };\n\t\t\tvar hslB = { h: 0, s: 0, l: 0 };\n\n\t\t\treturn function lerpHSL( color, alpha ) {\n\n\t\t\t\tthis.getHSL( hslA );\n\t\t\t\tcolor.getHSL( hslB );\n\n\t\t\t\tvar h = _Math.lerp( hslA.h, hslB.h, alpha );\n\t\t\t\tvar s = _Math.lerp( hslA.s, hslB.s, alpha );\n\t\t\t\tvar l = _Math.lerp( hslA.l, hslB.l, alpha );\n\n\t\t\t\tthis.setHSL( h, s, l );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( c ) {\n\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t\t},\n\n\t\tfromArray: function ( array, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.r = array[ offset ];\n\t\t\tthis.g = array[ offset + 1 ];\n\t\t\tthis.b = array[ offset + 2 ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this.r;\n\t\t\tarray[ offset + 1 ] = this.g;\n\t\t\tarray[ offset + 2 ] = this.b;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\treturn this.getHex();\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\n\t\tcommon: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() },\n\n\t\t\talphaMap: { value: null },\n\n\t\t},\n\n\t\tspecularmap: {\n\n\t\t\tspecularMap: { value: null },\n\n\t\t},\n\n\t\tenvmap: {\n\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\treflectivity: { value: 1.0 },\n\t\t\trefractionRatio: { value: 0.98 },\n\t\t\tmaxMipLevel: { value: 0 }\n\n\t\t},\n\n\t\taomap: {\n\n\t\t\taoMap: { value: null },\n\t\t\taoMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\tlightmap: {\n\n\t\t\tlightMap: { value: null },\n\t\t\tlightMapIntensity: { value: 1 }\n\n\t\t},\n\n\t\temissivemap: {\n\n\t\t\temissiveMap: { value: null }\n\n\t\t},\n\n\t\tbumpmap: {\n\n\t\t\tbumpMap: { value: null },\n\t\t\tbumpScale: { value: 1 }\n\n\t\t},\n\n\t\tnormalmap: {\n\n\t\t\tnormalMap: { value: null },\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t\t},\n\n\t\tdisplacementmap: {\n\n\t\t\tdisplacementMap: { value: null },\n\t\t\tdisplacementScale: { value: 1 },\n\t\t\tdisplacementBias: { value: 0 }\n\n\t\t},\n\n\t\troughnessmap: {\n\n\t\t\troughnessMap: { value: null }\n\n\t\t},\n\n\t\tmetalnessmap: {\n\n\t\t\tmetalnessMap: { value: null }\n\n\t\t},\n\n\t\tgradientmap: {\n\n\t\t\tgradientMap: { value: null }\n\n\t\t},\n\n\t\tfog: {\n\n\t\t\tfogDensity: { value: 0.00025 },\n\t\t\tfogNear: { value: 1 },\n\t\t\tfogFar: { value: 2000 },\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t\t},\n\n\t\tlights: {\n\n\t\t\tambientLightColor: { value: [] },\n\n\t\t\tdirectionalLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tcolor: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tdirectionalShadowMap: { value: [] },\n\t\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\t\tspotLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdirection: {},\n\t\t\t\tdistance: {},\n\t\t\t\tconeCos: {},\n\t\t\t\tpenumbraCos: {},\n\t\t\t\tdecay: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {}\n\t\t\t} },\n\n\t\t\tspotShadowMap: { value: [] },\n\t\t\tspotShadowMatrix: { value: [] },\n\n\t\t\tpointLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\tdecay: {},\n\t\t\t\tdistance: {},\n\n\t\t\t\tshadow: {},\n\t\t\t\tshadowBias: {},\n\t\t\t\tshadowRadius: {},\n\t\t\t\tshadowMapSize: {},\n\t\t\t\tshadowCameraNear: {},\n\t\t\t\tshadowCameraFar: {}\n\t\t\t} },\n\n\t\t\tpointShadowMap: { value: [] },\n\t\t\tpointShadowMatrix: { value: [] },\n\n\t\t\themisphereLights: { value: [], properties: {\n\t\t\t\tdirection: {},\n\t\t\t\tskyColor: {},\n\t\t\t\tgroundColor: {}\n\t\t\t} },\n\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: { value: [], properties: {\n\t\t\t\tcolor: {},\n\t\t\t\tposition: {},\n\t\t\t\twidth: {},\n\t\t\t\theight: {}\n\t\t\t} }\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tsize: { value: 1.0 },\n\t\t\tscale: { value: 1.0 },\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\n\t\t\topacity: { value: 1.0 },\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\t\trotation: { value: 0.0 },\n\t\t\tmap: { value: null },\n\t\t\tuvTransform: { value: new Matrix3() }\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t */\n\n\tvar ShaderLib = {\n\n\t\tbasic: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t\t},\n\n\t\tlambert: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t\t},\n\n\t\tphong: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.specularmap,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.gradientmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\t\tshininess: { value: 30 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t\t},\n\n\t\tstandard: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.envmap,\n\t\t\t\tUniformsLib.aomap,\n\t\t\t\tUniformsLib.lightmap,\n\t\t\t\tUniformsLib.emissivemap,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\tUniformsLib.roughnessmap,\n\t\t\t\tUniformsLib.metalnessmap,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\tUniformsLib.lights,\n\t\t\t\t{\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\t\troughness: { value: 0.5 },\n\t\t\t\t\tmetalness: { value: 0.5 },\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t\t},\n\n\t\tpoints: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.points,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\n\t\t},\n\n\t\tdashed: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tscale: { value: 1 },\n\t\t\t\t\tdashSize: { value: 1 },\n\t\t\t\t\ttotalSize: { value: 2 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t\t},\n\n\t\tdepth: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t\t},\n\n\t\tnormal: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.bumpmap,\n\t\t\t\tUniformsLib.normalmap,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\n\t\t},\n\n\t\tsprite: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.sprite,\n\t\t\t\tUniformsLib.fog\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n\t\tcube: {\n\n\t\t\tuniforms: {\n\t\t\t\ttCube: { value: null },\n\t\t\t\ttFlip: { value: - 1 },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t\t},\n\n\t\tequirect: {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t\t},\n\n\t\tdistanceRGBA: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.common,\n\t\t\t\tUniformsLib.displacementmap,\n\t\t\t\t{\n\t\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t\t}\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t\t},\n\n\t\tshadow: {\n\n\t\t\tuniforms: UniformsUtils.merge( [\n\t\t\t\tUniformsLib.lights,\n\t\t\t\tUniformsLib.fog,\n\t\t\t\t{\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\t\topacity: { value: 1.0 }\n\t\t\t\t},\n\t\t\t] ),\n\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t\t}\n\n\t};\n\n\tShaderLib.physical = {\n\n\t\tuniforms: UniformsUtils.merge( [\n\t\t\tShaderLib.standard.uniforms,\n\t\t\t{\n\t\t\t\tclearCoat: { value: 0 },\n\t\t\t\tclearCoatRoughness: { value: 0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAnimation() {\n\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tif ( isAnimating === false ) return;\n\n\t\t\tanimationLoop( time, frame );\n\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tstart: function () {\n\n\t\t\t\tif ( isAnimating === true ) return;\n\t\t\t\tif ( animationLoop === null ) return;\n\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\n\n\t\t\t\tisAnimating = true;\n\n\t\t\t},\n\n\t\t\tstop: function () {\n\n\t\t\t\tisAnimating = false;\n\n\t\t\t},\n\n\t\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\t\tanimationLoop = callback;\n\n\t\t\t},\n\n\t\t\tsetContext: function ( value ) {\n\n\t\t\t\tcontext = value;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLAttributes( gl ) {\n\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer( attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n\t\t\tvar buffer = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\n\t\t\tattribute.onUploadCallback();\n\n\t\t\tvar type = gl.FLOAT;\n\n\t\t\tif ( array instanceof Float32Array ) {\n\n\t\t\t\ttype = gl.FLOAT;\n\n\t\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\t\ttype = gl.SHORT;\n\n\t\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\t\ttype = gl.INT;\n\n\t\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\t\ttype = gl.BYTE;\n\n\t\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\n\t\t}\n\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\n\t\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\t\tif ( attribute.dynamic === false ) {\n\n\t\t\t\tgl.bufferData( bufferType, array, gl.STATIC_DRAW );\n\n\t\t\t} else if ( updateRange.count === - 1 ) {\n\n\t\t\t\t// Not using update ranges\n\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t\t} else if ( updateRange.count === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction get( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\treturn buffers.get( attribute );\n\n\t\t}\n\n\t\tfunction remove( attribute ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data ) {\n\n\t\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\t\tbuffers.delete( attribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction update( attribute, bufferType ) {\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\t\tvar data = buffers.get( attribute );\n\n\t\t\tif ( data === undefined ) {\n\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\t\tdata.version = attribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Euler( x, y, z, order ) {\n\n\t\tthis._x = x || 0;\n\t\tthis._y = y || 0;\n\t\tthis._z = z || 0;\n\t\tthis._order = order || Euler.DefaultOrder;\n\n\t}\n\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\n\tEuler.DefaultOrder = 'XYZ';\n\n\tObject.defineProperties( Euler.prototype, {\n\n\t\tx: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._x;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._x = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\ty: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._y;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._y = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\tz: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._z;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._z = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t},\n\n\t\torder: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this._order;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis._order = value;\n\t\t\t\tthis.onChangeCallback();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Euler.prototype, {\n\n\t\tisEuler: true,\n\n\t\tset: function ( x, y, z, order ) {\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t\t},\n\n\t\tcopy: function ( euler ) {\n\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\n\n\t\t\tvar clamp = _Math.clamp;\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\t\torder = order || this._order;\n\n\t\t\tif ( order === 'XYZ' ) {\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'YZX' ) {\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t} else if ( order === 'XZY' ) {\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\n\n\t\t\t}\n\n\t\t\tthis._order = order;\n\n\t\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromQuaternion: function () {\n\n\t\t\tvar matrix = new Matrix4();\n\n\t\t\treturn function setFromQuaternion( q, order, update ) {\n\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\n\n\t\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromVector3: function ( v, order ) {\n\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\n\n\t\t},\n\n\t\treorder: function () {\n\n\t\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t\tvar q = new Quaternion();\n\n\t\t\treturn function reorder( newOrder ) {\n\n\t\t\t\tq.setFromEuler( this );\n\n\t\t\t\treturn this.setFromQuaternion( q, newOrder );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( euler ) {\n\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t\t},\n\n\t\tfromArray: function ( array ) {\n\n\t\t\tthis._x = array[ 0 ];\n\t\t\tthis._y = array[ 1 ];\n\t\t\tthis._z = array[ 2 ];\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\t\tthis.onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoArray: function ( array, offset ) {\n\n\t\t\tif ( array === undefined ) array = [];\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tarray[ offset ] = this._x;\n\t\t\tarray[ offset + 1 ] = this._y;\n\t\t\tarray[ offset + 2 ] = this._z;\n\t\t\tarray[ offset + 3 ] = this._order;\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\ttoVector3: function ( optionalResult ) {\n\n\t\t\tif ( optionalResult ) {\n\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t\t} else {\n\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t\t}\n\n\t\t},\n\n\t\tonChange: function ( callback ) {\n\n\t\t\tthis.onChangeCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonChangeCallback: function () {}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Layers() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tObject.assign( Layers.prototype, {\n\n\t\tset: function ( channel ) {\n\n\t\t\tthis.mask = 1 << channel | 0;\n\n\t\t},\n\n\t\tenable: function ( channel ) {\n\n\t\t\tthis.mask |= 1 << channel | 0;\n\n\t\t},\n\n\t\ttoggle: function ( channel ) {\n\n\t\t\tthis.mask ^= 1 << channel | 0;\n\n\t\t},\n\n\t\tdisable: function ( channel ) {\n\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t\t},\n\n\t\ttest: function ( layers ) {\n\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author elephantatwork / www.elephantatwork.ch\n\t */\n\n\tvar object3DId = 0;\n\n\tfunction Object3D() {\n\n\t\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation.onChange( onRotationChange );\n\t\tquaternion.onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.userData = {};\n\n\t}\n\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Object3D,\n\n\t\tisObject3D: true,\n\n\t\tonBeforeRender: function () {},\n\t\tonAfterRender: function () {},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\n\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t\t},\n\n\t\tapplyQuaternion: function ( q ) {\n\n\t\t\tthis.quaternion.premultiply( q );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\n\n\t\t\t// assumes axis is normalized\n\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t\t},\n\n\t\tsetRotationFromEuler: function ( euler ) {\n\n\t\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t\t},\n\n\t\tsetRotationFromMatrix: function ( m ) {\n\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t\t},\n\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\t// assumes q is normalized\n\n\t\t\tthis.quaternion.copy( q );\n\n\t\t},\n\n\t\trotateOnAxis: function () {\n\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar q1 = new Quaternion();\n\n\t\t\treturn function rotateOnAxis( axis, angle ) {\n\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\t\tthis.quaternion.multiply( q1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateOnWorldAxis: function () {\n\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\n\t\t\tvar q1 = new Quaternion();\n\n\t\t\treturn function rotateOnWorldAxis( axis, angle ) {\n\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\n\n\t\t\t\tthis.quaternion.premultiply( q1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateOnAxis: function () {\n\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function translateOnAxis( axis, distance ) {\n\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateX: function () {\n\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\n\n\t\t\treturn function translateX( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateY: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\n\n\t\t\treturn function translateY( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslateZ: function () {\n\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\n\n\t\t\treturn function translateZ( distance ) {\n\n\t\t\t\treturn this.translateOnAxis( v1, distance );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlocalToWorld: function ( vector ) {\n\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t\t},\n\n\t\tworldToLocal: function () {\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function worldToLocal( vector ) {\n\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\t// This method does not support objects with rotated and/or translated parent(s)\n\n\t\t\tvar m1 = new Matrix4();\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function lookAt( x, y, z ) {\n\n\t\t\t\tif ( x.isVector3 ) {\n\n\t\t\t\t\tvector.copy( x );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvector.set( x, y, z );\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.isCamera ) {\n\n\t\t\t\t\tm1.lookAt( this.position, vector, this.up );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tm1.lookAt( vector, this.position, this.up );\n\n\t\t\t\t}\n\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tadd: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( object === this ) {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tif ( ( object && object.isObject3D ) ) {\n\n\t\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\t\tobject.parent.remove( object );\n\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\n\n\t\t\t\tthis.children.push( object );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tremove: function ( object ) {\n\n\t\t\tif ( arguments.length > 1 ) {\n\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf( object );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tobject.parent = null;\n\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\n\n\t\t\t\tthis.children.splice( index, 1 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetObjectById: function ( id ) {\n\n\t\t\treturn this.getObjectByProperty( 'id', id );\n\n\t\t},\n\n\t\tgetObjectByName: function ( name ) {\n\n\t\t\treturn this.getObjectByProperty( 'name', name );\n\n\t\t},\n\n\t\tgetObjectByProperty: function ( name, value ) {\n\n\t\t\tif ( this[ name ] === value ) return this;\n\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = this.children[ i ];\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\n\n\t\t\t\tif ( object !== undefined ) {\n\n\t\t\t\t\treturn object;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t},\n\n\t\tgetWorldPosition: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t\t},\n\n\t\tgetWorldQuaternion: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar scale = new Vector3();\n\n\t\t\treturn function getWorldQuaternion( target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\n\t\t\t\t\ttarget = new Quaternion();\n\n\t\t\t\t}\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, target, scale );\n\n\t\t\t\treturn target;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldScale: function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\n\t\t\treturn function getWorldScale( target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\n\t\t\t\t\ttarget = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, target );\n\n\t\t\t\treturn target;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\traycast: function () {},\n\n\t\ttraverse: function ( callback ) {\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverse( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseVisible: function ( callback ) {\n\n\t\t\tif ( this.visible === false ) return;\n\n\t\t\tcallback( this );\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttraverseAncestors: function ( callback ) {\n\n\t\t\tvar parent = this.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tcallback( parent );\n\n\t\t\t\tparent.traverseAncestors( callback );\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrix: function () {\n\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\t\tif ( this.parent === null ) {\n\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\t\tforce = true;\n\n\t\t\t}\n\n\t\t\t// update children\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tvar output = {};\n\n\t\t\t// meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {}\n\t\t\t\t};\n\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// standard Object3D serialization\n\n\t\t\tvar object = {};\n\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\n\t\t\tif ( this.name !== '' ) object.name = this.name;\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\t\tif ( this.visible === false ) object.visible = false;\n\t\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\n\t\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t\t//\n\n\t\t\tfunction serialize( library, element ) {\n\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.material !== undefined ) {\n\n\t\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( this.children.length > 0 ) {\n\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( isRootObject ) {\n\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\n\t\t\t\tvar materials = extractFromCache( meta.materials );\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\n\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\n\t\t\t}\n\n\t\t\toutput.object = object;\n\n\t\t\treturn output;\n\n\t\t\t// extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function ( recursive ) {\n\n\t\t\treturn new this.constructor().copy( this, recursive );\n\n\t\t},\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tif ( recursive === undefined ) recursive = true;\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.up.copy( source.up );\n\n\t\t\tthis.position.copy( source.position );\n\t\t\tthis.quaternion.copy( source.quaternion );\n\t\t\tthis.scale.copy( source.scale );\n\n\t\t\tthis.matrix.copy( source.matrix );\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tif ( recursive === true ) {\n\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\t\tvar child = source.children[ i ];\n\t\t\t\t\tthis.add( child.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author WestLangley / http://github.com/WestLangley\n\t*/\n\n\tfunction Camera() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Camera,\n\n\t\tisCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetWorldDirection: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tvar e = this.matrixWorld.elements;\n\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author arose / http://github.com/arose\n\t */\n\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: OrthographicCamera,\n\n\t\tisOrthographicCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\t\tvar cx = ( this.right + this.left ) / 2;\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\n\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\n\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\n\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n\n\t}\n\n\tObject.assign( Face3.prototype, {\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.a = source.a;\n\t\t\tthis.b = source.b;\n\t\t\tthis.c = source.c;\n\n\t\t\tthis.normal.copy( source.normal );\n\t\t\tthis.color.copy( source.color );\n\n\t\t\tthis.materialIndex = source.materialIndex;\n\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author kile / http://kile.stravaganza.org/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author bhouston / http://clara.io\n\t */\n\n\tvar geometryId = 0; // Geometry uses even numbers as Id\n\n\tfunction Geometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: geometryId += 2 } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Geometry,\n\n\t\tisGeometry: true,\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\tthis.verticesNeedUpdate = true;\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj = new Object3D();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfromBufferGeometry: function ( geometry ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\n\t\t\tvar attributes = geometry.attributes;\n\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\t\tvar tempNormals = [];\n\t\t\tvar tempUVs = [];\n\t\t\tvar tempUVs2 = [];\n\n\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\n\n\t\t\t\tif ( normals !== undefined ) {\n\n\t\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( colors !== undefined ) {\n\n\t\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\n\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\t\tscope.faces.push( face );\n\n\t\t\t\tif ( uvs !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvs2 !== undefined ) {\n\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar groups = geometry.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( indices !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\n\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcenter: function () {\n\n\t\t\tvar offset = new Vector3();\n\n\t\t\treturn function center() {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t\tthis.boundingBox.getCenter( offset ).negate();\n\n\t\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tnormalize: function () {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t\tvar center = this.boundingSphere.center;\n\t\t\tvar radius = this.boundingSphere.radius;\n\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\t\tvar matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\ts, 0, 0, - s * center.x,\n\t\t\t\t0, s, 0, - s * center.y,\n\t\t\t\t0, 0, s, - s * center.z,\n\t\t\t\t0, 0, 0, 1\n\t\t\t);\n\n\t\t\tthis.applyMatrix( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tvar face = this.faces[ f ];\n\n\t\t\t\tvar vA = this.vertices[ face.a ];\n\t\t\t\tvar vB = this.vertices[ face.b ];\n\t\t\t\tvar vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\n\n\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\n\n\t\t\tvar v, vl, f, fl, face, vertices;\n\n\t\t\tvertices = new Array( this.vertices.length );\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ] = new Vector3();\n\n\t\t\t}\n\n\t\t\tif ( areaWeighted ) {\n\n\t\t\t\t// vertex normals weighted by triangle areas\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvA = this.vertices[ face.a ];\n\t\t\t\t\tvB = this.vertices[ face.b ];\n\t\t\t\t\tvC = this.vertices[ face.c ];\n\n\t\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.computeFaceNormals();\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\t\tvertices[ v ].normalize();\n\n\t\t\t}\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeFlatVertexNormals: function () {\n\n\t\t\tvar f, fl, face;\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.faces.length > 0 ) {\n\n\t\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeMorphNormals: function () {\n\n\t\t\tvar i, il, f, fl, face;\n\n\t\t\t// save original normals\n\t\t\t// - create temp variables on first access\n\t\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\t\tvar tmpGeo = new Geometry();\n\t\t\ttmpGeo.faces = this.faces;\n\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\t// create on first access\n\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tfaceNormal = new Vector3();\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\n\n\t\t\t\t// set vertices to morph target\n\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t\t// compute morph normals\n\n\t\t\t\ttmpGeo.computeFaceNormals();\n\t\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t\t// store morph normals\n\n\t\t\t\tvar faceNormal, vertexNormals;\n\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restore original normals\n\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tface = this.faces[ f ];\n\n\t\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t\t},\n\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar normalMatrix,\n\t\t\t\tvertexOffset = this.vertices.length,\n\t\t\t\tvertices1 = this.vertices,\n\t\t\t\tvertices2 = geometry.vertices,\n\t\t\t\tfaces1 = this.faces,\n\t\t\t\tfaces2 = geometry.faces,\n\t\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\n\t\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\n\t\t\t\tcolors1 = this.colors,\n\t\t\t\tcolors2 = geometry.colors;\n\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\n\n\t\t\tif ( matrix !== undefined ) {\n\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t}\n\n\t\t\t// vertices\n\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\t\tvar vertex = vertices2[ i ];\n\n\t\t\t\tvar vertexCopy = vertex.clone();\n\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\t\tvertices1.push( vertexCopy );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\t\tfaces1.push( faceCopy );\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\n\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\n\n\t\t\t\tif ( uv === undefined ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\n\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tuvs1.push( uvCopy );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmergeMesh: function ( mesh ) {\n\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( mesh.matrixAutoUpdate ) mesh.updateMatrix();\n\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t\t},\n\n\t\t/*\n\t\t * Checks for duplicate vertices with hashmap.\n\t\t * Duplicated vertices are removed\n\t\t * and faces' vertices are updated.\n\t\t */\n\n\t\tmergeVertices: function () {\n\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\t\tvar unique = [], changes = [];\n\n\t\t\tvar v, key;\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\n\t\t\tvar i, il, face;\n\t\t\tvar indices, j, jl;\n\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\t\tv = this.vertices[ i ];\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// if faces are completely degenerate after merging vertices, we\n\t\t\t// have to remove them from the geometry.\n\t\t\tvar faceIndicesToRemove = [];\n\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\t\tface = this.faces[ i ];\n\n\t\t\t\tface.a = changes[ face.a ];\n\t\t\t\tface.b = changes[ face.b ];\n\t\t\t\tface.c = changes[ face.c ];\n\n\t\t\t\tindices = [ face.a, face.b, face.c ];\n\n\t\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t\t// we have to remove the face as nothing can be saved\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\n\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\n\n\t\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Use unique set of vertices\n\n\t\t\tvar diff = this.vertices.length - unique.length;\n\t\t\tthis.vertices = unique;\n\t\t\treturn diff;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.vertices = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsortFacesByMaterialIndex: function () {\n\n\t\t\tvar faces = this.faces;\n\t\t\tvar length = faces.length;\n\n\t\t\t// tag faces\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tfaces[ i ]._id = i;\n\n\t\t\t}\n\n\t\t\t// sort faces\n\n\t\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t\t}\n\n\t\t\tfaces.sort( materialIndexSort );\n\n\t\t\t// sort uvs\n\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\t\tvar newUvs1, newUvs2;\n\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar id = faces[ i ]._id;\n\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t\t}\n\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Geometry',\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Geometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tvar vertices = [];\n\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\t\tvar vertex = this.vertices[ i ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t\tvar faces = [];\n\t\t\tvar normals = [];\n\t\t\tvar normalsHash = {};\n\t\t\tvar colors = [];\n\t\t\tvar colorsHash = {};\n\t\t\tvar uvs = [];\n\t\t\tvar uvsHash = {};\n\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\t\tvar face = this.faces[ i ];\n\n\t\t\t\tvar hasMaterial = true;\n\t\t\t\tvar hasFaceUv = false; // deprecated\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\t\tvar faceType = 0;\n\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\t\tfaces.push( faceType );\n\t\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\t\tfaces.push( face.materialIndex );\n\n\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\t\tfaces.push(\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t\t}\n\n\t\t\tfunction getNormalIndex( normal ) {\n\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getColorIndex( color ) {\n\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\t\tcolors.push( color.getHex() );\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tfunction getUvIndex( uv ) {\n\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\n\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t\t}\n\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tdata.data = {};\n\n\t\t\tdata.data.vertices = vertices;\n\t\t\tdata.data.normals = normals;\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\t\tdata.data.faces = faces;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new Geometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar i, il, j, jl, k, kl;\n\n\t\t\t// reset\n\n\t\t\tthis.vertices = [];\n\t\t\tthis.colors = [];\n\t\t\tthis.faces = [];\n\t\t\tthis.faceVertexUvs = [[]];\n\t\t\tthis.morphTargets = [];\n\t\t\tthis.morphNormals = [];\n\t\t\tthis.skinWeights = [];\n\t\t\tthis.skinIndices = [];\n\t\t\tthis.lineDistances = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// vertices\n\n\t\t\tvar vertices = source.vertices;\n\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tvar colors = source.colors;\n\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// faces\n\n\t\t\tvar faces = source.faces;\n\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// face vertex uvs\n\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tvar uv = uvs[ k ];\n\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphTargets = source.morphTargets;\n\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = {};\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t\t// vertices\n\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// normals\n\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t\t// morph normals\n\n\t\t\tvar morphNormals = source.morphNormals;\n\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphNormal = {};\n\n\t\t\t\t// vertex normals\n\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\t\tvar destVertexNormal = {};\n\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// face normals\n\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t\t}\n\n\t\t\t// skin weights\n\n\t\t\tvar skinWeights = source.skinWeights;\n\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// skin indices\n\n\t\t\tvar skinIndices = source.skinIndices;\n\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t\t}\n\n\t\t\t// line distances\n\n\t\t\tvar lineDistances = source.lineDistances;\n\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// update flags\n\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferAttribute( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferAttribute.prototype, {\n\n\t\tisBufferAttribute: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\n\t\t\tthis.array = array;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyArray: function ( array ) {\n\n\t\t\tthis.array.set( array );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyColorsArray: function ( colors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tvar color = colors[ i ];\n\n\t\t\t\tif ( color === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\t\tcolor = new Color();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = color.r;\n\t\t\t\tarray[ offset ++ ] = color.g;\n\t\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector2sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector2();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector3sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyVector4sArray: function ( vectors ) {\n\n\t\t\tvar array = this.array, offset = 0;\n\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\t\tvar vector = vectors[ i ];\n\n\t\t\t\tif ( vector === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\t\tvector = new Vector4();\n\n\t\t\t\t}\n\n\t\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize ];\n\n\t\t},\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex *= this.itemSize;\n\n\t\t\tthis.array[ index + 0 ] = x;\n\t\t\tthis.array[ index + 1 ] = y;\n\t\t\tthis.array[ index + 2 ] = z;\n\t\t\tthis.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\n\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectGeometry() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tObject.assign( DirectGeometry.prototype, {\n\n\t\tcomputeGroups: function ( geometry ) {\n\n\t\t\tvar group;\n\t\t\tvar groups = [];\n\t\t\tvar materialIndex = undefined;\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t// materials\n\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgroup = {\n\t\t\t\t\t\tstart: i * 3,\n\t\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( group !== undefined ) {\n\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\tgroups.push( group );\n\n\t\t\t}\n\n\t\t\tthis.groups = groups;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tvar faces = geometry.faces;\n\t\t\tvar vertices = geometry.vertices;\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\n\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t\t// morphs\n\n\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\tvar morphTargetsLength = morphTargets.length;\n\n\t\t\tvar morphTargetsPosition;\n\n\t\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\t\tmorphTargetsPosition = [];\n\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t\t}\n\n\t\t\tvar morphNormals = geometry.morphNormals;\n\t\t\tvar morphNormalsLength = morphNormals.length;\n\n\t\t\tvar morphTargetsNormal;\n\n\t\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\t\tmorphTargetsNormal = [];\n\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t\t \tdata: []\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tvar skinIndices = geometry.skinIndices;\n\t\t\tvar skinWeights = geometry.skinWeights;\n\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t\t//\n\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\t\tvar vertexNormals = face.vertexNormals;\n\n\t\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar normal = face.normal;\n\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t\t}\n\n\t\t\t\tvar vertexColors = face.vertexColors;\n\n\t\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = face.color;\n\n\t\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// morphs\n\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t\t}\n\n\t\t\t\t// skins\n\n\t\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.computeGroups( geometry );\n\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction arrayMax( array ) {\n\n\t\tif ( array.length === 0 ) return - Infinity;\n\n\t\tvar max = array[ 0 ];\n\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\n\n\t\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t\t}\n\n\t\treturn max;\n\n\t}\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n\tfunction BufferGeometry() {\n\n\t\tObject.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: BufferGeometry,\n\n\t\tisBufferGeometry: true,\n\n\t\tgetIndex: function () {\n\n\t\t\treturn this.index;\n\n\t\t},\n\n\t\tsetIndex: function ( index ) {\n\n\t\t\tif ( Array.isArray( index ) ) {\n\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index = index;\n\n\t\t\t}\n\n\t\t},\n\n\t\taddAttribute: function ( name, attribute ) {\n\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\t\t\treturn this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t\t\t}\n\n\t\t\tif ( name === 'index' ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\t\t\tthis.setIndex( attribute );\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.attributes[ name ] = attribute;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetAttribute: function ( name ) {\n\n\t\t\treturn this.attributes[ name ];\n\n\t\t},\n\n\t\tremoveAttribute: function ( name ) {\n\n\t\t\tdelete this.attributes[ name ];\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddGroup: function ( start, count, materialIndex ) {\n\n\t\t\tthis.groups.push( {\n\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\n\n\t\t\t} );\n\n\t\t},\n\n\t\tclearGroups: function () {\n\n\t\t\tthis.groups = [];\n\n\t\t},\n\n\t\tsetDrawRange: function ( start, count ) {\n\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\n\t\t},\n\n\t\tapplyMatrix: function ( matrix ) {\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tmatrix.applyToBufferAttribute( position );\n\t\t\t\tposition.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif ( normal !== undefined ) {\n\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\n\t\t\t\tnormal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tif ( this.boundingBox !== null ) {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\t\tthis.computeBoundingSphere();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trotateX: function () {\n\n\t\t\t// rotate geometry around world x-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateX( angle ) {\n\n\t\t\t\tm1.makeRotationX( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateY: function () {\n\n\t\t\t// rotate geometry around world y-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateY( angle ) {\n\n\t\t\t\tm1.makeRotationY( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\trotateZ: function () {\n\n\t\t\t// rotate geometry around world z-axis\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function rotateZ( angle ) {\n\n\t\t\t\tm1.makeRotationZ( angle );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttranslate: function () {\n\n\t\t\t// translate geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function translate( x, y, z ) {\n\n\t\t\t\tm1.makeTranslation( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tscale: function () {\n\n\t\t\t// scale geometry\n\n\t\t\tvar m1 = new Matrix4();\n\n\t\t\treturn function scale( x, y, z ) {\n\n\t\t\t\tm1.makeScale( x, y, z );\n\n\t\t\t\tthis.applyMatrix( m1 );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tlookAt: function () {\n\n\t\t\tvar obj = new Object3D();\n\n\t\t\treturn function lookAt( vector ) {\n\n\t\t\t\tobj.lookAt( vector );\n\n\t\t\t\tobj.updateMatrix();\n\n\t\t\t\tthis.applyMatrix( obj.matrix );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcenter: function () {\n\n\t\t\tvar offset = new Vector3();\n\n\t\t\treturn function center() {\n\n\t\t\t\tthis.computeBoundingBox();\n\n\t\t\t\tthis.boundingBox.getCenter( offset ).negate();\n\n\t\t\t\tthis.translate( offset.x, offset.y, offset.z );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tsetFromObject: function ( object ) {\n\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh ) {\n\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\tthis.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tvar position = [];\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t\t}\n\n\t\t\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateFromObject: function ( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tvar direct = geometry.__directGeometry;\n\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\n\n\t\t\t\t\tdirect = undefined;\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( direct === undefined ) {\n\n\t\t\t\t\treturn this.fromGeometry( geometry );\n\n\t\t\t\t}\n\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t\tgeometry = direct;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.position;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.verticesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.normal;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.normalsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\n\n\t\t\t\tattribute = this.attributes.color;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.colorsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvsNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.uv;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uvsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\n\n\t\t\t\tattribute = this.attributes.lineDistance;\n\n\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\n\t\t\t\t\tattribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( geometry.groupsNeedUpdate ) {\n\n\t\t\t\tgeometry.computeGroups( object.geometry );\n\t\t\t\tthis.groups = geometry.groups;\n\n\t\t\t\tgeometry.groupsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tfromGeometry: function ( geometry ) {\n\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\n\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\n\n\t\t},\n\n\t\tfromDirectGeometry: function ( geometry ) {\n\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tthis.groups = geometry.groups;\n\n\t\t\t// morphs\n\n\t\t\tfor ( var name in geometry.morphTargets ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\n\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\n\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// skinning\n\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcomputeBoundingBox: function () {\n\n\t\t\tif ( this.boundingBox === null ) {\n\n\t\t\t\tthis.boundingBox = new Box3();\n\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t} else {\n\n\t\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t\t}\n\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t},\n\n\t\tcomputeBoundingSphere: function () {\n\n\t\t\tvar box = new Box3();\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function computeBoundingSphere() {\n\n\t\t\t\tif ( this.boundingSphere === null ) {\n\n\t\t\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t\t\t}\n\n\t\t\t\tvar position = this.attributes.position;\n\n\t\t\t\tif ( position ) {\n\n\t\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t\tbox.setFromBufferAttribute( position );\n\t\t\t\t\tbox.getCenter( center );\n\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t\t\tvector.x = position.getX( i );\n\t\t\t\t\t\tvector.y = position.getY( i );\n\t\t\t\t\t\tvector.z = position.getZ( i );\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcomputeFaceNormals: function () {\n\n\t\t\t// backwards compatibility\n\n\t\t},\n\n\t\tcomputeVertexNormals: function () {\n\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tif ( attributes.position ) {\n\n\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\tif ( attributes.normal === undefined ) {\n\n\t\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset existing normals to zero\n\n\t\t\t\t\tvar array = attributes.normal.array;\n\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\tvar vA, vB, vC;\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\n\n\t\t\t\t// indexed elements\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\n\n\t\t\t\t\t\tpA.fromArray( positions, vA );\n\t\t\t\t\t\tpB.fromArray( positions, vB );\n\t\t\t\t\t\tpC.fromArray( positions, vC );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\n\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\n\n\t\t\t\t\t\tpA.fromArray( positions, i );\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\n\n\t\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\t\tnormals[ i ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\n\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\n\t\t\t\tattributes.normal.needsUpdate = true;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmerge: function ( geometry, offset ) {\n\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( offset === undefined ) {\n\n\t\t\t\toffset = 0;\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\t\tvar attribute1 = attributes[ key ];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\n\t\t\t\tvar attributeSize = attribute2.itemSize;\n\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\n\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tnormalizeNormals: function () {\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\treturn function normalizeNormals() {\n\n\t\t\t\tvar normals = this.attributes.normal;\n\n\t\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t\t\tvector.x = normals.getX( i );\n\t\t\t\t\tvector.y = normals.getY( i );\n\t\t\t\t\tvector.z = normals.getZ( i );\n\n\t\t\t\t\tvector.normalize();\n\n\t\t\t\t\tnormals.setXYZ( i, vector.x, vector.y, vector.z );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttoNonIndexed: function () {\n\n\t\t\tif ( this.index === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\t\tvar index = 0, index2 = 0;\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\treturn geometry2;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\t\tif ( this.parameters !== undefined ) {\n\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\n\t\t\t}\n\n\t\t\tdata.data = { attributes: {} };\n\n\t\t\tvar index = this.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\n\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: array\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\n\n\t\t\t\tdata.data.attributes[ key ] = {\n\t\t\t\t\titemSize: attribute.itemSize,\n\t\t\t\t\ttype: attribute.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: attribute.normalized\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\t/*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n\t\t\treturn new BufferGeometry().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tvar name, i, l;\n\n\t\t\t// reset\n\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null;\n\n\t\t\t// name\n\n\t\t\tthis.name = source.name;\n\n\t\t\t// index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.setIndex( index.clone() );\n\n\t\t\t}\n\n\t\t\t// attributes\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor ( name in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ name ];\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\n\n\t\t\t}\n\n\t\t\t// morph attributes\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor ( name in morphAttributes ) {\n\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t\t}\n\n\t\t\t// groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\tvar group = groups[ i ];\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t\t// bounding box\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif ( boundingBox !== null ) {\n\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t\t}\n\n\t\t\t// bounding sphere\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif ( boundingSphere !== null ) {\n\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\t// draw range\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t\t// user data\n\n\t\t\tthis.userData = source.userData;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// BoxGeometry\n\n\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tBoxGeometry.prototype = Object.create( Geometry.prototype );\n\tBoxGeometry.prototype.constructor = BoxGeometry;\n\n\t// BoxBufferGeometry\n\n\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'BoxBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tvar scope = this;\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\t\tdepth = depth || 1;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar numberOfVertices = 0;\n\t\tvar groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tvar segmentWidth = width / gridX;\n\t\t\tvar segmentHeight = height / gridY;\n\n\t\t\tvar widthHalf = width / 2;\n\t\t\tvar heightHalf = height / 2;\n\t\t\tvar depthHalf = depth / 2;\n\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\n\t\t\tvar vertexCounter = 0;\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar ix, iy;\n\n\t\t\tvar vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PlaneGeometry\n\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\n\n\t// PlaneBufferGeometry\n\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PlaneBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\twidth = width || 1;\n\t\theight = height || 1;\n\n\t\tvar width_half = width / 2;\n\t\tvar height_half = height / 2;\n\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\n\n\t\tvar gridX1 = gridX + 1;\n\t\tvar gridY1 = gridY + 1;\n\n\t\tvar segment_width = width / gridX;\n\t\tvar segment_height = height / gridY;\n\n\t\tvar ix, iy;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tvar x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tvar a = ix + gridX1 * iy;\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\t\tthis.lights = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.flatShading = false;\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n\t\tthis.visible = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: Material,\n\n\t\tisMaterial: true,\n\n\t\tonBeforeCompile: function () {},\n\n\t\tsetValues: function ( values ) {\n\n\t\t\tif ( values === undefined ) return;\n\n\t\t\tfor ( var key in values ) {\n\n\t\t\t\tvar newValue = values[ key ];\n\n\t\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[ key ];\n\n\t\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t\t} else if ( key === 'overdraw' ) {\n\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\n\t\t\t\t\tthis[ key ] = Number( newValue );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// standard Material serialization\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\n\t\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\t\tif ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\t\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\n\t\t\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\n\n\t\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t\t}\n\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t\t}\n\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t}\n\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\t\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\n\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\n\t\t\t// rotation (SpriteMaterial)\n\t\t\tif ( this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\t\tif ( this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\t\tif ( this.morphTargets === true ) data.morphTargets = true;\n\t\t\tif ( this.skinning === true ) data.skinning = true;\n\n\t\t\tif ( this.visible === false ) data.visible = false;\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t\t// TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache( cache ) {\n\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor ( var key in cache ) {\n\n\t\t\t\t\tvar data = cache[ key ];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push( data );\n\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\n\t\t\t}\n\n\t\t\tif ( isRoot ) {\n\n\t\t\t\tvar textures = extractFromCache( meta.textures );\n\t\t\t\tvar images = extractFromCache( meta.images );\n\n\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.name = source.name;\n\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.lights = source.lights;\n\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\tthis.vertexColors = source.vertexColors;\n\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\n\t\t\tthis.colorWrite = source.colorWrite;\n\n\t\t\tthis.precision = source.precision;\n\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\t\tthis.dithering = source.dithering;\n\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\t\tthis.overdraw = source.overdraw;\n\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\n\t\t\tvar srcPlanes = source.clippingPlanes,\n\t\t\t\tdstPlanes = null;\n\n\t\t\tif ( srcPlanes !== null ) {\n\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array( n );\n\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\n\t\t\tthis.shadowSide = source.shadowSide;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdispose: function () {\n\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  depthTest: <bool>,\n\t *  depthWrite: <bool>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction MeshBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  defines: { \"label\" : \"value\" },\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *  fragmentShader: <string>,\n\t *  vertexShader: <string>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  lights: <bool>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\t\tthis.morphTargets = false; // set to use morph targets\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tShaderMaterial.prototype = Object.create( Material.prototype );\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.skinning = source.skinning;\n\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\tthis.extensions = source.extensions;\n\n\t\treturn this;\n\n\t};\n\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\n\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\n\n\t\tdata.uniforms = {};\n\n\t\tfor ( var name in this.uniforms ) {\n\n\t\t\tvar uniform = this.uniforms[ name ];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif ( value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\treturn data;\n\n\t};\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Ray( origin, direction ) {\n\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\n\n\t}\n\n\tObject.assign( Ray.prototype, {\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\tthis.origin.copy( origin );\n\t\t\tthis.direction.copy( direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( ray ) {\n\n\t\t\tthis.origin.copy( ray.origin );\n\t\t\tthis.direction.copy( ray.direction );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t\t},\n\n\t\tlookAt: function ( v ) {\n\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\trecast: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function recast( t ) {\n\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\ttarget.subVectors( point, this.origin );\n\n\t\t\tvar directionDistance = target.dot( this.direction );\n\n\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\treturn target.copy( this.origin );\n\n\t\t\t}\n\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t},\n\n\t\tdistanceToPoint: function ( point ) {\n\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t\t},\n\n\t\tdistanceSqToPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function distanceSqToPoint( point ) {\n\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t\t\t// point behind the ray\n\n\t\t\t\tif ( directionDistance < 0 ) {\n\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t\t\t}\n\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\t\t\treturn v1.distanceToSquared( point );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tdistanceSqToSegment: function () {\n\n\t\t\tvar segCenter = new Vector3();\n\t\t\tvar segDir = new Vector3();\n\t\t\tvar diff = new Vector3();\n\n\t\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t\t// defined by v0 and v1\n\t\t\t\t// It can also set two optional targets :\n\t\t\t\t// - The closest point on the ray\n\t\t\t\t// - The closest point on the segment\n\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\n\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\n\t\t\t\tvar b0 = diff.dot( this.direction );\n\t\t\t\tvar b1 = - diff.dot( segDir );\n\t\t\t\tvar c = diff.lengthSq();\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\n\t\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\t\tif ( det > 0 ) {\n\n\t\t\t\t\t// The ray and segment are not parallel.\n\n\t\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\t\textDet = segExtent * det;\n\n\t\t\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 5\n\n\t\t\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t\t\t// region 4\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t\t\t// region 3\n\n\t\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// region 2\n\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Ray and segment are parallel.\n\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnRay ) {\n\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t\t\t}\n\n\t\t\t\tif ( optionalPointOnSegment ) {\n\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\n\n\t\t\t\t}\n\n\t\t\t\treturn sqrDist;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectSphere: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function intersectSphere( sphere, target ) {\n\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\n\t\t\t\tvar tca = v1.dot( this.direction );\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\n\t\t\t\tif ( d2 > radius2 ) return null;\n\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\n\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\n\t\t\t\tvar t0 = tca - thc;\n\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\n\t\t\t\tvar t1 = tca + thc;\n\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t\t\t// test to see if t0 is behind the ray:\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\t\t\treturn this.at( t0, target );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersectsSphere: function ( sphere ) {\n\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\n\n\t\t},\n\n\t\tdistanceToPlane: function ( plane ) {\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator === 0 ) {\n\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t\t// Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\n\t\t},\n\n\t\tintersectPlane: function ( plane, target ) {\n\n\t\t\tvar t = this.distanceToPlane( plane );\n\n\t\t\tif ( t === null ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn this.at( t, target );\n\n\t\t},\n\n\t\tintersectsPlane: function ( plane ) {\n\n\t\t\t// check if the ray lies on the plane first\n\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\n\n\t\t\tif ( distToPoint === 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot( this.direction );\n\n\t\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\t\treturn false;\n\n\t\t},\n\n\t\tintersectBox: function ( box, target ) {\n\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\t\tvar origin = this.origin;\n\n\t\t\tif ( invdirx >= 0 ) {\n\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t\t} else {\n\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t\t}\n\n\t\t\tif ( invdiry >= 0 ) {\n\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t\t} else {\n\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\t\tif ( invdirz >= 0 ) {\n\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t\t} else {\n\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t\t}\n\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t\t//return point closest to the ray (positive side)\n\n\t\t\tif ( tmax < 0 ) return null;\n\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t\t},\n\n\t\tintersectsBox: ( function () {\n\n\t\t\tvar v = new Vector3();\n\n\t\t\treturn function intersectsBox( box ) {\n\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tintersectTriangle: function () {\n\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\tvar diff = new Vector3();\n\t\t\tvar edge1 = new Vector3();\n\t\t\tvar edge2 = new Vector3();\n\t\t\tvar normal = new Vector3();\n\n\t\t\treturn function intersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t\t\tedge1.subVectors( b, a );\n\t\t\t\tedge2.subVectors( c, a );\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\n\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\t\t\tvar DdN = this.direction.dot( normal );\n\t\t\t\tvar sign;\n\n\t\t\t\tif ( DdN > 0 ) {\n\n\t\t\t\t\tif ( backfaceCulling ) return null;\n\t\t\t\t\tsign = 1;\n\n\t\t\t\t} else if ( DdN < 0 ) {\n\n\t\t\t\t\tsign = - 1;\n\t\t\t\t\tDdN = - DdN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tdiff.subVectors( this.origin, a );\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\n\n\t\t\t\t// b1 < 0, no intersection\n\t\t\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\n\n\t\t\t\t// b2 < 0, no intersection\n\t\t\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// b1+b2 > 1, no intersection\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Line intersects triangle, check if ray does.\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\n\n\t\t\t\t// t < 0, no intersection\n\t\t\t\tif ( QdN < 0 ) {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\t// Ray intersects triangle.\n\t\t\t\treturn this.at( QdN / DdN, target );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tapplyMatrix4: function ( matrix4 ) {\n\n\t\t\tthis.origin.applyMatrix4( matrix4 );\n\t\t\tthis.direction.transformDirection( matrix4 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( ray ) {\n\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Triangle( a, b, c ) {\n\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n\t}\n\n\tObject.assign( Triangle, {\n\n\t\tgetNormal: function () {\n\n\t\t\tvar v0 = new Vector3();\n\n\t\t\treturn function getNormal( a, b, c, target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\t\t\ttarget = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\ttarget.subVectors( c, b );\n\t\t\t\tv0.subVectors( a, b );\n\t\t\t\ttarget.cross( v0 );\n\n\t\t\t\tvar targetLengthSq = target.lengthSq();\n\t\t\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn target.set( 0, 0, 0 );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\t// static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\tgetBarycoord: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function getBarycoord( point, a, b, c, target ) {\n\n\t\t\t\tv0.subVectors( c, a );\n\t\t\t\tv1.subVectors( b, a );\n\t\t\t\tv2.subVectors( point, a );\n\n\t\t\t\tvar dot00 = v0.dot( v0 );\n\t\t\t\tvar dot01 = v0.dot( v1 );\n\t\t\t\tvar dot02 = v0.dot( v2 );\n\t\t\t\tvar dot11 = v1.dot( v1 );\n\t\t\t\tvar dot12 = v1.dot( v2 );\n\n\t\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\t\t\ttarget = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\t// collinear or singular triangle\n\t\t\t\tif ( denom === 0 ) {\n\n\t\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t\t\t}\n\n\t\t\t\tvar invDenom = 1 / denom;\n\t\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t\t\t// barycentric coordinates must always sum to 1\n\t\t\t\treturn target.set( 1 - u - v, v, u );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tcontainsPoint: function () {\n\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function containsPoint( point, a, b, c ) {\n\n\t\t\t\tTriangle.getBarycoord( point, a, b, c, v1 );\n\n\t\t\t\treturn ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );\n\n\t\t\t};\n\n\t\t}()\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tset: function ( a, b, c ) {\n\n\t\t\tthis.a.copy( a );\n\t\t\tthis.b.copy( b );\n\t\t\tthis.c.copy( c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\t\tthis.a.copy( points[ i0 ] );\n\t\t\tthis.b.copy( points[ i1 ] );\n\t\t\tthis.c.copy( points[ i2 ] );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( triangle ) {\n\n\t\t\tthis.a.copy( triangle.a );\n\t\t\tthis.b.copy( triangle.b );\n\t\t\tthis.c.copy( triangle.c );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetArea: function () {\n\n\t\t\tvar v0 = new Vector3();\n\t\t\tvar v1 = new Vector3();\n\n\t\t\treturn function getArea() {\n\n\t\t\t\tv0.subVectors( this.c, this.b );\n\t\t\t\tv1.subVectors( this.a, this.b );\n\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tgetMidpoint: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t\t},\n\n\t\tgetNormal: function ( target ) {\n\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tgetPlane: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t\t},\n\n\t\tgetBarycoord: function ( point, target ) {\n\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\treturn box.intersectsTriangle( this );\n\n\t\t},\n\n\t\tclosestPointToPoint: function () {\n\n\t\t\tvar vab = new Vector3();\n\t\t\tvar vac = new Vector3();\n\t\t\tvar vbc = new Vector3();\n\t\t\tvar vap = new Vector3();\n\t\t\tvar vbp = new Vector3();\n\t\t\tvar vcp = new Vector3();\n\n\t\t\treturn function closestPointToPoint( p, target ) {\n\n\t\t\t\tif ( target === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\t\t\ttarget = new Vector3();\n\n\t\t\t\t}\n\n\t\t\t\tvar a = this.a, b = this.b, c = this.c;\n\t\t\t\tvar v, w;\n\n\t\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t\tvab.subVectors( b, a );\n\t\t\t\tvac.subVectors( c, a );\n\t\t\t\tvap.subVectors( p, a );\n\t\t\t\tvar d1 = vab.dot( vap );\n\t\t\t\tvar d2 = vac.dot( vap );\n\t\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\t\treturn target.copy( a );\n\n\t\t\t\t}\n\n\t\t\t\tvbp.subVectors( p, b );\n\t\t\t\tvar d3 = vab.dot( vbp );\n\t\t\t\tvar d4 = vac.dot( vbp );\n\t\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\t\treturn target.copy( b );\n\n\t\t\t\t}\n\n\t\t\t\tvar vc = d1 * d4 - d3 * d2;\n\t\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\t\t\treturn target.copy( a ).addScaledVector( vab, v );\n\n\t\t\t\t}\n\n\t\t\t\tvcp.subVectors( p, c );\n\t\t\t\tvar d5 = vab.dot( vcp );\n\t\t\t\tvar d6 = vac.dot( vcp );\n\t\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\t\treturn target.copy( c );\n\n\t\t\t\t}\n\n\t\t\t\tvar vb = d5 * d2 - d1 * d6;\n\t\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\t\t\treturn target.copy( a ).addScaledVector( vac, w );\n\n\t\t\t\t}\n\n\t\t\t\tvar va = d3 * d6 - d5 * d4;\n\t\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t\t\tvbc.subVectors( c, b );\n\t\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\t\t\treturn target.copy( b ).addScaledVector( vbc, w ); // edge region of BC\n\n\t\t\t\t}\n\n\t\t\t\t// face region\n\t\t\t\tvar denom = 1 / ( va + vb + vc );\n\t\t\t\t// u = va * denom\n\t\t\t\tv = vb * denom;\n\t\t\t\tw = vc * denom;\n\t\t\t\treturn target.copy( a ).addScaledVector( vab, v ).addScaledVector( vac, w );\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tequals: function ( triangle ) {\n\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author jonobr1 / http://jonobr1.com/\n\t */\n\n\tfunction Mesh( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t\tthis.drawMode = TrianglesDrawMode;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Mesh,\n\n\t\tisMesh: true,\n\n\t\tsetDrawMode: function ( value ) {\n\n\t\t\tthis.drawMode = value;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.drawMode = source.drawMode;\n\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t\t}\n\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMorphTargets: function () {\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar m, ml, name;\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys( morphAttributes );\n\n\t\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tname = morphTargets[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\tvar vA = new Vector3();\n\t\t\tvar vB = new Vector3();\n\t\t\tvar vC = new Vector3();\n\n\t\t\tvar tempA = new Vector3();\n\t\t\tvar tempB = new Vector3();\n\t\t\tvar tempC = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tvar barycoord = new Vector3();\n\n\t\t\tvar intersectionPoint = new Vector3();\n\t\t\tvar intersectionPointWorld = new Vector3();\n\n\t\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\n\n\t\t\t\tTriangle.getBarycoord( point, p1, p2, p3, barycoord );\n\n\t\t\t\tuv1.multiplyScalar( barycoord.x );\n\t\t\t\tuv2.multiplyScalar( barycoord.y );\n\t\t\t\tuv3.multiplyScalar( barycoord.z );\n\n\t\t\t\tuv1.add( uv2 ).add( uv3 );\n\n\t\t\t\treturn uv1.clone();\n\n\t\t\t}\n\n\t\t\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\t\t\t\tvar intersect;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t\t\t\t}\n\n\t\t\t\tif ( intersect === null ) return null;\n\n\t\t\t\tintersectionPointWorld.copy( point );\n\t\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\t\t\t\treturn {\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectionPointWorld.clone(),\n\t\t\t\t\tobject: object\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, uv, a, b, c ) {\n\n\t\t\t\tvA.fromBufferAttribute( position, a );\n\t\t\t\tvB.fromBufferAttribute( position, b );\n\t\t\t\tvC.fromBufferAttribute( position, c );\n\n\t\t\t\tvar intersection = checkIntersection( object, material, raycaster, ray, vA, vB, vC, intersectionPoint );\n\n\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\tif ( uv ) {\n\n\t\t\t\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\t\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\t\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar face = new Face3( a, b, c );\n\t\t\t\t\tTriangle.getNormal( vA, vB, vC, face.normal );\n\n\t\t\t\t\tintersection.face = face;\n\n\t\t\t\t}\n\n\t\t\t\treturn intersection;\n\n\t\t\t}\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar material = this.material;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\tif ( material === undefined ) return;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\t// Check boundingBox before continuing\n\n\t\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t\t\t}\n\n\t\t\t\tvar intersection;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar a, b, c;\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\t\tvar groups = geometry.groups;\n\t\t\t\t\tvar drawRange = geometry.drawRange;\n\t\t\t\t\tvar i, j, il, jl;\n\t\t\t\t\tvar group, groupMaterial;\n\t\t\t\t\tvar start, end;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\t// indexed buffer geometry\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\t\ta = index.getX( i );\n\t\t\t\t\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\t\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\tgroup = groups[ i ];\n\t\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\t\t\ta = j;\n\t\t\t\t\t\t\t\t\tb = j + 1;\n\t\t\t\t\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\t\t\ta = i;\n\t\t\t\t\t\t\t\tb = i + 1;\n\t\t\t\t\t\t\t\tc = i + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );\n\n\t\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar fvA, fvB, fvC;\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar uvs;\n\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\t\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\t\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\n\n\t\t\t\t\t\tif ( faceMaterial === undefined ) continue;\n\n\t\t\t\t\t\tfvA = vertices[ face.a ];\n\t\t\t\t\t\tfvB = vertices[ face.b ];\n\t\t\t\t\t\tfvC = vertices[ face.c ];\n\n\t\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\n\n\t\t\t\t\t\t\tvA.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvB.set( 0, 0, 0 );\n\t\t\t\t\t\t\tvC.set( 0, 0, 0 );\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\n\n\t\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\n\t\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\n\t\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvA.add( fvA );\n\t\t\t\t\t\t\tvB.add( fvB );\n\t\t\t\t\t\t\tvC.add( fvC );\n\n\t\t\t\t\t\t\tfvA = vA;\n\t\t\t\t\t\t\tfvB = vB;\n\t\t\t\t\t\t\tfvC = vC;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\n\n\t\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\n\t\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\n\t\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\n\t\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\n\n\t\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tintersection.face = face;\n\t\t\t\t\t\t\tintersection.faceIndex = f;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\n\n\t\tvar clearColor = new Color( 0x000000 );\n\t\tvar clearAlpha = 0;\n\n\t\tvar planeCamera, planeMesh;\n\t\tvar boxMesh;\n\n\t\tfunction render( renderList, scene, camera, forceClear ) {\n\n\t\t\tvar background = scene.background;\n\n\t\t\tif ( background === null ) {\n\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t} else if ( background && background.isColor ) {\n\n\t\t\t\tsetClear( background, 1 );\n\t\t\t\tforceClear = true;\n\n\t\t\t}\n\n\t\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t\t}\n\n\t\t\tif ( background && background.isCubeTexture ) {\n\n\t\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\n\t\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\t\tuniforms: ShaderLib.cube.uniforms,\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\t\tdepthTest: true,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t\tfog: false\n\t\t\t\t\t\t} )\n\t\t\t\t\t);\n\n\t\t\t\t\tboxMesh.geometry.removeAttribute( 'normal' );\n\t\t\t\t\tboxMesh.geometry.removeAttribute( 'uv' );\n\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.tCube.value = background;\n\n\t\t\t\trenderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );\n\n\t\t\t} else if ( background && background.isTexture ) {\n\n\t\t\t\tif ( planeCamera === undefined ) {\n\n\t\t\t\t\tplaneCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\n\t\t\t\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\n\t\t\t\t\t);\n\n\t\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.map = background;\n\n\t\t\t\t// TODO Push this to renderList\n\n\t\t\t\trenderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setClear( color, alpha ) {\n\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tgetClearColor: function () {\n\n\t\t\t\treturn clearColor;\n\n\t\t\t},\n\t\t\tsetClearColor: function ( color, alpha ) {\n\n\t\t\t\tclearColor.set( color );\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\tgetClearAlpha: function () {\n\n\t\t\t\treturn clearAlpha;\n\n\t\t\t},\n\t\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t\t},\n\t\t\trender: render\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawArrays( mode, start, count );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ capabilities.isWebGL2 ? 'drawArraysInstanced' : 'drawArraysInstancedANGLE' ]( mode, start, count, geometry.maxInstancedCount );\n\n\t\t\tinfo.update( count, mode, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\n\t\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t\t} else {\n\n\t\t\t\tmaxAnisotropy = 0;\n\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\n\t\t}\n\n\t\tfunction getMaxPrecision( precision ) {\n\n\t\t\tif ( precision === 'highp' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'highp';\n\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\n\t\t\t}\n\n\t\t\tif ( precision === 'mediump' ) {\n\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\t\treturn 'mediump';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\n\t\t}\n\n\t\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision( precision );\n\n\t\tif ( maxPrecision !== precision ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\t\tprecision = maxPrecision;\n\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\t\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\t\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\t\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\t\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\t\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\t\treturn {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction WebGLClipping() {\n\n\t\tvar scope = this,\n\n\t\t\tglobalState = null,\n\t\t\tnumGlobalPlanes = 0,\n\t\t\tlocalClippingEnabled = false,\n\t\t\trenderingShadows = false,\n\n\t\t\tplane = new Plane(),\n\t\t\tviewNormalMatrix = new Matrix3(),\n\n\t\t\tuniform = { value: null, needsUpdate: false };\n\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\t\tvar enabled =\n\t\t\t\tplanes.length !== 0 ||\n\t\t\t\tenableLocalClipping ||\n\t\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t\t// run another frame in order to reset the state:\n\t\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\t\tlocalClippingEnabled;\n\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\t\tnumGlobalPlanes = planes.length;\n\n\t\t\treturn enabled;\n\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes( null );\n\n\t\t};\n\n\t\tthis.endShadows = function () {\n\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\n\t\t};\n\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\n\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t\t// there's no local clipping\n\n\t\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t\t// there's no global clipping\n\n\t\t\t\t\tprojectPlanes( null );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresetGlobalState();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\tlGlobal = nGlobal * 4,\n\n\t\t\t\t\tdstArray = cache.clippingState || null;\n\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\n\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcache.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\n\t\t\t}\n\n\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\n\t\t\tif ( uniform.value !== globalState ) {\n\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\n\t\t}\n\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\n\t\t\t\tdstArray = null;\n\n\t\t\tif ( nPlanes !== 0 ) {\n\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLExtensions( gl ) {\n\n\t\tvar extensions = {};\n\n\t\treturn {\n\n\t\t\tget: function ( name ) {\n\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\t\t\treturn extensions[ name ];\n\n\t\t\t\t}\n\n\t\t\t\tvar extension;\n\n\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\textension = gl.getExtension( name );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t\t}\n\n\t\t\t\textensions[ name ] = extension;\n\n\t\t\t\treturn extension;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLGeometries( gl, attributes, info ) {\n\n\t\tvar geometries = {};\n\t\tvar wireframeAttributes = {};\n\n\t\tfunction onGeometryDispose( event ) {\n\n\t\t\tvar geometry = event.target;\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry.index !== null ) {\n\n\t\t\t\tattributes.remove( buffergeometry.index );\n\n\t\t\t}\n\n\t\t\tfor ( var name in buffergeometry.attributes ) {\n\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tdelete geometries[ geometry.id ];\n\n\t\t\tvar attribute = wireframeAttributes[ buffergeometry.id ];\n\n\t\t\tif ( attribute ) {\n\n\t\t\t\tattributes.remove( attribute );\n\t\t\t\tdelete wireframeAttributes[ buffergeometry.id ];\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tinfo.memory.geometries --;\n\n\t\t}\n\n\t\tfunction get( object, geometry ) {\n\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\n\n\t\t\tif ( buffergeometry ) return buffergeometry;\n\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\tbuffergeometry = geometry;\n\n\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\n\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\n\n\t\t\t}\n\n\t\t\tgeometries[ geometry.id ] = buffergeometry;\n\n\t\t\tinfo.memory.geometries ++;\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction update( geometry ) {\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\tfor ( var name in geometryAttributes ) {\n\n\t\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t\t// morph targets\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor ( var name in morphAttributes ) {\n\n\t\t\t\tvar array = morphAttributes[ name ];\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getWireframeAttribute( geometry ) {\n\n\t\t\tvar attribute = wireframeAttributes[ geometry.id ];\n\n\t\t\tif ( attribute ) return attribute;\n\n\t\t\tvar indices = [];\n\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\t// console.time( 'wireframe' );\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\tvar array = geometryIndex.array;\n\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = array[ i + 0 ];\n\t\t\t\t\tvar b = array[ i + 1 ];\n\t\t\t\t\tvar c = array[ i + 2 ];\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tvar array = geometryAttributes.position.array;\n\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\t\tvar a = i + 0;\n\t\t\t\t\tvar b = i + 1;\n\t\t\t\t\tvar c = i + 2;\n\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// console.timeEnd( 'wireframe' );\n\n\t\t\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\n\t\t\tattributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t\twireframeAttributes[ geometry.id ] = attribute;\n\n\t\t\treturn attribute;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tget: get,\n\t\t\tupdate: update,\n\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\t\tvar mode;\n\n\t\tfunction setMode( value ) {\n\n\t\t\tmode = value;\n\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex( value ) {\n\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\n\t\t}\n\n\t\tfunction render( start, count ) {\n\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\t\tinfo.update( count, mode );\n\n\t\t}\n\n\t\tfunction renderInstances( geometry, start, count ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\textension = gl;\n\n\t\t\t} else {\n\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\tif ( extension === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension[ capabilities.isWebGL2 ? 'drawElementsInstanced' : 'drawElementsInstancedANGLE' ]( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\n\n\t\t\tinfo.update( count, mode, geometry.maxInstancedCount );\n\n\t\t}\n\n\t\t//\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLInfo( gl ) {\n\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update( count, mode, instanceCount ) {\n\n\t\t\tinstanceCount = instanceCount || 1;\n\n\t\t\trender.calls ++;\n\n\t\t\tswitch ( mode ) {\n\n\t\t\t\tcase gl.TRIANGLES:\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.TRIANGLE_STRIP:\n\t\t\t\tcase gl.TRIANGLE_FAN:\n\t\t\t\t\trender.triangles += instanceCount * ( count - 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINES:\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_STRIP:\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.LINE_LOOP:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase gl.POINTS:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction reset() {\n\n\t\t\trender.frame ++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction absNumericalSort( a, b ) {\n\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n\t}\n\n\tfunction WebGLMorphtargets( gl ) {\n\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array( 8 );\n\n\t\tfunction update( object, geometry, material, program ) {\n\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\n\n\t\t\tvar length = objectInfluences.length;\n\n\t\t\tvar influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\n\t\t\t// Remove current morphAttributes\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\n\n\t\t\t\t\tif ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );\n\t\t\t\t\tif ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\t// Add morphAttributes\n\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\n\n\t\t\t\tvar influence = influences[ i ];\n\n\t\t\t\tif ( influence ) {\n\n\t\t\t\t\tvar index = influence[ 0 ];\n\t\t\t\t\tvar value = influence[ 1 ];\n\n\t\t\t\t\tif ( value ) {\n\n\t\t\t\t\t\tif ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\t\t\t\t\t\tif ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t}\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLObjects( geometries, info ) {\n\n\t\tvar updateList = {};\n\n\t\tfunction update( object ) {\n\n\t\t\tvar frame = info.render.frame;\n\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\n\n\t\t\t// Update once per frame\n\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\n\n\t\t\t\t}\n\n\t\t\t\tgeometries.update( buffergeometry );\n\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\n\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tupdateList = {};\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tCubeTexture.prototype = Object.create( Texture.prototype );\n\tCubeTexture.prototype.constructor = CubeTexture;\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\n\n\t\tget: function () {\n\n\t\t\treturn this.image;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis.image = value;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [renderer] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *  \tthe 'renderer' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (renderer factorizations):\n\t *\n\t * .upload( gl, seq, values, renderer )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (renderer factorizations):\n\t *\n\t * .setValue( gl, name, value )\n\t *\n\t * \t\tsets uniform with  name 'name' to 'value'\n\t *\n\t * .set( gl, obj, prop )\n\t *\n\t * \t\tsets uniform from object and property with same name than uniform\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\n\tvar emptyTexture = new Texture();\n\tvar emptyCubeTexture = new CubeTexture();\n\n\t// --- Base for inner nodes (including the root) ---\n\n\tfunction UniformContainer() {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\t// --- Utilities ---\n\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = [];\n\n\t// Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array( 16 );\n\tvar mat3array = new Float32Array( 9 );\n\tvar mat2array = new Float32Array( 4 );\n\n\t// Flattening for arrays of vectors and matrices\n\n\tfunction flatten( array, nBlocks, blockSize ) {\n\n\t\tvar firstElem = array[ 0 ];\n\n\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t\t// unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize,\n\t\t\tr = arrayCacheF32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Float32Array( n );\n\t\t\tarrayCacheF32[ n ] = r;\n\n\t\t}\n\n\t\tif ( nBlocks !== 0 ) {\n\n\t\t\tfirstElem.toArray( r, 0 );\n\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n\tfunction arraysEqual( a, b ) {\n\n\t\tif ( a.length !== b.length ) return false;\n\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction copyArray( a, b ) {\n\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\n\n\t\t\ta[ i ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\t// Texture unit allocation\n\n\tfunction allocTexUnits( renderer, n ) {\n\n\t\tvar r = arrayCacheI32[ n ];\n\n\t\tif ( r === undefined ) {\n\n\t\t\tr = new Int32Array( n );\n\t\t\tarrayCacheI32[ n ] = r;\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i )\n\t\t\tr[ i ] = renderer.allocTextureUnit();\n\n\t\treturn r;\n\n\t}\n\n\t// --- Setters ---\n\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\n\t// Single scalar\n\n\tfunction setValue1f( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) return;\n\n\t\tgl.uniform1f( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\tfunction setValue1i( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( cache[ 0 ] === v ) return;\n\n\t\tgl.uniform1i( this.addr, v );\n\n\t\tcache[ 0 ] = v;\n\n\t}\n\n\t// Single float vector (from flat array or THREE.VectorN)\n\n\tfunction setValue2fv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniform2fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValue3fv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\n\t\t\t}\n\n\t\t} else if ( v.r !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\t\tcache[ 0 ] = v.r;\n\t\t\t\tcache[ 1 ] = v.g;\n\t\t\t\tcache[ 2 ] = v.b;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniform3fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\tfunction setValue4fv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( v.x !== undefined ) {\n\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\t\tcache[ 0 ] = v.x;\n\t\t\t\tcache[ 1 ] = v.y;\n\t\t\t\tcache[ 2 ] = v.z;\n\t\t\t\tcache[ 3 ] = v.w;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniform4fv( this.addr, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t}\n\n\t}\n\n\t// Single matrix (from flat array or MatrixN)\n\n\tfunction setValue2fm( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\t\tmat2array.set( elements );\n\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValue3fm( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\t\tmat3array.set( elements );\n\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\tfunction setValue4fm( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif ( elements === undefined ) {\n\n\t\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\t\tcopyArray( cache, v );\n\n\t\t} else {\n\n\t\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\t\tmat4array.set( elements );\n\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\t\tcopyArray( cache, elements );\n\n\t\t}\n\n\t}\n\n\t// Single texture (2D / Cube)\n\n\tfunction setValueT1( gl, v, renderer ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = renderer.allocTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\trenderer.setTexture2D( v || emptyTexture, unit );\n\n\t}\n\n\tfunction setValueT6( gl, v, renderer ) {\n\n\t\tvar cache = this.cache;\n\t\tvar unit = renderer.allocTextureUnit();\n\n\t\tif ( cache[ 0 ] !== unit ) {\n\n\t\t\tgl.uniform1i( this.addr, unit );\n\t\t\tcache[ 0 ] = unit;\n\n\t\t}\n\n\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\n\n\t}\n\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\tfunction setValue2iv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValue3iv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\tfunction setValue4iv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// Helper to pick the right setter for the singular case\n\n\tfunction getSingularSetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1f; // FLOAT\n\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\n\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\n\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\n\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\n\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\n\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// Array of scalars\n\n\tfunction setValue1fv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform1fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\tfunction setValue1iv( gl, v ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform1iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n\t// Array of vectors (flat or from THREE classes)\n\n\tfunction setValueV2a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 2 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniform2fv( this.addr, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\tfunction setValueV3a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 3 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniform3fv( this.addr, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\tfunction setValueV4a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniform4fv( this.addr, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\t// Array of matrices (flat or from THREE clases)\n\n\tfunction setValueM2a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 4 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\tfunction setValueM3a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 9 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\tfunction setValueM4a( gl, v ) {\n\n\t\tvar cache = this.cache;\n\t\tvar data = flatten( v, this.size, 16 );\n\n\t\tif ( arraysEqual( cache, data ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\n\n\t\tthis.updateCache( data );\n\n\t}\n\n\t// Array of textures (2D / Cube)\n\n\tfunction setValueT1a( gl, v, renderer ) {\n\n\t\tvar cache = this.cache;\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( renderer, n );\n\n\t\tif ( arraysEqual( cache, units ) === false ) {\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\t\t\tcopyArray( cache, units );\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction setValueT6a( gl, v, renderer ) {\n\n\t\tvar cache = this.cache;\n\t\tvar n = v.length;\n\n\t\tvar units = allocTexUnits( renderer, n );\n\n\t\tif ( arraysEqual( cache, units ) === false ) {\n\n\t\t\tgl.uniform1iv( this.addr, units );\n\t\t\tcopyArray( cache, units );\n\n\t\t}\n\n\t\tfor ( var i = 0; i !== n; ++ i ) {\n\n\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t\t}\n\n\t}\n\n\t// Helper to pick the right setter for a pure (bottom-level) array\n\n\tfunction getPureArraySetter( type ) {\n\n\t\tswitch ( type ) {\n\n\t\t\tcase 0x1406: return setValue1fv; // FLOAT\n\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\n\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\n\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\n\n\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\n\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\n\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\n\n\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\n\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\n\n\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\n\n\t\t}\n\n\t}\n\n\t// --- Uniform Classes ---\n\n\tfunction SingleUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\t\tvar cache = this.cache;\n\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\t\tthis.cache = new Float32Array( data.length );\n\n\t\t}\n\n\t\tcopyArray( cache, data );\n\n\t};\n\n\tfunction StructuredUniform( id ) {\n\n\t\tthis.id = id;\n\n\t\tUniformContainer.call( this ); // mix-in\n\n\t}\n\n\tStructuredUniform.prototype.setValue = function ( gl, value, renderer ) {\n\n\t\tvar seq = this.seq;\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], renderer );\n\n\t\t}\n\n\t};\n\n\t// --- Top-level ---\n\n\t// Parser - builds up the property tree from the path strings\n\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n\t// extracts\n\t// \t- the identifier (member name or array index)\n\t//  - followed by an optional right bracket (found when array index)\n\t//  - followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform( container, uniformObject ) {\n\n\t\tcontainer.seq.push( uniformObject );\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n\t}\n\n\tfunction parseUniform( activeInfo, addr, container ) {\n\n\t\tvar path = activeInfo.name,\n\t\t\tpathLength = path.length;\n\n\t\t// reset RegExp object, because of the early exit of a previous run\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile ( true ) {\n\n\t\t\tvar match = RePathPart.exec( path ),\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\n\n\t\t\t\tid = match[ 1 ],\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\n\t\t\t\tsubscript = match[ 3 ];\n\n\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\t\tbreak;\n\n\t\t\t} else {\n\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\t\tvar map = container.map, next = map[ id ];\n\n\t\t\t\tif ( next === undefined ) {\n\n\t\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\t\taddUniform( container, next );\n\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Root Container\n\n\tfunction WebGLUniforms( gl, program, renderer ) {\n\n\t\tUniformContainer.call( this );\n\n\t\tthis.renderer = renderer;\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\tfor ( var i = 0; i < n; ++ i ) {\n\n\t\t\tvar info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\n\n\t\tvar u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\n\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\t\tvar v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t};\n\n\n\t// Static interface\n\n\tWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, renderer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\t\tvar r = [];\n\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tvar u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction addLineNumbers( string ) {\n\n\t\tvar lines = string.split( '\\n' );\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t\t}\n\n\t\treturn lines.join( '\\n' );\n\n\t}\n\n\tfunction WebGLShader( gl, type, string ) {\n\n\t\tvar shader = gl.createShader( type );\n\n\t\tgl.shaderSource( shader, string );\n\t\tgl.compileShader( shader );\n\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\n\n\t\t}\n\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\n\n\t\t}\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\treturn shader;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar programIdCount = 0;\n\n\tfunction getEncodingComponents( encoding ) {\n\n\t\tswitch ( encoding ) {\n\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn [ 'Linear', '( value )' ];\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn [ 'sRGB', '( value )' ];\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn [ 'RGBE', '( value )' ];\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\n\n\t\t}\n\n\t}\n\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\t\tvar components = getEncodingComponents( encoding );\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n\t}\n\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\t\tvar toneMappingName;\n\n\t\tswitch ( toneMapping ) {\n\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase Uncharted2ToneMapping:\n\t\t\t\ttoneMappingName = 'Uncharted2';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\n\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n\t}\n\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\n\n\t\textensions = extensions || {};\n\n\t\tvar chunks = [\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || ( parameters.normalMap && ! parameters.objectSpaceNormalMap ) || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t\t];\n\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tfunction generateDefines( defines ) {\n\n\t\tvar chunks = [];\n\n\t\tfor ( var name in defines ) {\n\n\t\t\tvar value = defines[ name ];\n\n\t\t\tif ( value === false ) continue;\n\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t\t}\n\n\t\treturn chunks.join( '\\n' );\n\n\t}\n\n\tfunction fetchAttributeLocations( gl, program ) {\n\n\t\tvar attributes = {};\n\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\t\tfor ( var i = 0; i < n; i ++ ) {\n\n\t\t\tvar info = gl.getActiveAttrib( program, i );\n\t\t\tvar name = info.name;\n\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\n\n\t\t}\n\n\t\treturn attributes;\n\n\t}\n\n\tfunction filterEmptyLine( string ) {\n\n\t\treturn string !== '';\n\n\t}\n\n\tfunction replaceLightNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\n\n\t}\n\n\tfunction replaceClippingPlaneNums( string, parameters ) {\n\n\t\treturn string\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n\t}\n\n\tfunction parseIncludes( string ) {\n\n\t\tvar pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\t\tfunction replace( match, include ) {\n\n\t\t\tvar replace = ShaderChunk[ include ];\n\n\t\t\tif ( replace === undefined ) {\n\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t\t}\n\n\t\t\treturn parseIncludes( replace );\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction unrollLoops( string ) {\n\n\t\tvar pattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n\t\tfunction replace( match, start, end, snippet ) {\n\n\t\t\tvar unroll = '';\n\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\n\n\t\t\t}\n\n\t\t\treturn unroll;\n\n\t\t}\n\n\t\treturn string.replace( pattern, replace );\n\n\t}\n\n\tfunction WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar defines = material.defines;\n\n\t\tvar vertexShader = shader.vertexShader;\n\t\tvar fragmentShader = shader.fragmentShader;\n\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t\t}\n\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n\t\tif ( parameters.envMap ) {\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EquirectangularReflectionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SphericalReflectionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.envMap.mapping ) {\n\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase EquirectangularRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tswitch ( material.combine ) {\n\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\t\t// console.log( 'building new program ' );\n\n\t\t//\n\n\t\tvar customExtensions = capabilities.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );\n\n\t\tvar customDefines = generateDefines( defines );\n\n\t\t//\n\n\t\tvar program = gl.createProgram();\n\n\t\tvar prefixVertex, prefixFragment;\n\n\t\tif ( material.isRawShaderMaterial ) {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\t\tprefixVertex += '\\n';\n\n\t\t\t}\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\t\t\t\tcustomDefines\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\t\tprefixFragment += '\\n';\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tprefixVertex = [\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t'attribute vec3 position;',\n\t\t\t\t'attribute vec3 normal;',\n\t\t\t\t'attribute vec2 uv;',\n\n\t\t\t\t'#ifdef USE_COLOR',\n\n\t\t\t\t'\tattribute vec3 color;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\n\n\t\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t\t'\t#else',\n\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t\t'\t#endif',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t\t'#endif',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t\tprefixFragment = [\n\n\t\t\t\tcustomExtensions,\n\n\t\t\t\t'precision ' + parameters.precision + ' float;',\n\t\t\t\t'precision ' + parameters.precision + ' int;',\n\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\n\n\t\t\t\tcustomDefines,\n\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\n\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\n\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t\tparameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t\tparameters.envMap && ( capabilities.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t\t'uniform vec3 cameraPosition;',\n\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\n\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\n\n\t\t\t\t'\\n'\n\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\t}\n\n\t\tvertexShader = parseIncludes( vertexShader );\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\t\tfragmentShader = parseIncludes( fragmentShader );\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\t\tvertexShader = unrollLoops( vertexShader );\n\t\tfragmentShader = unrollLoops( fragmentShader );\n\n\t\tif ( capabilities.isWebGL2 && ! material.isRawShaderMaterial ) {\n\n\t\t\tvar isGLSL3ShaderMaterial = false;\n\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n\t\t\tif ( material.isShaderMaterial &&\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\n\n\t\t\t\tisGLSL3ShaderMaterial = true;\n\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\n\n\t\t\t}\n\n\t\t\t// GLSL 3.0 conversion\n\t\t\tprefixVertex = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define attribute in',\n\t\t\t\t'#define varying out',\n\t\t\t\t'#define texture2D texture'\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\t\tprefixFragment = [\n\t\t\t\t'#version 300 es\\n',\n\t\t\t\t'#define varying in',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t\t'#define texture2D texture',\n\t\t\t\t'#define textureCube texture',\n\t\t\t\t'#define texture2DProj textureProj',\n\t\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t\t}\n\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\n\n\t\t// console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\t\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\t\tgl.attachShader( program, glVertexShader );\n\t\tgl.attachShader( program, glFragmentShader );\n\n\t\t// Force a particular attribute to index 0.\n\n\t\tif ( material.index0AttributeName !== undefined ) {\n\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\n\n\t\t} else if ( parameters.morphTargets === true ) {\n\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t\t}\n\n\t\tgl.linkProgram( program );\n\n\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\tvar runnable = true;\n\t\tvar haveDiagnostics = true;\n\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\t\t\t\tmaterial: material,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t// clean up\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\t// set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\n\t\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program, renderer );\n\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\n\t\t};\n\n\t\t// set up caching for attribute locations\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\n\t\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\n\t\t};\n\n\t\t// free resource\n\n\t\tthis.destroy = function () {\n\n\t\t\tgl.deleteProgram( program );\n\t\t\tthis.program = undefined;\n\n\t\t};\n\n\t\t// DEPRECATED\n\n\t\tObject.defineProperties( this, {\n\n\t\t\tuniforms: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\n\t\t\t\t\treturn this.getUniforms();\n\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tattributes: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\n\t\t\t\t\treturn this.getAttributes();\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} );\n\n\n\t\t//\n\n\t\tthis.name = shader.name;\n\t\tthis.id = programIdCount ++;\n\t\tthis.code = code;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\t\tvar programs = [];\n\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'phong',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\n\t\tvar parameterNames = [\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\"\n\t\t];\n\n\n\t\tfunction allocateBones( object ) {\n\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\treturn 1024;\n\n\t\t\t} else {\n\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//  - leave some extra space for other uniforms\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//    (up to 54 should be safe)\n\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\t\treturn 0;\n\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\n\n\t\t\tvar encoding;\n\n\t\t\tif ( ! map ) {\n\n\t\t\t\tencoding = LinearEncoding;\n\n\t\t\t} else if ( map.isTexture ) {\n\n\t\t\t\tencoding = map.encoding;\n\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\tencoding = map.texture.encoding;\n\n\t\t\t}\n\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\n\n\t\t\t\tencoding = GammaEncoding;\n\n\t\t\t}\n\n\t\t\treturn encoding;\n\n\t\t}\n\n\t\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\n\n\t\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\t\t\tvar precision = capabilities.precision;\n\n\t\t\tif ( material.precision !== null ) {\n\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tvar parameters = {\n\n\t\t\t\tshaderID: shaderID,\n\n\t\t\t\tprecision: precision,\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\n\t\t\t\tmap: !! material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\n\t\t\t\tenvMap: !! material.envMap,\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\t\tlightMap: !! material.lightMap,\n\t\t\t\taoMap: !! material.aoMap,\n\t\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\n\t\t\t\tbumpMap: !! material.bumpMap,\n\t\t\t\tnormalMap: !! material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\t\tspecularMap: !! material.specularMap,\n\t\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\t\tcombine: material.combine,\n\n\t\t\t\tvertexColors: material.vertexColors,\n\n\t\t\t\tfog: !! fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp: ( fog && fog.isFogExp2 ),\n\n\t\t\t\tflatShading: material.flatShading,\n\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures,\n\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\t\tdithering: material.dithering,\n\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\t\ttoneMapping: renderer.toneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\n\n\t\t\t};\n\n\t\t\treturn parameters;\n\n\t\t};\n\n\t\tthis.getProgramCode = function ( material, parameters ) {\n\n\t\t\tvar array = [];\n\n\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\tarray.push( parameters.shaderID );\n\n\t\t\t} else {\n\n\t\t\t\tarray.push( material.fragmentShader );\n\t\t\t\tarray.push( material.vertexShader );\n\n\t\t\t}\n\n\t\t\tif ( material.defines !== undefined ) {\n\n\t\t\t\tfor ( var name in material.defines ) {\n\n\t\t\t\t\tarray.push( name );\n\t\t\t\t\tarray.push( material.defines[ name ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( material.onBeforeCompile.toString() );\n\n\t\t\tarray.push( renderer.gammaOutput );\n\n\t\t\treturn array.join();\n\n\t\t};\n\n\t\tthis.acquireProgram = function ( material, shader, parameters, code ) {\n\n\t\t\tvar program;\n\n\t\t\t// Check if code has been already compiled\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\t\tvar programInfo = programs[ p ];\n\n\t\t\t\tif ( programInfo.code === code ) {\n\n\t\t\t\t\tprogram = programInfo;\n\t\t\t\t\t++ program.usedTimes;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\tprogram = new WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities );\n\t\t\t\tprograms.push( program );\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t};\n\n\t\tthis.releaseProgram = function ( program ) {\n\n\t\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf( program );\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\t\tprograms.pop();\n\n\t\t\t\t// Free WebGL resources\n\t\t\t\tprogram.destroy();\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tthis.programs = programs;\n\n\t}\n\n\t/**\n\t * @author fordacious / fordacious.github.io\n\t */\n\n\tfunction WebGLProperties() {\n\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get( object ) {\n\n\t\t\tvar map = properties.get( object );\n\n\t\t\tif ( map === undefined ) {\n\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set( object, map );\n\n\t\t\t}\n\n\t\t\treturn map;\n\n\t\t}\n\n\t\tfunction remove( object ) {\n\n\t\t\tproperties.delete( object );\n\n\t\t}\n\n\t\tfunction update( object, key, value ) {\n\n\t\t\tproperties.get( object )[ key ] = value;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tproperties = new WeakMap();\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction painterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.program && b.program && a.program !== b.program ) {\n\n\t\t\treturn a.program.id - b.program.id;\n\n\t\t} else if ( a.material.id !== b.material.id ) {\n\n\t\t\treturn a.material.id - b.material.id;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn a.z - b.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\tfunction reversePainterSortStable( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else {\n\n\t\t\treturn a.id - b.id;\n\n\t\t}\n\n\t}\n\n\n\tfunction WebGLRenderList() {\n\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\n\t\tfunction init() {\n\n\t\t\trenderItemsIndex = 0;\n\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\n\t\t}\n\n\t\tfunction push( object, geometry, material, z, group ) {\n\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\n\n\t\t\tif ( renderItem === undefined ) {\n\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: material.program,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t\t} else {\n\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = material.program;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\n\t\t\t}\n\n\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\n\n\t\t\trenderItemsIndex ++;\n\n\t\t}\n\n\t\tfunction sort() {\n\n\t\t\tif ( opaque.length > 1 ) opaque.sort( painterSortStable );\n\t\t\tif ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );\n\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\n\t\t\tinit: init,\n\t\t\tpush: push,\n\n\t\t\tsort: sort\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderLists() {\n\n\t\tvar lists = {};\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar hash = scene.id + ',' + camera.id;\n\t\t\tvar list = lists[ hash ];\n\n\t\t\tif ( list === undefined ) {\n\n\t\t\t\t// console.log( 'THREE.WebGLRenderLists:', hash );\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlists[ hash ] = list;\n\n\t\t\t}\n\n\t\t\treturn list;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tlists = {};\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction UniformsCache() {\n\n\t\tvar lights = {};\n\n\t\treturn {\n\n\t\t\tget: function ( light ) {\n\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\t\treturn lights[ light.id ];\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch ( light.type ) {\n\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0,\n\n\t\t\t\t\t\t\tshadow: false,\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\t\treturn uniforms;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tvar count = 0;\n\n\tfunction WebGLLights() {\n\n\t\tvar cache = new UniformsCache();\n\n\t\tvar state = {\n\n\t\t\tid: count ++,\n\n\t\t\thash: {\n\t\t\t\tstateID: - 1,\n\t\t\t\tdirectionalLength: - 1,\n\t\t\t\tpointLength: - 1,\n\t\t\t\tspotLength: - 1,\n\t\t\t\trectAreaLength: - 1,\n\t\t\t\themiLength: - 1,\n\t\t\t\tshadowsLength: - 1\n\t\t\t},\n\n\t\t\tambient: [ 0, 0, 0 ],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\tpoint: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\n\t\t};\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup( lights, shadows, camera ) {\n\n\t\t\tvar r = 0, g = 0, b = 0;\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\n\t\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\t\tdirectionalLength ++;\n\n\t\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\t\tspotLength ++;\n\n\t\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\t\trectAreaLength ++;\n\n\t\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\n\n\t\t\t\t\tuniforms.shadow = light.castShadow;\n\n\t\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\t\tpointLength ++;\n\n\t\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\t\themiLength ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.ambient[ 0 ] = r;\n\t\t\tstate.ambient[ 1 ] = g;\n\t\t\tstate.ambient[ 2 ] = b;\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.hash.stateID = state.id;\n\t\t\tstate.hash.directionalLength = directionalLength;\n\t\t\tstate.hash.pointLength = pointLength;\n\t\t\tstate.hash.spotLength = spotLength;\n\t\t\tstate.hash.rectAreaLength = rectAreaLength;\n\t\t\tstate.hash.hemiLength = hemiLength;\n\t\t\tstate.hash.shadowsLength = shadows.length;\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tstate: state\n\t\t};\n\n\t}\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WebGLRenderState() {\n\n\t\tvar lights = new WebGLLights();\n\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\n\t\t}\n\n\t\tfunction pushLight( light ) {\n\n\t\t\tlightsArray.push( light );\n\n\t\t}\n\n\t\tfunction pushShadow( shadowLight ) {\n\n\t\t\tshadowsArray.push( shadowLight );\n\n\t\t}\n\n\t\tfunction setupLights( camera ) {\n\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\n\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\n\t\t\tlights: lights\n\t\t};\n\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\n\t}\n\n\tfunction WebGLRenderStates() {\n\n\t\tvar renderStates = {};\n\n\t\tfunction get( scene, camera ) {\n\n\t\t\tvar renderState;\n\n\t\t\tif ( renderStates[ scene.id ] === undefined ) {\n\n\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\trenderStates[ scene.id ] = {};\n\t\t\t\trenderStates[ scene.id ][ camera.id ] = renderState;\n\n\t\t\t} else {\n\n\t\t\t\tif ( renderStates[ scene.id ][ camera.id ] === undefined ) {\n\n\t\t\t\t\trenderState = new WebGLRenderState();\n\t\t\t\t\trenderStates[ scene.id ][ camera.id ] = renderState;\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderState = renderStates[ scene.id ][ camera.id ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn renderState;\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\trenderStates = {};\n\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author bhouston / https://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t * }\n\t */\n\n\tfunction MeshDepthMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *\n\t *  referencePosition: <float>,\n\t *  nearDistance: <float>,\n\t *  farDistance: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tfunction MeshDistanceMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\n\n\t\tvar _frustum = new Frustum(),\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_shadowMapSize = new Vector2(),\n\t\t\t_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),\n\n\t\t\t_lookTarget = new Vector3(),\n\t\t\t_lightPositionWorld = new Vector3(),\n\n\t\t\t_MorphingFlag = 1,\n\t\t\t_SkinningFlag = 2,\n\n\t\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\n\n\t\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\n\t\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\n\n\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\t\tvar cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tvar cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t\tvar cube2DViewPorts = [\n\t\t\tnew Vector4(), new Vector4(), new Vector4(),\n\t\t\tnew Vector4(), new Vector4(), new Vector4()\n\t\t];\n\n\t\t// init\n\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\n\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\n\n\t\t\tvar depthMaterial = new MeshDepthMaterial( {\n\n\t\t\t\tdepthPacking: RGBADepthPacking,\n\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning\n\n\t\t\t} );\n\n\t\t\t_depthMaterials[ i ] = depthMaterial;\n\n\t\t\t//\n\n\t\t\tvar distanceMaterial = new MeshDistanceMaterial( {\n\n\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\tskinning: useSkinning\n\n\t\t\t} );\n\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\n\n\t\t}\n\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tthis.enabled = false;\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function ( lights, scene, camera ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\t\tif ( lights.length === 0 ) return;\n\n\t\t\t// TODO Clean up (needed in case of contextlost)\n\t\t\tvar _gl = _renderer.context;\n\t\t\tvar _state = _renderer.state;\n\n\t\t\t// Set GL state for depth map.\n\t\t\t_state.disable( _gl.BLEND );\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t\t_state.buffers.depth.setTest( true );\n\t\t\t_state.setScissorTest( false );\n\n\t\t\t// render depth map\n\n\t\t\tvar faceCount;\n\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\t\tvar light = lights[ i ];\n\t\t\t\tvar shadow = light.shadow;\n\t\t\t\tvar isPointLight = light && light.isPointLight;\n\n\t\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowCamera = shadow.camera;\n\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\t\t\t\t_shadowMapSize.min( _maxShadowMapSize );\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\n\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\n\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t\t\t// following orientation:\n\t\t\t\t\t//\n\t\t\t\t\t//  xzXZ\n\t\t\t\t\t//   y Y\n\t\t\t\t\t//\n\t\t\t\t\t// X - Positive x direction\n\t\t\t\t\t// x - Negative x direction\n\t\t\t\t\t// Y - Positive y direction\n\t\t\t\t\t// y - Negative y direction\n\t\t\t\t\t// Z - Positive z direction\n\t\t\t\t\t// z - Negative z direction\n\n\t\t\t\t\t// positive X\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative X\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Z\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// negative Z\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\n\t\t\t\t\t// positive Y\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\n\t\t\t\t\t// negative Y\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\n\n\t\t\t\t\t_shadowMapSize.x *= 4.0;\n\t\t\t\t\t_shadowMapSize.y *= 2.0;\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\n\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( shadow.isSpotLightShadow ) {\n\n\t\t\t\t\tshadow.update( light );\n\n\t\t\t\t}\n\n\t\t\t\tvar shadowMap = shadow.map;\n\t\t\t\tvar shadowMatrix = shadow.matrix;\n\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\n\n\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\tfaceCount = 6;\n\n\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\n\t\t\t\t\t// equal to inverse of the light's position\n\n\t\t\t\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfaceCount = 1;\n\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\t// compute shadow matrix\n\n\t\t\t\t\tshadowMatrix.set(\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t\t\t);\n\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\n\t\t\t\t_renderer.clear();\n\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\n\t\t\t\t// run a single pass if not\n\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\n\n\t\t\t\t\tif ( isPointLight ) {\n\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\n\t\t\t\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\n\t\t\t\t\t\t_state.viewport( vpDimensions );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// update camera matrices and frustum\n\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t\t\t// set object matrices & frustum culling\n\n\t\t\t\t\trenderObject( scene, camera, shadowCamera, isPointLight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t};\n\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tvar result = null;\n\n\t\t\tvar materialVariants = _depthMaterials;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif ( isPointLight ) {\n\n\t\t\t\tmaterialVariants = _distanceMaterials;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\n\t\t\t}\n\n\t\t\tif ( ! customMaterial ) {\n\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\t\tif ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\n\t\t\t\t\t} else if ( geometry && geometry.isGeometry ) {\n\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.isSkinnedMesh && material.skinning === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\n\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\n\n\t\t\t\tvar variantIndex = 0;\n\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\n\n\t\t\t\tresult = materialVariants[ variantIndex ];\n\n\t\t\t} else {\n\n\t\t\t\tresult = customMaterial;\n\n\t\t\t}\n\n\t\t\tif ( _renderer.localClippingEnabled &&\n\t\t\t\t\tmaterial.clipShadows === true &&\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tresult.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif ( isPointLight && result.isMeshDistanceMaterial ) {\n\n\t\t\t\tresult.referencePosition.copy( lightPositionWorld );\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\t\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\t\tvar geometry = _objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ k ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLState( gl, extensions, utils, capabilities ) {\n\n\t\tfunction ColorBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\t\treturn {\n\n\t\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\n\t\t\tvar locked = false;\n\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\n\t\t\treturn {\n\n\t\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\t\tlocked = lock;\n\n\t\t\t\t},\n\n\t\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\treset: function () {\n\n\t\t\t\t\tlocked = false;\n\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\n\t\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\n\n\t\tvar enabledCapabilities = {};\n\n\t\tvar compressedTextureFormats = null;\n\n\t\tvar currentProgram = null;\n\n\t\tvar currentBlendingEnabled = null;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\n\t\tvar currentLineWidth = null;\n\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\n\t\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter( gl.VERSION );\n\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture( type, target, count ) {\n\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\t\tvar texture = gl.createTexture();\n\n\t\t\tgl.bindTexture( type, texture );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\t\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\t\t// init\n\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\t\tdepthBuffer.setClear( 1 );\n\t\tstencilBuffer.setClear( 0 );\n\n\t\tenable( gl.DEPTH_TEST );\n\t\tdepthBuffer.setFunc( LessEqualDepth );\n\n\t\tsetFlipSided( false );\n\t\tsetCullFace( CullFaceBack );\n\t\tenable( gl.CULL_FACE );\n\n\t\tsetBlending( NoBlending );\n\n\t\t//\n\n\t\tfunction initAttributes() {\n\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\n\n\t\t\t\tnewAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enableAttribute( attribute ) {\n\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\t\tnewAttributes[ attribute ] = 1;\n\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t\t}\n\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\t\tvar extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction enable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\t\tgl.enable( id );\n\t\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction disable( id ) {\n\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\t\tgl.disable( id );\n\t\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getCompressedTextureFormats() {\n\n\t\t\tif ( compressedTextureFormats === null ) {\n\n\t\t\t\tcompressedTextureFormats = [];\n\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ||\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_astc' ) ) {\n\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\n\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\n\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn compressedTextureFormats;\n\n\t\t}\n\n\t\tfunction useProgram( program ) {\n\n\t\t\tif ( currentProgram !== program ) {\n\n\t\t\t\tgl.useProgram( program );\n\n\t\t\t\tcurrentProgram = program;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\t\tif ( blending === NoBlending ) {\n\n\t\t\t\tif ( currentBlendingEnabled ) {\n\n\t\t\t\t\tdisable( gl.BLEND );\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( ! currentBlendingEnabled ) {\n\n\t\t\t\tenable( gl.BLEND );\n\t\t\t\tcurrentBlendingEnabled = true;\n\n\t\t\t}\n\n\t\t\tif ( blending !== CustomBlending ) {\n\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// custom blending\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\t\tgl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );\n\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t\t}\n\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\t\tgl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );\n\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\n\t\t}\n\n\t\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\t\tmaterial.side === DoubleSide\n\t\t\t\t? disable( gl.CULL_FACE )\n\t\t\t\t: enable( gl.CULL_FACE );\n\n\t\t\tvar flipSided = ( material.side === BackSide );\n\t\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\t\tsetFlipSided( flipSided );\n\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t\t? setBlending( NoBlending )\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\t\tdepthBuffer.setTest( material.depthTest );\n\t\t\tdepthBuffer.setMask( material.depthWrite );\n\t\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\t}\n\n\t\t//\n\n\t\tfunction setFlipSided( flipSided ) {\n\n\t\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\t\tif ( flipSided ) {\n\n\t\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setCullFace( cullFace ) {\n\n\t\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\t\tenable( gl.CULL_FACE );\n\n\t\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.CULL_FACE );\n\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\n\t\t}\n\n\t\tfunction setLineWidth( width ) {\n\n\t\t\tif ( width !== currentLineWidth ) {\n\n\t\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\t\tcurrentLineWidth = width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\t\tif ( polygonOffset ) {\n\n\t\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setScissorTest( scissorTest ) {\n\n\t\t\tif ( scissorTest ) {\n\n\t\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t\t} else {\n\n\t\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// texture\n\n\t\tfunction activeTexture( webglSlot ) {\n\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\tactiveTexture();\n\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\t\tif ( boundTexture === undefined ) {\n\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t\t}\n\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction texImage2D() {\n\n\t\t\ttry {\n\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction scissor( scissor ) {\n\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\t\tcurrentScissor.copy( scissor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction viewport( viewport ) {\n\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\t\tcurrentViewport.copy( viewport );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tfunction reset() {\n\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\n\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\n\n\t\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tenabledCapabilities = {};\n\n\t\t\tcompressedTextureFormats = null;\n\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\n\t\t\tcurrentProgram = null;\n\n\t\t\tcurrentBlending = null;\n\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\n\n\t\t\tuseProgram: useProgram,\n\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\t\tsetScissorTest: setScissorTest,\n\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\n\t\t\treset: reset\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\t\tvar _videoTextures = {};\n\t\tvar _canvas;\n\n\t\t//\n\n\t\tfunction clampToMaxSize( image, maxSize ) {\n\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\n\t\t\t\t// premultiplied alpha.\n\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\n\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\n\n\t\t\t\tvar context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height );\n\n\t\t\t\treturn canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction isPowerOfTwo( image ) {\n\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\n\n\t\t}\n\n\t\tfunction makePowerOfTwo( image ) {\n\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\n\t\t\t\t_canvas.width = _Math.floorPowerOfTwo( image.width );\n\t\t\t\t_canvas.height = _Math.floorPowerOfTwo( image.height );\n\n\t\t\t\tvar context = _canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, _canvas.width, _canvas.height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + _canvas.width + 'x' + _canvas.height );\n\n\t\t\t\treturn _canvas;\n\n\t\t\t}\n\n\t\t\treturn image;\n\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) return false;\n\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {\n\n\t\t\treturn texture.generateMipmaps && isPowerOfTwo &&\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t\t}\n\n\t\tfunction generateMipmap( target, texture, width, height ) {\n\n\t\t\t_gl.generateMipmap( target );\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\n\n\t\t}\n\n\t\tfunction getInternalFormat( glFormat, glType ) {\n\n\t\t\tif ( ! capabilities.isWebGL2 ) return glFormat;\n\n\t\t\tif ( glFormat === _gl.RGB ) {\n\n\t\t\t\tif ( glType === _gl.FLOAT ) return _gl.RGB32F;\n\t\t\t\tif ( glType === _gl.HALF_FLOAT ) return _gl.RGB16F;\n\t\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) return _gl.RGB8;\n\n\t\t\t}\n\n\t\t\tif ( glFormat === _gl.RGBA ) {\n\n\t\t\t\tif ( glType === _gl.FLOAT ) return _gl.RGBA32F;\n\t\t\t\tif ( glType === _gl.HALF_FLOAT ) return _gl.RGBA16F;\n\t\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) return _gl.RGBA8;\n\n\t\t\t}\n\n\t\t\treturn glFormat;\n\n\t\t}\n\n\t\t// Fallback filters for non-power-of-2 textures\n\n\t\tfunction filterFallback( f ) {\n\n\t\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\n\n\t\t\t\treturn _gl.NEAREST;\n\n\t\t\t}\n\n\t\t\treturn _gl.LINEAR;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction onTextureDispose( event ) {\n\n\t\t\tvar texture = event.target;\n\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\t\tdeallocateTexture( texture );\n\n\t\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t\tdelete _videoTextures[ texture.id ];\n\n\t\t\t}\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tfunction onRenderTargetDispose( event ) {\n\n\t\t\tvar renderTarget = event.target;\n\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\tdeallocateRenderTarget( renderTarget );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\t//\n\n\t\tfunction deallocateTexture( texture ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\n\n\t\t\t} else {\n\n\t\t\t\t// 2D texture\n\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\t// remove all webgl properties\n\t\t\tproperties.remove( texture );\n\n\t\t}\n\n\t\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\tif ( ! renderTarget ) return;\n\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\n\t\t\t}\n\n\t\t\tproperties.remove( renderTarget.texture );\n\t\t\tproperties.remove( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\n\n\t\tfunction setTexture2D( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureCube( texture, slot ) {\n\n\t\t\tvar textureProperties = properties.get( texture );\n\n\t\t\tif ( texture.image.length === 6 ) {\n\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\n\n\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\n\t\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\n\t\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\t\t\tvar cubeImage = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar image = cubeImage[ 0 ],\n\t\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! isCompressed ) {\n\n\t\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, texture, image.width, image.height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\n\n\t\t}\n\n\t\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( isPowerOfTwoImage ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( extension ) {\n\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\n\t\t\t\tif ( texture.type === HalfFloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;\n\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t}\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\n\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\n\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\n\n\t\t\t\timage = makePowerOfTwo( image );\n\n\t\t\t}\n\n\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\n\t\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\n\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tif ( ! capabilities.isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t} else if ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\n\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\n\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D, texture, image.width, image.height );\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\t// Render targets\n\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\n\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\n\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t\t} else {\n\n\t\t\t\t// FIXME: We don't support !depth !stencil\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t}\n\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\n\t\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t\t}\n\n\t\t\t// upload an empty depth texture with framebuffer size\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup GL resources for a non-texture depth buffer\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\n\t\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t\t} else {\n\n\t\t\t\tif ( isCube ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t\t// Set up GL resources for the render target\n\t\tfunction setupRenderTarget( renderTarget ) {\n\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\t// Setup framebuffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t\t// Setup color buffer\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\n\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\n\n\t\t\t}\n\n\t\t\t// Setup depth and stencil buffers\n\n\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {\n\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\n\t\t\t\tstate.bindTexture( target, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateVideoTexture( texture ) {\n\n\t\t\tvar id = texture.id;\n\t\t\tvar frame = info.render.frame;\n\n\t\t\t// Check the last frame we updated the VideoTexture\n\n\t\t\tif ( _videoTextures[ id ] !== frame ) {\n\n\t\t\t\t_videoTextures[ id ] = frame;\n\t\t\t\ttexture.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\n\t}\n\n\t/**\n\t * @author thespite / http://www.twitter.com/thespite\n\t */\n\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\t\tfunction convert( p ) {\n\n\t\t\tvar extension;\n\n\t\t\tif ( p === RepeatWrapping ) return gl.REPEAT;\n\t\t\tif ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;\n\t\t\tif ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;\n\n\t\t\tif ( p === NearestFilter ) return gl.NEAREST;\n\t\t\tif ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;\n\t\t\tif ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;\n\n\t\t\tif ( p === LinearFilter ) return gl.LINEAR;\n\t\t\tif ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;\n\t\t\tif ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;\n\n\t\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\t\t\tif ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;\n\n\t\t\tif ( p === ByteType ) return gl.BYTE;\n\t\t\tif ( p === ShortType ) return gl.SHORT;\n\t\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\t\tif ( p === IntType ) return gl.INT;\n\t\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\t\tif ( p === HalfFloatType ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) return gl.HALF_FLOAT;\n\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\n\n\t\t\t}\n\n\t\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\t\tif ( p === RGBFormat ) return gl.RGB;\n\t\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\t\tif ( p === AddEquation ) return gl.FUNC_ADD;\n\t\t\tif ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;\n\t\t\tif ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;\n\n\t\t\tif ( p === ZeroFactor ) return gl.ZERO;\n\t\t\tif ( p === OneFactor ) return gl.ONE;\n\t\t\tif ( p === SrcColorFactor ) return gl.SRC_COLOR;\n\t\t\tif ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;\n\t\t\tif ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;\n\t\t\tif ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;\n\t\t\tif ( p === DstAlphaFactor ) return gl.DST_ALPHA;\n\t\t\tif ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;\n\n\t\t\tif ( p === DstColorFactor ) return gl.DST_COLOR;\n\t\t\tif ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;\n\t\t\tif ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;\n\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t}\n\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\treturn p;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === MinEquation || p === MaxEquation ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\tif ( p === MinEquation ) return gl.MIN;\n\t\t\t\t\tif ( p === MaxEquation ) return gl.MAX;\n\n\t\t\t\t}\n\n\t\t\t\textension = extensions.get( 'EXT_blend_minmax' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\n\t\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) return gl.UNSIGNED_INT_24_8;\n\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\treturn { convert: convert };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Group() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Group';\n\n\t}\n\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Group,\n\n\t\tisGroup: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author greggman / http://games.greggman.com/\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author tschw\n\t */\n\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\n\n\t\tCamera.call( this );\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov !== undefined ? fov : 50;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near !== undefined ? near : 0.1;\n\t\tthis.far = far !== undefined ? far : 2000;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\n\n\t\tconstructor: PerspectiveCamera,\n\n\t\tisPerspectiveCamera: true,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\n\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function ( focalLength ) {\n\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function () {\n\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\n\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t\t},\n\n\t\tgetEffectiveFOV: function () {\n\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\n\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t\t},\n\n\t\tgetFilmWidth: function () {\n\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t\t},\n\n\t\tgetFilmHeight: function () {\n\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *   +---+---+---+\n\t\t *   | A | B | C |\n\t\t *   +---+---+---+\n\t\t *   | D | E | F |\n\t\t *   +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *   var w = 1920;\n\t\t *   var h = 1080;\n\t\t *   var fullWidth = w * 3;\n\t\t *   var fullHeight = h * 2;\n\t\t *\n\t\t *   --A--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *   --B--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *   --C--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *   --D--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *   --E--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *   --F--\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif ( this.view === null ) {\n\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tclearViewOffset: function () {\n\n\t\t\tif ( this.view !== null ) {\n\n\t\t\t\tthis.view.enabled = false;\n\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\n\t\t},\n\n\t\tupdateProjectionMatrix: function () {\n\n\t\t\tvar near = this.near,\n\t\t\t\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\n\t\t\t\theight = 2 * top,\n\t\t\t\twidth = this.aspect * height,\n\t\t\t\tleft = - 0.5 * width,\n\t\t\t\tview = this.view;\n\n\t\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\n\t\t\tdata.object.aspect = this.aspect;\n\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ArrayCamera( array ) {\n\n\t\tPerspectiveCamera.call( this );\n\n\t\tthis.cameras = array || [];\n\n\t}\n\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\n\n\t\tconstructor: ArrayCamera,\n\n\t\tisArrayCamera: true\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebVRManager( renderer ) {\n\n\t\tvar scope = this;\n\n\t\tvar device = null;\n\t\tvar frameData = null;\n\n\t\tvar poseTarget = null;\n\n\t\tvar controllers = [];\n\t\tvar standingMatrix = new Matrix4();\n\t\tvar standingMatrixInverse = new Matrix4();\n\n\t\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\n\n\t\t\tframeData = new window.VRFrameData();\n\t\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\n\n\t\t}\n\n\t\tvar matrixWorldInverse = new Matrix4();\n\t\tvar tempQuaternion = new Quaternion();\n\t\tvar tempPosition = new Vector3();\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\n\t\tcameraL.layers.enable( 1 );\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\n\t\tcameraR.layers.enable( 2 );\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tfunction isPresenting() {\n\n\t\t\treturn device !== null && device.isPresenting === true;\n\n\t\t}\n\n\t\tvar currentSize, currentPixelRatio;\n\n\t\tfunction onVRDisplayPresentChange() {\n\n\t\t\tif ( isPresenting() ) {\n\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\n\t\t\t\tvar renderWidth = eyeParameters.renderWidth;\n\t\t\t\tvar renderHeight = eyeParameters.renderHeight;\n\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\n\t\t\t\tcurrentSize = renderer.getSize();\n\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\n\n\t\t\t\tanimation.start();\n\n\t\t\t} else if ( scope.enabled ) {\n\n\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\n\n\t\t\t\tanimation.stop();\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar triggers = [];\n\n\t\tfunction findGamepad( id ) {\n\n\t\t\tvar gamepads = navigator.getGamepads && navigator.getGamepads();\n\n\t\t\tfor ( var i = 0, j = 0, l = gamepads.length; i < l; i ++ ) {\n\n\t\t\t\tvar gamepad = gamepads[ i ];\n\n\t\t\t\tif ( gamepad && ( gamepad.id === 'Daydream Controller' ||\n\t\t\t\t\tgamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||\n\t\t\t\t\tgamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||\n\t\t\t\t\tgamepad.id.startsWith( 'Spatial Controller' ) ) ) {\n\n\t\t\t\t\tif ( j === id ) return gamepad;\n\n\t\t\t\t\tj ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction updateControllers() {\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar gamepad = findGamepad( i );\n\n\t\t\t\tif ( gamepad !== undefined && gamepad.pose !== undefined ) {\n\n\t\t\t\t\tif ( gamepad.pose === null ) return;\n\n\t\t\t\t\t//  Pose\n\n\t\t\t\t\tvar pose = gamepad.pose;\n\n\t\t\t\t\tif ( pose.hasPosition === false ) controller.position.set( 0.2, - 0.6, - 0.05 );\n\n\t\t\t\t\tif ( pose.position !== null ) controller.position.fromArray( pose.position );\n\t\t\t\t\tif ( pose.orientation !== null ) controller.quaternion.fromArray( pose.orientation );\n\t\t\t\t\tcontroller.matrix.compose( controller.position, controller.quaternion, controller.scale );\n\t\t\t\t\tcontroller.matrix.premultiply( standingMatrix );\n\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.quaternion, controller.scale );\n\t\t\t\t\tcontroller.matrixWorldNeedsUpdate = true;\n\t\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t\t//  Trigger\n\n\t\t\t\t\tvar buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;\n\n\t\t\t\t\tif ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\n\n\t\t\t\t\t\ttriggers[ i ] = gamepad.buttons[ buttonId ].pressed;\n\n\t\t\t\t\t\tif ( triggers[ i ] === true ) {\n\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectstart' } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectend' } );\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'select' } );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontroller.visible = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tthis.enabled = false;\n\t\tthis.userHeight = 1.6;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new Group();\n\t\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller;\n\n\t\t};\n\n\t\tthis.getDevice = function () {\n\n\t\t\treturn device;\n\n\t\t};\n\n\t\tthis.setDevice = function ( value ) {\n\n\t\t\tif ( value !== undefined ) device = value;\n\n\t\t\tanimation.setContext( value );\n\n\t\t};\n\n\t\tthis.setPoseTarget = function ( object ) {\n\n\t\t\tif ( object !== undefined ) poseTarget = object;\n\n\t\t};\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tif ( device === null ) {\n\n\t\t\t\tcamera.position.set( 0, scope.userHeight, 0 );\n\t\t\t\treturn camera;\n\n\t\t\t}\n\n\t\t\tdevice.depthNear = camera.near;\n\t\t\tdevice.depthFar = camera.far;\n\n\t\t\tdevice.getFrameData( frameData );\n\n\t\t\t//\n\n\t\t\tvar stageParameters = device.stageParameters;\n\n\t\t\tif ( stageParameters ) {\n\n\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\n\n\t\t\t} else {\n\n\t\t\t\tstandingMatrix.makeTranslation( 0, scope.userHeight, 0 );\n\n\t\t\t}\n\n\n\t\t\tvar pose = frameData.pose;\n\t\t\tvar poseObject = poseTarget !== null ? poseTarget : camera;\n\n\t\t\t// We want to manipulate poseObject by its position and quaternion components since users may rely on them.\n\t\t\tposeObject.matrix.copy( standingMatrix );\n\t\t\tposeObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );\n\n\t\t\tif ( pose.orientation !== null ) {\n\n\t\t\t\ttempQuaternion.fromArray( pose.orientation );\n\t\t\t\tposeObject.quaternion.multiply( tempQuaternion );\n\n\t\t\t}\n\n\t\t\tif ( pose.position !== null ) {\n\n\t\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\n\t\t\t\ttempPosition.fromArray( pose.position );\n\t\t\t\ttempPosition.applyQuaternion( tempQuaternion );\n\t\t\t\tposeObject.position.add( tempPosition );\n\n\t\t\t}\n\n\t\t\tposeObject.updateMatrixWorld();\n\n\t\t\tif ( device.isPresenting === false ) return camera;\n\n\t\t\t//\n\n\t\t\tcameraL.near = camera.near;\n\t\t\tcameraR.near = camera.near;\n\n\t\t\tcameraL.far = camera.far;\n\t\t\tcameraR.far = camera.far;\n\n\t\t\tcameraVR.matrixWorld.copy( camera.matrixWorld );\n\t\t\tcameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );\n\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\n\n\t\t\t// TODO (mrdoob) Double check this code\n\n\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\n\n\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\n\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\n\n\t\t\tvar parent = poseObject.parent;\n\n\t\t\tif ( parent !== null ) {\n\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\n\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\n\n\t\t\t}\n\n\t\t\t// envMap and Mirror needs camera.matrixWorld\n\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\n\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\n\n\t\t\t// HACK (mrdoob)\n\t\t\t// https://github.com/w3c/webvr/issues/203\n\n\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t//\n\n\t\t\tvar layers = device.getLayers();\n\n\t\t\tif ( layers.length ) {\n\n\t\t\t\tvar layer = layers[ 0 ];\n\n\t\t\t\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\n\n\t\t\t\t\tcameraL.bounds.fromArray( layer.leftBounds );\n\n\t\t\t\t}\n\n\t\t\t\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\n\n\t\t\t\t\tcameraR.bounds.fromArray( layer.rightBounds );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tupdateControllers();\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\treturn standingMatrix;\n\n\t\t};\n\n\t\tthis.isPresenting = isPresenting;\n\n\t\t// Animation Loop\n\n\t\tvar animation = new WebGLAnimation();\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tanimation.setAnimationLoop( callback );\n\n\t\t};\n\n\t\tthis.submitFrame = function () {\n\n\t\t\tif ( isPresenting() ) device.submitFrame();\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\tif ( typeof window !== 'undefined' ) {\n\n\t\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction WebXRManager( renderer ) {\n\n\t\tvar gl = renderer.context;\n\n\t\tvar device = null;\n\t\tvar session = null;\n\n\t\tvar frameOfRef = null;\n\n\t\tvar pose = null;\n\n\t\tvar controllers = [];\n\t\tvar inputSources = [];\n\n\t\tfunction isPresenting() {\n\n\t\t\treturn session !== null && frameOfRef !== null;\n\n\n\t\t}\n\n\t\t//\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\t//\n\n\t\tthis.enabled = false;\n\n\t\tthis.getController = function ( id ) {\n\n\t\t\tvar controller = controllers[ id ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new Group();\n\t\t\t\tcontroller.matrixAutoUpdate = false;\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t\tcontrollers[ id ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller;\n\n\t\t};\n\n\t\tthis.getDevice = function () {\n\n\t\t\treturn device;\n\n\t\t};\n\n\t\tthis.setDevice = function ( value ) {\n\n\t\t\tif ( value !== undefined ) device = value;\n\t\t\tif ( value instanceof XRDevice ) gl.setCompatibleXRDevice( value );\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tvar controller = controllers[ inputSources.indexOf( event.inputSource ) ];\n\t\t\tif ( controller ) controller.dispatchEvent( { type: event.type } );\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\trenderer.setFramebuffer( null );\n\t\t\tanimation.stop();\n\n\t\t}\n\n\t\tthis.setSession = function ( value, options ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\t\tsession.baseLayer = new XRWebGLLayer( session, gl );\n\t\t\t\tsession.requestFrameOfReference( options.frameOfReferenceType ).then( function ( value ) {\n\n\t\t\t\t\tframeOfRef = value;\n\n\t\t\t\t\trenderer.setFramebuffer( session.baseLayer.framebuffer );\n\n\t\t\t\t\tanimation.setContext( session );\n\t\t\t\t\tanimation.start();\n\n\t\t\t\t} );\n\n\t\t\t\t//\n\n\t\t\t\tinputSources = session.getInputSources();\n\n\t\t\t\tsession.addEventListener( 'inputsourceschange', function () {\n\n\t\t\t\t\tinputSources = session.getInputSources();\n\t\t\t\t\tconsole.log( inputSources );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t}\n\n\t\tthis.getCamera = function ( camera ) {\n\n\t\t\tif ( isPresenting() ) {\n\n\t\t\t\tvar parent = camera.parent;\n\t\t\t\tvar cameras = cameraVR.cameras;\n\n\t\t\t\t// apply camera.parent to cameraVR\n\n\t\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t\t}\n\n\t\t\t\t// update camera and its children\n\n\t\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\t\tvar children = camera.children;\n\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t\t}\n\n\t\t\t\treturn cameraVR;\n\n\t\t\t}\n\n\t\t\treturn camera;\n\n\t\t};\n\n\t\tthis.isPresenting = isPresenting;\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getDevicePose( frameOfRef );\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tvar layer = session.baseLayer;\n\t\t\t\tvar views = frame.views;\n\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tvar view = views[ i ];\n\t\t\t\t\tvar viewport = layer.getViewport( view );\n\t\t\t\t\tvar viewMatrix = pose.getViewMatrix( view );\n\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\t\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t\t// HACK (mrdoob)\n\t\t\t\t\t\t// https://github.com/w3c/webvr/issues/203\n\n\t\t\t\t\t\tcameraVR.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tvar controller = controllers[ i ];\n\n\t\t\t\tvar inputSource = inputSources[ i ];\n\n\t\t\t\tif ( inputSource ) {\n\n\t\t\t\t\tvar inputPose = frame.getInputPose( inputSource, frameOfRef );\n\n\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\tif ( 'targetRay' in inputPose ) {\n\n\t\t\t\t\t\t\tcontroller.matrix.elements = inputPose.targetRay.transformMatrix;\n\n\t\t\t\t\t\t} else if ( 'pointerMatrix' in inputPose ) {\n\n\t\t\t\t\t\t\t// DEPRECATED\n\n\t\t\t\t\t\t\tcontroller.matrix.elements = inputPose.pointerMatrix;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\n\t\t\t\t\t\tcontroller.visible = true;\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcontroller.visible = false;\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t\t// DEPRECATED\n\n\t\tthis.getStandingMatrix = function () {\n\n\t\t\tconsole.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );\n\t\t\treturn new THREE.Matrix4();\n\n\t\t};\n\n\t\tthis.submitFrame = function () {};\n\n\t}\n\n\t/**\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author szimek / https://github.com/szimek/\n\t * @author tschw\n\t */\n\n\tfunction WebGLRenderer( parameters ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer', REVISION );\n\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null;\n\n\t\t// public properties\n\n\t\tthis.domElement = _canvas;\n\t\tthis.context = null;\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\t\tthis.gammaInput = false;\n\t\tthis.gammaOutput = false;\n\n\t\t// physical lights\n\n\t\tthis.physicallyCorrectLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = LinearToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\t\tthis.toneMappingWhitePoint = 1.0;\n\n\t\t// morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4;\n\n\t\t// internal properties\n\n\t\tvar _this = this,\n\n\t\t\t_isContextLost = false,\n\n\t\t\t// internal state cache\n\n\t\t\t_framebuffer = null,\n\n\t\t\t_currentRenderTarget = null,\n\t\t\t_currentFramebuffer = null,\n\t\t\t_currentMaterialId = - 1,\n\n\t\t\t// geometry and program caching\n\n\t\t\t_currentGeometryProgram = {\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false\n\t\t\t},\n\n\t\t\t_currentCamera = null,\n\t\t\t_currentArrayCamera = null,\n\n\t\t\t_currentViewport = new Vector4(),\n\t\t\t_currentScissor = new Vector4(),\n\t\t\t_currentScissorTest = null,\n\n\t\t\t//\n\n\t\t\t_usedTextureUnits = 0,\n\n\t\t\t//\n\n\t\t\t_width = _canvas.width,\n\t\t\t_height = _canvas.height,\n\n\t\t\t_pixelRatio = 1,\n\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t\t_scissorTest = false,\n\n\t\t\t// frustum\n\n\t\t\t_frustum = new Frustum(),\n\n\t\t\t// clipping\n\n\t\t\t_clipping = new WebGLClipping(),\n\t\t\t_clippingEnabled = false,\n\t\t\t_localClippingEnabled = false,\n\n\t\t\t// camera matrices cache\n\n\t\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t\t_vector3 = new Vector3();\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tvar _gl;\n\n\t\ttry {\n\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference\n\t\t\t};\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, attributes, geometries, objects;\n\t\tvar programCache, renderLists, renderStates;\n\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tvar utils;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\tif ( ! capabilities.isWebGL2 ) {\n\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\t\textensions.get( 'OES_texture_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, utils, capabilities );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tattributes = new WebGLAttributes( _gl );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\t\tobjects = new WebGLObjects( geometries, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates();\n\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.context = _gl;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// vr\n\n\t\tvar vr = ( 'xr' in navigator ) ? new WebXRManager( _this ) : new WebVRManager( _this );\n\n\t\tthis.vr = vr;\n\n\t\t// shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\t\tthis.shadowMap = shadowMap;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.loseContext();\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.restoreContext();\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) return;\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t\tif ( vr.isPresenting() ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_canvas.width = width * _pixelRatio;\n\t\t\t_canvas.height = height * _pixelRatio;\n\n\t\t\tif ( updateStyle !== false ) {\n\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width * _pixelRatio,\n\t\t\t\theight: _height * _pixelRatio\n\t\t\t};\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\t_canvas.width = width * pixelRatio;\n\t\t\t_canvas.height = height * pixelRatio;\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function () {\n\n\t\t\treturn _currentViewport;\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\t_viewport.set( x, _height - y - height, width, height );\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\t_scissor.set( x, _height - y - height, width, height );\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function () {\n\n\t\t\treturn background.getClearColor();\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color, depth, stencil ) {\n\n\t\t\tvar bits = 0;\n\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\t\t\tthis.clear( color, depth, stencil );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tobjects.dispose();\n\n\t\t\tvr.dispose();\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tinitGLContext();\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tvar material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReference( material ) {\n\n\t\t\tvar programInfo = properties.get( material ).program;\n\n\t\t\tmaterial.program = undefined;\n\n\t\t\tif ( programInfo !== undefined ) {\n\n\t\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tfunction renderObjectImmediate( object, program ) {\n\n\t\t\tobject.render( function ( object ) {\n\n\t\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar buffers = properties.get( object );\n\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( object.hasPositions ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasNormals ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasUvs ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( object.hasColors ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\t\tobject.count = 0;\n\n\t\t};\n\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\n\n\t\t\tvar frontFaceCW = ( object.isMesh && object.normalMatrix.determinant() < 0 );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\tvar program = setProgram( camera, fog, material, object );\n\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position;\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\tif ( updateBuffers ) {\n\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\n\n\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar dataCount = Infinity;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdataCount = index.count;\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\tdataCount = position.count;\n\n\t\t\t}\n\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\t\tif ( drawCount === 0 ) return;\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( object.drawMode ) {\n\n\t\t\t\t\t\tcase TrianglesDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleStripDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TriangleFanDrawMode:\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t}\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\n\n\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction setupVertexAttributes( material, program, geometry ) {\n\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry & ! capabilities.isWebGL2 ) {\n\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.initAttributes();\n\n\t\t\tvar geometryAttributes = geometry.attributes;\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor ( var name in programAttributes ) {\n\n\t\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.disableUnusedAttributes();\n\n\t\t}\n\n\t\t// Compile\n\n\t\tthis.compile = function ( scene, camera ) {\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tif ( object.material ) {\n\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( vr.isPresenting() ) return;\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof window !== 'undefined' ) animation.setContext( window );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\tvr.setAnimationLoop( callback );\n\n\t\t\tanimation.start();\n\n\t\t};\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\n\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost ) return;\n\n\t\t\t// reset caching for this frame\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tcamera = vr.getCamera( camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\t\tcurrentRenderState.init();\n\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\t\tcurrentRenderList.init();\n\n\t\t\tprojectObject( scene, camera, _this.sortObjects );\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort();\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tcurrentRenderState.setupLights( camera );\n\n\t\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset ) this.info.reset();\n\n\t\t\tif ( renderTarget === undefined ) {\n\n\t\t\t\trenderTarget = null;\n\n\t\t\t}\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t\t// render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\t\tif ( scene.overrideMaterial ) {\n\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t\t} else {\n\n\t\t\t\t// opaque pass (front-to-back order)\n\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\n\n\t\t\t\t// transparent pass (back-to-front order)\n\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\n\n\t\t\t}\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\n\n\t\t\t}\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t\tif ( vr.enabled ) {\n\n\t\t\t\tvr.submitFrame();\n\n\t\t\t}\n\n\t\t\t// _gl.finish();\n\n\t\t\tcurrentRenderList = null;\n\t\t\tcurrentRenderState = null;\n\n\t\t};\n\n\t\t/*\n\t\t// TODO Duplicated code (Frustum)\n\n\t\tvar _sphere = new Sphere();\n\n\t\tfunction isObjectViewable( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSpriteViewable( sprite ) {\n\n\t\t\t_sphere.center.set( 0, 0, 0 );\n\t\t\t_sphere.radius = 0.7071067811865476;\n\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSphereViewable( sphere ) {\n\n\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\t\tif ( numPlanes === 0 ) return true;\n\n\t\t\tvar planes = _this.clippingPlanes,\n\n\t\t\t\tcenter = sphere.center,\n\t\t\t\tnegRad = - sphere.radius,\n\t\t\t\ti = 0;\n\n\t\t\tdo {\n\n\t\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t\t} while ( ++ i !== numPlanes );\n\n\t\t\treturn true;\n\n\t\t}\n\t\t*/\n\n\t\tfunction projectObject( object, camera, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tvar visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, _vector3.z, null );\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\t\tif ( 'viewport' in camera2 ) { // XR\n\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar bounds = camera2.bounds;\n\n\t\t\t\t\t\t\t\tvar x = bounds.x * _width;\n\t\t\t\t\t\t\t\tvar y = bounds.y * _height;\n\t\t\t\t\t\t\t\tvar width = bounds.z * _width;\n\t\t\t\t\t\t\t\tvar height = bounds.w * _height;\n\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\t\tstate.setMaterial( material );\n\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\n\n\t\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t\t_currentGeometryProgram.program = null;\n\t\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\t\trenderObjectImmediate( object, program );\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\t}\n\n\t\tfunction initMaterial( material, fog, object ) {\n\n\t\t\tvar materialProperties = properties.get( material );\n\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tvar lightsHash = materialProperties.lightsHash;\n\t\t\tvar lightsStateHash = lights.state.hash;\n\n\t\t\tvar parameters = programCache.getParameters(\n\t\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\n\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\n\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true;\n\n\t\t\tif ( program === undefined ) {\n\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t} else if ( program.code !== code ) {\n\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference( material );\n\n\t\t\t} else if ( lightsHash.stateID !== lightsStateHash.stateID ||\n\t\t\t\tlightsHash.directionalLength !== lightsStateHash.directionalLength ||\n\t\t\t\tlightsHash.pointLength !== lightsStateHash.pointLength ||\n\t\t\t\tlightsHash.spotLength !== lightsStateHash.spotLength ||\n\t\t\t\tlightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||\n\t\t\t\tlightsHash.hemiLength !== lightsStateHash.hemiLength ||\n\t\t\t\tlightsHash.shadowsLength !== lightsStateHash.shadowsLength ) {\n\n\t\t\t\tlightsHash.stateID = lightsStateHash.stateID;\n\t\t\t\tlightsHash.directionalLength = lightsStateHash.directionalLength;\n\t\t\t\tlightsHash.pointLength = lightsStateHash.pointLength;\n\t\t\t\tlightsHash.spotLength = lightsStateHash.spotLength;\n\t\t\t\tlightsHash.rectAreaLength = lightsStateHash.rectAreaLength;\n\t\t\t\tlightsHash.hemiLength = lightsStateHash.hemiLength;\n\t\t\t\tlightsHash.shadowsLength = lightsStateHash.shadowsLength;\n\n\t\t\t\tprogramChange = false;\n\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\n\t\t\t}\n\n\t\t\tif ( programChange ) {\n\n\t\t\t\tif ( parameters.shaderID ) {\n\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterialProperties.shader = {\n\t\t\t\t\t\tname: material.type,\n\t\t\t\t\t\tuniforms: material.uniforms,\n\t\t\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\n\n\t\t\t\t// Computing code again as onBeforeCompile may have changed the shaders\n\t\t\t\tcode = programCache.getProgramCode( material, parameters );\n\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\n\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterial.program = program;\n\n\t\t\t}\n\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif ( material.morphTargets ) {\n\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.morphNormals ) {\n\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( ! material.isShaderMaterial &&\n\t\t\t\t! material.isRawShaderMaterial ||\n\t\t\t\tmaterial.clipping === true ) {\n\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t\t}\n\n\t\t\tmaterialProperties.fog = fog;\n\n\t\t\t// store the light setup it was created for\n\t\t\tif ( lightsHash === undefined ) {\n\n\t\t\t\tmaterialProperties.lightsHash = lightsHash = {};\n\n\t\t\t}\n\n\t\t\tlightsHash.stateID = lightsStateHash.stateID;\n\t\t\tlightsHash.directionalLength = lightsStateHash.directionalLength;\n\t\t\tlightsHash.pointLength = lightsStateHash.pointLength;\n\t\t\tlightsHash.spotLength = lightsStateHash.spotLength;\n\t\t\tlightsHash.rectAreaLength = lightsStateHash.rectAreaLength;\n\t\t\tlightsHash.hemiLength = lightsStateHash.hemiLength;\n\t\t\tlightsHash.shadowsLength = lightsStateHash.shadowsLength;\n\n\t\t\tif ( material.lights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\t\tuniformsList =\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\t}\n\n\t\tfunction setProgram( camera, fog, material, object ) {\n\n\t\t\t_usedTextureUnits = 0;\n\n\t\t\tvar materialProperties = properties.get( material );\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tvar lightsHash = materialProperties.lightsHash;\n\t\t\tvar lightsStateHash = lights.state.hash;\n\n\t\t\tif ( _clippingEnabled ) {\n\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\t\tvar useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\t_clipping.setState(\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate === false ) {\n\n\t\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( material.lights && ( lightsHash.stateID !== lightsStateHash.stateID ||\n\t\t\t\t\tlightsHash.directionalLength !== lightsStateHash.directionalLength ||\n\t\t\t\t\tlightsHash.pointLength !== lightsStateHash.pointLength ||\n\t\t\t\t\tlightsHash.spotLength !== lightsStateHash.spotLength ||\n\t\t\t\t\tlightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||\n\t\t\t\t\tlightsHash.hemiLength !== lightsStateHash.hemiLength ||\n\t\t\t\t\tlightsHash.shadowsLength !== lightsStateHash.shadowsLength ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.needsUpdate ) {\n\n\t\t\t\tinitMaterial( material, fog, object );\n\t\t\t\tmaterial.needsUpdate = false;\n\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\n\t\t\tvar program = materialProperties.program,\n\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t\t// load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// not sure why, but otherwise weird things happen\n\n\t\t\tif ( material.skinning ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\t\t\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\t\tif ( material.lights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isMeshToonMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\t\tm_uniforms.color.value = material.color;\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t\t}\n\n\t\t\t\t// RectAreaLight Texture\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// Uniforms (refresh uniforms objects)\n\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif ( material.color ) {\n\n\t\t\t\tuniforms.diffuse.value = material.color;\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t}\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuniforms.map.value = material.map;\n\n\t\t\t}\n\n\t\t\tif ( material.alphaMap ) {\n\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t}\n\n\t\t\tif ( material.specularMap ) {\n\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\tuniforms.envMap.value = material.envMap;\n\n\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\n\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\n\n\t\t\t}\n\n\t\t\tif ( material.lightMap ) {\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t}\n\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\t// uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. normal map\n\t\t\t// 4. bump map\n\t\t\t// 5. alpha map\n\t\t\t// 6. emissive map\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t} else if ( material.roughnessMap ) {\n\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t\t} else if ( material.metalnessMap ) {\n\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t// backwards compatibility\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t}\n\n\t\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\n\t\t}\n\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\t\tuniforms.scale.value = _height * 0.5;\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tif ( material.map.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tmaterial.map.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\t\tuniforms.diffuse.value = material.color;\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tif ( material.map.matrixAutoUpdate === true ) {\n\n\t\t\t\t\tmaterial.map.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\t\tuniforms.fogColor.value = fog.color;\n\n\t\t\tif ( fog.isFog ) {\n\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\t\tuniforms.specular.value = material.specular;\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t\tif ( material.gradientMap ) {\n\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif ( material.roughnessMap ) {\n\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.metalnessMap ) {\n\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\t}\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tif ( material.envMap ) {\n\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\n\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearCoat.value = material.clearCoat;\n\t\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n\n\t\t}\n\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\n\t\t}\n\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\t\tif ( material.bumpMap ) {\n\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t\t}\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t\t}\n\n\t\t\tif ( material.displacementMap ) {\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\t// Textures\n\n\t\tfunction allocTextureUnit() {\n\n\t\t\tvar textureUnit = _usedTextureUnits;\n\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\n\n\t\t\t}\n\n\t\t\t_usedTextureUnits += 1;\n\n\t\t\treturn textureUnit;\n\n\t\t}\n\n\t\tthis.allocTextureUnit = allocTextureUnit;\n\n\t\t// this.setTexture2D = setTexture2D;\n\t\tthis.setTexture2D = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\t// backwards compatibility: peel texture.texture\n\t\t\treturn function setTexture2D( texture, slot ) {\n\n\t\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTexture = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTexture( texture, slot ) {\n\n\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\n\t\t\t\t\twarned = true;\n\n\t\t\t\t}\n\n\t\t\t\ttextures.setTexture2D( texture, slot );\n\n\t\t\t};\n\n\t\t}() );\n\n\t\tthis.setTextureCube = ( function () {\n\n\t\t\tvar warned = false;\n\n\t\t\treturn function setTextureCube( texture, slot ) {\n\n\t\t\t\t// backwards compatibility: peel texture.texture\n\t\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\n\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture = texture.texture;\n\n\t\t\t\t}\n\n\t\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n\t\t\t\t// TODO: unify these code paths\n\t\t\t\tif ( ( texture && texture.isCubeTexture ) ||\n\t\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\n\n\t\t\t\t\t// CompressedTexture can have Array in image :/\n\n\t\t\t\t\t// this function alone should take care of cube textures\n\t\t\t\t\ttextures.setTextureCube( texture, slot );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\n\n\t\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() );\n\n\t\t//\n\n\t\tthis.setFramebuffer = function ( value ) {\n\n\t\t\t_framebuffer = value;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t\trestore = true;\n\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\t\tvar width = texture.image.width;\n\t\t\tvar height = texture.image.height;\n\t\t\tvar glFormat = utils.convert( texture.format );\n\n\t\t\tthis.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, level || 0, glFormat, position.x, position.y, width, height, 0 );\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\t\tthis.setTexture2D( dstTexture, 0 );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction FogExp2( color, density ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\n\n\t}\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tFogExp2.prototype.clone = function () {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t};\n\n\tFogExp2.prototype.toJSON = function ( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Fog( color, near, far ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = ( near !== undefined ) ? near : 1;\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\n\n\t}\n\n\tFog.prototype.isFog = true;\n\n\tFog.prototype.clone = function () {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t};\n\n\tFog.prototype.toJSON = function ( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Scene() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.fog = null;\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t}\n\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Scene,\n\n\t\tcopy: function ( source, recursive ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\t\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\n\t\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBuffer( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.dynamic = false;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\n\n\t\tset: function ( value ) {\n\n\t\t\tif ( value === true ) this.version ++;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBuffer.prototype, {\n\n\t\tisInterleavedBuffer: true,\n\n\t\tonUploadCallback: function () {},\n\n\t\tsetArray: function ( array ) {\n\n\t\t\tif ( Array.isArray( array ) ) {\n\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t\t}\n\n\t\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\n\t\t\tthis.array = array;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDynamic: function ( value ) {\n\n\t\t\tthis.dynamic = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.array = new source.array.constructor( source.array );\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.dynamic = source.dynamic;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcopyAt: function ( index1, attribute, index2 ) {\n\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tset: function ( value, offset ) {\n\n\t\t\tif ( offset === undefined ) offset = 0;\n\n\t\t\tthis.array.set( value, offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tonUpload: function ( callback ) {\n\n\t\t\tthis.onUploadCallback = callback;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\n\n\t\tcount: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.count;\n\n\t\t\t}\n\n\t\t},\n\n\t\tarray: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.data.array;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\tObject.assign( InterleavedBufferAttribute.prototype, {\n\n\t\tisInterleavedBufferAttribute: true,\n\n\t\tsetX: function ( index, x ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetY: function ( index, y ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetZ: function ( index, z ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetW: function ( index, w ) {\n\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetX: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t\t},\n\n\t\tgetY: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\t},\n\n\t\tgetZ: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\t},\n\n\t\tgetW: function ( index ) {\n\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\t},\n\n\t\tsetXY: function ( index, x, y ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZ: function ( index, x, y, z ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetXYZW: function ( index, x, y, z, w ) {\n\n\t\t\tindex = index * this.data.stride + this.offset;\n\n\t\t\tthis.data.array[ index + 0 ] = x;\n\t\t\tthis.data.array[ index + 1 ] = y;\n\t\t\tthis.data.array[ index + 2 ] = z;\n\t\t\tthis.data.array[ index + 3 ] = w;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *  rotation: <float>,\n\t *  sizeAttenuation: <bool>\n\t * }\n\t */\n\n\tfunction SpriteMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\t\tthis.map = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.lights = false;\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tSpriteMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.map = source.map;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tvar geometry;\n\n\tfunction Sprite( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( geometry === undefined ) {\n\n\t\t\tgeometry = new BufferGeometry();\n\n\t\t\tvar float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\tgeometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\tgeometry.addAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\tgeometry.addAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Sprite,\n\n\t\tisSprite: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar intersectPoint = new Vector3();\n\t\t\tvar worldScale = new Vector3();\n\t\t\tvar mvPosition = new Vector3();\n\n\t\t\tvar alignedPosition = new Vector2();\n\t\t\tvar rotatedPosition = new Vector2();\n\t\t\tvar viewWorldMatrix = new Matrix4();\n\n\t\t\tvar vA = new Vector3();\n\t\t\tvar vB = new Vector3();\n\t\t\tvar vC = new Vector3();\n\n\t\t\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t\t\t\t// compute position in camera space\n\t\t\t\talignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t\t\t\t// to check if rotation is not zero\n\t\t\t\tif ( sin !== undefined ) {\n\n\t\t\t\t\trotatedPosition.x = ( cos * alignedPosition.x ) - ( sin * alignedPosition.y );\n\t\t\t\t\trotatedPosition.y = ( sin * alignedPosition.x ) + ( cos * alignedPosition.y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trotatedPosition.copy( alignedPosition );\n\n\t\t\t\t}\n\n\n\t\t\t\tvertexPosition.copy( mvPosition );\n\t\t\t\tvertexPosition.x += rotatedPosition.x;\n\t\t\t\tvertexPosition.y += rotatedPosition.y;\n\n\t\t\t\t// transform to world space\n\t\t\t\tvertexPosition.applyMatrix4( viewWorldMatrix );\n\n\t\t\t}\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tworldScale.setFromMatrixScale( this.matrixWorld );\n\t\t\t\tviewWorldMatrix.getInverse( this.modelViewMatrix ).premultiply( this.matrixWorld );\n\t\t\t\tmvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\t\t\tvar rotation = this.material.rotation;\n\t\t\t\tvar sin, cos;\n\t\t\t\tif ( rotation !== 0 ) {\n\n\t\t\t\t\tcos = Math.cos( rotation );\n\t\t\t\t\tsin = Math.sin( rotation );\n\n\t\t\t\t}\n\n\t\t\t\tvar center = this.center;\n\n\t\t\t\ttransformVertex( vA.set( - 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\n\t\t\t\ttransformVertex( vB.set( 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\n\t\t\t\ttransformVertex( vC.set( 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\n\n\t\t\t\t// check first triangle\n\t\t\t\tvar intersect = raycaster.ray.intersectTriangle( vA, vB, vC, false, intersectPoint );\n\n\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\t// check second triangle\n\t\t\t\t\ttransformVertex( vB.set( - 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\n\t\t\t\t\tintersect = raycaster.ray.intersectTriangle( vA, vC, vB, false, intersectPoint );\n\t\t\t\t\tif ( intersect === null ) {\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\tface: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.material ).copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\t\treturn this;\n\n\t\t}\n\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LOD() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: LOD,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\taddLevel: function ( object, distance ) {\n\n\t\t\tif ( distance === undefined ) distance = 0;\n\n\t\t\tdistance = Math.abs( distance );\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\t\tthis.add( object );\n\n\t\t},\n\n\t\tgetObjectForDistance: function ( distance ) {\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t},\n\n\t\traycast: ( function () {\n\n\t\t\tvar matrixPosition = new Vector3();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\n\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tupdate: function () {\n\n\t\t\tvar v1 = new Vector3();\n\t\t\tvar v2 = new Vector3();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar levels = this.levels;\n\n\t\t\t\tif ( levels.length > 1 ) {\n\n\t\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\t\t\tvar distance = v1.distanceTo( v2 );\n\n\t\t\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}(),\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.levels = [];\n\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tvar level = levels[ i ];\n\n\t\t\t\tdata.object.levels.push( {\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author michael guerrero / http://realitymeltdown.com\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Skeleton( bones, boneInverses ) {\n\n\t\t// copy the bone array\n\n\t\tbones = bones || [];\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\n\n\t\t// use the supplied bone inverses or calculate the inverses\n\n\t\tif ( boneInverses === undefined ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\tif ( this.bones.length === boneInverses.length ) {\n\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Skeleton.prototype, {\n\n\t\tcalculateInverses: function () {\n\n\t\t\tthis.boneInverses = [];\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push( inverse );\n\n\t\t\t}\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tvar bone, i, il;\n\n\t\t\t// recover the bind-time world matrices\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// compute the local matrices, positions, rotations and scales\n\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tbone = this.bones[ i ];\n\n\t\t\t\tif ( bone ) {\n\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdate: ( function () {\n\n\t\t\tvar offsetMatrix = new Matrix4();\n\t\t\tvar identityMatrix = new Matrix4();\n\n\t\t\treturn function update() {\n\n\t\t\t\tvar bones = this.bones;\n\t\t\t\tvar boneInverses = this.boneInverses;\n\t\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\t\tvar boneTexture = this.boneTexture;\n\n\t\t\t\t// flatten bone matrices to array\n\n\t\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t\t\t// compute the offset between the current and the original transform\n\n\t\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\n\n\t\t\t\t\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t\t\toffsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( boneTexture !== undefined ) {\n\n\t\t\t\t\tboneTexture.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )(),\n\n\t\tclone: function () {\n\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t\t},\n\n\t\tgetBoneByName: function ( name ) {\n\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\tvar bone = this.bones[ i ];\n\n\t\t\t\tif ( bone.name === name ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction Bone() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Bone,\n\n\t\tisBone: true\n\n\t} );\n\n\t/**\n\t * @author mikael emtinger / http://gomo.se/\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author ikerr / http://verold.com\n\t */\n\n\tfunction SkinnedMesh( geometry, material ) {\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\tvar bones = this.initBones();\n\t\tvar skeleton = new Skeleton( bones );\n\n\t\tthis.bind( skeleton, this.matrixWorld );\n\n\t\tthis.normalizeSkinWeights();\n\n\t}\n\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\t\tconstructor: SkinnedMesh,\n\n\t\tisSkinnedMesh: true,\n\n\t\tinitBones: function () {\n\n\t\t\tvar bones = [], bone, gbone;\n\t\t\tvar i, il;\n\n\t\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\n\n\t\t\t\t// first, create array of 'Bone' objects from geometry data\n\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t\t// create new 'Bone' object\n\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t\tbones.push( bone );\n\n\t\t\t\t\t// apply values\n\n\t\t\t\t\tbone.name = gbone.name;\n\t\t\t\t\tbone.position.fromArray( gbone.pos );\n\t\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\n\t\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\n\n\t\t\t\t}\n\n\t\t\t\t// second, create bone hierarchy\n\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\n\n\t\t\t\t\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\n\n\t\t\t\t\t\t// subsequent bones in the hierarchy\n\n\t\t\t\t\t\tbones[ gbone.parent ].add( bones[ i ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// topmost bone, immediate child of the skinned mesh\n\n\t\t\t\t\t\tthis.add( bones[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// now the bones are part of the scene graph and children of the skinned mesh.\n\t\t\t// let's update the corresponding matrices\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\treturn bones;\n\n\t\t},\n\n\t\tbind: function ( skeleton, bindMatrix ) {\n\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif ( bindMatrix === undefined ) {\n\n\t\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy( bindMatrix );\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\n\n\t\t},\n\n\t\tpose: function () {\n\n\t\t\tthis.skeleton.pose();\n\n\t\t},\n\n\t\tnormalizeSkinWeights: function () {\n\n\t\t\tvar scale, i;\n\n\t\t\tif ( this.geometry && this.geometry.isGeometry ) {\n\n\t\t\t\tfor ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {\n\n\t\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\n\n\t\t\t\t\tscale = 1.0 / sw.manhattanLength();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tsw.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.geometry && this.geometry.isBufferGeometry ) {\n\n\t\t\t\tvar vec = new Vector4();\n\n\t\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\t\tfor ( i = 0; i < skinWeight.count; i ++ ) {\n\n\t\t\t\t\tvec.x = skinWeight.getX( i );\n\t\t\t\t\tvec.y = skinWeight.getY( i );\n\t\t\t\t\tvec.z = skinWeight.getZ( i );\n\t\t\t\t\tvec.w = skinWeight.getW( i );\n\n\t\t\t\t\tscale = 1.0 / vec.manhattanLength();\n\n\t\t\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\t\t\tvec.multiplyScalar( scale );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t\t\t}\n\n\t\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tupdateMatrixWorld: function ( force ) {\n\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\n\n\t\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t\t}\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *  linecap: \"round\",\n\t *  linejoin: \"round\"\n\t * }\n\t */\n\n\tfunction LineBasicMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tLineBasicMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Line( geometry, material, mode ) {\n\n\t\tif ( mode === 1 ) {\n\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\n\n\t\t}\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Line,\n\n\t\tisLine: true,\n\n\t\tcomputeLineDistances: ( function () {\n\n\t\t\tvar start = new Vector3();\n\t\t\tvar end = new Vector3();\n\n\t\t\treturn function computeLineDistances() {\n\n\t\t\t\tvar geometry = this.geometry;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\t\tvar lineDistances = [ 0 ];\n\n\t\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\t\tlineDistances[ i ] += start.distanceTo( end );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\t\tlineDistances[ 0 ] = 0;\n\n\t\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar precision = raycaster.linePrecision;\n\t\t\t\tvar precisionSq = precision * precision;\n\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar vStart = new Vector3();\n\t\t\t\tvar vEnd = new Vector3();\n\t\t\t\tvar interSegment = new Vector3();\n\t\t\t\tvar interRay = new Vector3();\n\t\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\t\t\t\t\t\t\tvar b = indices[ i + 1 ];\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\n\t\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\n\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar nbVertices = vertices.length;\n\n\t\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\n\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\n\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\n\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LineSegments( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineSegments,\n\n\t\tisLineSegments: true,\n\n\t\tcomputeLineDistances: ( function () {\n\n\t\t\tvar start = new Vector3();\n\t\t\tvar end = new Vector3();\n\n\t\t\treturn function computeLineDistances() {\n\n\t\t\t\tvar geometry = this.geometry;\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\t// we assume non-indexed geometry\n\n\t\t\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t\t\tend.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar lineDistances = geometry.lineDistances;\n\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\tstart.copy( vertices[ i ] );\n\t\t\t\t\t\tend.copy( vertices[ i + 1 ] );\n\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}() )\n\n\t} );\n\n\t/**\n\t * @author mgreter / http://github.com/mgreter\n\t */\n\n\tfunction LineLoop( geometry, material ) {\n\n\t\tLine.call( this, geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\n\n\t\tconstructor: LineLoop,\n\n\t\tisLineLoop: true,\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  size: <float>,\n\t *  sizeAttenuation: <bool>\n\t *\n\t *  morphTargets: <bool>\n\t * }\n\t */\n\n\tfunction PointsMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.morphTargets = false;\n\n\t\tthis.lights = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tPointsMaterial.prototype = Object.create( Material.prototype );\n\tPointsMaterial.prototype.constructor = PointsMaterial;\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tPointsMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.morphTargets = source.morphTargets;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Points( geometry, material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\n\n\t}\n\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Points,\n\n\t\tisPoints: true,\n\n\t\traycast: ( function () {\n\n\t\t\tvar inverseMatrix = new Matrix4();\n\t\t\tvar ray = new Ray();\n\t\t\tvar sphere = new Sphere();\n\n\t\t\treturn function raycast( raycaster, intersects ) {\n\n\t\t\t\tvar object = this;\n\t\t\t\tvar geometry = this.geometry;\n\t\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\t\tvar threshold = raycaster.params.Points.threshold;\n\n\t\t\t\t// Checking boundingSphere distance to ray\n\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\tsphere.copy( geometry.boundingSphere );\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\n\t\t\t\tsphere.radius += threshold;\n\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\n\n\t\t\t\t//\n\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\n\n\t\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\t\tvar position = new Vector3();\n\t\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t\tfunction testPoint( point, index ) {\n\n\t\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\n\n\t\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\t\t\t\t\tray.closestPointToPoint( point, intersectPoint );\n\t\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\t\t\t\t\tpoint: intersectPoint.clone(),\n\t\t\t\t\t\t\tindex: index,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tobject: object\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tvar index = geometry.index;\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tif ( index !== null ) {\n\n\t\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar a = indices[ i ];\n\n\t\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\n\n\t\t\t\t\t\t\ttestPoint( position, i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\t\t\t\ttestPoint( vertices[ i ], i );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\n\n\t\tconstructor: VideoTexture,\n\n\t\tisVideoTexture: true,\n\n\t\tupdate: function () {\n\n\t\t\tvar video = this.image;\n\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\t\tthis.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\n\tCompressedTexture.prototype.constructor = CompressedTexture;\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\n\tCanvasTexture.prototype.constructor = CanvasTexture;\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\t/**\n\t * @author Matt DesLauriers / @mattdesl\n\t * @author atix / arthursilber.de\n\t */\n\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\tDepthTexture.prototype = Object.create( Texture.prototype );\n\tDepthTexture.prototype.constructor = DepthTexture;\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction WireframeGeometry( geometry ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar i, j, l, o, ol;\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\t\tvar vertex;\n\n\t\t// different logic for Geometry and BufferGeometry\n\n\t\tif ( geometry && geometry.isGeometry ) {\n\n\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\tvar faces = geometry.faces;\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate vertices\n\n\t\t\tfor ( key in edges ) {\n\n\t\t\t\te = edges[ key ];\n\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\n\n\t\t\tvar position, indices, groups;\n\t\t\tvar group, start, count;\n\t\t\tvar index1, index2;\n\n\t\t\tvertex = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\t\t\t\tindices = geometry.index;\n\t\t\t\tgroups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tgroup = groups[ o ];\n\n\t\t\t\t\tstart = group.start;\n\t\t\t\t\tcount = group.count;\n\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// generate vertices\n\n\t\t\t\tfor ( key in edges ) {\n\n\t\t\t\t\te = edges[ key ];\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tposition = geometry.attributes.position;\n\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tindex1 = 3 * i + j;\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n\t */\n\n\t// ParametricGeometry\n\n\tfunction ParametricGeometry( func, slices, stacks ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\t// ParametricBufferGeometry\n\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ParametricBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\tvar EPS = 0.00001;\n\n\t\tvar normal = new Vector3();\n\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\n\t\tvar pu = new Vector3(), pv = new Vector3();\n\n\t\tvar i, j;\n\n\t\tif ( func.length < 3 ) {\n\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\n\n\t\t}\n\n\t\t// generate vertices, normals and uvs\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\n\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tvar u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\n\n\t\t\t\tvar a = i * sliceCount + j;\n\t\t\t\tvar b = i * sliceCount + j + 1;\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n\t/**\n\t * @author clockworkgeek / https://github.com/clockworkgeek\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// PolyhedronGeometry\n\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n\t// PolyhedronBufferGeometry\n\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'PolyhedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tdetail = detail || 0;\n\n\t\t// default buffer data\n\n\t\tvar vertexBuffer = [];\n\t\tvar uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tappplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tvar cols = Math.pow( 2, detail );\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tvar v = [];\n\n\t\t\tvar i, j;\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tvar rows = cols - i;\n\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tvar k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction appplyRadius( radius ) {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tvar stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tvar a = new Vector3();\n\t\t\tvar b = new Vector3();\n\t\t\tvar c = new Vector3();\n\n\t\t\tvar centroid = new Vector3();\n\n\t\t\tvar uvA = new Vector2();\n\t\t\tvar uvB = new Vector2();\n\t\t\tvar uvC = new Vector2();\n\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tvar azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TetrahedronGeometry\n\n\tfunction TetrahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n\t// TetrahedronBufferGeometry\n\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// OctahedronGeometry\n\n\tfunction OctahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n\t// OctahedronBufferGeometry\n\n\tfunction OctahedronBufferGeometry( radius, detail ) {\n\n\t\tvar vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n\t/**\n\t * @author timothypratley / https://github.com/timothypratley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// IcosahedronGeometry\n\n\tfunction IcosahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n\t// IcosahedronBufferGeometry\n\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tvar vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tvar indices = [\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n\t/**\n\t * @author Abe Pazos / https://hamoid.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// DodecahedronGeometry\n\n\tfunction DodecahedronGeometry( radius, detail ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n\t// DodecahedronBufferGeometry\n\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\n\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tvar r = 1 / t;\n\n\t\tvar vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t 0, - r, - t, 0, - r, t,\n\t\t\t 0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\t r, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tvar indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\n\t * @author WestLangley / https://github.com/WestLangley\n\t * @author zz85 / https://github.com/zz85\n\t * @author miningold / https://github.com/miningold\n\t * @author jonobr1 / https://github.com/jonobr1\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t */\n\n\t// TubeGeometry\n\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\n\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = bufferGeometry.tangents;\n\t\tthis.normals = bufferGeometry.normals;\n\t\tthis.binormals = bufferGeometry.binormals;\n\n\t\t// create geometry\n\n\t\tthis.fromBufferGeometry( bufferGeometry );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\n\tTubeGeometry.prototype.constructor = TubeGeometry;\n\n\t// TubeBufferGeometry\n\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TubeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\ttubularSegments = tubularSegments || 64;\n\t\tradius = radius || 1;\n\t\tradialSegments = radialSegments || 8;\n\t\tclosed = closed || false;\n\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar P = new Vector3();\n\n\t\tvar i, j;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tvar N = frames.normals[ i ];\n\t\t\tvar B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tvar sin = Math.sin( v );\n\t\t\t\tvar cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * based on http://www.blackpawn.com/texts/pqtorus/\n\t */\n\n\t// TorusKnotGeometry\n\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\n\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n\t// TorusKnotBufferGeometry\n\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusKnotBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\tp = p || 2;\n\t\tq = q || 3;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, j;\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar P1 = new Vector3();\n\t\tvar P2 = new Vector3();\n\n\t\tvar B = new Vector3();\n\t\tvar T = new Vector3();\n\t\tvar N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\tvar cx = - tube * Math.cos( v );\n\t\t\t\tvar cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tvar cu = Math.cos( u );\n\t\t\tvar su = Math.sin( u );\n\t\t\tvar quOverP = q / p * u;\n\t\t\tvar cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n\t/**\n\t * @author oosmoxiecode\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// TorusGeometry\n\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\n\tTorusGeometry.prototype.constructor = TorusGeometry;\n\n\t// TorusBufferGeometry\n\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'TorusBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradius = radius || 1;\n\t\ttube = tube || 0.4;\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\n\t\tarc = arc || Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar center = new Vector3();\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * Port from https://github.com/mapbox/earcut (v2.1.2)\n\t */\n\n\tvar Earcut = {\n\n\t\ttriangulate: function ( data, holeIndices, dim ) {\n\n\t\t\tdim = dim || 2;\n\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\n\t\t\t\ttriangles = [];\n\n\t\t\tif ( ! outerNode ) return triangles;\n\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\n\t\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif ( data.length > 80 * dim ) {\n\n\t\t\t\tminX = maxX = data[ 0 ];\n\t\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\t\tx = data[ i ];\n\t\t\t\t\ty = data[ i + 1 ];\n\t\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t\t}\n\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t\t}\n\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\t\treturn triangles;\n\n\t\t}\n\n\t};\n\n\t// create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList( data, start, end, dim, clockwise ) {\n\n\t\tvar i, last;\n\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t\t} else {\n\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t\t}\n\n\t\tif ( last && equals( last, last.next ) ) {\n\n\t\t\tremoveNode( last );\n\t\t\tlast = last.next;\n\n\t\t}\n\n\t\treturn last;\n\n\t}\n\n\t// eliminate colinear or duplicate points\n\n\tfunction filterPoints( start, end ) {\n\n\t\tif ( ! start ) return start;\n\t\tif ( ! end ) end = start;\n\n\t\tvar p = start, again;\n\n\t\tdo {\n\n\t\t\tagain = false;\n\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif ( p === p.next ) break;\n\t\t\t\tagain = true;\n\n\t\t\t} else {\n\n\t\t\t\tp = p.next;\n\n\t\t\t}\n\n\t\t} while ( again || p !== end );\n\n\t\treturn end;\n\n\t}\n\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\t\tif ( ! ear ) return;\n\n\t\t// interlink polygon nodes in z-order\n\n\t\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\t\tvar stop = ear, prev, next;\n\n\t\t// iterate through ears, slicing them one by one\n\n\t\twhile ( ear.prev !== ear.next ) {\n\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push( prev.i / dim );\n\t\t\t\ttriangles.push( ear.i / dim );\n\t\t\t\ttriangles.push( next.i / dim );\n\n\t\t\t\tremoveNode( ear );\n\n\t\t\t\t// skipping the next vertice leads to less sliver triangles\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tear = next;\n\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif ( ear === stop ) {\n\n\t\t\t\t// try filtering points and slicing again\n\n\t\t\t\tif ( ! pass ) {\n\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// check whether a polygon node forms a valid ear with adjacent nodes\n\n\tfunction isEar( ear ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t\t// now make sure we don't have other points inside the potential ear\n\t\tvar p = ear.next.next;\n\n\t\twhile ( p !== ear.prev ) {\n\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\t\tvar a = ear.prev,\n\t\t\tb = ear,\n\t\t\tc = ear.next;\n\n\t\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t\t// z-order range for the current triangle bbox;\n\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\t\t// first look for points inside the triangle in increasing z-order\n\n\t\tvar p = ear.nextZ;\n\n\t\twhile ( p && p.z <= maxZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\t\tp = p.nextZ;\n\n\t\t}\n\n\t\t// then look for points in decreasing z-order\n\n\t\tp = ear.prevZ;\n\n\t\twhile ( p && p.z >= minZ ) {\n\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\n\t\t\tp = p.prevZ;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// go through all polygon nodes and cure small local self-intersections\n\n\tfunction cureLocalIntersections( start, triangles, dim ) {\n\n\t\tvar p = start;\n\n\t\tdo {\n\n\t\t\tvar a = p.prev, b = p.next.next;\n\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\t\ttriangles.push( a.i / dim );\n\t\t\t\ttriangles.push( p.i / dim );\n\t\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t\t// remove two nodes involved\n\n\t\t\t\tremoveNode( p );\n\t\t\t\tremoveNode( p.next );\n\n\t\t\t\tp = start = b;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn p;\n\n\t}\n\n\t// try splitting polygon into two and triangulate them independently\n\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t\t// look for a valid diagonal that divides the polygon into two\n\n\t\tvar a = start;\n\n\t\tdo {\n\n\t\t\tvar b = a.next.next;\n\n\t\t\twhile ( b !== a.prev ) {\n\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t\t// split the polygon in two by the diagonal\n\n\t\t\t\t\tvar c = splitPolygon( a, b );\n\n\t\t\t\t\t// filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t\t// run earcut on each half\n\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\n\t\t\t}\n\n\t\t\ta = a.next;\n\n\t\t} while ( a !== start );\n\n\t}\n\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\n\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\t\tvar queue = [], i, len, start, end, list;\n\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\t\tstart = holeIndices[ i ] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\t\tlist = linkedList( data, start, end, dim, false );\n\t\t\tif ( list === list.next ) list.steiner = true;\n\t\t\tqueue.push( getLeftmost( list ) );\n\n\t\t}\n\n\t\tqueue.sort( compareX );\n\n\t\t// process holes from left to right\n\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\t\teliminateHole( queue[ i ], outerNode );\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t\t}\n\n\t\treturn outerNode;\n\n\t}\n\n\tfunction compareX( a, b ) {\n\n\t\treturn a.x - b.x;\n\n\t}\n\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\n\n\tfunction eliminateHole( hole, outerNode ) {\n\n\t\touterNode = findHoleBridge( hole, outerNode );\n\n\t\tif ( outerNode ) {\n\n\t\t\tvar b = splitPolygon( outerNode, hole );\n\n\t\t\tfilterPoints( b, b.next );\n\n\t\t}\n\n\t}\n\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\tfunction findHoleBridge( hole, outerNode ) {\n\n\t\tvar p = outerNode,\n\t\t\thx = hole.x,\n\t\t\thy = hole.y,\n\t\t\tqx = - Infinity,\n\t\t\tm;\n\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\n\t\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\t\tif ( hy === p.y ) return p;\n\t\t\t\t\t\tif ( hy === p.next.y ) return p.next;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== outerNode );\n\n\t\tif ( ! m ) return null;\n\n\t\tif ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint\n\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\tmx = m.x,\n\t\t\tmy = m.y,\n\t\t\ttanMin = Infinity,\n\t\t\ttan;\n\n\t\tp = m.next;\n\n\t\twhile ( p !== stop ) {\n\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\n\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t\treturn m;\n\n\t}\n\n\t// interlink polygon nodes in z-order\n\n\tfunction indexCurve( start, minX, minY, invSize ) {\n\n\t\tvar p = start;\n\n\t\tdo {\n\n\t\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\n\t\tsortLinked( p );\n\n\t}\n\n\t// Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\tfunction sortLinked( list ) {\n\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\n\n\t\tdo {\n\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile ( p ) {\n\n\t\t\t\tnumMerges ++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\t\tpSize ++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif ( ! q ) break;\n\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize --;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\t\telse list = e;\n\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\n\t\t} while ( numMerges > 1 );\n\n\t\treturn list;\n\n\t}\n\n\t// z-order of a point given coords and inverse of the longer side of data bbox\n\n\tfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t\t// coords are transformed into non-negative 15-bit integer range\n\n\t\tx = 32767 * ( x - minX ) * invSize;\n\t\ty = 32767 * ( y - minY ) * invSize;\n\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\t\treturn x | ( y << 1 );\n\n\t}\n\n\t// find the leftmost node of a polygon ring\n\n\tfunction getLeftmost( start ) {\n\n\t\tvar p = start, leftmost = start;\n\n\t\tdo {\n\n\t\t\tif ( p.x < leftmost.x ) leftmost = p;\n\t\t\tp = p.next;\n\n\t\t} while ( p !== start );\n\n\t\treturn leftmost;\n\n\t}\n\n\t// check if a point lies within a convex triangle\n\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n\t}\n\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\tfunction isValidDiagonal( a, b ) {\n\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\n\t\t\tlocallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\n\n\t}\n\n\t// signed area of a triangle\n\n\tfunction area( p, q, r ) {\n\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n\t}\n\n\t// check if two points are equal\n\n\tfunction equals( p1, p2 ) {\n\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\n\t}\n\n\t// check if two segments intersect\n\n\tfunction intersects( p1, q1, p2, q2 ) {\n\n\t\tif ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||\n\t\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;\n\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\n\t\t\t\t\t area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\n\n\t}\n\n\t// check if a polygon diagonal intersects any polygon segments\n\n\tfunction intersectsPolygon( a, b ) {\n\n\t\tvar p = a;\n\n\t\tdo {\n\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\t\t\t\tintersects( p, p.next, a, b ) ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn false;\n\n\t}\n\n\t// check if a polygon diagonal is locally inside the polygon\n\n\tfunction locallyInside( a, b ) {\n\n\t\treturn area( a.prev, a, a.next ) < 0 ?\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n\t}\n\n\t// check if the middle point of a polygon diagonal is inside the polygon\n\n\tfunction middleInside( a, b ) {\n\n\t\tvar p = a,\n\t\t\tinside = false,\n\t\t\tpx = ( a.x + b.x ) / 2,\n\t\t\tpy = ( a.y + b.y ) / 2;\n\n\t\tdo {\n\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {\n\n\t\t\t\tinside = ! inside;\n\n\t\t\t}\n\n\t\t\tp = p.next;\n\n\t\t} while ( p !== a );\n\n\t\treturn inside;\n\n\t}\n\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\tfunction splitPolygon( a, b ) {\n\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\t\tan = a.next,\n\t\t\tbp = b.prev;\n\n\t\ta.next = b;\n\t\tb.prev = a;\n\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\n\t\treturn b2;\n\n\t}\n\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\tfunction insertNode( i, x, y, last ) {\n\n\t\tvar p = new Node( i, x, y );\n\n\t\tif ( ! last ) {\n\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\n\t\t} else {\n\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\n\t\t}\n\n\t\treturn p;\n\n\t}\n\n\tfunction removeNode( p ) {\n\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\n\t\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\t\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n\t}\n\n\tfunction Node( i, x, y ) {\n\n\t\t// vertice index in coordinates array\n\t\tthis.i = i;\n\n\t\t// vertex coordinates\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\t// previous and next vertice nodes in a polygon ring\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\n\t\t// z-order curve value\n\t\tthis.z = null;\n\n\t\t// previous and next nodes in z-order\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null;\n\n\t\t// indicates whether this is a steiner point\n\t\tthis.steiner = false;\n\n\t}\n\n\tfunction signedArea( data, start, end, dim ) {\n\n\t\tvar sum = 0;\n\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\n\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\t\tj = i;\n\n\t\t}\n\n\t\treturn sum;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t */\n\n\tvar ShapeUtils = {\n\n\t\t// calculate area of the contour polygon\n\n\t\tarea: function ( contour ) {\n\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\n\t\t},\n\n\t\tisClockWise: function ( pts ) {\n\n\t\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t\t},\n\n\t\ttriangulateShape: function ( contour, holes ) {\n\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\t\tvar holeIndices = []; // array of hole indices\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts( contour );\n\t\t\taddContour( vertices, contour );\n\n\t\t\t//\n\n\t\t\tvar holeIndex = contour.length;\n\n\t\t\tholes.forEach( removeDupEndPts );\n\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\n\n\t\t\t\tholeIndices.push( holeIndex );\n\t\t\t\tholeIndex += holes[ i ].length;\n\t\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t\t//\n\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t\t}\n\n\t\t\treturn faces;\n\n\t\t}\n\n\t};\n\n\tfunction removeDupEndPts( points ) {\n\n\t\tvar l = points.length;\n\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.pop();\n\n\t\t}\n\n\t}\n\n\tfunction addContour( vertices, contour ) {\n\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\n\n\t\t\tvertices.push( contour[ i ].x );\n\t\t\tvertices.push( contour[ i ].y );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Creates extruded geometry from a path shape.\n\t *\n\t * parameters = {\n\t *\n\t *  curveSegments: <int>, // number of points on the curves\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n\t *  depth: <float>, // Depth to extrude the shape\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\n\t *  bevelSize: <float>, // how far from shape outline is bevel\n\t *  bevelSegments: <int>, // number of bevel layers\n\t *\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\n\t *\n\t *  UVGenerator: <Object> // object that provides UV generator functions\n\t *\n\t * }\n\t */\n\n\t// ExtrudeGeometry\n\n\tfunction ExtrudeGeometry( shapes, options ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n\tExtrudeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t// ExtrudeBufferGeometry\n\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ExtrudeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tvar scope = this;\n\n\t\tvar verticesArray = [];\n\t\tvar uvArray = [];\n\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tvar shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar placeholder = [];\n\n\t\t\t// options\n\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tvar extrudePath = options.extrudePath;\n\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar extrudePts, extrudeByPath = false;\n\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tvar ahole, h, hl; // looping of holes\n\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tvar vertices = shapePoints.shape;\n\t\t\tvar holes = shapePoints.holes;\n\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tvar b, bs, t, z,\n\t\t\t\tvert, vlen = vertices.length,\n\t\t\t\tface, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tvar contourMovements = [];\n\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tvar holesMovements = [],\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbs = bevelSize;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tvar s;\n\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tt = b / bevelSegments;\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tvar layer = 0; // steps + 1\n\t\t\t\t\tvar offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tface = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\tvar layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tvar j, k;\n\t\t\t\ti = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tj = i;\n\t\t\t\t\tk = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tvar s = 0,\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\n\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\n\n\t\t\t\t\t\tvar slen1 = vlen * s;\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\t\tvar options = this.parameters.options;\n\n\t\treturn toJSON( shapes, options, data );\n\n\t};\n\n\t//\n\n\tvar WorldUVGenerator = {\n\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, a_y ),\n\t\t\t\tnew Vector2( b_x, b_y ),\n\t\t\t\tnew Vector2( c_x, c_y )\n\t\t\t];\n\n\t\t},\n\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\t\tvar a_x = vertices[ indexA * 3 ];\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\n\t\t\tvar b_x = vertices[ indexB * 3 ];\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\n\t\t\tvar c_x = vertices[ indexC * 3 ];\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\n\t\t\tvar d_x = vertices[ indexD * 3 ];\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\n\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t} else {\n\n\t\t\t\treturn [\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t\t];\n\n\t\t\t}\n\n\t\t}\n\t};\n\n\tfunction toJSON( shapes, options, data ) {\n\n\t\t//\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * Text = 3D Text\n\t *\n\t * parameters = {\n\t *  font: <THREE.Font>, // font\n\t *\n\t *  size: <float>, // size of the text\n\t *  height: <float>, // thickness to extrude text\n\t *  curveSegments: <int>, // number of points on the curves\n\t *\n\t *  bevelEnabled: <bool>, // turn on bevel\n\t *  bevelThickness: <float>, // how deep into text bevel goes\n\t *  bevelSize: <float> // how far from text outline is bevel\n\t * }\n\t */\n\n\t// TextGeometry\n\n\tfunction TextGeometry( text, parameters ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'TextGeometry';\n\n\t\tthis.parameters = {\n\t\t\ttext: text,\n\t\t\tparameters: parameters\n\t\t};\n\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\n\tTextGeometry.prototype.constructor = TextGeometry;\n\n\t// TextBufferGeometry\n\n\tfunction TextBufferGeometry( text, parameters ) {\n\n\t\tparameters = parameters || {};\n\n\t\tvar font = parameters.font;\n\n\t\tif ( ! ( font && font.isFont ) ) {\n\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\n\t\t\treturn new Geometry();\n\n\t\t}\n\n\t\tvar shapes = font.generateShapes( text, parameters.size );\n\n\t\t// translate parameters to ExtrudeGeometry API\n\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n\t\t// defaults\n\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\n\n\t\tthis.type = 'TextBufferGeometry';\n\n\t}\n\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// SphereGeometry\n\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\n\tSphereGeometry.prototype.constructor = SphereGeometry;\n\n\t// SphereBufferGeometry\n\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'SphereBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\n\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n\t\tvar thetaEnd = thetaStart + thetaLength;\n\n\t\tvar ix, iy;\n\n\t\tvar index = 0;\n\t\tvar grid = [];\n\n\t\tvar vertex = new Vector3();\n\t\tvar normal = new Vector3();\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tvar verticesRow = [];\n\n\t\t\tvar v = iy / heightSegments;\n\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tvar u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\n\t\t\t\tvar b = grid[ iy ][ ix ];\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n\t/**\n\t * @author Kaleb Murphy\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// RingGeometry\n\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\n\tRingGeometry.prototype.constructor = RingGeometry;\n\n\t// RingBufferGeometry\n\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'RingBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tinnerRadius = innerRadius || 0.5;\n\t\touterRadius = outerRadius || 1;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// some helper variables\n\n\t\tvar segment;\n\t\tvar radius = innerRadius;\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar j, i;\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tsegment = i + thetaSegmentLevel;\n\n\t\t\t\tvar a = segment;\n\t\t\t\tvar b = segment + thetaSegments + 1;\n\t\t\t\tvar c = segment + thetaSegments + 2;\n\t\t\t\tvar d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n\t/**\n\t * @author zz85 / https://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// LatheGeometry\n\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\n\tLatheGeometry.prototype.constructor = LatheGeometry;\n\n\t// LatheBufferGeometry\n\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'LatheBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments ) || 12;\n\t\tphiStart = phiStart || 0;\n\t\tphiLength = phiLength || Math.PI * 2;\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\n\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar base;\n\t\tvar inverseSegments = 1.0 / segments;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\t\tvar i, j;\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tvar sin = Math.sin( phi );\n\t\t\tvar cos = Math.cos( phi );\n\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tbase = j + i * points.length;\n\n\t\t\t\tvar a = base;\n\t\t\t\tvar b = base + points.length;\n\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\tvar d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tvar normals = this.attributes.normal.array;\n\t\t\tvar n1 = new Vector3();\n\t\t\tvar n2 = new Vector3();\n\t\t\tvar n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tbase = segments * points.length * 3;\n\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n\t/**\n\t * @author jonobr1 / http://jonobr1.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// ShapeGeometry\n\n\tfunction ShapeGeometry( shapes, curveSegments ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tif ( typeof curveSegments === 'object' ) {\n\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\n\n\t\t\tcurveSegments = curveSegments.curveSegments;\n\n\t\t}\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\n\n\tShapeGeometry.prototype.toJSON = function () {\n\n\t\tvar data = Geometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t// ShapeBufferGeometry\n\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'ShapeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\tcurveSegments = curveSegments || 12;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar groupStart = 0;\n\t\tvar groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tvar i, l, shapeHole;\n\n\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\tvar points = shape.extractPoints( curveSegments );\n\n\t\t\tvar shapeVertices = points.shape;\n\t\t\tvar shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t\t// also check if holes are in the opposite direction\n\n\t\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\t\tshapeHole = shapeHoles[ i ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tshapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tvar vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n\tShapeBufferGeometry.prototype.toJSON = function () {\n\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\n\n\t\tvar shapes = this.parameters.shapes;\n\n\t\treturn toJSON$1( shapes, data );\n\n\t};\n\n\t//\n\n\tfunction toJSON$1( shapes, data ) {\n\n\t\tdata.shapes = [];\n\n\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\tvar shape = shapes[ i ];\n\n\t\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdata.shapes.push( shapes.uuid );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\n\n\t\t// buffer\n\n\t\tvar vertices = [];\n\n\t\t// helper variables\n\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\n\n\t\t// prepare source geometry\n\n\t\tvar geometry2;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tgeometry2 = new Geometry();\n\t\t\tgeometry2.fromBufferGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tgeometry2 = geometry.clone();\n\n\t\t}\n\n\t\tgeometry2.mergeVertices();\n\t\tgeometry2.computeFaceNormals();\n\n\t\tvar sourceVertices = geometry2.vertices;\n\t\tvar faces = geometry2.faces;\n\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\n\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tvar face = faces[ i ];\n\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\n\n\t\t\t\tedge1 = face[ keys[ j ] ];\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\n\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\n\n\t\t\t\tif ( edges[ key ] === undefined ) {\n\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tedges[ key ].face2 = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices\n\n\t\tfor ( key in edges ) {\n\n\t\t\tvar e = edges[ key ];\n\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\n\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t}\n\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\t// CylinderGeometry\n\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\n\n\t// CylinderBufferGeometry\n\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CylinderBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tvar scope = this;\n\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n\t\theight = height || 1;\n\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\n\t\theightSegments = Math.floor( heightSegments ) || 1;\n\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar index = 0;\n\t\tvar indexArray = [];\n\t\tvar halfHeight = height / 2;\n\t\tvar groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tvar x, y;\n\t\t\tvar normal = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tvar indexRow = [];\n\n\t\t\t\tvar v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tvar u = x / radialSegments;\n\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\n\n\t\t\tvar uv = new Vector2();\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tvar groupCount = 0;\n\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// save the index of the first center vertex\n\t\t\tcenterIndexStart = index;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\n\t\t\tcenterIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tvar u = x / radialSegments;\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\n\t\t\t\tvar cosTheta = Math.cos( theta );\n\t\t\t\tvar sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tvar c = centerIndexStart + x;\n\t\t\t\tvar i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\t// ConeGeometry\n\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\n\tConeGeometry.prototype.constructor = ConeGeometry;\n\n\t// ConeBufferGeometry\n\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\n\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t * @author Mugen87 / https://github.com/Mugen87\n\t * @author hughes\n\t */\n\n\t// CircleGeometry\n\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tGeometry.call( this );\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\n\t\tthis.mergeVertices();\n\n\t}\n\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\n\tCircleGeometry.prototype.constructor = CircleGeometry;\n\n\t// CircleBufferGeometry\n\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'CircleBufferGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tradius = radius || 1;\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\n\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n\t\t// buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\n\t\t// helper variables\n\n\t\tvar i, s;\n\t\tvar vertex = new Vector3();\n\t\tvar uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\tWireframeGeometry: WireframeGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeBufferGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusBufferGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextBufferGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereBufferGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingBufferGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheBufferGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeBufferGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleBufferGeometry,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxBufferGeometry\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * parameters = {\n\t *  color: <THREE.Color>\n\t * }\n\t */\n\n\tfunction ShadowMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tShadowMaterial.prototype = Object.create( Material.prototype );\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tShadowMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction RawShaderMaterial( parameters ) {\n\n\t\tShaderMaterial.call( this, parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  roughness: <float>,\n\t *  metalness: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  roughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  metalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  envMapIntensity: <float>\n\t *\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 0.5;\n\t\tthis.metalness = 0.5;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  reflectivity: <float>\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial( parameters ) {\n\n\t\tMeshStandardMaterial.call( this );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tthis.clearCoat = 0.0;\n\t\tthis.clearCoatRoughness = 0.0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\t\tthis.defines = { 'PHYSICAL': '' };\n\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tthis.clearCoat = source.clearCoat;\n\t\tthis.clearCoatRoughness = source.clearCoatRoughness;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  specular: <hex>,\n\t *  shininess: <float>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshPhongMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author takahirox / http://github.com/takahirox\n\t *\n\t * parameters = {\n\t *  gradientMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshToonMaterial( parameters ) {\n\n\t\tMeshPhongMaterial.call( this );\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.gradientMap = null;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\tMeshToonMaterial.prototype.copy = function ( source ) {\n\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\n\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * parameters = {\n\t *  opacity: <float>,\n\t *\n\t *  bumpMap: new THREE.Texture( <Image> ),\n\t *  bumpScale: <float>,\n\t *\n\t *  normalMap: new THREE.Texture( <Image> ),\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\n\t *  normalScale: <Vector2>,\n\t *\n\t *  displacementMap: new THREE.Texture( <Image> ),\n\t *  displacementScale: <float>,\n\t *  displacementBias: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshNormalMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\t\tthis.lights = false;\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  map: new THREE.Texture( <Image> ),\n\t *\n\t *  lightMap: new THREE.Texture( <Image> ),\n\t *  lightMapIntensity: <float>\n\t *\n\t *  aoMap: new THREE.Texture( <Image> ),\n\t *  aoMapIntensity: <float>\n\t *\n\t *  emissive: <hex>,\n\t *  emissiveIntensity: <float>\n\t *  emissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *  specularMap: new THREE.Texture( <Image> ),\n\t *\n\t *  alphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *  combine: THREE.Multiply,\n\t *  reflectivity: <float>,\n\t *  refractionRatio: <float>,\n\t *\n\t *  wireframe: <boolean>,\n\t *  wireframeLinewidth: <float>,\n\t *\n\t *  skinning: <bool>,\n\t *  morphTargets: <bool>,\n\t *  morphNormals: <bool>\n\t * }\n\t */\n\n\tfunction MeshLambertMaterial( parameters ) {\n\n\t\tMaterial.call( this );\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\n\n\t\tMaterial.prototype.copy.call( this, source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t *\n\t * parameters = {\n\t *  color: <hex>,\n\t *  opacity: <float>,\n\t *\n\t *  linewidth: <float>,\n\t *\n\t *  scale: <float>,\n\t *  dashSize: <float>,\n\t *  gapSize: <float>\n\t * }\n\t */\n\n\tfunction LineDashedMaterial( parameters ) {\n\n\t\tLineBasicMaterial.call( this );\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tLineDashedMaterial.prototype.copy = function ( source ) {\n\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar Cache = {\n\n\t\tenabled: false,\n\n\t\tfiles: {},\n\n\t\tadd: function ( key, file ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[ key ] = file;\n\n\t\t},\n\n\t\tget: function ( key ) {\n\n\t\t\tif ( this.enabled === false ) return;\n\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[ key ];\n\n\t\t},\n\n\t\tremove: function ( key ) {\n\n\t\t\tdelete this.files[ key ];\n\n\t\t},\n\n\t\tclear: function () {\n\n\t\t\tthis.files = {};\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\t\t\treturn this;\n\n\t\t};\n\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar loading = {};\n\n\tfunction FileLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FileLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\t// Check if request is duplicate\n\n\t\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Check for data: URI\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\t\tif ( dataUriRegexResult ) {\n\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\t\tdata = window.decodeURIComponent( data );\n\n\t\t\t\tif ( isBase64 ) data = window.atob( data );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\twindow.setTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// Initialise array for duplicate requests\n\n\t\t\t\tloading[ url ] = [];\n\n\t\t\t\tloading[ url ].push( {\n\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\n\t\t\t\t} );\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.open( 'GET', url, true );\n\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\t\tvar response = this.response;\n\n\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\t\tif ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\t\tdelete loading[ url ];\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t}, false );\n\n\t\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t\t}\n\n\t\t\t\trequest.send( null );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn request;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetResponseType: function ( value ) {\n\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetWithCredentials: function ( value ) {\n\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMimeType: function ( value ) {\n\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetRequestHeader: function ( value ) {\n\n\t\t\tthis.requestHeader = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t *\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t */\n\n\tfunction CompressedTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( CompressedTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar images = [];\n\n\t\t\tvar texture = new CompressedTexture();\n\t\t\ttexture.image = images;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\timages[ i ] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\n\t\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\tvar loaded = 0;\n\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\t\tloadTexture( i );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\n\n\t\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Nikos M. / https://github.com/foo123/\n\t *\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t */\n\n\tfunction DataTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\t// override in sub classes\n\t\tthis._parser = null;\n\n\t}\n\n\tObject.assign( DataTextureLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texture = new DataTexture();\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tvar texData = scope._parser( buffer );\n\n\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\tif ( undefined !== texData.image ) {\n\n\t\t\t\t\ttexture.image = texData.image;\n\n\t\t\t\t} else if ( undefined !== texData.data ) {\n\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n\t\t\t\tif ( undefined !== texData.format ) {\n\n\t\t\t\t\ttexture.format = texData.format;\n\n\t\t\t\t}\n\t\t\t\tif ( undefined !== texData.type ) {\n\n\t\t\t\t\ttexture.type = texData.type;\n\n\t\t\t\t}\n\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\n\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t\t}, onProgress, onError );\n\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction ImageLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( ImageLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\n\n\t\t\tfunction onImageLoad() {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tCache.add( url, this );\n\n\t\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}\n\n\t\t\tfunction onImageError( event ) {\n\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t\t\tif ( onError ) onError( event );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t\t}\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\timage.src = url;\n\n\t\t\treturn image;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction CubeTextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( CubeTextureLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new CubeTexture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture( i ) {\n\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, undefined, onError );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction TextureLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( TextureLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar texture = new Texture();\n\n\t\t\tvar loader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\t\tloader.setPath( this.path );\n\n\t\t\tloader.load( url, function ( image ) {\n\n\t\t\t\ttexture.image = image;\n\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g$/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\n\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\t\tonLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Extensible curve object\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tAbstract Curve base class\n\t **************************************************************/\n\n\tfunction Curve() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\tObject.assign( Curve.prototype, {\n\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\n\t\tgetPointAt: function ( u, optionalTarget ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getPoint( t, optionalTarget );\n\n\t\t},\n\n\t\t// Get sequence of points using getPoint( t )\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get sequence of points using getPointAt( u )\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 5;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\n\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\t// Get total curve arc length\n\n\t\tgetLength: function () {\n\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[ lengths.length - 1 ];\n\n\t\t},\n\n\t\t// Get list of cumulative segment lengths\n\n\t\tgetLengths: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\n\n\t\t\tif ( this.cacheArcLengths &&\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t\t! this.needsUpdate ) {\n\n\t\t\t\treturn this.cacheArcLengths;\n\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tvar cache = [];\n\t\t\tvar current, last = this.getPoint( 0 );\n\t\t\tvar p, sum = 0;\n\n\t\t\tcache.push( 0 );\n\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\n\n\t\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\t\tsum += current.distanceTo( last );\n\t\t\t\tcache.push( sum );\n\t\t\t\tlast = current;\n\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t\t},\n\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\n\t\t},\n\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\t\tgetUtoTmapping: function ( u, distance ) {\n\n\t\t\tvar arcLengths = this.getLengths();\n\n\t\t\tvar i = 0, il = arcLengths.length;\n\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif ( distance ) {\n\n\t\t\t\ttargetArcLength = distance;\n\n\t\t\t} else {\n\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t\t}\n\n\t\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\t\tvar low = 0, high = il - 1, comparison;\n\n\t\t\twhile ( low <= high ) {\n\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\t\tlow = i + 1;\n\n\t\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\t\thigh = i - 1;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// DONE\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\t\treturn i / ( il - 1 );\n\n\t\t\t}\n\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\t\tvar lengthBefore = arcLengths[ i ];\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\n\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\n\n\t\t\t// determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t\t// add that fractional amount to t\n\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\t\treturn t;\n\n\t\t},\n\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\n\t\tgetTangent: function ( t ) {\n\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta;\n\n\t\t\t// Capping in case of danger\n\n\t\t\tif ( t1 < 0 ) t1 = 0;\n\t\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\t\tvar pt1 = this.getPoint( t1 );\n\t\t\tvar pt2 = this.getPoint( t2 );\n\n\t\t\tvar vec = pt2.clone().sub( pt1 );\n\t\t\treturn vec.normalize();\n\n\t\t},\n\n\t\tgetTangentAt: function ( u ) {\n\n\t\t\tvar t = this.getUtoTmapping( u );\n\t\t\treturn this.getTangent( t );\n\n\t\t},\n\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\n\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\t\tvar normal = new Vector3();\n\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4();\n\n\t\t\tvar i, u, theta;\n\n\t\t\t// compute the tangent vectors for each segment on the curve\n\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\n\n\t\t\t\tu = i / segments;\n\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\n\t\t\t\ttangents[ i ].normalize();\n\n\t\t\t}\n\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\t\t\tnormals[ 0 ] = new Vector3();\n\t\t\tbinormals[ 0 ] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\n\n\t\t\tif ( tx <= min ) {\n\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( ty <= min ) {\n\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( tz <= min ) {\n\n\t\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t\t}\n\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\t\tvec.normalize();\n\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t\t}\n\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\t\tif ( closed === true ) {\n\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\t\ttheta /= segments;\n\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\t\ttheta = - theta;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX || 0;\n\t\tthis.aY = aY || 0;\n\n\t\tthis.xRadius = xRadius || 1;\n\t\tthis.yRadius = yRadius || 1;\n\n\t\tthis.aStartAngle = aStartAngle || 0;\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\t\tthis.aClockwise = aClockwise || false;\n\n\t\tthis.aRotation = aRotation || 0;\n\n\t}\n\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\n\tEllipseCurve.prototype.constructor = EllipseCurve;\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar twoPi = Math.PI * 2;\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tvar cos = Math.cos( this.aRotation );\n\t\t\tvar sin = Math.sin( this.aRotation );\n\n\t\t\tvar tx = x - this.aX;\n\t\t\tvar ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t};\n\n\tEllipseCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\n\tEllipseCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t};\n\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t};\n\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\n\tArcCurve.prototype.constructor = ArcCurve;\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * @author zz85 https://github.com/zz85\n\t *\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *   p(0) = x0, p(1) = x1\n\t\t *  and\n\t\t *   p'(0) = t0, p'(1) = t1.\n\t\t */\n\t\tfunction init( x0, x1, t0, t1 ) {\n\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t\t},\n\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\n\t\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t\t},\n\n\t\t\tcalc: function ( t ) {\n\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points || [];\n\t\tthis.closed = closed || false;\n\t\tthis.curveType = curveType || 'centripetal';\n\t\tthis.tension = tension || 0.5;\n\n\t}\n\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar points = this.points;\n\t\tvar l = points.length;\n\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tvar p0, p1, p2, p3; // 4 points\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tp1 = points[ intPoint % l ];\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t};\n\n\tCatmullRomCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t};\n\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n\t}\n\n\t//\n\n\tfunction QuadraticBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\n\t}\n\n\tfunction QuadraticBezierP1( t, p ) {\n\n\t\treturn 2 * ( 1 - t ) * t * p;\n\n\t}\n\n\tfunction QuadraticBezierP2( t, p ) {\n\n\t\treturn t * t * p;\n\n\t}\n\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\t\tQuadraticBezierP2( t, p2 );\n\n\t}\n\n\t//\n\n\tfunction CubicBezierP0( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\n\t}\n\n\tfunction CubicBezierP1( t, p ) {\n\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\n\t}\n\n\tfunction CubicBezierP2( t, p ) {\n\n\t\treturn 3 * ( 1 - t ) * t * t * p;\n\n\t}\n\n\tfunction CubicBezierP3( t, p ) {\n\n\t\treturn t * t * t * p;\n\n\t}\n\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\t\tCubicBezierP3( t, p3 );\n\n\t}\n\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\t\tthis.v3 = v3 || new Vector2();\n\n\t}\n\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\t\tthis.v3 = v3 || new Vector3();\n\n\t}\n\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tCubicBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tLineCurve.prototype = Object.create( Curve.prototype );\n\tLineCurve.prototype.constructor = LineCurve;\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\n\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\n\n\t\treturn tangent.normalize();\n\n\t};\n\n\tLineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction LineCurve3( v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tLineCurve3.prototype = Object.create( Curve.prototype );\n\tLineCurve3.prototype.constructor = LineCurve3;\n\n\tLineCurve3.prototype.isLineCurve3 = true;\n\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t};\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t};\n\n\tLineCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tLineCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tLineCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0 || new Vector2();\n\t\tthis.v1 = v1 || new Vector2();\n\t\tthis.v2 = v2 || new Vector2();\n\n\t}\n\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0 || new Vector3();\n\t\tthis.v1 = v1 || new Vector3();\n\t\tthis.v2 = v2 || new Vector3();\n\n\t}\n\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector3();\n\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t};\n\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t};\n\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points || [];\n\n\t}\n\n\tSplineCurve.prototype = Object.create( Curve.prototype );\n\tSplineCurve.prototype.constructor = SplineCurve;\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\t\tvar point = optionalTarget || new Vector2();\n\n\t\tvar points = this.points;\n\t\tvar p = ( points.length - 1 ) * t;\n\n\t\tvar intPoint = Math.floor( p );\n\t\tvar weight = p - intPoint;\n\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tvar p1 = points[ intPoint ];\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t};\n\n\tSplineCurve.prototype.copy = function ( source ) {\n\n\t\tCurve.prototype.copy.call( this, source );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\tSplineCurve.prototype.toJSON = function () {\n\n\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\tdata.points = [];\n\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t};\n\n\tSplineCurve.prototype.fromJSON = function ( json ) {\n\n\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\tthis.points = [];\n\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tvar point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t};\n\n\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t *\n\t **/\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *  curves, but retains the api of a curve\n\t **************************************************************/\n\n\tfunction CurvePath() {\n\n\t\tCurve.call( this );\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\n\n\t\tconstructor: CurvePath,\n\n\t\tadd: function ( curve ) {\n\n\t\t\tthis.curves.push( curve );\n\n\t\t},\n\n\t\tclosePath: function () {\n\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\n\t\tgetPoint: function ( t ) {\n\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0;\n\n\t\t\t// To think about boundaries points.\n\n\t\t\twhile ( i < curveLengths.length ) {\n\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\n\t\t\t\t\tvar curve = this.curves[ i ];\n\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\t\treturn curve.getPointAt( u );\n\n\t\t\t\t}\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t\t},\n\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\n\t\tgetLength: function () {\n\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[ lens.length - 1 ];\n\n\t\t},\n\n\t\t// cacheLengths must be recalculated.\n\t\tupdateArcLengths: function () {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\n\t\t},\n\n\t\t// Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\t\tgetCurveLengths: function () {\n\n\t\t\t// We use cache values if curves and cache array are same length\n\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\t\treturn this.cacheLengths;\n\n\t\t\t}\n\n\t\t\t// Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\t\t\tvar lengths = [], sums = 0;\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tsums += this.curves[ i ].getLength();\n\t\t\t\tlengths.push( sums );\n\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\n\t\t\treturn lengths;\n\n\t\t},\n\n\t\tgetSpacedPoints: function ( divisions ) {\n\n\t\t\tif ( divisions === undefined ) divisions = 40;\n\n\t\t\tvar points = [];\n\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\n\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tgetPoints: function ( divisions ) {\n\n\t\t\tdivisions = divisions || 12;\n\n\t\t\tvar points = [], last;\n\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\t\tvar curve = curves[ i ];\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t\t: divisions;\n\n\t\t\t\tvar pts = curve.getPoints( resolution );\n\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\t\tvar point = pts[ j ];\n\n\t\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push( point );\n\t\t\t\t\tlast = point;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\t\tpoints.push( points[ 0 ] );\n\n\t\t\t}\n\n\t\t\treturn points;\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurve.prototype.copy.call( this, source );\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = source.curves[ i ];\n\n\t\t\t\tthis.curves.push( curve.clone() );\n\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = this.curves[ i ];\n\t\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurve.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\t\tvar curve = json.curves[ i ];\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Creates free form 2d path using series of points, lines or curves.\n\t **/\n\n\tfunction Path( points ) {\n\n\t\tCurvePath.call( this );\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\n\n\t\tconstructor: Path,\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t\t}\n\n\t\t},\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tvar curve = new QuadraticBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tvar curve = new CubicBezierCurve(\n\t\t\t\tthis.currentPoint.clone(),\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\t\tnew Vector2( aX, aY )\n\t\t\t);\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.set( aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\n\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\t\tvar curve = new SplineCurve( npts );\n\t\t\tthis.curves.push( curve );\n\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\t},\n\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\t},\n\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t},\n\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\n\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.curves.push( curve );\n\n\t\t\tvar lastPoint = curve.getPoint( 1 );\n\t\t\tthis.currentPoint.copy( lastPoint );\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tCurvePath.prototype.copy.call( this, source );\n\n\t\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * Defines a 2d shape plane using paths.\n\t **/\n\n\t// STEP 1 Create a path.\n\t// STEP 2 Turn path into shape.\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n\t// STEP 3a - Extract points from each shape, turn to vertices\n\t// STEP 3b - Triangulate each shape, add faces.\n\n\tfunction Shape( points ) {\n\n\t\tPath.call( this, points );\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\n\n\t\tconstructor: Shape,\n\n\t\tgetPointsHoles: function ( divisions ) {\n\n\t\t\tvar holesPts = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t\t}\n\n\t\t\treturn holesPts;\n\n\t\t},\n\n\t\t// get points of shape and holes (keypoints based on segments parameter)\n\n\t\textractPoints: function ( divisions ) {\n\n\t\t\treturn {\n\n\t\t\t\tshape: this.getPoints( divisions ),\n\t\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t\t};\n\n\t\t},\n\n\t\tcopy: function ( source ) {\n\n\t\t\tPath.prototype.copy.call( this, source );\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = source.holes[ i ];\n\n\t\t\t\tthis.holes.push( hole.clone() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar data = Path.prototype.toJSON.call( this );\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = this.holes[ i ];\n\t\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t},\n\n\t\tfromJSON: function ( json ) {\n\n\t\t\tPath.prototype.fromJSON.call( this, json );\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\t\tvar hole = json.holes[ i ];\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Light( color, intensity ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\n\n\t\tthis.receiveShadow = undefined;\n\n\t}\n\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Light,\n\n\t\tisLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tObject3D.prototype.copy.call( this, source );\n\n\t\t\tthis.color.copy( source.color );\n\t\t\tthis.intensity = source.intensity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\n\t\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\n\n\t\tLight.call( this, skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.castShadow = undefined;\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: HemisphereLight,\n\n\t\tisHemisphereLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.groundColor.copy( source.groundColor );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction LightShadow( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.radius = 1;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.matrix = new Matrix4();\n\n\t}\n\n\tObject.assign( LightShadow.prototype, {\n\n\t\tcopy: function ( source ) {\n\n\t\t\tthis.camera = source.camera.clone();\n\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\n\t\t\tthis.mapSize.copy( source.mapSize );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\ttoJSON: function () {\n\n\t\t\tvar object = {};\n\n\t\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\t\tdelete object.camera.matrix;\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction SpotLightShadow() {\n\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t}\n\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: SpotLightShadow,\n\n\t\tisSpotLightShadow: true,\n\n\t\tupdate: function ( light ) {\n\n\t\t\tvar camera = this.camera;\n\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: SpotLight,\n\n\t\tisSpotLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction PointLight( color, intensity, distance, decay ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tObject.defineProperty( this, 'power', {\n\t\t\tget: function () {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\n\t\t\t},\n\t\t\tset: function ( power ) {\n\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\n\n\t\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t}\n\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: PointLight,\n\n\t\tisPointLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction DirectionalLightShadow( ) {\n\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\n\n\t\tconstructor: DirectionalLightShadow\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction DirectionalLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: DirectionalLight,\n\n\t\tisDirectionalLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.target = source.target.clone();\n\n\t\t\tthis.shadow = source.shadow.clone();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AmbientLight( color, intensity ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t\tthis.castShadow = undefined;\n\n\t}\n\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: AmbientLight,\n\n\t\tisAmbientLight: true\n\n\t} );\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t */\n\n\tfunction RectAreaLight( color, intensity, width, height ) {\n\n\t\tLight.call( this, color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = ( width !== undefined ) ? width : 10;\n\t\tthis.height = ( height !== undefined ) ? height : 10;\n\n\t}\n\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\n\n\t\tconstructor: RectAreaLight,\n\n\t\tisRectAreaLight: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tLight.prototype.copy.call( this, source );\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttoJSON: function ( meta ) {\n\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tvar AnimationUtils = {\n\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function ( array, from, to ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t\t}\n\n\t\t\treturn array.slice( from, to );\n\n\t\t},\n\n\t\t// converts an array to a specific type\n\t\tconvertArray: function ( array, type, forceClone ) {\n\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\t\treturn new type( array ); // create typed array\n\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t\t},\n\n\t\tisTypedArray: function ( object ) {\n\n\t\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t\t\t! ( object instanceof DataView );\n\n\t\t},\n\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function ( times ) {\n\n\t\t\tfunction compareTime( i, j ) {\n\n\t\t\t\treturn times[ i ] - times[ j ];\n\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array( n );\n\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\t\tresult.sort( compareTime );\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function ( values, stride, order ) {\n\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor( nValues );\n\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\t\tvar srcOffset = order[ i ] * stride;\n\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\n\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t}\n\n\t\t\tif ( key === undefined ) return; // no data\n\n\t\t\tvar value = key[ valuePropertyName ];\n\t\t\tif ( value === undefined ) return; // no data\n\n\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t\t// ...assume THREE.Math-ish\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise push as-is\n\n\t\t\t\tdo {\n\n\t\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t\t} while ( key !== undefined );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t * @author tschw\n\t */\n\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t}\n\n\tObject.assign( Interpolant.prototype, {\n\n\t\tevaluate: function ( t ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\ti1 = this._cachedIndex,\n\n\t\t\t\tt1 = pp[ i1 ],\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\tvalidate_interval: {\n\n\t\t\t\tseek: {\n\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\n\n\t\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t\t} // linear scan\n\n\t\t\t\t\t// binary search\n\n\t\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t\t// check boundary cases, again\n\n\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // seek\n\n\t\t\t\tthis._cachedIndex = i1;\n\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t\t} // validate_interval\n\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t\t},\n\n\t\tsettings: null, // optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\n\t\t// --- Protected interface\n\n\t\tDefaultSettings_: {},\n\n\t\tgetSettings_: function () {\n\n\t\t\treturn this.settings || this.DefaultSettings_;\n\n\t\t},\n\n\t\tcopySampleValue_: function ( index ) {\n\n\t\t\t// copies a sample value to the result buffer\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = index * stride;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t},\n\n\t\t// Template methods for derived classes:\n\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\n\n\t\t\tthrow new Error( 'call to abstract method' );\n\t\t\t// implementations shall return this.resultBuffer\n\n\t\t},\n\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\n\n\t\t\t// empty\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( Interpolant.prototype, {\n\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\n\n\t} );\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t}\n\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: CubicInterpolant,\n\n\t\tDefaultSettings_: {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t},\n\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\n\n\t\t\tvar pp = this.parameterPositions,\n\t\t\t\tiPrev = i1 - 2,\n\t\t\t\tiNext = i1 + 1,\n\n\t\t\t\ttPrev = pp[ iPrev ],\n\t\t\t\ttNext = pp[ iNext ];\n\n\t\t\tif ( tPrev === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tNext === undefined ) {\n\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\n\t\t\t\tstride = this.valueSize;\n\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\n\t\t},\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tpp = p * p,\n\t\t\t\tppp = pp * p;\n\n\t\t\t// evaluate polynomials\n\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp;\n\n\t\t\t// combine data linearly\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author tschw\n\t */\n\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: LinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset1 = i1 * stride,\n\t\t\t\toffset0 = offset1 - stride,\n\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tresult[ i ] =\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: DiscreteInterpolant,\n\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A timed sequence of keyframes for a specific property.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Static methods\n\n\tObject.assign( KeyframeTrack, {\n\n\t\t// Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\t\ttoJSON: function ( track ) {\n\n\t\t\tvar trackType = track.constructor;\n\n\t\t\tvar json;\n\n\t\t\t// derived classes can define a static toJSON method\n\t\t\tif ( trackType.toJSON !== undefined ) {\n\n\t\t\t\tjson = trackType.toJSON( track );\n\n\t\t\t} else {\n\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t\t};\n\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( KeyframeTrack.prototype, {\n\n\t\tconstructor: KeyframeTrack,\n\n\t\tTimeBufferType: Float32Array,\n\n\t\tValueBufferType: Float32Array,\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\n\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\n\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tsetInterpolation: function ( interpolation ) {\n\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch ( interpolation ) {\n\n\t\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( factoryMethod === undefined ) {\n\n\t\t\t\tvar message = \"unsupported interpolation for \" +\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\n\n\t\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetInterpolation: function () {\n\n\t\t\tswitch ( this.createInterpolant ) {\n\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\t\treturn InterpolateSmooth;\n\n\t\t\t}\n\n\t\t},\n\n\t\tgetValueSize: function () {\n\n\t\t\treturn this.values.length / this.times.length;\n\n\t\t},\n\n\t\t// move all keyframes either forwards or backwards in time\n\t\tshift: function ( timeOffset ) {\n\n\t\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\tscale: function ( timeScale ) {\n\n\t\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\ttrim: function ( startTime, endTime ) {\n\n\t\t\tvar times = this.times,\n\t\t\t\tnKeys = times.length,\n\t\t\t\tfrom = 0,\n\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t\t++ from;\n\n\t\t\t}\n\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t\t-- to;\n\n\t\t\t}\n\n\t\t\t++ to; // inclusive -> exclusive bound\n\n\t\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tvar valueSize = this.getValueSize();\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\n\t\t\t\tnKeys = times.length;\n\n\t\t\tif ( nKeys === 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\t\tvalid = false;\n\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\n\n\t\t\t\tvar currTime = times[ i ];\n\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\n\t\t\t}\n\n\t\t\tif ( values !== undefined ) {\n\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tvar value = values[ i ];\n\n\t\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\t// removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\toptimize: function () {\n\n\t\t\tvar times = this.times,\n\t\t\t\tvalues = this.values,\n\t\t\t\tstride = this.getValueSize(),\n\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\t\twriteIndex = 1,\n\t\t\t\tlastIndex = times.length - 1;\n\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\n\n\t\t\t\tvar keep = false;\n\n\t\t\t\tvar time = times[ i ];\n\t\t\t\tvar timeNext = times[ i + 1 ];\n\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\n\n\t\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\n\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tkeep = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// in-place compaction\n\n\t\t\t\tif ( keep ) {\n\n\t\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t++ writeIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// flush last keyframe (compaction looks ahead)\n\n\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t\tif ( writeIndex !== times.length ) {\n\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of Boolean keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction BooleanKeyframeTrack( name, times, values ) {\n\n\t\tKeyframeTrack.call( this, name, times, values );\n\n\t}\n\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: BooleanKeyframeTrack,\n\n\t\tValueTypeName: 'bool',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t\t// Note: Actually this track could have a optimized / compressed\n\t\t// representation of a single value and a custom interpolant that\n\t\t// computes \"firstValue ^ isOdd( index )\".\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of keyframe values that represent color.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: ColorKeyframeTrack,\n\n\t\tValueTypeName: 'color'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t\t// Note: Very basic implementation and nothing special yet.\n\t\t// However, this is the place for color space parameterization.\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of numeric keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: NumberKeyframeTrack,\n\n\t\tValueTypeName: 'number'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\t\tconstructor: QuaternionLinearInterpolant,\n\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\n\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\tvalues = this.sampleValues,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toffset = i1 * stride,\n\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of quaternion keyframe values.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: QuaternionKeyframeTrack,\n\n\t\tValueTypeName: 'quaternion',\n\n\t\t// ValueBufferType is inherited\n\n\t\tDefaultInterpolation: InterpolateLinear,\n\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\n\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t\t},\n\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n\t} );\n\n\t/**\n\t *\n\t * A Track that interpolates Strings\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: StringKeyframeTrack,\n\n\t\tValueTypeName: 'string',\n\t\tValueBufferType: Array,\n\n\t\tDefaultInterpolation: InterpolateDiscrete,\n\n\t\tInterpolantFactoryMethodLinear: undefined,\n\n\t\tInterpolantFactoryMethodSmooth: undefined\n\n\t} );\n\n\t/**\n\t *\n\t * A Track of vectored keyframe values.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\n\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\n\n\t}\n\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\n\n\t\tconstructor: VectorKeyframeTrack,\n\n\t\tValueTypeName: 'vector'\n\n\t\t// ValueBufferType is inherited\n\n\t\t// DefaultInterpolation is inherited\n\n\t} );\n\n\t/**\n\t *\n\t * Reusable set of Tracks that represent an animation.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t */\n\n\tfunction AnimationClip( name, duration, tracks ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\tfunction getTrackTypeForValueTypeName( typeName ) {\n\n\t\tswitch ( typeName.toLowerCase() ) {\n\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\n\t\t\t\treturn StringKeyframeTrack;\n\n\t\t}\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n\t}\n\n\tfunction parseKeyframeTrack( json ) {\n\n\t\tif ( json.type === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\n\n\t\tif ( json.times === undefined ) {\n\n\t\t\tvar times = [], values = [];\n\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\n\t\t}\n\n\t\t// derived classes can define a static parse method\n\t\tif ( trackType.parse !== undefined ) {\n\n\t\t\treturn trackType.parse( json );\n\n\t\t} else {\n\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t\t}\n\n\t}\n\n\tObject.assign( AnimationClip, {\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\n\n\t\t},\n\n\t\ttoJSON: function ( clip ) {\n\n\t\t\tvar tracks = [],\n\t\t\t\tclipTracks = clip.tracks;\n\n\t\t\tvar json = {\n\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid\n\n\t\t\t};\n\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn json;\n\n\t\t},\n\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\n\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\ttimes.push(\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\t\ti,\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\ttracks.push(\n\t\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\t\ttimes, values\n\t\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, - 1, tracks );\n\n\t\t},\n\n\t\tfindByName: function ( objectOrClipArray, name ) {\n\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\t\treturn clipArray[ i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\n\n\t\t\tvar animationToMorphTargets = {};\n\n\t\t\t// tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t\t// sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\t\tvar morphTarget = morphTargets[ i ];\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\n\n\t\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\t\tvar name = parts[ 1 ];\n\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\n\t\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor ( var name in animationToMorphTargets ) {\n\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t\t}\n\n\t\t\treturn clips;\n\n\t\t},\n\n\t\t// parse the animation.hierarchy format\n\t\tparseAnimation: function ( animation, bones ) {\n\n\t\t\tif ( ! animation ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\t// automatic length determination in AnimationClip.\n\t\t\tvar duration = animation.length || - 1;\n\t\t\tvar fps = animation.fps || 30;\n\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t\t// skip empty tracks\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t\t// process morph targets\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\t\taddNonemptyTrack(\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( tracks.length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\n\n\t\t\treturn clip;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( AnimationClip.prototype, {\n\n\t\tresetDuration: function () {\n\n\t\t\tvar tracks = this.tracks, duration = 0;\n\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\t\tvar track = this.tracks[ i ];\n\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttrim: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tvalidate: function () {\n\n\t\t\tvar valid = true;\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t\t}\n\n\t\t\treturn valid;\n\n\t\t},\n\n\t\toptimize: function () {\n\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\t\tthis.tracks[ i ].optimize();\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction MaterialLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.textures = {};\n\n\t}\n\n\tObject.assign( MaterialLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTextures: function ( value ) {\n\n\t\t\tthis.textures = value;\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture( name ) {\n\n\t\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn textures[ name ];\n\n\t\t\t}\n\n\t\t\tvar material = new Materials[ json.type ]();\n\n\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\t\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\n\t\t\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\n\t\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\t\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\t\t// Shader Material\n\n\t\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\n\t\t\t// Deprecated\n\n\t\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t\t// for PointsMaterial\n\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t\t// maps\n\n\t\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\n\t\t\tif ( json.alphaMap !== undefined ) {\n\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\n\t\t\t\tmaterial.transparent = true;\n\n\t\t\t}\n\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t\t}\n\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\n\t\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\t\treturn material;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction BufferGeometryLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( BufferGeometryLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar index = json.data.index;\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor ( var key in attributes ) {\n\n\t\t\t\tvar attribute = attributes[ key ];\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\n\n\t\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\n\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif ( groups !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar group = groups[ i ];\n\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\t// Workaround for IE11 pre KB2929437. See #11440\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Loader() {}\n\n\tLoader.Handlers = {\n\n\t\thandlers: [],\n\n\t\tadd: function ( regex, loader ) {\n\n\t\t\tthis.handlers.push( regex, loader );\n\n\t\t},\n\n\t\tget: function ( file ) {\n\n\t\t\tvar handlers = this.handlers;\n\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tvar regex = handlers[ i ];\n\t\t\t\tvar loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t};\n\n\tObject.assign( Loader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tonLoadStart: function () {},\n\n\t\tonLoadProgress: function () {},\n\n\t\tonLoadComplete: function () {},\n\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\n\n\t\t\tvar array = [];\n\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\n\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t},\n\n\t\tcreateMaterial: ( function () {\n\n\t\t\tvar BlendingMode = {\n\t\t\t\tNoBlending: NoBlending,\n\t\t\t\tNormalBlending: NormalBlending,\n\t\t\t\tAdditiveBlending: AdditiveBlending,\n\t\t\t\tSubtractiveBlending: SubtractiveBlending,\n\t\t\t\tMultiplyBlending: MultiplyBlending,\n\t\t\t\tCustomBlending: CustomBlending\n\t\t\t};\n\n\t\t\tvar color = new Color();\n\t\t\tvar textureLoader = new TextureLoader();\n\t\t\tvar materialLoader = new MaterialLoader();\n\n\t\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\n\n\t\t\t\t// convert from old material format\n\n\t\t\t\tvar textures = {};\n\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\n\n\t\t\t\t\tvar fullPath = texturePath + path;\n\t\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( loader !== null ) {\n\n\t\t\t\t\t\ttexture = loader.load( fullPath );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( repeat !== undefined ) {\n\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\n\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( offset !== undefined ) {\n\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( wrap !== undefined ) {\n\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\n\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( anisotropy !== undefined ) {\n\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar uuid = _Math.generateUUID();\n\n\t\t\t\t\ttextures[ uuid ] = texture;\n\n\t\t\t\t\treturn uuid;\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tvar json = {\n\t\t\t\t\tuuid: _Math.generateUUID(),\n\t\t\t\t\ttype: 'MeshLambertMaterial'\n\t\t\t\t};\n\n\t\t\t\tfor ( var name in m ) {\n\n\t\t\t\t\tvar value = m[ name ];\n\n\t\t\t\t\tswitch ( name ) {\n\n\t\t\t\t\t\tcase 'DbgColor':\n\t\t\t\t\t\tcase 'DbgIndex':\n\t\t\t\t\t\tcase 'opticalDensity':\n\t\t\t\t\t\tcase 'illumination':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'DbgName':\n\t\t\t\t\t\t\tjson.name = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'blending':\n\t\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorAmbient':\n\t\t\t\t\t\tcase 'mapAmbient':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorDiffuse':\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorSpecular':\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'colorEmissive':\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'specularCoef':\n\t\t\t\t\t\t\tjson.shininess = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'shading':\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuse':\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissive':\n\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapEmissiveRepeat':\n\t\t\t\t\t\tcase 'mapEmissiveOffset':\n\t\t\t\t\t\tcase 'mapEmissiveWrap':\n\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLight':\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapLightRepeat':\n\t\t\t\t\t\tcase 'mapLightOffset':\n\t\t\t\t\t\tcase 'mapLightWrap':\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAO':\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAORepeat':\n\t\t\t\t\t\tcase 'mapAOOffset':\n\t\t\t\t\t\tcase 'mapAOWrap':\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBump':\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpScale':\n\t\t\t\t\t\t\tjson.bumpScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapBumpRepeat':\n\t\t\t\t\t\tcase 'mapBumpOffset':\n\t\t\t\t\t\tcase 'mapBumpWrap':\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormal':\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalFactor':\n\t\t\t\t\t\t\tjson.normalScale = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapNormalRepeat':\n\t\t\t\t\t\tcase 'mapNormalOffset':\n\t\t\t\t\t\tcase 'mapNormalWrap':\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecular':\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\n\t\t\t\t\t\tcase 'mapSpecularOffset':\n\t\t\t\t\t\tcase 'mapSpecularWrap':\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalness':\n\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapMetalnessRepeat':\n\t\t\t\t\t\tcase 'mapMetalnessOffset':\n\t\t\t\t\t\tcase 'mapMetalnessWrap':\n\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughness':\n\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapRoughnessRepeat':\n\t\t\t\t\t\tcase 'mapRoughnessOffset':\n\t\t\t\t\t\tcase 'mapRoughnessWrap':\n\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlpha':\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\n\t\t\t\t\t\tcase 'mapAlphaOffset':\n\t\t\t\t\t\tcase 'mapAlphaWrap':\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'flipSided':\n\t\t\t\t\t\t\tjson.side = BackSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'doubleSided':\n\t\t\t\t\t\t\tjson.side = DoubleSide;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\n\t\t\t\t\t\t\tjson.opacity = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'depthTest':\n\t\t\t\t\t\tcase 'depthWrite':\n\t\t\t\t\t\tcase 'colorWrite':\n\t\t\t\t\t\tcase 'opacity':\n\t\t\t\t\t\tcase 'reflectivity':\n\t\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tcase 'wireframe':\n\t\t\t\t\t\t\tjson[ name ] = value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\n\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\n\n\t\t\t\tmaterialLoader.setTextures( textures );\n\n\t\t\t\treturn materialLoader.parse( json );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author Don McCurdy / https://www.donmccurdy.com\n\t */\n\n\tvar LoaderUtils = {\n\n\t\tdecodeText: function ( array ) {\n\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\t\treturn new TextDecoder().decode( array );\n\n\t\t\t}\n\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\t\tvar s = '';\n\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t\t}\n\n\t\t\t// Merges multi-byte utf-8 characters.\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t},\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tvar index = url.lastIndexOf( '/' );\n\n\t\t\tif ( index === - 1 ) return './';\n\n\t\t\treturn url.substr( 0, index + 1 );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction JSONLoader( manager ) {\n\n\t\tif ( typeof manager === 'boolean' ) {\n\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\n\t\t\tmanager = undefined;\n\n\t\t}\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.withCredentials = false;\n\n\t}\n\n\tObject.assign( JSONLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === 'string' ) ? this.texturePath : LoaderUtils.extractUrlBase( url );\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setWithCredentials( this.withCredentials );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = JSON.parse( text );\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata !== undefined ) {\n\n\t\t\t\t\tvar type = metadata.type;\n\n\t\t\t\t\tif ( type !== undefined ) {\n\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar object = scope.parse( json, texturePath );\n\t\t\t\tonLoad( object.geometry, object.materials );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: ( function () {\n\n\t\t\tfunction parseModel( json, geometry ) {\n\n\t\t\t\tfunction isBitSet( value, position ) {\n\n\t\t\t\t\treturn value & ( 1 << position );\n\n\t\t\t\t}\n\n\t\t\t\tvar i, j, fi,\n\n\t\t\t\t\toffset, zLength,\n\n\t\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\n\n\t\t\t\t\ttype,\n\t\t\t\t\tisQuad,\n\t\t\t\t\thasMaterial,\n\t\t\t\t\thasFaceVertexUv,\n\t\t\t\t\thasFaceNormal, hasFaceVertexNormal,\n\t\t\t\t\thasFaceColor, hasFaceVertexColor,\n\n\t\t\t\t\tvertex, face, faceA, faceB, hex, normal,\n\n\t\t\t\t\tuvLayer, uv, u, v,\n\n\t\t\t\t\tfaces = json.faces,\n\t\t\t\t\tvertices = json.vertices,\n\t\t\t\t\tnormals = json.normals,\n\t\t\t\t\tcolors = json.colors,\n\n\t\t\t\t\tscale = json.scale,\n\n\t\t\t\t\tnUvLayers = 0;\n\n\n\t\t\t\tif ( json.uvs !== undefined ) {\n\n\t\t\t\t\t// disregard empty arrays\n\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\n\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = vertices.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\tvertex = new Vector3();\n\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\n\n\t\t\t\t\tgeometry.vertices.push( vertex );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0;\n\t\t\t\tzLength = faces.length;\n\n\t\t\t\twhile ( offset < zLength ) {\n\n\t\t\t\t\ttype = faces[ offset ++ ];\n\n\t\t\t\t\tisQuad = isBitSet( type, 0 );\n\t\t\t\t\thasMaterial = isBitSet( type, 1 );\n\t\t\t\t\thasFaceVertexUv = isBitSet( type, 3 );\n\t\t\t\t\thasFaceNormal = isBitSet( type, 4 );\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\n\t\t\t\t\thasFaceColor = isBitSet( type, 6 );\n\t\t\t\t\thasFaceVertexColor = isBitSet( type, 7 );\n\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n\t\t\t\t\tif ( isQuad ) {\n\n\t\t\t\t\t\tfaceA = new Face3();\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\tfaceB = new Face3();\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\n\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tfaceA.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\n\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( faceA );\n\t\t\t\t\t\tgeometry.faces.push( faceB );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tface = new Face3();\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\n\n\t\t\t\t\t\tif ( hasMaterial ) {\n\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// to get face <=> uv index correspondence\n\n\t\t\t\t\t\tfi = geometry.faces.length;\n\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\n\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\n\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\n\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\n\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\n\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\n\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\tface.normal.set(\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\n\n\t\t\t\t\t\t\t\tnormal = new Vector3(\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\n\t\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeometry.faces.push( face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseSkin( json, geometry ) {\n\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\n\n\t\t\t\tif ( json.skinWeights ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar x = json.skinWeights[ i ];\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.skinIndices ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\n\n\t\t\t\t\t\tvar a = json.skinIndices[ i ];\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\n\n\t\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.bones = json.bones;\n\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\n\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseMorphing( json, geometry ) {\n\n\t\t\t\tvar scale = json.scale;\n\n\t\t\t\tif ( json.morphTargets !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\n\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\n\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\n\n\t\t\t\t\t\t\tvar vertex = new Vector3();\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\n\n\t\t\t\t\t\t\tdstVertices.push( vertex );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\n\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\n\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction parseAnimations( json, geometry ) {\n\n\t\t\t\tvar outputAnimations = [];\n\n\t\t\t\t// parse old style Bone/Hierarchy animations\n\t\t\t\tvar animations = [];\n\n\t\t\t\tif ( json.animation !== undefined ) {\n\n\t\t\t\t\tanimations.push( json.animation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.animations !== undefined ) {\n\n\t\t\t\t\tif ( json.animations.length ) {\n\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tanimations.push( json.animations );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\n\n\t\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\n\n\t\t\t\t}\n\n\t\t\t\t// parse implicit morph animations\n\t\t\t\tif ( geometry.morphTargets ) {\n\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n\t\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\n\n\t\t\t\t}\n\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\n\n\t\t\t}\n\n\t\t\treturn function parse( json, texturePath ) {\n\n\t\t\t\tif ( json.data !== undefined ) {\n\n\t\t\t\t\t// Geometry 4.0 spec\n\t\t\t\t\tjson = json.data;\n\n\t\t\t\t}\n\n\t\t\t\tif ( json.scale !== undefined ) {\n\n\t\t\t\t\tjson.scale = 1.0 / json.scale;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tjson.scale = 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tvar geometry = new Geometry();\n\n\t\t\t\tparseModel( json, geometry );\n\t\t\t\tparseSkin( json, geometry );\n\t\t\t\tparseMorphing( json, geometry );\n\t\t\t\tparseAnimations( json, geometry );\n\n\t\t\t\tgeometry.computeFaceNormals();\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\n\n\t\t\t\t\treturn { geometry: geometry };\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n\n\t\t\t\t\treturn { geometry: geometry, materials: materials };\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction ObjectLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\t\tthis.texturePath = '';\n\n\t}\n\n\tObject.assign( ObjectLoader.prototype, {\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( this.texturePath === '' ) {\n\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\n\n\t\t\t}\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url + '. Use THREE.JSONLoader instead.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tscope.parse( json, onLoad );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetTexturePath: function ( value ) {\n\n\t\t\tthis.texturePath = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( json, onLoad ) {\n\n\t\t\tvar shapes = this.parseShape( json.shapes );\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\t\tvar images = this.parseImages( json.images, function () {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t} );\n\n\t\t\tvar textures = this.parseTextures( json.textures, images );\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\n\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\n\n\t\t\tif ( json.animations ) {\n\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\n\n\t\t\t}\n\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\n\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t},\n\n\t\tparseShape: function ( json ) {\n\n\t\t\tvar shapes = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t},\n\n\t\tparseGeometries: function ( json, shapes ) {\n\n\t\t\tvar geometries = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar geometryLoader = new JSONLoader();\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar geometry;\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.width,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.depth,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.depthSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radiusTop,\n\t\t\t\t\t\t\t\tdata.radiusBottom,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.height,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.openEnded,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.widthSegments,\n\t\t\t\t\t\t\t\tdata.heightSegments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.detail\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.innerRadius,\n\t\t\t\t\t\t\t\tdata.outerRadius,\n\t\t\t\t\t\t\t\tdata.thetaSegments,\n\t\t\t\t\t\t\t\tdata.phiSegments,\n\t\t\t\t\t\t\t\tdata.thetaStart,\n\t\t\t\t\t\t\t\tdata.thetaLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.arc\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.tube,\n\t\t\t\t\t\t\t\tdata.tubularSegments,\n\t\t\t\t\t\t\t\tdata.radialSegments,\n\t\t\t\t\t\t\t\tdata.p,\n\t\t\t\t\t\t\t\tdata.q\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.points,\n\t\t\t\t\t\t\t\tdata.segments,\n\t\t\t\t\t\t\t\tdata.phiStart,\n\t\t\t\t\t\t\t\tdata.phiLength\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tdata.vertices,\n\t\t\t\t\t\t\t\tdata.indices,\n\t\t\t\t\t\t\t\tdata.radius,\n\t\t\t\t\t\t\t\tdata.details\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.curveSegments\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\n\t\t\t\t\t\t\tvar geometryShapes = [];\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\n\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\n\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\n\t\t\t\t\t\t\t\tgeometryShapes,\n\t\t\t\t\t\t\t\tdata.options\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.texturePath ).geometry;\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometries;\n\n\t\t},\n\n\t\tparseMaterials: function ( json, textures ) {\n\n\t\t\tvar materials = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures( textures );\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t\t// Deprecated\n\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\t\tarray.push( loader.parse( data.materials[ j ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t},\n\n\t\tparseAnimations: function ( json ) {\n\n\t\t\tvar animations = [];\n\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tvar data = json[ i ];\n\n\t\t\t\tvar clip = AnimationClip.parse( data );\n\n\t\t\t\tif ( data.uuid !== undefined ) clip.uuid = data.uuid;\n\n\t\t\t\tanimations.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animations;\n\n\t\t},\n\n\t\tparseImages: function ( json, onLoad ) {\n\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\n\t\t\tfunction loadImage( url ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\treturn loader.load( url, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, undefined, function () {\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\t\tvar manager = new LoadingManager( onLoad );\n\n\t\t\t\tvar loader = new ImageLoader( manager );\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar image = json[ i ];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\n\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.texturePath + currentUrl;\n\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// load single image\n\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\n\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\tparseTextures: function ( json, images ) {\n\n\t\t\tfunction parseConstant( value, type ) {\n\n\t\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\t\treturn type[ value ];\n\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif ( json !== undefined ) {\n\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar data = json[ i ];\n\n\t\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture;\n\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\n\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textures;\n\n\t\t},\n\n\t\tparseObject: function ( data, geometries, materials ) {\n\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry( name ) {\n\n\t\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn geometries[ name ];\n\n\t\t\t}\n\n\t\t\tfunction getMaterial( name ) {\n\n\t\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tvar uuid = name[ i ];\n\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\n\t\t\t\t}\n\n\t\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t\t}\n\n\t\t\t\treturn materials[ name ];\n\n\t\t\t}\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'Scene':\n\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\n\n\t\t\t\tcase 'Mesh':\n\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\n\t\t\t\t\tvar material = getMaterial( data.material );\n\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\n\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\n\t\t\t\t\tobject = new LOD();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\n\t\t\t\t\tobject = new Group();\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tobject = new Object3D();\n\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\t\tif ( data.matrix !== undefined ) {\n\n\t\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t} else {\n\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t\t}\n\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif ( data.shadow ) {\n\n\t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t\t}\n\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\t\tif ( data.children !== undefined ) {\n\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( data.type === 'LOD' ) {\n\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\t\tvar level = levels[ l ];\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t} );\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\n\t\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\n\t\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\n\t};\n\n\t/**\n\t * @author thespite / http://clicktorelease.com/\n\t */\n\n\n\tfunction ImageBitmapLoader( manager ) {\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\tthis.options = undefined;\n\n\t}\n\n\tImageBitmapLoader.prototype = {\n\n\t\tconstructor: ImageBitmapLoader,\n\n\t\tsetOptions: function setOptions( options ) {\n\n\t\t\tthis.options = options;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tif ( url === undefined ) url = '';\n\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\t\turl = this.manager.resolveURL( url );\n\n\t\t\tvar scope = this;\n\n\t\t\tvar cached = Cache.get( url );\n\n\t\t\tif ( cached !== undefined ) {\n\n\t\t\t\tscope.manager.itemStart( url );\n\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t\treturn cached;\n\n\t\t\t}\n\n\t\t\tfetch( url ).then( function ( res ) {\n\n\t\t\t\treturn res.blob();\n\n\t\t\t} ).then( function ( blob ) {\n\n\t\t\t\treturn createImageBitmap( blob, scope.options );\n\n\t\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\t\tCache.add( url, imageBitmap );\n\n\t\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} ).catch( function ( e ) {\n\n\t\t\t\tif ( onError ) onError( e );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t} );\n\n\t\t},\n\n\t\tsetCrossOrigin: function ( /* value */ ) {\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\t **/\n\n\tfunction ShapePath() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tObject.assign( ShapePath.prototype, {\n\n\t\tmoveTo: function ( x, y ) {\n\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push( this.currentPath );\n\t\t\tthis.currentPath.moveTo( x, y );\n\n\t\t},\n\n\t\tlineTo: function ( x, y ) {\n\n\t\t\tthis.currentPath.lineTo( x, y );\n\n\t\t},\n\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\n\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\t},\n\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\t},\n\n\t\tsplineThru: function ( pts ) {\n\n\t\t\tthis.currentPath.splineThru( pts );\n\n\t\t},\n\n\t\ttoShapes: function ( isCCW, noHoles ) {\n\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\n\n\t\t\t\t\tvar tmpShape = new Shape();\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\t\tvar polyLen = inPolygon.length;\n\n\t\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\t\tvar inside = false;\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\n\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn\tinside;\n\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif ( subPaths.length === 0 ) return [];\n\n\t\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\n\n\t\t\tif ( subPaths.length === 1 ) {\n\n\t\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\treturn shapes;\n\n\t\t\t}\n\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\n\t\t\tnewShapes[ mainIdx ] = undefined;\n\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\t\ttmpPath = subPaths[ i ];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\t\tif ( solid ) {\n\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t\t//console.log('cw', i);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t\t//console.log('ccw', i);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\t\tif ( newShapes.length > 1 ) {\n\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\n\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\t\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\t\tshapes.push( tmpShape );\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//console.log(\"shape\", shapes);\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\n\tfunction Font( data ) {\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tObject.assign( Font.prototype, {\n\n\t\tisFont: true,\n\n\t\tgenerateShapes: function ( text, size ) {\n\n\t\t\tif ( size === undefined ) size = 100;\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths( text, size, this.data );\n\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t} );\n\n\tfunction createPaths( text, size, data ) {\n\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\t\tvar paths = [];\n\n\t\tvar offsetX = 0, offsetY = 0;\n\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\n\n\t\t\tvar char = chars[ i ];\n\n\t\t\tif ( char === '\\n' ) {\n\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\n\t\t\t} else {\n\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push( ret.path );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn paths;\n\n\t}\n\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\t\tif ( ! glyph ) return;\n\n\t\tvar path = new ShapePath();\n\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif ( glyph.o ) {\n\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\n\n\t\t\t\tvar action = outline[ i ++ ];\n\n\t\t\t\tswitch ( action ) {\n\n\t\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn { offsetX: glyph.ha * scale, path: path };\n\n\t}\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction FontLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( FontLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\n\t\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse( json );\n\n\t\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tparse: function ( json ) {\n\n\t\t\treturn new Font( json );\n\n\t\t},\n\n\t\tsetPath: function ( value ) {\n\n\t\t\tthis.path = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tvar context;\n\n\tvar AudioContext = {\n\n\t\tgetContext: function () {\n\n\t\t\tif ( context === undefined ) {\n\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t\t}\n\n\t\t\treturn context;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction AudioLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t}\n\n\tObject.assign( AudioLoader.prototype, {\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar loader = new FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction StereoCamera() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t}\n\n\tObject.assign( StereoCamera.prototype, {\n\n\t\tupdate: ( function () {\n\n\t\t\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\n\n\t\t\tvar eyeRight = new Matrix4();\n\t\t\tvar eyeLeft = new Matrix4();\n\n\t\t\treturn function update( camera ) {\n\n\t\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\n\n\t\t\t\tif ( needsUpdate ) {\n\n\t\t\t\t\tinstance = this;\n\t\t\t\t\tfocus = camera.focus;\n\t\t\t\t\tfov = camera.fov;\n\t\t\t\t\taspect = camera.aspect * this.aspect;\n\t\t\t\t\tnear = camera.near;\n\t\t\t\t\tfar = camera.far;\n\t\t\t\t\tzoom = camera.zoom;\n\n\t\t\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\t\teyeSep = this.eyeSep / 2;\n\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\n\t\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\n\t\t\t\t\tvar xmin, xmax;\n\n\t\t\t\t\t// translate xOffset\n\n\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\n\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\n\n\t\t\t\t\t// for left eye\n\n\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t\t// for right eye\n\n\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\n\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\n\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\n\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * Camera for rendering cube maps\n\t *\t- renders scene into axis-aligned cube\n\t *\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction CubeCamera( near, far, cubeResolution ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tvar fov = 90, aspect = 1;\n\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\n\n\t\tthis.update = function ( renderer, scene ) {\n\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\t\trenderTarget.activeCubeFace = 0;\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 1;\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 2;\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 3;\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\n\n\t\t\trenderTarget.activeCubeFace = 4;\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\n\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\t\trenderTarget.activeCubeFace = 5;\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t};\n\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\n\n\t\t\tvar renderTarget = this.renderTarget;\n\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTarget.activeCubeFace = i;\n\t\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t};\n\n\t}\n\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\n\tCubeCamera.prototype.constructor = CubeCamera;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioListener() {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t}\n\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: AudioListener,\n\n\t\tgetInput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tremoveFilter: function ( ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\t\tthis.gain.connect( this.context.destination );\n\t\t\t\tthis.filter = null;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.filter;\n\n\t\t},\n\n\t\tsetFilter: function ( value ) {\n\n\t\t\tif ( this.filter !== null ) {\n\n\t\t\t\tthis.gain.disconnect( this.filter );\n\t\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t\t} else {\n\n\t\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect( this.filter );\n\t\t\tthis.filter.connect( this.context.destination );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMasterVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetMasterVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\t\t\tvar scale = new Vector3();\n\n\t\t\tvar orientation = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tvar listener = this.context.listener;\n\t\t\t\tvar up = this.up;\n\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\n\n\t\t\t\tif ( listener.positionX ) {\n\n\t\t\t\t\tlistener.positionX.setValueAtTime( position.x, this.context.currentTime );\n\t\t\t\t\tlistener.positionY.setValueAtTime( position.y, this.context.currentTime );\n\t\t\t\t\tlistener.positionZ.setValueAtTime( position.z, this.context.currentTime );\n\t\t\t\t\tlistener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );\n\t\t\t\t\tlistener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );\n\t\t\t\t\tlistener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );\n\t\t\t\t\tlistener.upX.setValueAtTime( up.x, this.context.currentTime );\n\t\t\t\t\tlistener.upY.setValueAtTime( up.y, this.context.currentTime );\n\t\t\t\t\tlistener.upZ.setValueAtTime( up.z, this.context.currentTime );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\n\t\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t} )()\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\n\t */\n\n\tfunction Audio( listener ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.loop = false;\n\t\tthis.startTime = 0;\n\t\tthis.offset = 0;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis.filters = [];\n\n\t}\n\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\t\tconstructor: Audio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.gain;\n\n\t\t},\n\n\t\tsetNodeSource: function ( audioNode ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetMediaElementSource: function ( mediaElement ) {\n\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\t\tthis.connect();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetBuffer: function ( audioBuffer ) {\n\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\n\t\t\tif ( this.autoplay ) this.play();\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tplay: function () {\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar source = this.context.createBufferSource();\n\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.onended = this.onEnded.bind( this );\n\t\t\tsource.playbackRate.setValueAtTime( this.playbackRate, this.startTime );\n\t\t\tthis.startTime = this.context.currentTime;\n\t\t\tsource.start( this.startTime, this.offset );\n\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.source = source;\n\n\t\t\treturn this.connect();\n\n\t\t},\n\n\t\tpause: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.offset = 0;\n\t\t\tthis.isPlaying = false;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tdisconnect: function () {\n\n\t\t\tif ( this.filters.length > 0 ) {\n\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t\t} else {\n\n\t\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilters: function () {\n\n\t\t\treturn this.filters;\n\n\t\t},\n\n\t\tsetFilters: function ( value ) {\n\n\t\t\tif ( ! value ) value = [];\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value;\n\t\t\t\tthis.connect();\n\n\t\t\t} else {\n\n\t\t\t\tthis.filters = value;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetFilter: function () {\n\n\t\t\treturn this.getFilters()[ 0 ];\n\n\t\t},\n\n\t\tsetFilter: function ( filter ) {\n\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t\t},\n\n\t\tsetPlaybackRate: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetPlaybackRate: function () {\n\n\t\t\treturn this.playbackRate;\n\n\t\t},\n\n\t\tonEnded: function () {\n\n\t\t\tthis.isPlaying = false;\n\n\t\t},\n\n\t\tgetLoop: function () {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\treturn this.loop;\n\n\t\t},\n\n\t\tsetLoop: function ( value ) {\n\n\t\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif ( this.isPlaying === true ) {\n\n\t\t\t\tthis.source.loop = this.loop;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetVolume: function () {\n\n\t\t\treturn this.gain.gain.value;\n\n\t\t},\n\n\t\tsetVolume: function ( value ) {\n\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PositionalAudio( listener ) {\n\n\t\tAudio.call( this, listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\n\n\t\tconstructor: PositionalAudio,\n\n\t\tgetOutput: function () {\n\n\t\t\treturn this.panner;\n\n\t\t},\n\n\t\tgetRefDistance: function () {\n\n\t\t\treturn this.panner.refDistance;\n\n\t\t},\n\n\t\tsetRefDistance: function ( value ) {\n\n\t\t\tthis.panner.refDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetRolloffFactor: function () {\n\n\t\t\treturn this.panner.rolloffFactor;\n\n\t\t},\n\n\t\tsetRolloffFactor: function ( value ) {\n\n\t\t\tthis.panner.rolloffFactor = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetDistanceModel: function () {\n\n\t\t\treturn this.panner.distanceModel;\n\n\t\t},\n\n\t\tsetDistanceModel: function ( value ) {\n\n\t\t\tthis.panner.distanceModel = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetMaxDistance: function () {\n\n\t\t\treturn this.panner.maxDistance;\n\n\t\t},\n\n\t\tsetMaxDistance: function ( value ) {\n\n\t\t\tthis.panner.maxDistance = value;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tupdateMatrixWorld: ( function () {\n\n\t\t\tvar position = new Vector3();\n\t\t\tvar quaternion = new Quaternion();\n\t\t\tvar scale = new Vector3();\n\n\t\t\tvar orientation = new Vector3();\n\n\t\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t\t\tvar panner = this.panner;\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\n\n\t\t\t\torientation.set( 0, 0, 1 ).applyQuaternion( quaternion );\n\n\t\t\t\tpanner.setPosition( position.x, position.y, position.z );\n\t\t\t\tpanner.setOrientation( orientation.x, orientation.y, orientation.z );\n\n\t\t\t};\n\n\t\t} )()\n\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AudioAnalyser( audio, fftSize ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\tObject.assign( AudioAnalyser.prototype, {\n\n\t\tgetFrequencyData: function () {\n\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\t\treturn this.data;\n\n\t\t},\n\n\t\tgetAverageFrequency: function () {\n\n\t\t\tvar value = 0, data = this.getFrequencyData();\n\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tvalue += data[ i ];\n\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Buffered scene graph property that allows weighted accumulation.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tvar bufferType = Float64Array,\n\t\t\tmixFunction;\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tbufferType = Array;\n\t\t\t\tmixFunction = this._select;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\n\t\t}\n\n\t\tthis.buffer = new bufferType( valueSize * 4 );\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\n\t\tthis._mixBufferRegion = mixFunction;\n\n\t\tthis.cumulativeWeight = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\tObject.assign( PropertyMixer.prototype, {\n\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\n\t\taccumulate: function ( accuIndex, weight ) {\n\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\n\n\t\t\tif ( currentWeight === 0 ) {\n\n\t\t\t\t// accuN := incoming * weight\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\n\t\t\t} else {\n\n\t\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\n\t\t},\n\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\n\t\tapply: function ( accuIndex ) {\n\n\t\t\tvar stride = this.valueSize,\n\t\t\t\tbuffer = this.buffer,\n\t\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\t\tweight = this.cumulativeWeight,\n\n\t\t\t\tbinding = this.binding;\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t\tif ( weight < 1 ) {\n\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\t\tvar originalValueOffset = stride * 3;\n\n\t\t\t\tthis._mixBufferRegion(\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t\t}\n\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remember the state of the bound property and copy it to both accus\n\t\tsaveOriginalState: function () {\n\n\t\t\tvar binding = this.binding;\n\n\t\t\tvar buffer = this.buffer,\n\t\t\t\tstride = this.valueSize,\n\n\t\t\t\toriginalValueOffset = stride * 3;\n\n\t\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = 0;\n\n\t\t},\n\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\n\t\trestoreOriginalState: function () {\n\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t\t},\n\n\n\t\t// mix functions\n\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tif ( t >= 0.5 ) {\n\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\n\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t\t},\n\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tvar j = dstOffset + i;\n\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * A reference to a real property in the scene graph.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\n\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tObject.assign( Composite.prototype, {\n\n\t\tgetValue: function ( array, offset ) {\n\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t\t// and only call .getValue on the first\n\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t\t},\n\n\t\tsetValue: function ( array, offset ) {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].bind();\n\n\t\t\t}\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tbindings[ i ].unbind();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t}\n\n\tObject.assign( PropertyBinding, {\n\n\t\tComposite: Composite,\n\n\t\tcreate: function ( root, path, parsedPath ) {\n\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t\t} else {\n\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t\t}\n\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param  {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: ( function () {\n\n\t\t\tvar reservedRe = new RegExp( '[' + RESERVED_CHARS_RE + ']', 'g' );\n\n\t\t\treturn function sanitizeNodeName( name ) {\n\n\t\t\t\treturn name.replace( /\\s/g, '_' ).replace( reservedRe, '' );\n\n\t\t\t};\n\n\t\t}() ),\n\n\t\tparseTrackName: function () {\n\n\t\t\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t\t\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t\t\t// instead, we exclude reserved characters and match everything else.\n\t\t\tvar wordChar = '[^' + RESERVED_CHARS_RE + ']';\n\t\t\tvar wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n\t\t\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t\t\t// be matched to parse the rest of the track name.\n\t\t\tvar directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', wordChar );\n\n\t\t\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\t\t\tvar nodeRe = /(WCOD+)?/.source.replace( 'WCOD', wordCharOrDot );\n\n\t\t\t// Object on target node, and accessor. May not contain reserved\n\t\t\t// characters. Accessor may contain any character except closing bracket.\n\t\t\tvar objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', wordChar );\n\n\t\t\t// Property and accessor. May not contain reserved characters. Accessor may\n\t\t\t// contain any non-bracket characters.\n\t\t\tvar propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', wordChar );\n\n\t\t\tvar trackRe = new RegExp( ''\n\t\t\t\t+ '^'\n\t\t\t\t+ directoryRe\n\t\t\t\t+ nodeRe\n\t\t\t\t+ objectRe\n\t\t\t\t+ propertyRe\n\t\t\t\t+ '$'\n\t\t\t);\n\n\t\t\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\n\t\t\treturn function parseTrackName( trackName ) {\n\n\t\t\t\tvar matches = trackRe.exec( trackName );\n\n\t\t\t\tif ( ! matches ) {\n\n\t\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t\t\t}\n\n\t\t\t\tvar results = {\n\t\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\t\tnodeName: matches[ 2 ],\n\t\t\t\t\tobjectName: matches[ 3 ],\n\t\t\t\t\tobjectIndex: matches[ 4 ],\n\t\t\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\t\t\tpropertyIndex: matches[ 6 ]\n\t\t\t\t};\n\n\t\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\n\t\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t\t// include '.' characters).\n\t\t\t\t\tif ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\t\t\tresults.objectName = objectName;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t\t\t}\n\n\t\t\t\treturn results;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tfindNode: function ( root, nodeName ) {\n\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\t\treturn root;\n\n\t\t\t}\n\n\t\t\t// search into skeleton bones.\n\t\t\tif ( root.skeleton ) {\n\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\treturn bone;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// search into node subtree.\n\t\t\tif ( root.children ) {\n\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\n\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\t\tvar childNode = children[ i ];\n\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\t\tif ( subTreeNode ) {\n\n\t\t\t\t\treturn subTreeNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\n\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function () {},\n\t\t_setValue_unavailable: function () {},\n\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\n\t\tGetterByBindingType: [\n\n\t\t\tfunction getValue_direct( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_array( buffer, offset ) {\n\n\t\t\t\tvar source = this.resolvedProperty;\n\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\n\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t\t\t},\n\n\t\t\tfunction getValue_toArray( buffer, offset ) {\n\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t\t\t}\n\n\t\t],\n\n\t\tSetterByBindingTypeAndVersioning: [\n\n\t\t\t[\n\t\t\t\t// Direct\n\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// EntireArray\n\n\t\t\t\tfunction setValue_array( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// ArrayElement\n\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t], [\n\n\t\t\t\t// HasToFromArray\n\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\n\n\t\t\t\t},\n\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t]\n\n\t\t],\n\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.getValue( targetArray, offset );\n\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\n\t\t},\n\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\n\n\t\t\tthis.bind();\n\t\t\tthis.setValue( sourceArray, offset );\n\n\t\t},\n\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function () {\n\n\t\t\tvar targetObject = this.node,\n\t\t\t\tparsedPath = this.parsedPath,\n\n\t\t\t\tobjectName = parsedPath.objectName,\n\t\t\t\tpropertyName = parsedPath.propertyName,\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\t\tthis.node = targetObject;\n\n\t\t\t}\n\n\t\t\t// set fail state so we can just 'return' on error\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t\t// ensure there is a value node\n\t\t\tif ( ! targetObject ) {\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( objectName ) {\n\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\n\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\t\tswitch ( objectName ) {\n\n\t\t\t\t\tcase 'materials':\n\n\t\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t\t}\n\n\n\t\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// resolve property\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\n\n\t\t\tif ( nodeProperty === undefined ) {\n\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// determine versioning scheme\n\t\t\tvar versioning = this.Versioning.None;\n\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t\tthis.targetObject = targetObject;\n\n\t\t\t}\n\n\t\t\t// determine how the property gets bound\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\n\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\n\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\n\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\n\n\t\t\t\t\t\t\t\tpropertyIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t\t} else {\n\n\t\t\t\tthis.propertyName = propertyName;\n\n\t\t\t}\n\n\t\t\t// select getter / setter\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t\t},\n\n\t\tunbind: function () {\n\n\t\t\tthis.node = null;\n\n\t\t\t// back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\n\t\t}\n\n\t} );\n\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\n\tObject.assign( PropertyBinding.prototype, {\n\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\n\n\t} );\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t * \t-\tAdd objects you would otherwise pass as 'root' to the\n\t * \t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t * \t-\tInstead pass this object as 'root'.\n\t *\n\t * \t-\tYou can also add and remove objects later when the mixer\n\t * \t\tis running.\n\t *\n\t * Note:\n\t *\n\t *  \tObjects of this class appear as one object to the mixer,\n\t *  \tso cache control of the individual objects must be done\n\t *  \ton the group.\n\t *\n\t * Limitation:\n\t *\n\t * \t- \tThe animated properties must be compatible among the\n\t * \t\tall objects in the group.\n\t *\n\t *  -\tA single property can either be controlled through a\n\t *  \ttarget group or directly, but not both.\n\t *\n\t * @author tschw\n\t */\n\n\tfunction AnimationObjectGroup() {\n\n\t\tthis.uuid = _Math.generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tvar indices = {};\n\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\n\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = [];\t\t\t\t\t// inside: string\n\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\n\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\n\n\t\tvar scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tObject.assign( AnimationObjectGroup.prototype, {\n\n\t\tisAnimationObjectGroup: true,\n\n\t\tadd: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tpaths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length,\n\t\t\t\tknownObject = undefined;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index === undefined ) {\n\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\t\tindex = nObjects ++;\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\tremove: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// remove & forget\n\t\tuncache: function () {\n\n\t\t\tvar objects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = bindings.length;\n\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = arguments[ i ],\n\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\t\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t\t},\n\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\t\tsubscribe_: function ( path, parsedPath ) {\n\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ],\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\t\tvar paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tobjects = this._objects,\n\t\t\t\tnObjects = objects.length,\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\t\tindex = bindings.length;\n\n\t\t\tindicesByPath[ path ] = index;\n\n\t\t\tpaths.push( path );\n\t\t\tparsedPaths.push( parsedPath );\n\t\t\tbindings.push( bindingsForPath );\n\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\t\tvar object = objects[ i ];\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\n\t\t},\n\n\t\tunsubscribe_: function ( path ) {\n\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\tindex = indicesByPath[ path ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\t\tbindings[ index ] = lastBindings;\n\t\t\t\tbindings.pop();\n\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\t\tparsedPaths.pop();\n\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\t\tpaths.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\n\t * objects.\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t *\n\t */\n\n\tfunction AnimationAction( mixer, clip, localRoot ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot || null;\n\n\t\tvar tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tvar interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants;\t// bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\n\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\n\n\t\tthis.paused = false;\t\t\t\t// true -> zero effective time scale\n\t\tthis.enabled = true;\t\t\t\t// false -> zero effective weight\n\n\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\n\n\t}\n\n\tObject.assign( AnimationAction.prototype, {\n\n\t\t// State & Scheduling\n\n\t\tplay: function () {\n\n\t\t\tthis._mixer._activateAction( this );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis._mixer._deactivateAction( this );\n\n\t\t\treturn this.reset();\n\n\t\t},\n\n\t\treset: function () {\n\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\n\t\t\tthis.time = 0;\t\t\t// restart clip\n\t\t\tthis._loopCount = - 1;\t// forget previous loops\n\t\t\tthis._startTime = null;\t// forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\n\t\t},\n\n\t\tisRunning: function () {\n\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\t// return true when play has been called\n\t\tisScheduled: function () {\n\n\t\t\treturn this._mixer._isActiveAction( this );\n\n\t\t},\n\n\t\tstartAt: function ( time ) {\n\n\t\t\tthis._startTime = time;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetLoop: function ( mode, repetitions ) {\n\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Weight\n\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\tsetEffectiveWeight: function ( weight ) {\n\n\t\t\tthis.weight = weight;\n\n\t\t\t// note: same logic as when updated at runtime\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\t\treturn this.stopFading();\n\n\t\t},\n\n\t\t// return the weight considering fading and .enabled\n\t\tgetEffectiveWeight: function () {\n\n\t\t\treturn this._effectiveWeight;\n\n\t\t},\n\n\t\tfadeIn: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t\t},\n\n\t\tfadeOut: function ( duration ) {\n\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t\t},\n\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\n\n\t\t\tfadeOutAction.fadeOut( duration );\n\t\t\tthis.fadeIn( duration );\n\n\t\t\tif ( warp ) {\n\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\n\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t\t},\n\n\t\tstopFading: function () {\n\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif ( weightInterpolant !== null ) {\n\n\t\t\t\tthis._weightInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Time Scale Control\n\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\n\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\t// return the time scale considering warping and .paused\n\t\tgetEffectiveTimeScale: function () {\n\n\t\t\treturn this._effectiveTimeScale;\n\n\t\t},\n\n\t\tsetDuration: function ( duration ) {\n\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\tsyncWith: function ( action ) {\n\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\n\t\t\treturn this.stopWarping();\n\n\t\t},\n\n\t\thalt: function ( duration ) {\n\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t\t},\n\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now;\n\t\t\ttimes[ 1 ] = now + duration;\n\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tstopWarping: function () {\n\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\t\tthis._timeScaleInterpolant = null;\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// Object Accessors\n\n\t\tgetMixer: function () {\n\n\t\t\treturn this._mixer;\n\n\t\t},\n\n\t\tgetClip: function () {\n\n\t\t\treturn this._clip;\n\n\t\t},\n\n\t\tgetRoot: function () {\n\n\t\t\treturn this._localRoot || this._mixer._root;\n\n\t\t},\n\n\t\t// Interna\n\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t\t// called by the mixer\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\t\tthis._updateWeight( time );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif ( startTime !== null ) {\n\n\t\t\t\t// check for scheduled start of action\n\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t\t}\n\n\t\t\t\t// start\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t\t// apply time scale and advance time\n\n\t\t\tdeltaTime *= this._updateTimeScale( time );\n\t\t\tvar clipTime = this._updateTime( deltaTime );\n\n\t\t\t// note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\t\t\tvar weight = this._updateWeight( time );\n\n\t\t\tif ( weight > 0 ) {\n\n\t\t\t\tvar interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_updateWeight: function ( time ) {\n\n\t\t\tvar weight = 0;\n\n\t\t\tif ( this.enabled ) {\n\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\n\t\t},\n\n\t\t_updateTimeScale: function ( time ) {\n\n\t\t\tvar timeScale = 0;\n\n\t\t\tif ( ! this.paused ) {\n\n\t\t\t\ttimeScale = this.timeScale;\n\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\n\t\t},\n\n\t\t_updateTime: function ( deltaTime ) {\n\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar loopCount = this._loopCount;\n\n\t\t\tvar pingPong = ( loop === LoopPingPong );\n\n\t\t\tif ( deltaTime === 0 ) {\n\n\t\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t\t}\n\n\t\t\tif ( loop === LoopOnce ) {\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tthis._loopCount = 0;\n\t\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\n\t\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\t\ttime = duration;\n\n\t\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\t\ttime = 0;\n\n\t\t\t\t\t} else break handle_stop;\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t\t// just started\n\n\t\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t\t// wrap around\n\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// keep running\n\n\t\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\t\tthis.time = time;\n\t\t\t\t\treturn duration - time;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.time = time;\n\t\t\treturn time;\n\n\t\t},\n\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\n\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif ( pingPong ) {\n\n\t\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\n\n\t\t\t} else {\n\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\t\tif ( atStart ) {\n\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t\tif ( atEnd ) {\n\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\n\n\t\t\tvar mixer = this._mixer, now = mixer.time,\n\t\t\t\tinterpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant === null ) {\n\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\tvalues = interpolant.sampleValues;\n\n\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\n\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t *\n\t * Player for AnimationClips.\n\t *\n\t *\n\t * @author Ben Houston / http://clara.io/\n\t * @author David Sarno / http://lighthaus.us/\n\t * @author tschw\n\t */\n\n\tfunction AnimationMixer( root ) {\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\n\n\t\tconstructor: AnimationMixer,\n\n\t\t_bindAction: function ( action, prototypeAction ) {\n\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\tnTracks = tracks.length,\n\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\trootUuid = root.uuid,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingsByName === undefined ) {\n\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ],\n\t\t\t\t\ttrackName = track.name,\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t\t}\n\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t\t}\n\n\t\t},\n\n\t\t_activateAction: function ( action ) {\n\n\t\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\t\tthis._bindAction( action,\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// increment reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t_deactivateAction: function ( action ) {\n\n\t\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\t\t// decrement reference counts / sort out state\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction( action );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Memory manager\n\n\t\t_initMemoryManager: function () {\n\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\t\tthis._nActiveActions = 0;\n\n\t\t\tthis._actionsByClip = {};\n\t\t\t// inside:\n\t\t\t// {\n\t\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n\t\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\n\t\t\t// }\n\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\t\t\tthis._nActiveControlInterpolants = 0;\n\n\t\t\tvar scope = this;\n\n\t\t\tthis.stats = {\n\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t\t},\n\t\t\t\t\tget inUse() {\n\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Memory management for AnimationAction objects\n\n\t\t_isActiveAction: function ( action ) {\n\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\n\t\t},\n\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip === undefined ) {\n\n\t\t\t\tactionsForClip = {\n\n\t\t\t\t\tknownActions: [ action ],\n\t\t\t\t\tactionByRoot: {}\n\n\t\t\t\t};\n\n\t\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t\t} else {\n\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push( action );\n\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push( action );\n\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t\t},\n\n\t\t_removeInactiveAction: function ( action ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\t\tcacheIndex = action._cacheIndex;\n\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\tactions.pop();\n\n\t\t\taction._cacheIndex = null;\n\n\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\t\tlastKnownAction =\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\n\t\t\taction._byClipCacheIndex = null;\n\n\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\t\tdelete actionByRoot[ rootUuid ];\n\n\t\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t},\n\n\t\t_removeInactiveBindingsForAction: function ( action ) {\n\n\t\t\tvar bindings = action._propertyBindings;\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tvar binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendAction: function ( action ) {\n\n\t\t\t// [ active actions |  inactive actions  ]\n\t\t\t// [  active actions >| inactive actions ]\n\t\t\t//                 s        a\n\t\t\t//                  <-swap->\n\t\t\t//                 a        s\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[ lastActiveIndex ] = action;\n\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t\t},\n\n\t\t_takeBackAction: function ( action ) {\n\n\t\t\t// [  active actions  | inactive actions ]\n\t\t\t// [ active actions |< inactive actions  ]\n\t\t\t//        a        s\n\t\t\t//         <-swap->\n\t\t\t//        s        a\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[ firstInactiveIndex ] = action;\n\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t\t},\n\n\t\t// Memory management for PropertyMixer objects\n\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tbindings = this._bindings;\n\n\t\t\tif ( bindingByName === undefined ) {\n\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t\t}\n\n\t\t\tbindingByName[ trackName ] = binding;\n\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push( binding );\n\n\t\t},\n\n\t\t_removeInactiveBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tpropBinding = binding.binding,\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\ttrackName = propBinding.path,\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\n\t\t\tdelete bindingByName[ trackName ];\n\n\t\t\tremove_empty_map: {\n\n\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars\n\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t_lendBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t\t},\n\n\t\t_takeBackBinding: function ( binding ) {\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t\t},\n\n\n\t\t// Memory management of Interpolants for weight and time scale\n\n\t\t_lendControlInterpolant: function () {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\n\n\t\t\tif ( interpolant === undefined ) {\n\n\t\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t\t}\n\n\t\t\treturn interpolant;\n\n\t\t},\n\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\n\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t\t},\n\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\n\n\t\t// return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\tclipAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\n\t\t\t\tprototypeAction = null;\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\tvar existingAction =\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( existingAction !== undefined ) {\n\n\t\t\t\t\treturn existingAction;\n\n\t\t\t\t}\n\n\t\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t\t// also, take the clip from the prototype action\n\t\t\t\tif ( clipObject === null )\n\t\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t\t}\n\n\t\t\t// clip must be known when specified via string\n\t\t\tif ( clipObject === null ) return null;\n\n\t\t\t// allocate all resources required to run it\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\n\n\t\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t\t// and make the action known to the memory manager\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\t\treturn newAction;\n\n\t\t},\n\n\t\t// get an existing action\n\t\texistingAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\trootUuid = root.uuid,\n\n\t\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t},\n\n\t\t// deactivates all previously scheduled actions\n\t\tstopAllAction: function () {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._nActiveBindings = 0;\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tactions[ i ].reset();\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].useCount = 0;\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// advance the time and update apply the animation\n\t\tupdate: function ( deltaTime ) {\n\n\t\t\tdeltaTime *= this.timeScale;\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tnActions = this._nActiveActions,\n\n\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t\t// run active actions\n\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\n\n\t\t\t\tvar action = actions[ i ];\n\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t\t}\n\n\t\t\t// update scene graph\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\n\n\t\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// return this mixer's root target object\n\t\tgetRoot: function () {\n\n\t\t\treturn this._root;\n\n\t\t},\n\n\t\t// free all resources specific to a particular clip\n\t\tuncacheClip: function ( clip ) {\n\n\t\t\tvar actions = this._actions,\n\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\t\tvar action = actionsToRemove[ i ];\n\n\t\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t\t}\n\n\t\t},\n\n\t\t// free all resources specific to a particular root target object\n\t\tuncacheRoot: function ( root ) {\n\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor ( var clipUuid in actionsByClip ) {\n\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\t\tif ( action !== undefined ) {\n\n\t\t\t\t\tthis._deactivateAction( action );\n\t\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\t\tif ( bindingByName !== undefined ) {\n\n\t\t\t\tfor ( var trackName in bindingByName ) {\n\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// remove a targeted clip from the cache\n\t\tuncacheAction: function ( clip, optionalRoot ) {\n\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\n\n\t\t\tif ( action !== null ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Uniform( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tUniform.prototype.clone = function () {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t};\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferGeometry() {\n\n\t\tBufferGeometry.call( this );\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.maxInstancedCount = undefined;\n\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\n\n\t\tconstructor: InstancedBufferGeometry,\n\n\t\tisInstancedBufferGeometry: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\n\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\n\n\t\tInterleavedBuffer.call( this, array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\n\n\t\tconstructor: InstancedInterleavedBuffer,\n\n\t\tisInstancedInterleavedBuffer: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author benaadams / https://twitter.com/ben_a_adams\n\t */\n\n\tfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\n\n\t\tBufferAttribute.call( this, array, itemSize );\n\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\n\n\t\tconstructor: InstancedBufferAttribute,\n\n\t\tisInstancedBufferAttribute: true,\n\n\t\tcopy: function ( source ) {\n\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\n\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author bhouston / http://clara.io/\n\t * @author stephomi / http://stephaneginier.com/\n\t */\n\n\tfunction Raycaster( origin, direction, near, far ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near || 0;\n\t\tthis.far = far || Infinity;\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {},\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t\tObject.defineProperties( this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function () {\n\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\n\t\t\t\t\treturn this.Points;\n\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t}\n\n\tfunction ascSort( a, b ) {\n\n\t\treturn a.distance - b.distance;\n\n\t}\n\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tObject.assign( Raycaster.prototype, {\n\n\t\tlinePrecision: 1,\n\n\t\tset: function ( origin, direction ) {\n\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\t\tthis.ray.set( origin, direction );\n\n\t\t},\n\n\t\tsetFromCamera: function ( coords, camera ) {\n\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\n\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\n\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\n\n\t\t\t}\n\n\t\t},\n\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tintersectObject( object, this, intersects, recursive );\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t},\n\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\n\n\t\t\tvar intersects = optionalTarget || [];\n\n\t\t\tif ( Array.isArray( objects ) === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\n\t\t\t\treturn intersects;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t\t}\n\n\t\t\tintersects.sort( ascSort );\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction Clock( autoStart ) {\n\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tObject.assign( Clock.prototype, {\n\n\t\tstart: function () {\n\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\n\t\t},\n\n\t\tgetElapsedTime: function () {\n\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\n\t\t},\n\n\t\tgetDelta: function () {\n\n\t\t\tvar diff = 0;\n\n\t\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tif ( this.running ) {\n\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\n\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\n\t\t\t\tthis.elapsedTime += diff;\n\n\t\t\t}\n\n\t\t\treturn diff;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t * @author WestLangley / http://github.com/WestLangley\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axiz.\n\t */\n\n\tfunction Spherical( radius, phi, theta ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Spherical.prototype, {\n\n\t\tset: function ( radius, phi, theta ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\tmakeSafe: function () {\n\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\t\tif ( this.radius === 0 ) {\n\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\n\t\t\t} else {\n\n\t\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t *\n\t */\n\n\tfunction Cylindrical( radius, theta, y ) {\n\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tObject.assign( Cylindrical.prototype, {\n\n\t\tset: function ( radius, theta, y ) {\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( other ) {\n\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromVector3: function ( v ) {\n\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t\t},\n\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.y = y;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Box2( min, max ) {\n\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\n\n\t}\n\n\tObject.assign( Box2.prototype, {\n\n\t\tset: function ( min, max ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromPoints: function ( points ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetFromCenterAndSize: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function setFromCenterAndSize( center, size ) {\n\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\n\t\t\t\tthis.max.copy( center ).add( halfSize );\n\n\t\t\t\treturn this;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( box ) {\n\n\t\t\tthis.min.copy( box.min );\n\t\t\tthis.max.copy( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tmakeEmpty: function () {\n\n\t\t\tthis.min.x = this.min.y = + Infinity;\n\t\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tisEmpty: function () {\n\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tgetSize: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t\t},\n\n\t\texpandByPoint: function ( point ) {\n\n\t\t\tthis.min.min( point );\n\t\t\tthis.max.max( point );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByVector: function ( vector ) {\n\n\t\t\tthis.min.sub( vector );\n\t\t\tthis.max.add( vector );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\texpandByScalar: function ( scalar ) {\n\n\t\t\tthis.min.addScalar( - scalar );\n\t\t\tthis.max.addScalar( scalar );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tcontainsPoint: function ( point ) {\n\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tcontainsBox: function ( box ) {\n\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t\t},\n\n\t\tgetParameter: function ( point, target ) {\n\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.set(\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t\t);\n\n\t\t},\n\n\t\tintersectsBox: function ( box ) {\n\n\t\t\t// using 4 splitting planes to rule out intersections\n\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t\t},\n\n\t\tclampPoint: function ( point, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\n\t\t\t\ttarget = new Vector2();\n\n\t\t\t}\n\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t\t},\n\n\t\tdistanceToPoint: function () {\n\n\t\t\tvar v1 = new Vector2();\n\n\t\t\treturn function distanceToPoint( point ) {\n\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\n\t\t\t\treturn clampedPoint.sub( point ).length();\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tintersect: function ( box ) {\n\n\t\t\tthis.min.max( box.min );\n\t\t\tthis.max.min( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tunion: function ( box ) {\n\n\t\t\tthis.min.min( box.min );\n\t\t\tthis.max.max( box.max );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\ttranslate: function ( offset ) {\n\n\t\t\tthis.min.add( offset );\n\t\t\tthis.max.add( offset );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( box ) {\n\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author bhouston / http://clara.io\n\t */\n\n\tfunction Line3( start, end ) {\n\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\n\n\t}\n\n\tObject.assign( Line3.prototype, {\n\n\t\tset: function ( start, end ) {\n\n\t\t\tthis.start.copy( start );\n\t\t\tthis.end.copy( end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tclone: function () {\n\n\t\t\treturn new this.constructor().copy( this );\n\n\t\t},\n\n\t\tcopy: function ( line ) {\n\n\t\t\tthis.start.copy( line.start );\n\t\t\tthis.end.copy( line.end );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tgetCenter: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t\t},\n\n\t\tdelta: function ( target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn target.subVectors( this.end, this.start );\n\n\t\t},\n\n\t\tdistanceSq: function () {\n\n\t\t\treturn this.start.distanceToSquared( this.end );\n\n\t\t},\n\n\t\tdistance: function () {\n\n\t\t\treturn this.start.distanceTo( this.end );\n\n\t\t},\n\n\t\tat: function ( t, target ) {\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tclosestPointToPointParameter: function () {\n\n\t\t\tvar startP = new Vector3();\n\t\t\tvar startEnd = new Vector3();\n\n\t\t\treturn function closestPointToPointParameter( point, clampToLine ) {\n\n\t\t\t\tstartP.subVectors( point, this.start );\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\n\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\n\n\t\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\t\tif ( clampToLine ) {\n\n\t\t\t\t\tt = _Math.clamp( t, 0, 1 );\n\n\t\t\t\t}\n\n\t\t\t\treturn t;\n\n\t\t\t};\n\n\t\t}(),\n\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\n\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\t\tif ( target === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\n\t\t\t\ttarget = new Vector3();\n\n\t\t\t}\n\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t\t},\n\n\t\tapplyMatrix4: function ( matrix ) {\n\n\t\t\tthis.start.applyMatrix4( matrix );\n\t\t\tthis.end.applyMatrix4( matrix );\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tequals: function ( line ) {\n\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t\t}\n\n\t} );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t */\n\n\tfunction ImmediateRenderObject( material ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.material = material;\n\t\tthis.render = function ( /* renderCallback */ ) {};\n\n\t}\n\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length * 3;\n\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\tnNormals = objGeometry.attributes.normal.count;\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n\tVertexNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\t\tvar faces = objGeometry.faces;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\n\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\n\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\n\n\t\t\t\tvar objPos = objGeometry.attributes.position;\n\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\n\n\t\t\t\tvar idx = 0;\n\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\n\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\n\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\n\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\n\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\t\tidx = idx + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction SpotLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\n\n\tSpotLightHelper.prototype.dispose = function () {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t};\n\n\tSpotLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\t\tvar vector2 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tthis.light.updateMatrixWorld();\n\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author Sean Griffin / http://twitter.com/sgrif\n\t * @author Michael Guerrero / http://realitymeltdown.com\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author ikerr / http://verold.com\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction getBoneList( object ) {\n\n\t\tvar boneList = [];\n\n\t\tif ( object && object.isBone ) {\n\n\t\t\tboneList.push( object );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\n\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t\t}\n\n\t\treturn boneList;\n\n\t}\n\n\tfunction SkeletonHelper( object ) {\n\n\t\tvar bones = getBoneList( object );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar color1 = new Color( 0, 0, 1 );\n\t\tvar color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\n\n\t\t\tvar bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\n\n\tSkeletonHelper.prototype.updateMatrixWorld = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\tvar boneMatrix = new Matrix4();\n\t\tvar matrixWorldInv = new Matrix4();\n\n\t\treturn function updateMatrixWorld( force ) {\n\n\t\t\tvar bones = this.bones;\n\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\tmatrixWorldInv.getInverse( this.root.matrixWorld );\n\n\t\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\t\tvar bone = bones[ i ];\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\t\tposition.setXYZ( j, vector.x, vector.y, vector.z );\n\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\n\t\t\t\t\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\n\n\t\t\t\t\tj += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction PointLightHelper( light, sphereSize, color ) {\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\n\t\tMesh.call( this, geometry, material );\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n\n\t}\n\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\n\tPointLightHelper.prototype.constructor = PointLightHelper;\n\n\tPointLightHelper.prototype.dispose = function () {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t};\n\n\tPointLightHelper.prototype.update = function () {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t};\n\n\t/**\n\t * @author abelnation / http://github.com/abelnation\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction RectAreaLightHelper( light, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );\n\n\t\tthis.line = new Line( geometry, material );\n\t\tthis.add( this.line );\n\n\n\t\tthis.update();\n\n\t}\n\n\tRectAreaLightHelper.prototype = Object.create( Object3D.prototype );\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\n\tRectAreaLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tRectAreaLightHelper.prototype.update = function () {\n\n\t\t// calculate new dimensions of the helper\n\n\t\tvar hx = this.light.width * 0.5;\n\t\tvar hy = this.light.height * 0.5;\n\n\t\tvar position = this.line.geometry.attributes.position;\n\t\tvar array = position.array;\n\n\t\t// update vertices\n\n\t\tarray[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;\n\t\tarray[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;\n\t\tarray[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;\n\t\tarray[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;\n\t\tarray[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;\n\n\t\tposition.needsUpdate = true;\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.line.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.line.material.color.copy( this.light.color );\n\n\t\t}\n\n\t};\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t */\n\n\tfunction HemisphereLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tvar geometry = new OctahedronBufferGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = VertexColors;\n\n\t\tvar position = geometry.getAttribute( 'position' );\n\t\tvar colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n\tHemisphereLightHelper.prototype.dispose = function () {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t};\n\n\tHemisphereLightHelper.prototype.update = function () {\n\n\t\tvar vector = new Vector3();\n\n\t\tvar color1 = new Color();\n\t\tvar color2 = new Color();\n\n\t\treturn function update() {\n\n\t\t\tvar mesh = this.children[ 0 ];\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t\tcolor1.copy( this.light.color );\n\t\t\t\tcolor2.copy( this.light.groundColor );\n\n\t\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\t\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\n\n\t\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\n\t\t\t}\n\n\t\t\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction GridHelper( size, divisions, color1, color2 ) {\n\n\t\tsize = size || 10;\n\t\tdivisions = divisions || 10;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar center = divisions / 2;\n\t\tvar step = size / divisions;\n\t\tvar halfSize = size / 2;\n\n\t\tvar vertices = [], colors = [];\n\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tvar color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tGridHelper.prototype = Object.create( LineSegments.prototype );\n\tGridHelper.prototype.constructor = GridHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t * @author Hectate / http://www.github.com/Hectate\n\t */\n\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\n\n\t\tradius = radius || 10;\n\t\tradials = radials || 16;\n\t\tcircles = circles || 8;\n\t\tdivisions = divisions || 64;\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar x, z;\n\t\tvar v, i, j, r, color;\n\n\t\t// create the radials\n\n\t\tfor ( i = 0; i <= radials; i ++ ) {\n\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tx = Math.sin( v ) * radius;\n\t\t\tz = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( i = 0; i <= circles; i ++ ) {\n\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\n\n\t\t\tr = radius - ( radius / circles * i );\n\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\n\n\t\t// FaceNormalsHelper only supports THREE.Geometry\n\n\t\tthis.object = object;\n\n\t\tthis.size = ( size !== undefined ) ? size : 1;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\n\n\t\t//\n\n\t\tvar nNormals = 0;\n\n\t\tvar objGeometry = this.object.geometry;\n\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\n\n\t\t\tnNormals = objGeometry.faces.length;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\n\n\t\t}\n\n\t\t//\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\n\n\t\tgeometry.addAttribute( 'position', positions );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\n\n\t\t//\n\n\t\tthis.matrixAutoUpdate = false;\n\t\tthis.update();\n\n\t}\n\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n\tFaceNormalsHelper.prototype.update = ( function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar normalMatrix = new Matrix3();\n\n\t\treturn function update() {\n\n\t\t\tthis.object.updateMatrixWorld( true );\n\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\n\n\t\t\tvar matrixWorld = this.object.matrixWorld;\n\n\t\t\tvar position = this.geometry.attributes.position;\n\n\t\t\t//\n\n\t\t\tvar objGeometry = this.object.geometry;\n\n\t\t\tvar vertices = objGeometry.vertices;\n\n\t\t\tvar faces = objGeometry.faces;\n\n\t\t\tvar idx = 0;\n\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tvar face = faces[ i ];\n\n\t\t\t\tvar normal = face.normal;\n\n\t\t\t\tv1.copy( vertices[ face.a ] )\n\t\t\t\t\t.add( vertices[ face.b ] )\n\t\t\t\t\t.add( vertices[ face.c ] )\n\t\t\t\t\t.divideScalar( 3 )\n\t\t\t\t\t.applyMatrix4( matrixWorld );\n\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\n\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\n\n\t\t\t\tidx = idx + 1;\n\n\t\t\t}\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t};\n\n\t}() );\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction DirectionalLightHelper( light, size, color ) {\n\n\t\tObject3D.call( this );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { fog: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n\tDirectionalLightHelper.prototype.dispose = function () {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t};\n\n\tDirectionalLightHelper.prototype.update = function () {\n\n\t\tvar v1 = new Vector3();\n\t\tvar v2 = new Vector3();\n\t\tvar v3 = new Vector3();\n\n\t\treturn function update() {\n\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t\tv3.subVectors( v2, v1 );\n\n\t\t\tthis.lightPlane.lookAt( v3 );\n\n\t\t\tif ( this.color !== undefined ) {\n\n\t\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t\t} else {\n\n\t\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt( v3 );\n\t\t\tthis.targetLine.scale.z = v3.length();\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author Mugen87 / https://github.com/Mugen87\n\t *\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\tfunction CameraHelper( camera ) {\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\n\n\t\tvar vertices = [];\n\t\tvar colors = [];\n\n\t\tvar pointMap = {};\n\n\t\t// colors\n\n\t\tvar colorFrustum = new Color( 0xffaa00 );\n\t\tvar colorCone = new Color( 0xff0000 );\n\t\tvar colorUp = new Color( 0x00aaff );\n\t\tvar colorTarget = new Color( 0xffffff );\n\t\tvar colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\n\tCameraHelper.prototype.constructor = CameraHelper;\n\n\tCameraHelper.prototype.update = function () {\n\n\t\tvar geometry, pointMap;\n\n\t\tvar vector = new Vector3();\n\t\tvar camera = new Camera();\n\n\t\tfunction setPoint( point, x, y, z ) {\n\n\t\t\tvector.set( x, y, z ).unproject( camera );\n\n\t\t\tvar points = pointMap[ point ];\n\n\t\t\tif ( points !== undefined ) {\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\t\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn function update() {\n\n\t\t\tgeometry = this.geometry;\n\t\t\tpointMap = this.pointMap;\n\n\t\t\tvar w = 1, h = 1;\n\n\t\t\t// we need just camera projection matrix\n\t\t\t// world matrix must be identity\n\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\n\n\t\t\t// center / target\n\n\t\t\tsetPoint( 'c', 0, 0, - 1 );\n\t\t\tsetPoint( 't', 0, 0, 1 );\n\n\t\t\t// near\n\n\t\t\tsetPoint( 'n1', - w, - h, - 1 );\n\t\t\tsetPoint( 'n2', w, - h, - 1 );\n\t\t\tsetPoint( 'n3', - w, h, - 1 );\n\t\t\tsetPoint( 'n4', w, h, - 1 );\n\n\t\t\t// far\n\n\t\t\tsetPoint( 'f1', - w, - h, 1 );\n\t\t\tsetPoint( 'f2', w, - h, 1 );\n\t\t\tsetPoint( 'f3', - w, h, 1 );\n\t\t\tsetPoint( 'f4', w, h, 1 );\n\n\t\t\t// up\n\n\t\t\tsetPoint( 'u1', w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( 'u2', - w * 0.7, h * 1.1, - 1 );\n\t\t\tsetPoint( 'u3', 0, h * 2, - 1 );\n\n\t\t\t// cross\n\n\t\t\tsetPoint( 'cf1', - w, 0, 1 );\n\t\t\tsetPoint( 'cf2', w, 0, 1 );\n\t\t\tsetPoint( 'cf3', 0, - h, 1 );\n\t\t\tsetPoint( 'cf4', 0, h, 1 );\n\n\t\t\tsetPoint( 'cn1', - w, 0, - 1 );\n\t\t\tsetPoint( 'cn2', w, 0, - 1 );\n\t\t\tsetPoint( 'cn3', 0, - h, - 1 );\n\t\t\tsetPoint( 'cn4', 0, h, - 1 );\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\t};\n\n\t}();\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t * @author Mugen87 / http://github.com/Mugen87\n\t */\n\n\tfunction BoxHelper( object, color ) {\n\n\t\tthis.object = object;\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tvar positions = new Float32Array( 8 * 3 );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\n\tBoxHelper.prototype.constructor = BoxHelper;\n\n\tBoxHelper.prototype.update = ( function () {\n\n\t\tvar box = new Box3();\n\n\t\treturn function update( object ) {\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t\t}\n\n\t\t\tif ( this.object !== undefined ) {\n\n\t\t\t\tbox.setFromObject( this.object );\n\n\t\t\t}\n\n\t\t\tif ( box.isEmpty() ) return;\n\n\t\t\tvar min = box.min;\n\t\t\tvar max = box.max;\n\n\t\t\t/*\n\t\t\t  5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\n\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\n\t\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t\tthis.geometry.computeBoundingSphere();\n\n\t\t};\n\n\t} )();\n\n\tBoxHelper.prototype.setFromObject = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction Box3Helper( box, hex ) {\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.box = box;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\n\tBox3Helper.prototype.constructor = Box3Helper;\n\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t */\n\n\tfunction PlaneHelper( plane, size, hex ) {\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = ( size === undefined ) ? 1 : size;\n\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\n\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\n\n\t\t//\n\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tvar geometry2 = new BufferGeometry();\n\t\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\n\n\t}\n\n\tPlaneHelper.prototype = Object.create( Line.prototype );\n\tPlaneHelper.prototype.constructor = PlaneHelper;\n\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\n\n\t\tvar scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t};\n\n\t/**\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author zz85 / http://github.com/zz85\n\t * @author bhouston / http://clara.io\n\t *\n\t * Creates an arrow for visualizing directions\n\t *\n\t * Parameters:\n\t *  dir - Vector3\n\t *  origin - Vector3\n\t *  length - Number\n\t *  color - color in hex value\n\t *  headLength - Number\n\t *  headWidth - Number\n\t */\n\n\tvar lineGeometry, coneGeometry;\n\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tObject3D.call( this );\n\n\t\tif ( color === undefined ) color = 0xffff00;\n\t\tif ( length === undefined ) length = 1;\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tif ( lineGeometry === undefined ) {\n\n\t\t\tlineGeometry = new BufferGeometry();\n\t\t\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\tconeGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\n\tArrowHelper.prototype.constructor = ArrowHelper;\n\n\tArrowHelper.prototype.setDirection = ( function () {\n\n\t\tvar axis = new Vector3();\n\t\tvar radians;\n\n\t\treturn function setDirection( dir ) {\n\n\t\t\t// dir is assumed to be normalized\n\n\t\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\t\tradians = Math.acos( dir.y );\n\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\n\n\t\t\t}\n\n\t\t};\n\n\t}() );\n\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\n\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\n\n\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t};\n\n\tArrowHelper.prototype.setColor = function ( color ) {\n\n\t\tthis.line.material.color.copy( color );\n\t\tthis.cone.material.color.copy( color );\n\n\t};\n\n\t/**\n\t * @author sroucheray / http://sroucheray.org/\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction AxesHelper( size ) {\n\n\t\tsize = size || 1;\n\n\t\tvar vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tvar colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tvar geometry = new BufferGeometry();\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\n\n\t\tLineSegments.call( this, geometry, material );\n\n\t}\n\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\n\tAxesHelper.prototype.constructor = AxesHelper;\n\n\t/**\n\t * @author mrdoob / http://mrdoob.com/\n\t */\n\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\n\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\n\n\t}\n\n\tvar LineStrip = 0;\n\n\tvar LinePieces = 1;\n\n\tfunction MeshFaceMaterial( materials ) {\n\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\t\treturn materials;\n\n\t}\n\n\tfunction MultiMaterial( materials ) {\n\n\t\tif ( materials === undefined ) materials = [];\n\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\t\tmaterials.clone = function () {\n\n\t\t\treturn materials.slice();\n\n\t\t};\n\t\treturn materials;\n\n\t}\n\n\tfunction PointCloud( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction Particle( material ) {\n\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\t\treturn new Sprite( material );\n\n\t}\n\n\tfunction ParticleSystem( geometry, material ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\t\treturn new Points( geometry, material );\n\n\t}\n\n\tfunction PointCloudMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleBasicMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction ParticleSystemMaterial( parameters ) {\n\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\t\treturn new PointsMaterial( parameters );\n\n\t}\n\n\tfunction Vertex( x, y, z ) {\n\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\t\treturn new Vector3( x, y, z );\n\n\t}\n\n\t//\n\n\tfunction DynamicBufferAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\n\n\t}\n\n\tfunction Int8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\t\treturn new Int8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\t\treturn new Uint8BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\t\treturn new Int16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint16Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\t\treturn new Uint16BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Int32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\t\treturn new Int32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Uint32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\t\treturn new Uint32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float32Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t}\n\n\tfunction Float64Attribute( array, itemSize ) {\n\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\t\treturn new Float64BufferAttribute( array, itemSize );\n\n\t}\n\n\t//\n\n\tCurve.create = function ( construct, getPoint ) {\n\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\t\tconstruct.prototype = Object.create( Curve.prototype );\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\n\t\treturn construct;\n\n\t};\n\n\t//\n\n\tObject.assign( CurvePath.prototype, {\n\n\t\tcreatePointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from path points (for Line or Points objects)\n\n\t\t\tvar pts = this.getPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\t// generate geometry from equidistant sampling along the path\n\n\t\t\tvar pts = this.getSpacedPoints( divisions );\n\t\t\treturn this.createGeometry( pts );\n\n\t\t},\n\n\t\tcreateGeometry: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\n\n\t\t\tvar geometry = new Geometry();\n\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tvar point = points[ i ];\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t\t}\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Path.prototype, {\n\n\t\tfromPoints: function ( points ) {\n\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction ClosedSplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\t\tthis.closed = true;\n\n\t}\n\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction SplineCurve3( points ) {\n\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\t//\n\n\tfunction Spline( points ) {\n\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\n\n\t\tCatmullRomCurve3.call( this, points );\n\t\tthis.type = 'catmullrom';\n\n\t}\n\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\n\n\tObject.assign( Spline.prototype, {\n\n\t\tinitFromArray: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\n\n\t\t},\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\n\n\t\t},\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\n\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tfunction AxisHelper( size ) {\n\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\t\treturn new AxesHelper( size );\n\n\t}\n\n\tfunction BoundingBoxHelper( object, color ) {\n\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\t\treturn new BoxHelper( object, color );\n\n\t}\n\n\tfunction EdgesHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n\t};\n\n\tfunction WireframeHelper( object, hex ) {\n\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n\t}\n\n\t//\n\n\tObject.assign( Loader.prototype, {\n\n\t\textractUrlBase: function ( url ) {\n\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\t\t\treturn LoaderUtils.extractUrlBase( url );\n\n\t\t}\n\n\t} );\n\n\tfunction XHRLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\t\treturn new FileLoader( manager );\n\n\t}\n\n\tfunction BinaryTextureLoader( manager ) {\n\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\t\treturn new DataTextureLoader( manager );\n\n\t}\n\n\t//\n\n\tObject.assign( Box2.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tObject.assign( Box3.prototype, {\n\n\t\tcenter: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\t\t\treturn this.getCenter( optionalTarget );\n\n\t\t},\n\t\tempty: function () {\n\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\t\t\treturn this.isEmpty();\n\n\t\t},\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t},\n\t\tsize: function ( optionalTarget ) {\n\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\t\t\treturn this.getSize( optionalTarget );\n\n\t\t}\n\t} );\n\n\tLine3.prototype.center = function ( optionalTarget ) {\n\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\t\treturn this.getCenter( optionalTarget );\n\n\t};\n\n\tObject.assign( _Math, {\n\n\t\trandom16: function () {\n\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\n\t\t\treturn Math.random();\n\n\t\t},\n\n\t\tnearestPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\n\t\t\treturn _Math.floorPowerOfTwo( value );\n\n\t\t},\n\n\t\tnextPowerOfTwo: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\n\t\t\treturn _Math.ceilPowerOfTwo( value );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix3.prototype, {\n\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix3( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Matrix4.prototype, {\n\n\t\textractPosition: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\t\t\treturn this.copyPosition( m );\n\n\t\t},\n\t\tflattenToArrayOffset: function ( array, offset ) {\n\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\n\t\t\treturn this.toArray( array, offset );\n\n\t\t},\n\t\tgetPosition: function () {\n\n\t\t\tvar v1;\n\n\t\t\treturn function getPosition() {\n\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\n\n\t\t\t};\n\n\t\t}(),\n\t\tsetRotationFromQuaternion: function ( q ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\t\t\treturn this.makeRotationFromQuaternion( q );\n\n\t\t},\n\t\tmultiplyToArray: function () {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n\t\t},\n\t\tmultiplyVector3: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector4: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\tmultiplyVector3Array: function ( /* a */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n\t\t},\n\t\trotateAxis: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\t\t\tv.transformDirection( this );\n\n\t\t},\n\t\tcrossVector: function ( vector ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\t\t\treturn vector.applyMatrix4( this );\n\n\t\t},\n\t\ttranslate: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n\t\t},\n\t\trotateX: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n\t\t},\n\t\trotateY: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n\t\t},\n\t\trotateZ: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n\t\t},\n\t\trotateByAxis: function () {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n\t\t},\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\n\t\t\treturn this.applyToBufferAttribute( buffer );\n\n\t\t},\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n\t\t},\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n\t\t}\n\n\t} );\n\n\tPlane.prototype.isIntersectionLine = function ( line ) {\n\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\t\treturn this.intersectsLine( line );\n\n\t};\n\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\t\treturn vector.applyQuaternion( this );\n\n\t};\n\n\tObject.assign( Ray.prototype, {\n\n\t\tisIntersectionBox: function ( box ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\t\t\treturn this.intersectsBox( box );\n\n\t\t},\n\t\tisIntersectionPlane: function ( plane ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\t\t\treturn this.intersectsPlane( plane );\n\n\t\t},\n\t\tisIntersectionSphere: function ( sphere ) {\n\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\t\t\treturn this.intersectsSphere( sphere );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle.prototype, {\n\n\t\tarea: function () {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\t\t\treturn this.getArea();\n\n\t\t},\n\t\tbarycoordFromPoint: function ( point, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn this.getBarycoord( point, target );\n\n\t\t},\n\t\tmidpoint: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\t\t\treturn this.getMidpoint( target );\n\n\t\t},\n\t\tnormal: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn this.getNormal( target );\n\n\t\t},\n\t\tplane: function ( target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\t\t\treturn this.getPlane( target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Triangle, {\n\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n\t\t},\n\t\tnormal: function ( a, b, c, target ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\t\t\treturn Triangle.getNormal( a, b, c, target );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Shape.prototype, {\n\n\t\textractAllPoints: function ( divisions ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\t\t\treturn this.extractPoints( divisions );\n\n\t\t},\n\t\textrude: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\t\t\treturn new ExtrudeGeometry( this, options );\n\n\t\t},\n\t\tmakeGeometry: function ( options ) {\n\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\t\t\treturn new ShapeGeometry( this, options );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector2.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector3.prototype, {\n\n\t\tsetEulerFromRotationMatrix: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n\t\t},\n\t\tsetEulerFromQuaternion: function () {\n\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n\t\t},\n\t\tgetPositionFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\t\t\treturn this.setFromMatrixPosition( m );\n\n\t\t},\n\t\tgetScaleFromMatrix: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\t\t\treturn this.setFromMatrixScale( m );\n\n\t\t},\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\n\n\t\t},\n\t\tapplyProjection: function ( m ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\t\t\treturn this.applyMatrix4( m );\n\n\t\t},\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tdistanceToManhattan: function ( v ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\t\t\treturn this.manhattanDistanceTo( v );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Vector4.prototype, {\n\n\t\tfromAttribute: function ( attribute, index, offset ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\n\n\t\t},\n\t\tlengthManhattan: function () {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\t\t\treturn this.manhattanLength();\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( Geometry.prototype, {\n\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeLineDistances: function () {\n\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( Object3D.prototype, {\n\n\t\tgetChildByName: function ( name ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\t\t\treturn this.getObjectByName( name );\n\n\t\t},\n\t\trenderDepth: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n\t\t},\n\t\ttranslate: function ( distance, axis ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\t\t\treturn this.translateOnAxis( axis, distance );\n\n\t\t},\n\t\tgetWorldRotation: function () {\n\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( Object3D.prototype, {\n\n\t\teulerOrder: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\treturn this.rotation.order;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\t\tthis.rotation.order = value;\n\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( LOD.prototype, {\n\n\t\tobjects: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\n\t\t\t\treturn this.levels;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\treturn this.arcLengthDivisions;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\n\t\t\tthis.arcLengthDivisions = value;\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\n\n\t\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength( focalLength );\n\n\t};\n\n\t//\n\n\tObject.defineProperties( Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\t\tthis.shadow.camera.fov = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\t\tthis.shadow.camera.left = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\t\tthis.shadow.camera.right = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\t\tthis.shadow.camera.top = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\t\tthis.shadow.camera.near = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\t\tthis.shadow.camera.far = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\t\tthis.shadow.bias = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t\t}\n\t\t}\n\t} );\n\n\t//\n\n\tObject.defineProperties( BufferAttribute.prototype, {\n\n\t\tlength: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\t\treturn this.array.length;\n\n\t\t\t}\n\t\t},\n\t\tcopyIndicesArray: function ( /* indices */ ) {\n\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.assign( BufferGeometry.prototype, {\n\n\t\taddIndex: function ( index ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\t\t\tthis.setIndex( index );\n\n\t\t},\n\t\taddDrawCall: function ( start, count, indexOffset ) {\n\n\t\t\tif ( indexOffset !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t\t\t}\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\t\t\tthis.addGroup( start, count );\n\n\t\t},\n\t\tclearDrawCalls: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\t\t\tthis.clearGroups();\n\n\t\t},\n\t\tcomputeTangents: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\n\n\t\t},\n\t\tcomputeOffsets: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( BufferGeometry.prototype, {\n\n\t\tdrawcalls: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\t\treturn this.groups;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\n\n\t\tgetArrays: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\n\n\t\t},\n\n\t\taddShapeList: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\n\n\t\t},\n\n\t\taddShape: function () {\n\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Uniform.prototype, {\n\n\t\tdynamic: {\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\n\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\t\t\t\treturn this;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( Material.prototype, {\n\n\t\twrapAround: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\t\treturn new Color();\n\n\t\t\t}\n\t\t},\n\n\t\tshading: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\n\n\t\tmetal: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\n\t\t\t\treturn false;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( ShaderMaterial.prototype, {\n\n\t\tderivatives: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\treturn this.extensions.derivatives;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\t\tthis.extensions.derivatives = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.assign( WebGLRenderer.prototype, {\n\n\t\tanimate: function ( callback ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\t\t\tthis.setAnimationLoop( callback );\n\n\t\t},\n\n\t\tgetCurrentRenderTarget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\t\t\treturn this.getRenderTarget();\n\n\t\t},\n\n\t\tgetMaxAnisotropy: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\t\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t\t},\n\n\t\tgetPrecision: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\t\t\treturn this.capabilities.precision;\n\n\t\t},\n\n\t\tresetGLState: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\t\t\treturn this.state.reset();\n\n\t\t},\n\n\t\tsupportsFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\n\n\t\t},\n\t\tsupportsHalfFloatTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\n\n\t\t},\n\t\tsupportsStandardDerivatives: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n\t\t},\n\t\tsupportsCompressedTextureS3TC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t},\n\t\tsupportsCompressedTexturePVRTC: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t},\n\t\tsupportsBlendMinMax: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n\t\t},\n\t\tsupportsVertexTextures: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\t\t\treturn this.capabilities.vertexTextures;\n\n\t\t},\n\t\tsupportsInstancedArrays: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t},\n\t\tenableScissorTest: function ( boolean ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\t\t\tthis.setScissorTest( boolean );\n\n\t\t},\n\t\tinitMaterial: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n\t\t},\n\t\taddPrePlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n\t\t},\n\t\taddPostPlugin: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n\t\t},\n\t\tupdateShadowMap: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n\t\t},\n\t\tsetFaceCulling: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n\t\t}\n\n\t} );\n\n\tObject.defineProperties( WebGLRenderer.prototype, {\n\n\t\tshadowMapEnabled: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.enabled;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\t\tthis.shadowMap.enabled = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function () {\n\n\t\t\t\treturn this.shadowMap.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\t\tthis.shadowMap.type = value;\n\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\t} );\n\n\tObject.defineProperties( WebGLShadowMap.prototype, {\n\n\t\tcullFace: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function ( /* cullFace */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\t\treturn undefined;\n\n\t\t\t},\n\t\t\tset: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\t\twrapS: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\treturn this.texture.wrapS;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\t\tthis.texture.wrapS = value;\n\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\treturn this.texture.wrapT;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\t\tthis.texture.wrapT = value;\n\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\treturn this.texture.magFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\t\tthis.texture.magFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\treturn this.texture.minFilter;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\t\tthis.texture.minFilter = value;\n\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\treturn this.texture.anisotropy;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\t\tthis.texture.anisotropy = value;\n\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\treturn this.texture.offset;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\t\tthis.texture.offset = value;\n\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\treturn this.texture.repeat;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\t\tthis.texture.repeat = value;\n\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\treturn this.texture.format;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\t\tthis.texture.format = value;\n\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\treturn this.texture.type;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\t\tthis.texture.type = value;\n\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\treturn this.texture.generateMipmaps;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tObject.defineProperties( WebVRManager.prototype, {\n\n\t\tstanding: {\n\t\t\tset: function ( /* value */ ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\n\n\t\t\t}\n\t\t}\n\n\t} );\n\n\t//\n\n\tAudio.prototype.load = function ( file ) {\n\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\t\tvar scope = this;\n\t\tvar audioLoader = new AudioLoader();\n\t\taudioLoader.load( file, function ( buffer ) {\n\n\t\t\tscope.setBuffer( buffer );\n\n\t\t} );\n\t\treturn this;\n\n\t};\n\n\tAudioAnalyser.prototype.getData = function () {\n\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\t\treturn this.getFrequencyData();\n\n\t};\n\n\t//\n\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\t\treturn this.update( renderer, scene );\n\n\t};\n\n\t//\n\n\tvar GeometryUtils = {\n\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\n\t\t\tvar matrix;\n\n\t\t\tif ( geometry2.isMesh ) {\n\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n\t\t\t\tmatrix = geometry2.matrix;\n\t\t\t\tgeometry2 = geometry2.geometry;\n\n\t\t\t}\n\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\n\n\t\t},\n\n\t\tcenter: function ( geometry ) {\n\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\n\t\t\treturn geometry.center();\n\n\t\t}\n\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\n\n\t\tif ( mapping ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n\t};\n\n\t//\n\n\tfunction Projector() {\n\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\n\n\t\tthis.projectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\t\tvector.project( camera );\n\n\t\t};\n\n\t\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\t\tvector.unproject( camera );\n\n\t\t};\n\n\t\tthis.pickingRay = function () {\n\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t\t};\n\n\t}\n\n\t//\n\n\tfunction CanvasRenderer() {\n\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\n\n\t\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\n\t\tthis.clear = function () {};\n\t\tthis.render = function () {};\n\t\tthis.setClearColor = function () {};\n\t\tthis.setSize = function () {};\n\n\t}\n\n\t//\n\n\tvar SceneUtils = {\n\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t},\n\n\t\tattach: function ( /* child, scene, parent */ ) {\n\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\n\n\t\t}\n\n\t};\n\n\t//\n\n\tfunction LensFlare() {\n\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\n\n\t}\n\n\tvar exports = {};\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.ShaderLib = ShaderLib;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.FogExp2 = FogExp2;\n\texports.Fog = Fog;\n\texports.Scene = Scene;\n\texports.Sprite = Sprite;\n\texports.LOD = LOD;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.Skeleton = Skeleton;\n\texports.Bone = Bone;\n\texports.Mesh = Mesh;\n\texports.LineSegments = LineSegments;\n\texports.LineLoop = LineLoop;\n\texports.Line = Line;\n\texports.Points = Points;\n\texports.Group = Group;\n\texports.VideoTexture = VideoTexture;\n\texports.DataTexture = DataTexture;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CubeTexture = CubeTexture;\n\texports.CanvasTexture = CanvasTexture;\n\texports.DepthTexture = DepthTexture;\n\texports.Texture = Texture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.TextureLoader = TextureLoader;\n\texports.ObjectLoader = ObjectLoader;\n\texports.MaterialLoader = MaterialLoader;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.LoadingManager = LoadingManager;\n\texports.JSONLoader = JSONLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.FontLoader = FontLoader;\n\texports.FileLoader = FileLoader;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.Cache = Cache;\n\texports.AudioLoader = AudioLoader;\n\texports.SpotLightShadow = SpotLightShadow;\n\texports.SpotLight = SpotLight;\n\texports.PointLight = PointLight;\n\texports.RectAreaLight = RectAreaLight;\n\texports.HemisphereLight = HemisphereLight;\n\texports.DirectionalLightShadow = DirectionalLightShadow;\n\texports.DirectionalLight = DirectionalLight;\n\texports.AmbientLight = AmbientLight;\n\texports.LightShadow = LightShadow;\n\texports.Light = Light;\n\texports.StereoCamera = StereoCamera;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.CubeCamera = CubeCamera;\n\texports.ArrayCamera = ArrayCamera;\n\texports.Camera = Camera;\n\texports.AudioListener = AudioListener;\n\texports.PositionalAudio = PositionalAudio;\n\texports.AudioContext = AudioContext;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.Audio = Audio;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.PropertyMixer = PropertyMixer;\n\texports.PropertyBinding = PropertyBinding;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.AnimationUtils = AnimationUtils;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationClip = AnimationClip;\n\texports.Uniform = Uniform;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.BufferGeometry = BufferGeometry;\n\texports.Geometry = Geometry;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.Face3 = Face3;\n\texports.Object3D = Object3D;\n\texports.Raycaster = Raycaster;\n\texports.Layers = Layers;\n\texports.EventDispatcher = EventDispatcher;\n\texports.Clock = Clock;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.Interpolant = Interpolant;\n\texports.Triangle = Triangle;\n\texports.Math = _Math;\n\texports.Spherical = Spherical;\n\texports.Cylindrical = Cylindrical;\n\texports.Plane = Plane;\n\texports.Frustum = Frustum;\n\texports.Sphere = Sphere;\n\texports.Ray = Ray;\n\texports.Matrix4 = Matrix4;\n\texports.Matrix3 = Matrix3;\n\texports.Box3 = Box3;\n\texports.Box2 = Box2;\n\texports.Line3 = Line3;\n\texports.Euler = Euler;\n\texports.Vector4 = Vector4;\n\texports.Vector3 = Vector3;\n\texports.Vector2 = Vector2;\n\texports.Quaternion = Quaternion;\n\texports.Color = Color;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.VertexNormalsHelper = VertexNormalsHelper;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.PointLightHelper = PointLightHelper;\n\texports.RectAreaLightHelper = RectAreaLightHelper;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.GridHelper = GridHelper;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.FaceNormalsHelper = FaceNormalsHelper;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.CameraHelper = CameraHelper;\n\texports.BoxHelper = BoxHelper;\n\texports.Box3Helper = Box3Helper;\n\texports.PlaneHelper = PlaneHelper;\n\texports.ArrowHelper = ArrowHelper;\n\texports.AxesHelper = AxesHelper;\n\texports.Shape = Shape;\n\texports.Path = Path;\n\texports.ShapePath = ShapePath;\n\texports.Font = Font;\n\texports.CurvePath = CurvePath;\n\texports.Curve = Curve;\n\texports.ImageUtils = ImageUtils;\n\texports.ShapeUtils = ShapeUtils;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.TubeBufferGeometry = TubeBufferGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusBufferGeometry = TorusBufferGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.TextBufferGeometry = TextBufferGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.SphereBufferGeometry = SphereBufferGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.RingBufferGeometry = RingBufferGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.LatheBufferGeometry = LatheBufferGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.ConeBufferGeometry = ConeBufferGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.CircleBufferGeometry = CircleBufferGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxBufferGeometry = BoxBufferGeometry;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.PointsMaterial = PointsMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.Material = Material;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.BufferAttribute = BufferAttribute;\n\texports.ArcCurve = ArcCurve;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.EllipseCurve = EllipseCurve;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.SplineCurve = SplineCurve;\n\texports.REVISION = REVISION;\n\texports.MOUSE = MOUSE;\n\texports.CullFaceNone = CullFaceNone;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.FrontSide = FrontSide;\n\texports.BackSide = BackSide;\n\texports.DoubleSide = DoubleSide;\n\texports.FlatShading = FlatShading;\n\texports.SmoothShading = SmoothShading;\n\texports.NoColors = NoColors;\n\texports.FaceColors = FaceColors;\n\texports.VertexColors = VertexColors;\n\texports.NoBlending = NoBlending;\n\texports.NormalBlending = NormalBlending;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.CustomBlending = CustomBlending;\n\texports.AddEquation = AddEquation;\n\texports.SubtractEquation = SubtractEquation;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.MinEquation = MinEquation;\n\texports.MaxEquation = MaxEquation;\n\texports.ZeroFactor = ZeroFactor;\n\texports.OneFactor = OneFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.NeverDepth = NeverDepth;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.EqualDepth = EqualDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterDepth = GreaterDepth;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.MixOperation = MixOperation;\n\texports.AddOperation = AddOperation;\n\texports.NoToneMapping = NoToneMapping;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.UVMapping = UVMapping;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.ByteType = ByteType;\n\texports.ShortType = ShortType;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.IntType = IntType;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.FloatType = FloatType;\n\texports.HalfFloatType = HalfFloatType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.AlphaFormat = AlphaFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBAFormat = RGBAFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.RGBEFormat = RGBEFormat;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LoopPingPong = LoopPingPong;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.LinearEncoding = LinearEncoding;\n\texports.sRGBEncoding = sRGBEncoding;\n\texports.GammaEncoding = GammaEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.CubeGeometry = BoxGeometry;\n\texports.Face4 = Face4;\n\texports.LineStrip = LineStrip;\n\texports.LinePieces = LinePieces;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MultiMaterial = MultiMaterial;\n\texports.PointCloud = PointCloud;\n\texports.Particle = Particle;\n\texports.ParticleSystem = ParticleSystem;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Vertex = Vertex;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\n\texports.SplineCurve3 = SplineCurve3;\n\texports.Spline = Spline;\n\texports.AxisHelper = AxisHelper;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.EdgesHelper = EdgesHelper;\n\texports.WireframeHelper = WireframeHelper;\n\texports.XHRLoader = XHRLoader;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.GeometryUtils = GeometryUtils;\n\texports.Projector = Projector;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.SceneUtils = SceneUtils;\n\texports.LensFlare = LensFlare;\n\n\treturn exports;\t\n\n});\n\ndefine('skylark-utils-webgl/main',[\r\n    \"skylark-langx/langx\",\r\n    \"./webgl\",\r\n    \"./primitives/three\"\r\n], function(langx,webgl,threejs) {\r\n    langx.mixin(webgl,threejs);\r\n\r\n    return webgl;\r\n});\r\n\ndefine('skylark-utils-webgl', ['skylark-utils-webgl/main'], function (main) { return main; });\n\n"]}