{"version":3,"sources":["skylark-graphics-webgl.js"],"names":["define","skylark","webgl","EventDispatcher","undefined","Number","EPSILON","Math","pow","isInteger","value","isFinite","floor","sign","x","Function","prototype","Object","defineProperty","get","this","toString","match","assign","target","TypeError","output","index","arguments","length","source","nextKey","hasOwnProperty","call","addEventListener","type","listener","_listeners","listeners","indexOf","push","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","array","slice","i","l","min","max","vector","matrix","y","z","zero","one","v1","quaternion","REVISION","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","_Math","DEG2RAD","PI","RAD2DEG","generateUUID","lut","d0","random","d1","d2","d3","uuid","toUpperCase","clamp","euclideanModulo","n","m","mapLinear","a1","a2","b1","b2","lerp","t","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","ceil","log","LN2","floorPowerOfTwo","Vector2","Matrix4","elements","console","error","Quaternion","w","_x","_y","_z","_w","Vector3","Matrix3","defineProperties","width","set","height","isVector2","setScalar","scalar","setX","setY","setComponent","Error","getComponent","clone","constructor","copy","v","add","warn","addVectors","addScalar","s","a","b","addScaledVector","sub","subVectors","subScalar","multiply","multiplyScalar","divide","divideScalar","applyMatrix3","e","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","abs","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","c","cos","sin","isMatrix4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","te","identity","me","copyPosition","extractBasis","xAxis","yAxis","zAxis","setFromMatrixColumn","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","euler","isEuler","d","f","order","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","q","compose","lookAt","eye","up","crossVectors","multiplyMatrices","premultiply","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","applyToBufferAttribute","count","getZ","applyMatrix4","setXYZ","determinant","transpose","tmp","setPosition","getInverse","throwOnDegenerate","t11","t12","t13","t14","det","msg","detInv","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","theta","makeRotationY","makeRotationZ","makeRotationAxis","axis","tx","ty","makeScale","makeShear","position","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","sx","sy","sz","decompose","invSX","invSY","invSZ","setFromRotationMatrix","makePerspective","left","right","top","bottom","near","far","makeOrthographic","h","p","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","onChangeCallback","setFromEuler","update","c1","c2","c3","s1","s2","s3","setFromAxisAngle","halfAngle","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","r","vFrom","vTo","angleTo","acos","rotateTowards","step","inverse","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","onChange","callback","isVector3","setZ","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","matrixWorld","transformDirection","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","isMatrix3","setFromMatrix4","g","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","rotation","cx","cy","rotate","translate","points","closestPoint","box","sphere","ImageUtils","getDataURL","image","canvas","HTMLCanvasElement","document","createElementNS","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","name","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","Vector4","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","WebGLRenderTargetCube","activeCubeFace","activeMipMapLevel","DataTexture","data","Box3","Infinity","Sphere","Plane","constant","Frustum","p0","p1","p2","p3","p4","p5","planes","create","isTexture","updateMatrix","toJSON","meta","isRootObject","textures","metadata","generator","wrap","images","url","Array","isArray","dispose","transformUv","uv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","getW","isWebGLRenderTarget","setSize","isWebGLRenderTargetCube","isDataTexture","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","setFromObject","object","expandByObject","isEmpty","getCenter","getSize","point","expandByVector","expandByScalar","scope","traverse","node","geometry","isGeometry","vertices","isBufferGeometry","attributes","updateMatrixWorld","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","clampPoint","intersectsPlane","plane","intersectsTriangle","v0","f0","f1","f2","testAxis","extents","triangleNormal","satForAxes","axes","j","triangle","distanceToPoint","clampedPoint","getBoundingSphere","intersect","union","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","direction","delta","denominator","start","intersectsLine","startSign","endSign","end","coplanarPoint","m1","optionalNormalMatrix","normalMatrix","referencePoint","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","distance","hslA","hslB","hsl","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsUtils","merge","uniforms","merged","u","uniforms_src","uniforms_dst","parameter_src","isColor","ColorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Color","setRGB","setHex","setStyle","hex","setHSL","hue2rgb","style","handleAlpha","string","parseFloat","exec","color","components","parseInt","charAt","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","SRGBToLinear","copyLinearToSRGB","LinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHex","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","UniformsLib","diffuse","opacity","map","uvTransform","alphaMap","specularmap","specularMap","envmap","envMap","flipEnvMap","reflectivity","refractionRatio","maxMipLevel","aomap","aoMap","aoMapIntensity","lightmap","lightMap","lightMapIntensity","emissivemap","emissiveMap","bumpmap","bumpMap","bumpScale","normalmap","normalMap","normalScale","displacementmap","displacementMap","displacementScale","displacementBias","roughnessmap","roughnessMap","metalnessmap","metalnessMap","gradientmap","gradientMap","fog","fogDensity","fogNear","fogFar","fogColor","lights","ambientLightColor","directionalLights","properties","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ShaderLib","basic","vertexShader","fragmentShader","lambert","emissive","phong","specular","shininess","standard","roughness","metalness","envMapIntensity","dashed","dashSize","totalSize","depth","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","time","frame","requestAnimationFrame","stop","setAnimationLoop","setContext","WebGLAttributes","gl","buffers","WeakMap","isInterleavedBufferAttribute","remove","deleteBuffer","buffer","delete","bufferType","usage","dynamic","DYNAMIC_DRAW","STATIC_DRAW","createBuffer","bindBuffer","bufferData","onUploadCallback","FLOAT","Float32Array","Float64Array","Uint16Array","UNSIGNED_SHORT","Int16Array","SHORT","Uint32Array","UNSIGNED_INT","Int32Array","INT","Int8Array","BYTE","Uint8Array","UNSIGNED_BYTE","bytesPerElement","BYTES_PER_ELEMENT","updateRange","bufferSubData","subarray","updateBuffer","Euler","_order","DefaultOrder","Layers","mask","physical","clearCoat","clearCoatRoughness","RotationOrders","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enable","toggle","disable","test","layers","q1","object3DId","Object3D","parent","children","DefaultUp","enumerable","modelViewMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","userData","Camera","projectionMatrixInverse","OrthographicCamera","zoom","view","updateProjectionMatrix","Face3","materialIndex","vertexNormals","vertexColors","isObject3D","onBeforeRender","onAfterRender","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","getObjectById","id","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverseVisible","traverseAncestors","force","geometries","materials","shapes","serialize","library","element","JSON","stringify","isMesh","isLine","isPoints","parameters","shape","material","uuids","extractFromCache","cache","values","key","recursive","parse","isOrthographicCamera","setViewOffset","fullWidth","fullHeight","enabled","offsetX","offsetY","clearViewOffset","zoomW","zoomH","scaleW","scaleH","obj","geometryId","Geometry","colors","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","BufferAttribute","itemSize","normalized","Int8BufferAttribute","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Uint16BufferAttribute","Int32BufferAttribute","Uint32BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","DirectGeometry","normals","uvs","uvs2","groups","arrayMax","vertex","face","jl","computeBoundingBox","fromBufferGeometry","indices","positions","uv2","tempNormals","tempUVs","tempUVs2","addFace","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","precision","faceIndicesToRemove","idx","diff","sortFacesByMaterialIndex","_id","sort","newUvs1","newUvs2","normalsHash","colorsHash","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","hash","k","kl","uvsCopy","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","isBufferAttribute","setArray","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","bufferGeometryId","BufferGeometry","morphAttributes","drawRange","BoxGeometry","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","addGroup","setIndex","addAttribute","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","getIndex","getAttribute","removeAttribute","clearGroups","setDrawRange","needsUpdate","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","geometry2","array2","keys","morphAttribute","segCenter","segDir","vab","vac","vbc","vap","vbp","vcp","materialId","Material","blending","side","flatShading","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","overdraw","MeshBasicMaterial","combine","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","setValues","ShaderMaterial","defines","linewidth","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","Ray","origin","Triangle","Mesh","drawMode","updateMorphTargets","absNumericalSort","CubeTexture","isMaterial","onBeforeCompile","newValue","currentValue","isRoot","emissiveIntensity","normalMapType","sizeAttenuation","gapSize","srcPlanes","dstPlanes","isMeshBasicMaterial","isShaderMaterial","uniform","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","setDrawMode","morphTargetInfluences","morphTargetDictionary","ml","String","inverseMatrix","tempA","tempB","tempC","uvA","uvB","uvC","barycoord","intersectionPoint","intersectionPointWorld","uvIntersection","uv1","uv3","checkIntersection","raycaster","checkBufferGeometryIntersection","intersection","intersects","groupMaterial","faceIndex","fvA","fvB","fvC","isMultiMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","isCubeTexture","emptyTexture","emptyCubeTexture","UniformContainer","seq","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","renderer","allocTextureUnit","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2f","uniform2fv","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4f","uniform4fv","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setTexture2D","setValueT6","setTextureCube","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","updateCache","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","units","setValueT6a","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","matchEnd","idIsIndex","subscript","next","WebGLUniforms","program","getProgramParameter","ACTIVE_UNIFORMS","info","getActiveUniform","getUniformLocation","WebGLShader","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","VERTEX_SHADER","lines","split","join","addLineNumbers","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","parseIncludes","include","unrollLoops","snippet","unroll","WebGLProgram","code","capabilities","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","isWebGL2","rendererExtensions","envMapCubeUV","objectSpaceNormalMap","logarithmicDepthBuffer","filter","generateExtensions","customDefines","chunks","generateDefines","createProgram","isRawShaderMaterial","supportsVertexTextures","maxBones","useFog","fogExp","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","FRAGMENT_SHADER","attachShader","bindAttribLocation","linkProgram","cachedUniforms","cachedAttributes","programLog","getProgramInfoLog","trim","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","getUniforms","getAttributes","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","WebGLPrograms","programs","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","bones","skeleton","floatVertexTextures","nVertexUniforms","maxVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","currentRenderTarget","getRenderTarget","vertexTextures","gammaOutput","gammaInput","envMapMode","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCode","acquireProgram","pl","programInfo","releaseProgram","pop","painterSortStable","reversePainterSortStable","WebGLRenderLists","lists","scene","list","renderItems","renderItemsIndex","opaque","init","renderItem","matrixPosition","offsetMatrix","identityMatrix","WebGLLights","light","halfWidth","halfHeight","state","stateID","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","shadowsLength","ambient","vector3","matrix42","setup","viewMatrix","intensity","isAmbientLight","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_projScreenMatrix","_shadowMapSize","_maxShadowMapSize","_lookTarget","_lightPositionWorld","_MorphingFlag","_SkinningFlag","_NumberOfMaterialVariants","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","cubeDirections","cubeUps","cube2DViewPorts","useMorphing","useSkinning","depthMaterial","distanceMaterial","getDepthMaterial","lightPositionWorld","result","materialVariants","customMaterial","customDepthMaterial","customDistanceMaterial","variantIndex","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","isMeshDistanceMaterial","renderObject","shadowCamera","renderBufferDirect","autoUpdate","render","faceCount","_gl","_state","BLEND","setClear","setTest","setScissorTest","vpWidth","vpHeight","pars","isSpotLightShadow","shadowMatrix","setRenderTarget","clear","vpDimensions","WebGLTextures","utils","_canvas","_videoTextures","clampToMaxSize","maxSize","textureNeedsGenerateMipmaps","generateMipmap","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","glFormat","glType","RGB","RGB32F","HALF_FLOAT","RGB16F","RGB8","RGBA","RGBA32F","RGBA16F","RGBA8","filterFallback","NEAREST","LINEAR","onTextureDispose","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","deallocateTexture","isVideoTexture","memory","onRenderTargetDispose","renderTarget","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","deallocateRenderTarget","slot","updateVideoTexture","__version","complete","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","textureNeedsPowerOfTwo","HTMLImageElement","ImageBitmap","makePowerOfTwo","isPowerOfTwoImage","convert","glInternalFormat","setTextureParameters","mipmap","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","DEPTH_STENCIL","texImage2D","isCompressedTexture","getCompressedTextureFormats","compressedTexImage2D","uploadTexture","textureType","extension","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","TEXTURE_CUBE_MAP","isCompressed","cubeImage","maxCubemapSize","TEXTURE_CUBE_MAP_POSITIVE_X","setTextureCubeDynamic","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","webglTexture","WebGLUtils","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","LUMINANCE","LUMINANCE_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN","MAX","MIN_EXT","MAX_EXT","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","Group","PerspectiveCamera","fov","aspect","focus","filmGauge","filmOffset","ArrayCamera","cameras","WebVRManager","device","frameData","poseTarget","controllers","standingMatrix","standingMatrixInverse","window","VRFrameData","onVRDisplayPresentChange","tempQuaternion","tempPosition","cameraL","bounds","cameraR","currentSize","currentPixelRatio","cameraVR","isPresenting","eyeParameters","getEyeParameters","renderWidth","renderHeight","getPixelRatio","setDrawingBufferSize","animation","triggers","findGamepad","gamepads","navigator","getGamepads","gamepad","startsWith","userHeight","getController","controller","getDevice","setDevice","setPoseTarget","getCamera","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","pose","poseObject","orientation","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","hasPosition","buttonId","buttons","pressed","updateControllers","getStandingMatrix","submitFrame","WebGLRenderer","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","currentRenderList","currentRenderState","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","objects","programCache","renderLists","renderStates","background","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_usedTextureUnits","_width","_height","_pixelRatio","_viewport","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_vector3","getTargetPixelRatio","contextAttributes","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","message","initGLContext","getExtension","maxAnisotropy","HIGH_FLOAT","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","clearColor","reset","currentDepthMask","currentDepthFunc","currentDepthClear","DEPTH_TEST","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","stencilFunc","stencilRef","setOp","stencilFail","stencilZFail","stencilZPass","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","compressedTextureFormats","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","setBlending","blendEquationSeparate","blendFuncSeparate","blendFunc","setFlipSided","frontFace","CW","CCW","setCullFace","cullFace","CULL_FACE","BACK","FRONT","FRONT_AND_BACK","setPolygonOffset","factor","POLYGON_OFFSET_FILL","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","formats","COMPRESSED_TEXTURE_FORMATS","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","SCISSOR_TEST","webglType","boundTexture","apply","calls","triangles","autoReset","mode","instanceCount","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","LINES","LINE_STRIP","LINE_LOOP","POINTS","wireframeAttributes","onGeometryDispose","buffergeometry","_bufferGeometry","geometryAttributes","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","getWireframeAttribute","geometryIndex","updateList","influencesList","objectInfluences","influences","renderState","planeCamera","planeMesh","boxMesh","clearAlpha","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","setMode","drawArrays","renderInstances","maxInstancedCount","drawElements","vr","session","frameOfRef","inputSources","onSessionEvent","inputSource","onSessionEnd","setFramebuffer","updateCamera","XRDevice","setCompatibleXRDevice","setSession","baseLayer","XRWebGLLayer","requestFrameOfReference","frameOfReferenceType","then","getInputSources","onAnimationFrameCallback","getDevicePose","views","getViewport","getViewMatrix","inputPose","getInputPose","targetRay","transformMatrix","pointerMatrix","THREE","preventDefault","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","getContextAttributes","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","updateStyle","setViewport","getDrawingBufferSize","pixelRatio","getCurrentViewport","setScissor","boolean","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearTarget","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","programAttributes","positionArray","vertexAttribPointer","normalArray","uvArray","colorArray","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","isLight","initMaterial","warned","renderObjects","overrideMaterial","isArrayCamera","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","lightsHash","lightsStateHash","programChange","numSupportedMorphTargets","numSupportedMorphNormals","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","isMeshPhongMaterial","isMeshStandardMaterial","uCamPos","cameraPosition","isMeshLambertMaterial","boneTexture","boneMatrices","boneTextureSize","isFog","density","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsPhong","refreshUniformsToon","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshDepthMaterial","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","ltc_1","LTC_1","ltc_2","LTC_2","uvScaleMap","projectObject","opaqueObjects","transparentObjects","textureUnit","setTexture","readRenderTargetPixels","restore","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","Scene","InterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","Sprite","float32Array","LOD","levels","Skeleton","boneInverses","calculateInverses","Bone","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","initBones","bind","normalizeSkinWeights","linecap","linejoin","Line","LineSegments","LineLoop","Points","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","o","ol","edge","edges","ParametricGeometry","func","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","detail","PolyhedronBufferGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","appplyRadius","centroid","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","frames","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","cs","TorusGeometry","arc","TorusBufferGeometry","isGroup","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","isInterleavedBuffer","intersectPoint","worldScale","mvPosition","alignedPosition","rotatedPosition","viewWorldMatrix","transformVertex","vertexPosition","addLevel","getObjectForDistance","bone","isBone","getBoneByName","gbone","pos","rotq","scl","sw","vec","skinWeight","computeLineDistances","positionAttribute","linePrecision","precisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","threshold","params","localThreshold","localThresholdSq","testPoint","rayPointDistanceSq","distanceToRay","readyState","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","prev","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q2","Node","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","holeIndex","forEach","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","reverse","concat","scalePt2","pt","bs","vert","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","text","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","segments","LatheBufferGeometry","base","inverseSegments","n1","n2","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","freeze","RawShaderMaterial","STANDARD","PHYSICAL","TOON","Materials","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","transform","DefaultLoadingManager","loading","FileLoader","manager","CompressedTextureLoader","_parser","DataTextureLoader","ImageLoader","CubeTextureLoader","TextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","t2","calc","t3","load","cached","setTimeout","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","toLowerCase","charCodeAt","Blob","parser","DOMParser","parseFromString","request","XMLHttpRequest","header","open","callbacks","status","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setPath","setResponseType","setWithCredentials","setMimeType","loader","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","crossOrigin","onImageLoad","onImageError","substr","src","setCrossOrigin","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","fromJSON","json","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","v3","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","tangent","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","SpotLightShadow","SpotLight","power","PointLight","DirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","resolution","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","getPointsHoles","holesPts","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","tracks","resetDuration","parseKeyframeTrack","trackType","typeName","getTrackTypeForValueTypeName","MaterialLoader","BufferGeometryLoader","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","track","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","getValueSize","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","createInterpolant","shift","timeOffset","timeScale","startTime","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","jsonTracks","frameTime","fps","clip","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","setTextures","getTexture","shading","typedArray","TYPED_ARRAYS","drawcalls","offsets","BlendingMode","textureLoader","materialLoader","Loader","Handlers","handlers","regex","onLoadStart","onLoadProgress","onLoadComplete","initMaterials","texturePath","createMaterial","fullPath","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","LoaderUtils","decodeText","TextDecoder","decode","fromCharCode","escape","extractUrlBase","lastIndexOf","JSONLoader","ObjectLoader","setTexturePath","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","faceA","faceB","uvLayer","nUvLayers","parseModel","influencesPerVertex","parseSkin","dstVertices","srcVertices","morphColors","parseMorphing","outputAnimations","morphAnimationClips","parseAnimations","substring","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","details","geometryShapes","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","FontLoader","setOptions","res","blob","imageBitmap","catch","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","ret","createPaths","instance","eyeSep","eyeRight","eyeLeft","AudioContext","webkitAudioContext","AudioLoader","StereoCamera","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","AudioListener","gain","createGain","connect","destination","Audio","getInput","autoplay","loop","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","PositionalAudio","panner","createPanner","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getOutput","PropertyMixer","binding","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","bufferCopy","decodeAudioData","audioBuffer","xmin","xmax","eyeSepOnProjection","ymax","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","setValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setBuffer","play","createBufferSource","onended","onEnded","pause","getFilters","setFilters","setPlaybackRate","getPlaybackRate","getLoop","setLoop","getVolume","setVolume","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","getValue","restoreOriginalState","wordChar","wordCharOrDot","directoryRe","nodeRe","objectRe","propertyRe","trackRe","supportedObjectNames","reservedRe","startP","startEnd","lineGeometry","coneGeometry","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","findNode","nodeName","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","Uniform","InstancedBufferGeometry","InstancedInterleavedBuffer","InstancedBufferAttribute","Raycaster","PointCloud","ascSort","intersectObject","Clock","autoStart","oldTime","elapsedTime","running","Spherical","Cylindrical","Box2","Line3","ImmediateRenderObject","VertexNormalsHelper","nNormals","objGeometry","SpotLightHelper","cone","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","RectAreaLightHelper","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","FaceNormalsHelper","DirectionalLightHelper","lightPlane","targetLine","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","BoxHelper","Box3Helper","PlaneHelper","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","firstValidIndex","bindings","unbind","isAnimationObjectGroup","sanitizeNodeName","RegExp","matches","results","objectName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","now","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","coords","intersectObjects","performance","Date","getElapsedTime","getDelta","newTime","other","makeSafe","setFromCartesianCoords","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","objPos","objNorm","coneLength","coneWidth","boneMatrix","matrixWorldInv","setPoint","setColor","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","copyIndicesArray","addIndex","addDrawCall","clearDrawCalls","computeOffsets","getArrays","addShapeList","wrapAround","wrapRGB","metal","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","shadowMapCullFace","renderReverseSided","renderSingleSided","standing","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","attach","exports","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","FlatShading","SmoothShading","LoopOnce","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroSlopeEnding","WrapAroundEnding","LogLuvEncoding","CubeGeometry","Face4","LineStrip","LinePieces","MeshFaceMaterial","MultiMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","DynamicBufferAttribute","Int8Attribute","Uint8Attribute","Uint8ClampedAttribute","Int16Attribute","Uint16Attribute","Int32Attribute","Uint32Attribute","Float32Attribute","Float64Attribute","AxisHelper","BoundingBoxHelper","EdgesHelper","WireframeHelper","XHRLoader","BinaryTextureLoader","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","LensFlare","langx","threejs","mixin","main"],"mappings":"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","file":"../skylark-graphics-webgl.js","sourcesContent":["define('skylark-graphics-webgl/webgl',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\treturn skylark.webgl = skylark.webgl || {};\r\n});\ndefine('skylark-graphics-webgl/primitives/three',[],function() {\r\n\t'use strict';\r\n\r\n\t// Polyfills\r\n\r\n\tif ( Number.EPSILON === undefined ) {\r\n\r\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\r\n\r\n\t}\r\n\r\n\tif ( Number.isInteger === undefined ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\r\n\r\n\t\tNumber.isInteger = function ( value ) {\r\n\r\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tif ( Math.sign === undefined ) {\r\n\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n\r\n\t\tMath.sign = function ( x ) {\r\n\r\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tif ( 'name' in Function.prototype === false ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\r\n\r\n\t\tObject.defineProperty( Function.prototype, 'name', {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tif ( Object.assign === undefined ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\r\n\t\t( function () {\r\n\r\n\t\t\tObject.assign = function ( target ) {\r\n\r\n\t\t\t\tif ( target === undefined || target === null ) {\r\n\r\n\t\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar output = Object( target );\r\n\r\n\t\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\r\n\r\n\t\t\t\t\tvar source = arguments[ index ];\r\n\r\n\t\t\t\t\tif ( source !== undefined && source !== null ) {\r\n\r\n\t\t\t\t\t\tfor ( var nextKey in source ) {\r\n\r\n\t\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\r\n\r\n\t\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn output;\r\n\r\n\t\t\t};\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * https://github.com/mrdoob/eventdispatcher.js/\r\n\t */\r\n\r\n\tfunction EventDispatcher() {}\r\n\r\n\tObject.assign( EventDispatcher.prototype, {\r\n\r\n\t\taddEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\r\n\t\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\thasEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) return false;\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\r\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\r\n\r\n\t\t},\r\n\r\n\t\tremoveEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ type ];\r\n\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\t\tvar index = listenerArray.indexOf( listener );\r\n\r\n\t\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tdispatchEvent: function ( event ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\t\tevent.target = this;\r\n\r\n\t\t\t\tvar array = listenerArray.slice( 0 );\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar REVISION = '96dev';\r\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\r\n\tvar CullFaceNone = 0;\r\n\tvar CullFaceBack = 1;\r\n\tvar CullFaceFront = 2;\r\n\tvar CullFaceFrontBack = 3;\r\n\tvar FrontFaceDirectionCW = 0;\r\n\tvar FrontFaceDirectionCCW = 1;\r\n\tvar BasicShadowMap = 0;\r\n\tvar PCFShadowMap = 1;\r\n\tvar PCFSoftShadowMap = 2;\r\n\tvar FrontSide = 0;\r\n\tvar BackSide = 1;\r\n\tvar DoubleSide = 2;\r\n\tvar FlatShading = 1;\r\n\tvar SmoothShading = 2;\r\n\tvar NoColors = 0;\r\n\tvar FaceColors = 1;\r\n\tvar VertexColors = 2;\r\n\tvar NoBlending = 0;\r\n\tvar NormalBlending = 1;\r\n\tvar AdditiveBlending = 2;\r\n\tvar SubtractiveBlending = 3;\r\n\tvar MultiplyBlending = 4;\r\n\tvar CustomBlending = 5;\r\n\tvar AddEquation = 100;\r\n\tvar SubtractEquation = 101;\r\n\tvar ReverseSubtractEquation = 102;\r\n\tvar MinEquation = 103;\r\n\tvar MaxEquation = 104;\r\n\tvar ZeroFactor = 200;\r\n\tvar OneFactor = 201;\r\n\tvar SrcColorFactor = 202;\r\n\tvar OneMinusSrcColorFactor = 203;\r\n\tvar SrcAlphaFactor = 204;\r\n\tvar OneMinusSrcAlphaFactor = 205;\r\n\tvar DstAlphaFactor = 206;\r\n\tvar OneMinusDstAlphaFactor = 207;\r\n\tvar DstColorFactor = 208;\r\n\tvar OneMinusDstColorFactor = 209;\r\n\tvar SrcAlphaSaturateFactor = 210;\r\n\tvar NeverDepth = 0;\r\n\tvar AlwaysDepth = 1;\r\n\tvar LessDepth = 2;\r\n\tvar LessEqualDepth = 3;\r\n\tvar EqualDepth = 4;\r\n\tvar GreaterEqualDepth = 5;\r\n\tvar GreaterDepth = 6;\r\n\tvar NotEqualDepth = 7;\r\n\tvar MultiplyOperation = 0;\r\n\tvar MixOperation = 1;\r\n\tvar AddOperation = 2;\r\n\tvar NoToneMapping = 0;\r\n\tvar LinearToneMapping = 1;\r\n\tvar ReinhardToneMapping = 2;\r\n\tvar Uncharted2ToneMapping = 3;\r\n\tvar CineonToneMapping = 4;\r\n\tvar UVMapping = 300;\r\n\tvar CubeReflectionMapping = 301;\r\n\tvar CubeRefractionMapping = 302;\r\n\tvar EquirectangularReflectionMapping = 303;\r\n\tvar EquirectangularRefractionMapping = 304;\r\n\tvar SphericalReflectionMapping = 305;\r\n\tvar CubeUVReflectionMapping = 306;\r\n\tvar CubeUVRefractionMapping = 307;\r\n\tvar RepeatWrapping = 1000;\r\n\tvar ClampToEdgeWrapping = 1001;\r\n\tvar MirroredRepeatWrapping = 1002;\r\n\tvar NearestFilter = 1003;\r\n\tvar NearestMipMapNearestFilter = 1004;\r\n\tvar NearestMipMapLinearFilter = 1005;\r\n\tvar LinearFilter = 1006;\r\n\tvar LinearMipMapNearestFilter = 1007;\r\n\tvar LinearMipMapLinearFilter = 1008;\r\n\tvar UnsignedByteType = 1009;\r\n\tvar ByteType = 1010;\r\n\tvar ShortType = 1011;\r\n\tvar UnsignedShortType = 1012;\r\n\tvar IntType = 1013;\r\n\tvar UnsignedIntType = 1014;\r\n\tvar FloatType = 1015;\r\n\tvar HalfFloatType = 1016;\r\n\tvar UnsignedShort4444Type = 1017;\r\n\tvar UnsignedShort5551Type = 1018;\r\n\tvar UnsignedShort565Type = 1019;\r\n\tvar UnsignedInt248Type = 1020;\r\n\tvar AlphaFormat = 1021;\r\n\tvar RGBFormat = 1022;\r\n\tvar RGBAFormat = 1023;\r\n\tvar LuminanceFormat = 1024;\r\n\tvar LuminanceAlphaFormat = 1025;\r\n\tvar RGBEFormat = RGBAFormat;\r\n\tvar DepthFormat = 1026;\r\n\tvar DepthStencilFormat = 1027;\r\n\tvar RGB_S3TC_DXT1_Format = 33776;\r\n\tvar RGBA_S3TC_DXT1_Format = 33777;\r\n\tvar RGBA_S3TC_DXT3_Format = 33778;\r\n\tvar RGBA_S3TC_DXT5_Format = 33779;\r\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\r\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\r\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\r\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\r\n\tvar RGB_ETC1_Format = 36196;\r\n\tvar RGBA_ASTC_4x4_Format = 37808;\r\n\tvar RGBA_ASTC_5x4_Format = 37809;\r\n\tvar RGBA_ASTC_5x5_Format = 37810;\r\n\tvar RGBA_ASTC_6x5_Format = 37811;\r\n\tvar RGBA_ASTC_6x6_Format = 37812;\r\n\tvar RGBA_ASTC_8x5_Format = 37813;\r\n\tvar RGBA_ASTC_8x6_Format = 37814;\r\n\tvar RGBA_ASTC_8x8_Format = 37815;\r\n\tvar RGBA_ASTC_10x5_Format = 37816;\r\n\tvar RGBA_ASTC_10x6_Format = 37817;\r\n\tvar RGBA_ASTC_10x8_Format = 37818;\r\n\tvar RGBA_ASTC_10x10_Format = 37819;\r\n\tvar RGBA_ASTC_12x10_Format = 37820;\r\n\tvar RGBA_ASTC_12x12_Format = 37821;\r\n\tvar LoopOnce = 2200;\r\n\tvar LoopRepeat = 2201;\r\n\tvar LoopPingPong = 2202;\r\n\tvar InterpolateDiscrete = 2300;\r\n\tvar InterpolateLinear = 2301;\r\n\tvar InterpolateSmooth = 2302;\r\n\tvar ZeroCurvatureEnding = 2400;\r\n\tvar ZeroSlopeEnding = 2401;\r\n\tvar WrapAroundEnding = 2402;\r\n\tvar TrianglesDrawMode = 0;\r\n\tvar TriangleStripDrawMode = 1;\r\n\tvar TriangleFanDrawMode = 2;\r\n\tvar LinearEncoding = 3000;\r\n\tvar sRGBEncoding = 3001;\r\n\tvar GammaEncoding = 3007;\r\n\tvar RGBEEncoding = 3002;\r\n\tvar LogLuvEncoding = 3003;\r\n\tvar RGBM7Encoding = 3004;\r\n\tvar RGBM16Encoding = 3005;\r\n\tvar RGBDEncoding = 3006;\r\n\tvar BasicDepthPacking = 3200;\r\n\tvar RGBADepthPacking = 3201;\r\n\tvar TangentSpaceNormalMap = 0;\r\n\tvar ObjectSpaceNormalMap = 1;\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _Math = {\r\n\r\n\t\tDEG2RAD: Math.PI / 180,\r\n\t\tRAD2DEG: 180 / Math.PI,\r\n\r\n\t\tgenerateUUID: ( function () {\r\n\r\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n\r\n\t\t\tvar lut = [];\r\n\r\n\t\t\tfor ( var i = 0; i < 256; i ++ ) {\r\n\r\n\t\t\t\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn function generateUUID() {\r\n\r\n\t\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\r\n\t\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\r\n\t\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\r\n\t\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\r\n\t\t\t\tvar uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\r\n\t\t\t\t\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\r\n\t\t\t\t\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\r\n\t\t\t\t\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\r\n\r\n\t\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\r\n\t\t\t\treturn uuid.toUpperCase();\r\n\r\n\t\t\t};\r\n\r\n\t\t} )(),\r\n\r\n\t\tclamp: function ( value, min, max ) {\r\n\r\n\t\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t\t},\r\n\r\n\t\t// compute euclidian modulo of m % n\r\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\t\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t\t},\r\n\r\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t\t},\r\n\r\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\r\n\r\n\t\tlerp: function ( x, y, t ) {\r\n\r\n\t\t\treturn ( 1 - t ) * x + t * y;\r\n\r\n\t\t},\r\n\r\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\t\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\t\tif ( x <= min ) return 0;\r\n\t\t\tif ( x >= max ) return 1;\r\n\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t\t},\r\n\r\n\t\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\t\tif ( x <= min ) return 0;\r\n\t\t\tif ( x >= max ) return 1;\r\n\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t\t},\r\n\r\n\t\t// Random integer from <low, high> interval\r\n\r\n\t\trandInt: function ( low, high ) {\r\n\r\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t\t},\r\n\r\n\t\t// Random float from <low, high> interval\r\n\r\n\t\trandFloat: function ( low, high ) {\r\n\r\n\t\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t\t},\r\n\r\n\t\t// Random float from <-range/2, range/2> interval\r\n\r\n\t\trandFloatSpread: function ( range ) {\r\n\r\n\t\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t\t},\r\n\r\n\t\tdegToRad: function ( degrees ) {\r\n\r\n\t\t\treturn degrees * _Math.DEG2RAD;\r\n\r\n\t\t},\r\n\r\n\t\tradToDeg: function ( radians ) {\r\n\r\n\t\t\treturn radians * _Math.RAD2DEG;\r\n\r\n\t\t},\r\n\r\n\t\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t\t},\r\n\r\n\t\tceilPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloorPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\r\n\tfunction Vector2( x, y ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( Vector2.prototype, {\r\n\r\n\t\t\"width\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.x = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t\"height\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.y = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector2.prototype, {\r\n\r\n\t\tisVector2: true,\r\n\r\n\t\tset: function ( x, y ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v ) {\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function () {\r\n\r\n\t\t\tvar min = new Vector2();\r\n\t\t\tvar max = new Vector2();\r\n\r\n\t\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\t\tmin.set( minVal, minVal );\r\n\t\t\t\tmax.set( maxVal, maxVal );\r\n\r\n\t\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tangle: function () {\r\n\r\n\t\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\t\tvar angle = Math.atan2( this.y, this.x );\r\n\r\n\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\r\n\r\n\t\t\treturn angle;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\t\treturn dx * dx + dy * dy;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateAround: function ( center, angle ) {\r\n\r\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\t\tvar x = this.x - center.x;\r\n\t\t\tvar y = this.y - center.y;\r\n\r\n\t\t\tthis.x = x * c - y * s + center.x;\r\n\t\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author jordi_ros / http://plattsoft.com\r\n\t * @author D1plo1d / http://github.com/D1plo1d\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author timknip / http://www.floorplanner.com/\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Matrix4() {\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( arguments.length > 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Matrix4.prototype, {\r\n\r\n\t\tisMatrix4: true,\r\n\r\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tidentity: function () {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, 1, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyPosition: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements, me = m.elements;\r\n\r\n\t\t\tte[ 12 ] = me[ 12 ];\r\n\t\t\tte[ 13 ] = me[ 13 ];\r\n\t\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\tthis.set(\r\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractRotation: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function extractRotation( m ) {\r\n\r\n\t\t\t\t// this method does not support reflection matrices\r\n\r\n\t\t\t\tvar te = this.elements;\r\n\t\t\t\tvar me = m.elements;\r\n\r\n\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\t\tte[ 12 ] = 0;\r\n\t\t\t\tte[ 13 ] = 0;\r\n\t\t\t\tte[ 14 ] = 0;\r\n\t\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - c * f;\r\n\t\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\t\tte[ 1 ] = a * f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\t\tte[ 4 ] = - a * f;\r\n\t\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\t\tte[ 2 ] = - a * d;\r\n\t\t\t\tte[ 6 ] = b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\t\tte[ 1 ] = c * f;\r\n\t\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\t\tte[ 2 ] = - d;\r\n\t\t\t\tte[ 6 ] = b * c;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\t\tte[ 1 ] = f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\t\tte[ 2 ] = - d * e;\r\n\t\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - f;\r\n\t\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\t\tte[ 6 ] = b * e;\r\n\t\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bottom row\r\n\t\t\tte[ 3 ] = 0;\r\n\t\t\tte[ 7 ] = 0;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\t// last column\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationFromQuaternion: function () {\r\n\r\n\t\t\tvar zero = new Vector3( 0, 0, 0 );\r\n\t\t\tvar one = new Vector3( 1, 1, 1 );\r\n\r\n\t\t\treturn function makeRotationFromQuaternion( q ) {\r\n\r\n\t\t\t\treturn this.compose( zero, q, one );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tlookAt: function () {\r\n\r\n\t\t\tvar x = new Vector3();\r\n\t\t\tvar y = new Vector3();\r\n\t\t\tvar z = new Vector3();\r\n\r\n\t\t\treturn function lookAt( eye, target, up ) {\r\n\r\n\t\t\t\tvar te = this.elements;\r\n\r\n\t\t\t\tz.subVectors( eye, target );\r\n\r\n\t\t\t\tif ( z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t\t\tz.z = 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tz.normalize();\r\n\t\t\t\tx.crossVectors( up, z );\r\n\r\n\t\t\t\tif ( x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t\t// up and z are parallel\r\n\r\n\t\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t\t\tz.x += 0.0001;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tz.z += 0.0001;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tz.normalize();\r\n\t\t\t\t\tx.crossVectors( up, z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tx.normalize();\r\n\t\t\t\ty.crossVectors( z, x );\r\n\r\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\r\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\r\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tmultiply: function ( m, n ) {\r\n\r\n\t\t\tif ( n !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyToBufferAttribute: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function applyToBufferAttribute( attribute ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tv1.x = attribute.getX( i );\r\n\t\t\t\t\tv1.y = attribute.getY( i );\r\n\t\t\t\t\tv1.z = attribute.getZ( i );\r\n\r\n\t\t\t\t\tv1.applyMatrix4( this );\r\n\r\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn attribute;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tdeterminant: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t\t//TODO: make this more efficient\r\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\t\treturn (\r\n\t\t\t\tn41 * (\r\n\t\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t\t - n12 * n23 * n34\r\n\t\t\t\t) +\r\n\t\t\t\tn42 * (\r\n\t\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t\t - n14 * n23 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn43 * (\r\n\t\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t\t - n12 * n24 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn44 * (\r\n\t\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t\t + n12 * n23 * n31\r\n\t\t\t\t)\r\n\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\ttranspose: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar tmp;\r\n\r\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPosition: function ( v ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 12 ] = v.x;\r\n\t\t\tte[ 13 ] = v.y;\r\n\t\t\tte[ 14 ] = v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\r\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\t\tvar te = this.elements,\r\n\t\t\t\tme = m.elements,\r\n\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\r\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.identity();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar detInv = 1 / det;\r\n\r\n\t\t\tte[ 0 ] = t11 * detInv;\r\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 4 ] = t12 * detInv;\r\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 8 ] = t13 * detInv;\r\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 12 ] = t14 * detInv;\r\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( v ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t\t},\r\n\r\n\t\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x,\r\n\t\t\t\t0, 1, 0, y,\r\n\t\t\t\t0, 0, 1, z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationX: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, c, - s, 0,\r\n\t\t\t\t0, s, c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationY: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t c, 0, s, 0,\r\n\t\t\t\t 0, 1, 0, 0,\r\n\t\t\t\t- s, 0, c, 0,\r\n\t\t\t\t 0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tc, - s, 0, 0,\r\n\t\t\t\ts, c, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\t\tvar c = Math.cos( angle );\r\n\t\t\tvar s = Math.sin( angle );\r\n\t\t\tvar t = 1 - c;\r\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\t return this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tx, 0, 0, 0,\r\n\t\t\t\t0, y, 0, 0,\r\n\t\t\t\t0, 0, z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeShear: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, y, z, 0,\r\n\t\t\t\tx, 1, z, 0,\r\n\t\t\t\tx, y, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t\t        te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t\t        te[ 1 ] = ( xy + wz ) * sx;\r\n\t\t        te[ 2 ] = ( xz - wy ) * sx;\r\n\t\t        te[ 3 ] = 0;\r\n\r\n\t\t        te[ 4 ] = ( xy - wz ) * sy;\r\n\t\t        te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t\t        te[ 6 ] = ( yz + wx ) * sy;\r\n\t\t        te[ 7 ] = 0;\r\n\r\n\t\t        te[ 8 ] = ( xz + wy ) * sz;\r\n\t\t        te[ 9 ] = ( yz - wx ) * sz;\r\n\t\t        te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t\t        te[ 11 ] = 0;\r\n\r\n\t\t        te[ 12 ] = position.x;\r\n\t\t        te[ 13 ] = position.y;\r\n\t\t        te[ 14 ] = position.z;\r\n\t\t        te[ 15 ] = 1;\r\n\r\n\t\t        return this;\r\n\r\n\t\t},\r\n\r\n\t\tdecompose: function () {\r\n\r\n\t\t\tvar vector = new Vector3();\r\n\t\t\tvar matrix = new Matrix4();\r\n\r\n\t\t\treturn function decompose( position, quaternion, scale ) {\r\n\r\n\t\t\t\tvar te = this.elements;\r\n\r\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\t\tvar det = this.determinant();\r\n\t\t\t\tif ( det < 0 ) sx = - sx;\r\n\r\n\t\t\t\tposition.x = te[ 12 ];\r\n\t\t\t\tposition.y = te[ 13 ];\r\n\t\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t\t// scale the rotation part\r\n\t\t\t\tmatrix.copy( this );\r\n\r\n\t\t\t\tvar invSX = 1 / sx;\r\n\t\t\t\tvar invSY = 1 / sy;\r\n\t\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\r\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\r\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\r\n\r\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\r\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\r\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\r\n\r\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\r\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\r\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\r\n\r\n\t\t\t\tscale.x = sx;\r\n\t\t\t\tscale.y = sy;\r\n\t\t\t\tscale.z = sz;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\t\tif ( far === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = 2 * near / ( right - left );\r\n\t\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\t\tvar a = ( right + left ) / ( right - left );\r\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar w = 1.0 / ( right - left );\r\n\t\t\tvar h = 1.0 / ( top - bottom );\r\n\t\t\tvar p = 1.0 / ( far - near );\r\n\r\n\t\t\tvar x = ( right + left ) * w;\r\n\t\t\tvar y = ( top + bottom ) * h;\r\n\t\t\tvar z = ( far + near ) * p;\r\n\r\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( matrix ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Quaternion( x, y, z, w ) {\r\n\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n\t}\r\n\r\n\tObject.assign( Quaternion, {\r\n\r\n\t\tslerp: function ( qa, qb, qm, t ) {\r\n\r\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n\t\t},\r\n\r\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\r\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\t\tvar s = 1 - t,\r\n\r\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar tDir = t * dir;\r\n\r\n\t\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\t\tx0 *= f;\r\n\t\t\t\t\ty0 *= f;\r\n\t\t\t\t\tz0 *= f;\r\n\t\t\t\t\tw0 *= f;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdst[ dstOffset ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( Quaternion.prototype, {\r\n\r\n\t\tx: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._x = value;\r\n\t\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ty: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._y = value;\r\n\t\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tz: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._z = value;\r\n\t\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tw: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._w;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._w = value;\r\n\t\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Quaternion.prototype, {\r\n\r\n\t\tset: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._w = w;\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( quaternion ) {\r\n\r\n\t\t\tthis._x = quaternion.x;\r\n\t\t\tthis._y = quaternion.y;\r\n\t\t\tthis._z = quaternion.z;\r\n\t\t\tthis._w = quaternion.w;\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\r\n\r\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\t\tvar cos = Math.cos;\r\n\t\t\tvar sin = Math.sin;\r\n\r\n\t\t\tvar c1 = cos( x / 2 );\r\n\t\t\tvar c2 = cos( y / 2 );\r\n\t\t\tvar c3 = cos( z / 2 );\r\n\r\n\t\t\tvar s1 = sin( x / 2 );\r\n\t\t\tvar s2 = sin( y / 2 );\r\n\t\t\tvar s3 = sin( z / 2 );\r\n\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t\t// assumes axis is normalized\r\n\r\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\t\tthis._x = axis.x * s;\r\n\t\t\tthis._y = axis.y * s;\r\n\t\t\tthis._z = axis.z * s;\r\n\t\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar te = m.elements,\r\n\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\t\ts;\r\n\r\n\t\t\tif ( trace > 0 ) {\r\n\r\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\t\tthis._w = 0.25 / s;\r\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\t\tthis._x = 0.25 * s;\r\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._y = 0.25 * s;\r\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromUnitVectors: function () {\r\n\r\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\t\t\tvar r;\r\n\r\n\t\t\tvar EPS = 0.000001;\r\n\r\n\t\t\treturn function setFromUnitVectors( vFrom, vTo ) {\r\n\r\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\r\n\r\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\t\tr = 0;\r\n\r\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._x = v1.x;\r\n\t\t\t\tthis._y = v1.y;\r\n\t\t\t\tthis._z = v1.z;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t\treturn this.normalize();\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tangleTo: function ( q ) {\r\n\r\n\t\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t\t},\r\n\r\n\t\trotateTowards: function ( q, step ) {\r\n\r\n\t\t\tvar angle = this.angleTo( q );\r\n\r\n\t\t\tif ( angle === 0 ) return this;\r\n\r\n\t\t\tvar t = Math.min( 1, step / angle );\r\n\r\n\t\t\tthis.slerp( q, t );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tinverse: function () {\r\n\r\n\t\t\t// quaternion is assumed to have unit length\r\n\r\n\t\t\treturn this.conjugate();\r\n\r\n\t\t},\r\n\r\n\t\tconjugate: function () {\r\n\r\n\t\t\tthis._x *= - 1;\r\n\t\t\tthis._y *= - 1;\r\n\t\t\tthis._z *= - 1;\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\tvar l = this.length();\r\n\r\n\t\t\tif ( l === 0 ) {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl = 1 / l;\r\n\r\n\t\t\t\tthis._x = this._x * l;\r\n\t\t\t\tthis._y = this._y * l;\r\n\t\t\t\tthis._z = this._z * l;\r\n\t\t\t\tthis._w = this._w * l;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( q, p ) {\r\n\r\n\t\t\tif ( p !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( q ) {\r\n\r\n\t\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tslerp: function ( qb, t ) {\r\n\r\n\t\t\tif ( t === 0 ) return this;\r\n\t\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\t\tthis._w = - qb._w;\r\n\t\t\t\tthis._x = - qb._x;\r\n\t\t\t\tthis._y = - qb._y;\r\n\t\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.copy( qb );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\t\tthis._w = w;\r\n\t\t\t\tthis._x = x;\r\n\t\t\t\tthis._y = y;\r\n\t\t\t\tthis._z = z;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\t\tvar s = 1 - t;\r\n\t\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\t\treturn this.normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( quaternion ) {\r\n\r\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis._x = array[ offset ];\r\n\t\t\tthis._y = array[ offset + 1 ];\r\n\t\t\tthis._z = array[ offset + 2 ];\r\n\t\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tonChange: function ( callback ) {\r\n\r\n\t\t\tthis.onChangeCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tonChangeCallback: function () {}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author kile / http://kile.stravaganza.org/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Vector3( x, y, z ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Vector3.prototype, {\r\n\r\n\t\tisVector3: true,\r\n\r\n\t\tset: function ( x, y, z ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( z ) {\r\n\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\t\t\tthis.z *= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x * b.x;\r\n\t\t\tthis.y = a.y * b.y;\r\n\t\t\tthis.z = a.z * b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyEuler: function () {\r\n\r\n\t\t\tvar quaternion = new Quaternion();\r\n\r\n\t\t\treturn function applyEuler( euler ) {\r\n\r\n\t\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tapplyAxisAngle: function () {\r\n\r\n\t\t\tvar quaternion = new Quaternion();\r\n\r\n\t\t\treturn function applyAxisAngle( axis, angle ) {\r\n\r\n\t\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyQuaternion: function ( q ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t\t// calculate quat * vector\r\n\r\n\t\t\tvar ix = qw * x + qy * z - qz * y;\r\n\t\t\tvar iy = qw * y + qz * x - qx * z;\r\n\t\t\tvar iz = qw * z + qx * y - qy * x;\r\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t\t// calculate result * inverse quat\r\n\r\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tproject: function ( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\tunproject: function () {\r\n\r\n\t\t\tvar matrix = new Matrix4();\r\n\r\n\t\t\treturn function unproject( camera ) {\r\n\r\n\t\t\t\treturn this.applyMatrix4( matrix.getInverse( camera.projectionMatrix ) ).applyMatrix4( camera.matrixWorld );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttransformDirection: function ( m ) {\r\n\r\n\t\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t\t// vector interpreted as a direction\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\t\t\tthis.z /= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function () {\r\n\r\n\t\t\tvar min = new Vector3();\r\n\t\t\tvar max = new Vector3();\r\n\r\n\t\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\t\tmin.set( minVal, minVal, minVal );\r\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\r\n\r\n\t\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t\t},\r\n\r\n\t\t// TODO lengthSquared?\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.crossVectors( this, v );\r\n\r\n\t\t},\r\n\r\n\t\tcrossVectors: function ( a, b ) {\r\n\r\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\t\tthis.x = ay * bz - az * by;\r\n\t\t\tthis.y = az * bx - ax * bz;\r\n\t\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tprojectOnVector: function ( vector ) {\r\n\r\n\t\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\r\n\r\n\t\t\treturn this.copy( vector ).multiplyScalar( scalar );\r\n\r\n\t\t},\r\n\r\n\t\tprojectOnPlane: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function projectOnPlane( planeNormal ) {\r\n\r\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\t\treturn this.sub( v1 );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\treflect: function () {\r\n\r\n\t\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t\t// normal is assumed to have unit length\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function reflect( normal ) {\r\n\r\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tangleTo: function ( v ) {\r\n\r\n\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\r\n\r\n\t\t\t// clamp, to handle numerical problems\r\n\r\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromSpherical: function ( s ) {\r\n\r\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\r\n\r\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCylindrical: function ( c ) {\r\n\r\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\r\n\r\n\t\t\tthis.x = radius * Math.sin( theta );\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 12 ];\r\n\t\t\tthis.y = e[ 13 ];\r\n\t\t\tthis.z = e[ 14 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tthis.x = sx;\r\n\t\t\tthis.y = sy;\r\n\t\t\tthis.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixColumn: function ( m, index ) {\r\n\r\n\t\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\t\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction Matrix3() {\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( arguments.length > 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Matrix3.prototype, {\r\n\r\n\t\tisMatrix3: true,\r\n\r\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tidentity: function () {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0,\r\n\t\t\t\t0, 1, 0,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\r\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\r\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrix4: function ( m ) {\r\n\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\r\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\r\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyToBufferAttribute: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function applyToBufferAttribute( attribute ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tv1.x = attribute.getX( i );\r\n\t\t\t\t\tv1.y = attribute.getY( i );\r\n\t\t\t\t\tv1.z = attribute.getZ( i );\r\n\r\n\t\t\t\t\tv1.applyMatrix3( this );\r\n\r\n\t\t\t\t\tattribute.setXYZ( i, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn attribute;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tmultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\r\n\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\r\n\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdeterminant: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t\t},\r\n\r\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\r\n\r\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar me = matrix.elements,\r\n\t\t\t\tte = this.elements,\r\n\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\r\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\r\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\r\n\r\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.identity();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar detInv = 1 / det;\r\n\r\n\t\t\tte[ 0 ] = t11 * detInv;\r\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\t\tte[ 3 ] = t12 * detInv;\r\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\t\tte[ 6 ] = t13 * detInv;\r\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranspose: function () {\r\n\r\n\t\t\tvar tmp, m = this.elements;\r\n\r\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetNormalMatrix: function ( matrix4 ) {\r\n\r\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\r\n\r\n\t\t},\r\n\r\n\t\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\t\tvar m = this.elements;\r\n\r\n\t\t\tr[ 0 ] = m[ 0 ];\r\n\t\t\tr[ 1 ] = m[ 3 ];\r\n\t\t\tr[ 2 ] = m[ 6 ];\r\n\t\t\tr[ 3 ] = m[ 1 ];\r\n\t\t\tr[ 4 ] = m[ 4 ];\r\n\t\t\tr[ 5 ] = m[ 7 ];\r\n\t\t\tr[ 6 ] = m[ 2 ];\r\n\t\t\tr[ 7 ] = m[ 5 ];\r\n\t\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\t\t\tvar c = Math.cos( rotation );\r\n\t\t\tvar s = Math.sin( rotation );\r\n\r\n\t\t\tthis.set(\r\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t\t\t0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( sx, sy ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\r\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotate: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta );\r\n\t\t\tvar s = Math.sin( theta );\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\r\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\r\n\r\n\t\t\tte[ 0 ] = c * a11 + s * a21;\r\n\t\t\tte[ 3 ] = c * a12 + s * a22;\r\n\t\t\tte[ 6 ] = c * a13 + s * a23;\r\n\r\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\r\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\r\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( tx, ty ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\r\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( matrix ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\r\n\tvar ImageUtils = {\r\n\r\n\t\tgetDataURL: function ( image ) {\r\n\r\n\t\t\tvar canvas;\r\n\r\n\t\t\tif ( image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\t\tcanvas = image;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcanvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\r\n\t\t\t\tcanvas.width = image.width;\r\n\t\t\t\tcanvas.height = image.height;\r\n\r\n\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\r\n\t\t\t\tif ( image instanceof ImageData ) {\r\n\r\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\r\n\tvar textureId = 0;\r\n\r\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\r\n\t\tthis.mipmaps = [];\r\n\r\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\r\n\r\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\r\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\r\n\r\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\r\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\r\n\r\n\t\tthis.offset = new Vector2( 0, 0 );\r\n\t\tthis.repeat = new Vector2( 1, 1 );\r\n\t\tthis.center = new Vector2( 0, 0 );\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.matrixAutoUpdate = true;\r\n\t\tthis.matrix = new Matrix3();\r\n\r\n\t\tthis.generateMipmaps = true;\r\n\t\tthis.premultiplyAlpha = false;\r\n\t\tthis.flipY = true;\r\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\r\n\t\t//\r\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\r\n\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\r\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\r\n\r\n\t\tthis.version = 0;\r\n\t\tthis.onUpdate = null;\r\n\r\n\t}\r\n\r\n\tTexture.DEFAULT_IMAGE = undefined;\r\n\tTexture.DEFAULT_MAPPING = UVMapping;\r\n\r\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Texture,\r\n\r\n\t\tisTexture: true,\r\n\r\n\t\tupdateMatrix: function () {\r\n\r\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.image = source.image;\r\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\t\tthis.mapping = source.mapping;\r\n\r\n\t\t\tthis.wrapS = source.wrapS;\r\n\t\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\t\tthis.magFilter = source.magFilter;\r\n\t\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\t\tthis.format = source.format;\r\n\t\t\tthis.type = source.type;\r\n\r\n\t\t\tthis.offset.copy( source.offset );\r\n\t\t\tthis.repeat.copy( source.repeat );\r\n\t\t\tthis.center.copy( source.center );\r\n\t\t\tthis.rotation = source.rotation;\r\n\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\t\tthis.matrix.copy( source.matrix );\r\n\r\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\t\tthis.flipY = source.flipY;\r\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\t\tthis.encoding = source.encoding;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar output = {\r\n\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Texture',\r\n\t\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t\t},\r\n\r\n\t\t\t\tuuid: this.uuid,\r\n\t\t\t\tname: this.name,\r\n\r\n\t\t\t\tmapping: this.mapping,\r\n\r\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\r\n\t\t\t\trotation: this.rotation,\r\n\r\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\t\tformat: this.format,\r\n\t\t\t\tminFilter: this.minFilter,\r\n\t\t\t\tmagFilter: this.magFilter,\r\n\t\t\t\tanisotropy: this.anisotropy,\r\n\r\n\t\t\t\tflipY: this.flipY\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( this.image !== undefined ) {\r\n\r\n\t\t\t\t// TODO: Move to THREE.Image\r\n\r\n\t\t\t\tvar image = this.image;\r\n\r\n\t\t\t\tif ( image.uuid === undefined ) {\r\n\r\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\tvar url;\r\n\r\n\t\t\t\t\tif ( Array.isArray( image ) ) {\r\n\r\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\r\n\r\n\t\t\t\t\t\turl = [];\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// process single image\r\n\r\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmeta.images[ image.uuid ] = {\r\n\t\t\t\t\t\tuuid: image.uuid,\r\n\t\t\t\t\t\turl: url\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\toutput.image = image.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t},\r\n\r\n\t\ttransformUv: function ( uv ) {\r\n\r\n\t\t\tif ( this.mapping !== UVMapping ) return;\r\n\r\n\t\t\tuv.applyMatrix3( this.matrix );\r\n\r\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.flipY ) {\r\n\r\n\t\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) this.version ++;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Vector4( x, y, z, w ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\t\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n\t}\r\n\r\n\tObject.assign( Vector4.prototype, {\r\n\r\n\t\tisVector4: true,\r\n\r\n\t\tset: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\t\t\tthis.w = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\t\t\tthis.w = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( z ) {\r\n\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( w ) {\r\n\r\n\t\t\tthis.w = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tcase 3: this.w = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tcase 3: return this.w;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\t\t\tthis.w += v.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\t\t\tthis.w += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\t\t\tthis.w = a.w + b.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\t\t\tthis.w += v.w * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\t\t\tthis.w -= v.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\t\t\tthis.w -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\t\t\tthis.w = a.w - b.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\t\t\tthis.w *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t\t// q is assumed to be normalized\r\n\r\n\t\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t\tthis.x = 1;\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = q.x / s;\r\n\t\t\t\tthis.y = q.y / s;\r\n\t\t\t\tthis.z = q.z / s;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\t\tte = m.elements,\r\n\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t\t// singularity found\r\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\t\tangle = Math.PI;\r\n\r\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\t\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\t\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function () {\r\n\r\n\t\t\tvar min, max;\r\n\r\n\t\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\t\tmin = new Vector4();\r\n\t\t\t\t\tmax = new Vector4();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\r\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\r\n\r\n\t\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\t\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\t\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\t\t\tthis.w = Math.round( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\t\t\tthis.w = - this.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\t\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\t\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\t\t\tthis.z = attribute.getZ( index );\r\n\t\t\tthis.w = attribute.getW( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author szimek / https://github.com/szimek/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author Marius Kintel / https://github.com/kintel\r\n\t */\r\n\r\n\t/*\r\n\t In options, we can specify:\r\n\t * Texture parameters for an auto-generated target texture\r\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n\t*/\r\n\tfunction WebGLRenderTarget( width, height, options ) {\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\r\n\t\tthis.scissorTest = false;\r\n\r\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\r\n\r\n\t\toptions = options || {};\r\n\r\n\t\tif ( options.minFilter === undefined ) options.minFilter = LinearFilter;\r\n\r\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\r\n\r\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : true;\r\n\r\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\r\n\r\n\t}\r\n\r\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: WebGLRenderTarget,\r\n\r\n\t\tisWebGLRenderTarget: true,\r\n\r\n\t\tsetSize: function ( width, height ) {\r\n\r\n\t\t\tif ( this.width !== width || this.height !== height ) {\r\n\r\n\t\t\t\tthis.width = width;\r\n\t\t\t\tthis.height = height;\r\n\r\n\t\t\t\tthis.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\t\tthis.scissor.set( 0, 0, width, height );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.width = source.width;\r\n\t\t\tthis.height = source.height;\r\n\r\n\t\t\tthis.viewport.copy( source.viewport );\r\n\r\n\t\t\tthis.texture = source.texture.clone();\r\n\r\n\t\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\t\t\tthis.depthTexture = source.depthTexture;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com\r\n\t */\r\n\r\n\tfunction WebGLRenderTargetCube( width, height, options ) {\r\n\r\n\t\tWebGLRenderTarget.call( this, width, height, options );\r\n\r\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\r\n\t\tthis.activeMipMapLevel = 0;\r\n\r\n\t}\r\n\r\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\r\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\r\n\r\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.image = { data: data, width: width, height: height };\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\t\tthis.unpackAlignment = 1;\r\n\r\n\t}\r\n\r\n\tDataTexture.prototype = Object.create( Texture.prototype );\r\n\tDataTexture.prototype.constructor = DataTexture;\r\n\r\n\tDataTexture.prototype.isDataTexture = true;\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Box3( min, max ) {\r\n\r\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\r\n\r\n\t}\r\n\r\n\tObject.assign( Box3.prototype, {\r\n\r\n\t\tisBox3: true,\r\n\r\n\t\tset: function ( min, max ) {\r\n\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromArray: function ( array ) {\r\n\r\n\t\t\tvar minX = + Infinity;\r\n\t\t\tvar minY = + Infinity;\r\n\t\t\tvar minZ = + Infinity;\r\n\r\n\t\t\tvar maxX = - Infinity;\r\n\t\t\tvar maxY = - Infinity;\r\n\t\t\tvar maxZ = - Infinity;\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar x = array[ i ];\r\n\t\t\t\tvar y = array[ i + 1 ];\r\n\t\t\t\tvar z = array[ i + 2 ];\r\n\r\n\t\t\t\tif ( x < minX ) minX = x;\r\n\t\t\t\tif ( y < minY ) minY = y;\r\n\t\t\t\tif ( z < minZ ) minZ = z;\r\n\r\n\t\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.min.set( minX, minY, minZ );\r\n\t\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromBufferAttribute: function ( attribute ) {\r\n\r\n\t\t\tvar minX = + Infinity;\r\n\t\t\tvar minY = + Infinity;\r\n\t\t\tvar minZ = + Infinity;\r\n\r\n\t\t\tvar maxX = - Infinity;\r\n\t\t\tvar maxY = - Infinity;\r\n\t\t\tvar maxZ = - Infinity;\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar x = attribute.getX( i );\r\n\t\t\t\tvar y = attribute.getY( i );\r\n\t\t\t\tvar z = attribute.getZ( i );\r\n\r\n\t\t\t\tif ( x < minX ) minX = x;\r\n\t\t\t\tif ( y < minY ) minY = y;\r\n\t\t\t\tif ( z < minZ ) minZ = z;\r\n\r\n\t\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.min.set( minX, minY, minZ );\r\n\t\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCenterAndSize: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function setFromCenterAndSize( center, size ) {\r\n\r\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tsetFromObject: function ( object ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\treturn this.expandByObject( object );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( box ) {\r\n\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeEmpty: function () {\r\n\r\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tisEmpty: function () {\r\n\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tgetSize: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t\t},\r\n\r\n\t\texpandByPoint: function ( point ) {\r\n\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByVector: function ( vector ) {\r\n\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByObject: function () {\r\n\r\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\t\tvar scope, i, l;\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\tfunction traverse( node ) {\r\n\r\n\t\t\t\tvar geometry = node.geometry;\r\n\r\n\t\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\t\tif ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\t\t\tfor ( i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\r\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\t\tvar attribute = geometry.attributes.position;\r\n\r\n\t\t\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\t\t\tfor ( i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tv1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn function expandByObject( object ) {\r\n\r\n\t\t\t\tscope = this;\r\n\r\n\t\t\t\tobject.updateMatrixWorld( true );\r\n\r\n\t\t\t\tobject.traverse( traverse );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\r\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsBox: function ( box ) {\r\n\r\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\r\n\r\n\t\t},\r\n\r\n\t\tgetParameter: function ( point, target ) {\r\n\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\t// using 6 splitting planes to rule out intersections.\r\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: ( function () {\r\n\r\n\t\t\tvar closestPoint = new Vector3();\r\n\r\n\t\t\treturn function intersectsSphere( sphere ) {\r\n\r\n\t\t\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\r\n\r\n\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t\t};\r\n\r\n\t\t} )(),\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\t\tvar min, max;\r\n\r\n\t\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn ( min <= plane.constant && max >= plane.constant );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsTriangle: ( function () {\r\n\r\n\t\t\t// triangle centered vertices\r\n\t\t\tvar v0 = new Vector3();\r\n\t\t\tvar v1 = new Vector3();\r\n\t\t\tvar v2 = new Vector3();\r\n\r\n\t\t\t// triangle edge vectors\r\n\t\t\tvar f0 = new Vector3();\r\n\t\t\tvar f1 = new Vector3();\r\n\t\t\tvar f2 = new Vector3();\r\n\r\n\t\t\tvar testAxis = new Vector3();\r\n\r\n\t\t\tvar center = new Vector3();\r\n\t\t\tvar extents = new Vector3();\r\n\r\n\t\t\tvar triangleNormal = new Vector3();\r\n\r\n\t\t\tfunction satForAxes( axes ) {\r\n\r\n\t\t\t\tvar i, j;\r\n\r\n\t\t\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\r\n\r\n\t\t\t\t\ttestAxis.fromArray( axes, i );\r\n\t\t\t\t\t// project the aabb onto the seperating axis\r\n\t\t\t\t\tvar r = extents.x * Math.abs( testAxis.x ) + extents.y * Math.abs( testAxis.y ) + extents.z * Math.abs( testAxis.z );\r\n\t\t\t\t\t// project all 3 vertices of the triangle onto the seperating axis\r\n\t\t\t\t\tvar p0 = v0.dot( testAxis );\r\n\t\t\t\t\tvar p1 = v1.dot( testAxis );\r\n\t\t\t\t\tvar p2 = v2.dot( testAxis );\r\n\t\t\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\t\t\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\r\n\r\n\t\t\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\r\n\t\t\t\t\t\t// the axis is seperating and we can exit\r\n\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn function intersectsTriangle( triangle ) {\r\n\r\n\t\t\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// compute box center and extents\r\n\t\t\t\tthis.getCenter( center );\r\n\t\t\t\textents.subVectors( this.max, center );\r\n\r\n\t\t\t\t// translate triangle to aabb origin\r\n\t\t\t\tv0.subVectors( triangle.a, center );\r\n\t\t\t\tv1.subVectors( triangle.b, center );\r\n\t\t\t\tv2.subVectors( triangle.c, center );\r\n\r\n\t\t\t\t// compute edge vectors for triangle\r\n\t\t\t\tf0.subVectors( v1, v0 );\r\n\t\t\t\tf1.subVectors( v2, v1 );\r\n\t\t\t\tf2.subVectors( v0, v2 );\r\n\r\n\t\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n\t\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n\t\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\t\t\t\tvar axes = [\r\n\t\t\t\t\t0, - f0.z, f0.y, 0, - f1.z, f1.y, 0, - f2.z, f2.y,\r\n\t\t\t\t\tf0.z, 0, - f0.x, f1.z, 0, - f1.x, f2.z, 0, - f2.x,\r\n\t\t\t\t\t- f0.y, f0.x, 0, - f1.y, f1.x, 0, - f2.y, f2.x, 0\r\n\t\t\t\t];\r\n\t\t\t\tif ( ! satForAxes( axes ) ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// test 3 face normals from the aabb\r\n\t\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\r\n\t\t\t\tif ( ! satForAxes( axes ) ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// finally testing the face normal of the triangle\r\n\t\t\t\t// use already existing triangle edge vectors here\r\n\t\t\t\ttriangleNormal.crossVectors( f0, f1 );\r\n\t\t\t\taxes = [ triangleNormal.x, triangleNormal.y, triangleNormal.z ];\r\n\t\t\t\treturn satForAxes( axes );\r\n\r\n\t\t\t};\r\n\r\n\t\t} )(),\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function distanceToPoint( point ) {\r\n\r\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tgetBoundingSphere: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function getBoundingSphere( target ) {\r\n\r\n\t\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Box3: .getBoundingSphere() target is now required' );\r\n\t\t\t\t\ttarget = new Sphere();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.getCenter( target.center );\r\n\r\n\t\t\t\ttarget.radius = this.getSize( v1 ).length() * 0.5;\r\n\r\n\t\t\t\treturn target;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tintersect: function ( box ) {\r\n\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\r\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\t\tif ( this.isEmpty() ) this.makeEmpty();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tunion: function ( box ) {\r\n\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function () {\r\n\r\n\t\t\tvar points = [\r\n\t\t\t\tnew Vector3(),\r\n\t\t\t\tnew Vector3(),\r\n\t\t\t\tnew Vector3(),\r\n\t\t\t\tnew Vector3(),\r\n\t\t\t\tnew Vector3(),\r\n\t\t\t\tnew Vector3(),\r\n\t\t\t\tnew Vector3(),\r\n\t\t\t\tnew Vector3()\r\n\t\t\t];\r\n\r\n\t\t\treturn function applyMatrix4( matrix ) {\r\n\r\n\t\t\t\t// transform of empty box is an empty box.\r\n\t\t\t\tif ( this.isEmpty() ) return this;\r\n\r\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\r\n\r\n\t\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( box ) {\r\n\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Sphere( center, radius ) {\r\n\r\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Sphere.prototype, {\r\n\r\n\t\tset: function ( center, radius ) {\r\n\r\n\t\t\tthis.center.copy( center );\r\n\t\t\tthis.radius = radius;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function () {\r\n\r\n\t\t\tvar box = new Box3();\r\n\r\n\t\t\treturn function setFromPoints( points, optionalCenter ) {\r\n\r\n\t\t\t\tvar center = this.center;\r\n\r\n\t\t\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbox.setFromPoints( points ).getCenter( center );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( sphere ) {\r\n\r\n\t\t\tthis.center.copy( sphere.center );\r\n\t\t\tthis.radius = sphere.radius;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tempty: function () {\r\n\r\n\t\t\treturn ( this.radius <= 0 );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsSphere( this );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.copy( point );\r\n\r\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\t\ttarget.sub( this.center ).normalize();\r\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetBoundingBox: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\r\n\t\t\t\ttarget = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.set( this.center, this.center );\r\n\t\t\ttarget.expandByScalar( this.radius );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\tthis.center.applyMatrix4( matrix );\r\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.center.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( sphere ) {\r\n\r\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Plane( normal, constant ) {\r\n\r\n\t\t// normal is assumed to be normalized\r\n\r\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\r\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Plane.prototype, {\r\n\r\n\t\tset: function ( normal, constant ) {\r\n\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = constant;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.normal.set( x, y, z );\r\n\t\t\tthis.constant = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = - point.dot( this.normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCoplanarPoints: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\t\t\tvar v2 = new Vector3();\r\n\r\n\t\t\treturn function setFromCoplanarPoints( a, b, c ) {\r\n\r\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( plane ) {\r\n\r\n\t\t\tthis.normal.copy( plane.normal );\r\n\t\t\tthis.constant = plane.constant;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.constant *= - 1;\r\n\t\t\tthis.normal.negate();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t\t},\r\n\r\n\t\tprojectPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\r\n\r\n\t\t},\r\n\r\n\t\tintersectLine: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function intersectLine( line, target ) {\r\n\r\n\t\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\r\n\t\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar direction = line.delta( v1 );\r\n\r\n\t\t\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\t\t\treturn target.copy( line.start );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\t\treturn undefined;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\t\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\t\t\treturn undefined;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tintersectsLine: function ( line ) {\r\n\r\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\t\tvar endSign = this.distanceToPoint( line.end );\r\n\r\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsPlane( this );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t\t},\r\n\r\n\t\tcoplanarPoint: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\t\t\tvar m1 = new Matrix3();\r\n\r\n\t\t\treturn function applyMatrix4( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\r\n\r\n\t\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\r\n\r\n\t\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.constant -= offset.dot( this.normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( plane ) {\r\n\r\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tthis.planes = [\r\n\r\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\r\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\r\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\r\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\r\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\r\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tObject.assign( Frustum.prototype, {\r\n\r\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tplanes[ 0 ].copy( p0 );\r\n\t\t\tplanes[ 1 ].copy( p1 );\r\n\t\t\tplanes[ 2 ].copy( p2 );\r\n\t\t\tplanes[ 3 ].copy( p3 );\r\n\t\t\tplanes[ 4 ].copy( p4 );\r\n\t\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( frustum ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrix: function ( m ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar me = m.elements;\r\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsObject: function () {\r\n\r\n\t\t\tvar sphere = new Sphere();\r\n\r\n\t\t\treturn function intersectsObject( object ) {\r\n\r\n\t\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\t\tif ( geometry.boundingSphere === null )\r\n\t\t\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t\t\tsphere.copy( geometry.boundingSphere )\r\n\t\t\t\t\t.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tintersectsSprite: function () {\r\n\r\n\t\t\tvar sphere = new Sphere();\r\n\r\n\t\t\treturn function intersectsSprite( sprite ) {\r\n\r\n\t\t\t\tsphere.center.set( 0, 0, 0 );\r\n\t\t\t\tsphere.radius = 0.7071067811865476;\r\n\t\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar center = sphere.center;\r\n\t\t\tvar negRadius = - sphere.radius;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function () {\r\n\r\n\t\t\tvar p = new Vector3();\r\n\r\n\t\t\treturn function intersectsBox( box ) {\r\n\r\n\t\t\t\tvar planes = this.planes;\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tvar plane = planes[ i ];\r\n\r\n\t\t\t\t\t// corner at max distance\r\n\r\n\t\t\t\t\tp.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t\t\tp.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t\t\tp.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\t\t\tif ( plane.distanceToPoint( p ) < 0 ) {\r\n\r\n\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\r\n\r\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\r\n\r\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\r\n\r\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\r\n\r\n\tvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\r\n\r\n\tvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\r\n\r\n\tvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\r\n\r\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\r\n\r\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\r\n\r\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\r\n\r\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\r\n\r\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\r\n\r\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\r\n\r\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\r\n\r\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\r\n\r\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\n\";\r\n\r\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\r\n\r\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\r\n\r\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\r\n\r\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\r\n\r\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\r\n\r\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\r\n\r\n\tvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\r\n\r\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\r\n\r\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogPosition = mvPosition.xyz;\\n#endif\\n\";\r\n\r\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying vec3 vFogPosition;\\n#endif\\n\";\r\n\r\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\tfloat fogDepth = length( vFogPosition );\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\r\n\r\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying vec3 vFogPosition;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\r\n\r\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\r\n\r\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\r\n\r\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\r\n\r\n\tvar lights_pars_begin = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n\";\r\n\r\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\r\n\r\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\r\n\r\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\r\n\r\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\r\n\r\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\r\n\r\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n#endif\\n\";\r\n\r\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#ifndef STANDARD\\n\\t\\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\r\n\r\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\r\n\r\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n#endif\\n\";\r\n\r\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\r\n\r\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\r\n\r\n\tvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\r\n\r\n\tvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\\n\";\r\n\r\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\r\n\r\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\r\n\r\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\r\n\r\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\r\n\r\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar normal_fragment_maps = \"#ifdef USE_NORMALMAP\\n\\t#ifdef OBJECTSPACE_NORMALMAP\\n\\t\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\t#ifdef FLIP_SIDED\\n\\t\\t\\tnormal = - normal;\\n\\t\\t#endif\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\tnormal = normalize( normalMatrix * normal );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\r\n\r\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\t#ifdef OBJECTSPACE_NORMALMAP\\n\\t\\tuniform mat3 normalMatrix;\\n\\t#else\\n\\t\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\t\\tmapN.xy *= normalScale;\\n\\t\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\treturn normalize( tsn * mapN );\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\r\n\r\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\r\n\r\n\tvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\r\n\r\n\tvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\r\n\r\n\tvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\r\n\r\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\r\n\r\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\r\n\r\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\r\n\r\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\r\n\r\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\r\n\r\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\r\n\r\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\r\n\r\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\r\n\r\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\r\n\r\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\r\n\r\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\r\n\r\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\r\n\r\n\tvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\r\n\r\n\tvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\n\";\r\n\r\n\tvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\r\n\r\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\r\n\r\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\r\n\r\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\r\n\r\n\tvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\\n\";\r\n\r\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\r\n\r\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\";\r\n\r\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\";\r\n\r\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\r\n\r\n\tvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\r\n\r\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\r\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\r\n\r\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\r\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\r\n\r\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\r\n\r\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\r\n\r\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\r\n\r\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\r\n\r\n\tvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\r\n\r\n\tvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\r\n\r\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\r\n\r\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\r\n\r\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\r\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\r\n\r\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\r\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\r\n\r\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\r\n\r\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\r\n\r\n\tvar ShaderChunk = {\r\n\t\talphamap_fragment: alphamap_fragment,\r\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\r\n\t\talphatest_fragment: alphatest_fragment,\r\n\t\taomap_fragment: aomap_fragment,\r\n\t\taomap_pars_fragment: aomap_pars_fragment,\r\n\t\tbegin_vertex: begin_vertex,\r\n\t\tbeginnormal_vertex: beginnormal_vertex,\r\n\t\tbsdfs: bsdfs,\r\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\r\n\t\tclipping_planes_fragment: clipping_planes_fragment,\r\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\r\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\r\n\t\tclipping_planes_vertex: clipping_planes_vertex,\r\n\t\tcolor_fragment: color_fragment,\r\n\t\tcolor_pars_fragment: color_pars_fragment,\r\n\t\tcolor_pars_vertex: color_pars_vertex,\r\n\t\tcolor_vertex: color_vertex,\r\n\t\tcommon: common,\r\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\r\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\r\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\r\n\t\tdisplacementmap_vertex: displacementmap_vertex,\r\n\t\temissivemap_fragment: emissivemap_fragment,\r\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\r\n\t\tencodings_fragment: encodings_fragment,\r\n\t\tencodings_pars_fragment: encodings_pars_fragment,\r\n\t\tenvmap_fragment: envmap_fragment,\r\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\r\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\r\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\r\n\t\tenvmap_vertex: envmap_vertex,\r\n\t\tfog_vertex: fog_vertex,\r\n\t\tfog_pars_vertex: fog_pars_vertex,\r\n\t\tfog_fragment: fog_fragment,\r\n\t\tfog_pars_fragment: fog_pars_fragment,\r\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\r\n\t\tlightmap_fragment: lightmap_fragment,\r\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\r\n\t\tlights_lambert_vertex: lights_lambert_vertex,\r\n\t\tlights_pars_begin: lights_pars_begin,\r\n\t\tlights_phong_fragment: lights_phong_fragment,\r\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\r\n\t\tlights_physical_fragment: lights_physical_fragment,\r\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\r\n\t\tlights_fragment_begin: lights_fragment_begin,\r\n\t\tlights_fragment_maps: lights_fragment_maps,\r\n\t\tlights_fragment_end: lights_fragment_end,\r\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\r\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\r\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\r\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\r\n\t\tmap_fragment: map_fragment,\r\n\t\tmap_pars_fragment: map_pars_fragment,\r\n\t\tmap_particle_fragment: map_particle_fragment,\r\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\r\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\r\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\r\n\t\tmorphnormal_vertex: morphnormal_vertex,\r\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\r\n\t\tmorphtarget_vertex: morphtarget_vertex,\r\n\t\tnormal_fragment_begin: normal_fragment_begin,\r\n\t\tnormal_fragment_maps: normal_fragment_maps,\r\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\r\n\t\tpacking: packing,\r\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\r\n\t\tproject_vertex: project_vertex,\r\n\t\tdithering_fragment: dithering_fragment,\r\n\t\tdithering_pars_fragment: dithering_pars_fragment,\r\n\t\troughnessmap_fragment: roughnessmap_fragment,\r\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\r\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\r\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\r\n\t\tshadowmap_vertex: shadowmap_vertex,\r\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\r\n\t\tskinbase_vertex: skinbase_vertex,\r\n\t\tskinning_pars_vertex: skinning_pars_vertex,\r\n\t\tskinning_vertex: skinning_vertex,\r\n\t\tskinnormal_vertex: skinnormal_vertex,\r\n\t\tspecularmap_fragment: specularmap_fragment,\r\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\r\n\t\ttonemapping_fragment: tonemapping_fragment,\r\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\r\n\t\tuv_pars_fragment: uv_pars_fragment,\r\n\t\tuv_pars_vertex: uv_pars_vertex,\r\n\t\tuv_vertex: uv_vertex,\r\n\t\tuv2_pars_fragment: uv2_pars_fragment,\r\n\t\tuv2_pars_vertex: uv2_pars_vertex,\r\n\t\tuv2_vertex: uv2_vertex,\r\n\t\tworldpos_vertex: worldpos_vertex,\r\n\r\n\t\tcube_frag: cube_frag,\r\n\t\tcube_vert: cube_vert,\r\n\t\tdepth_frag: depth_frag,\r\n\t\tdepth_vert: depth_vert,\r\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\r\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\r\n\t\tequirect_frag: equirect_frag,\r\n\t\tequirect_vert: equirect_vert,\r\n\t\tlinedashed_frag: linedashed_frag,\r\n\t\tlinedashed_vert: linedashed_vert,\r\n\t\tmeshbasic_frag: meshbasic_frag,\r\n\t\tmeshbasic_vert: meshbasic_vert,\r\n\t\tmeshlambert_frag: meshlambert_frag,\r\n\t\tmeshlambert_vert: meshlambert_vert,\r\n\t\tmeshphong_frag: meshphong_frag,\r\n\t\tmeshphong_vert: meshphong_vert,\r\n\t\tmeshphysical_frag: meshphysical_frag,\r\n\t\tmeshphysical_vert: meshphysical_vert,\r\n\t\tnormal_frag: normal_frag,\r\n\t\tnormal_vert: normal_vert,\r\n\t\tpoints_frag: points_frag,\r\n\t\tpoints_vert: points_vert,\r\n\t\tshadow_frag: shadow_frag,\r\n\t\tshadow_vert: shadow_vert,\r\n\t\tsprite_frag: sprite_frag,\r\n\t\tsprite_vert: sprite_vert\r\n\t};\r\n\r\n\t/**\r\n\t * Uniform Utilities\r\n\t */\r\n\r\n\tvar UniformsUtils = {\r\n\r\n\t\tmerge: function ( uniforms ) {\r\n\r\n\t\t\tvar merged = {};\r\n\r\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\r\n\r\n\t\t\t\tfor ( var p in tmp ) {\r\n\r\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn merged;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function ( uniforms_src ) {\r\n\r\n\t\t\tvar uniforms_dst = {};\r\n\r\n\t\t\tfor ( var u in uniforms_src ) {\r\n\r\n\t\t\t\tuniforms_dst[ u ] = {};\r\n\r\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\r\n\r\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\r\n\r\n\t\t\t\t\tif ( parameter_src && ( parameter_src.isColor ||\r\n\t\t\t\t\t\tparameter_src.isMatrix3 || parameter_src.isMatrix4 ||\r\n\t\t\t\t\t\tparameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\r\n\t\t\t\t\t\tparameter_src.isTexture ) ) {\r\n\r\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\r\n\r\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\r\n\r\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn uniforms_dst;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\n\tfunction Color( r, g, b ) {\r\n\r\n\t\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t\t// r is THREE.Color, hex or string\r\n\t\t\treturn this.set( r );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.setRGB( r, g, b );\r\n\r\n\t}\r\n\r\n\tObject.assign( Color.prototype, {\r\n\r\n\t\tisColor: true,\r\n\r\n\t\tr: 1, g: 1, b: 1,\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value && value.isColor ) {\r\n\r\n\t\t\t\tthis.copy( value );\r\n\r\n\t\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\t\tthis.setHex( value );\r\n\r\n\t\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\t\tthis.setStyle( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.r = scalar;\r\n\t\t\tthis.g = scalar;\r\n\t\t\tthis.b = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetHex: function ( hex ) {\r\n\r\n\t\t\thex = Math.floor( hex );\r\n\r\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\t\tthis.r = r;\r\n\t\t\tthis.g = g;\r\n\t\t\tthis.b = b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetHSL: function () {\r\n\r\n\t\t\tfunction hue2rgb( p, q, t ) {\r\n\r\n\t\t\t\tif ( t < 0 ) t += 1;\r\n\t\t\t\tif ( t > 1 ) t -= 1;\r\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\t\t\t\tif ( t < 1 / 2 ) return q;\r\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\t\t\t\treturn p;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn function setHSL( h, s, l ) {\r\n\r\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\t\th = _Math.euclideanModulo( h, 1 );\r\n\t\t\t\ts = _Math.clamp( s, 0, 1 );\r\n\t\t\t\tl = _Math.clamp( l, 0, 1 );\r\n\r\n\t\t\t\tif ( s === 0 ) {\r\n\r\n\t\t\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\t\tvar q = ( 2 * l ) - p;\r\n\r\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tsetStyle: function ( style ) {\r\n\r\n\t\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\t\tif ( string === undefined ) return;\r\n\r\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar m;\r\n\r\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t\t// rgb / hsl\r\n\r\n\t\t\t\tvar color;\r\n\t\t\t\tvar name = m[ 1 ];\r\n\t\t\t\tvar components = m[ 2 ];\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\t\tcase 'rgb':\r\n\t\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'hsl':\r\n\t\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\r\n\t\t\t\t// hex color\r\n\r\n\t\t\t\tvar hex = m[ 1 ];\r\n\t\t\t\tvar size = hex.length;\r\n\r\n\t\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t\t// #ff0\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t\t// #ff0000\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( style && style.length > 0 ) {\r\n\r\n\t\t\t\t// color keywords\r\n\t\t\t\tvar hex = ColorKeywords[ style ];\r\n\r\n\t\t\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t\t\t// red\r\n\t\t\t\t\tthis.setHex( hex );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// unknown color\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( color ) {\r\n\r\n\t\t\tthis.r = color.r;\r\n\t\t\tthis.g = color.g;\r\n\t\t\tthis.b = color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\r\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\r\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\r\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\r\n\r\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\r\n\r\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopySRGBToLinear: function () {\r\n\r\n\t\t\tfunction SRGBToLinear( c ) {\r\n\r\n\t\t\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn function copySRGBToLinear( color ) {\r\n\r\n\t\t\t\tthis.r = SRGBToLinear( color.r );\r\n\t\t\t\tthis.g = SRGBToLinear( color.g );\r\n\t\t\t\tthis.b = SRGBToLinear( color.b );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tcopyLinearToSRGB: function () {\r\n\r\n\t\t\tfunction LinearToSRGB( c ) {\r\n\r\n\t\t\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn function copyLinearToSRGB( color ) {\r\n\r\n\t\t\t\tthis.r = LinearToSRGB( color.r );\r\n\t\t\t\tthis.g = LinearToSRGB( color.g );\r\n\t\t\t\tthis.b = LinearToSRGB( color.b );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tconvertSRGBToLinear: function () {\r\n\r\n\t\t\tthis.copySRGBToLinear( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertLinearToSRGB: function () {\r\n\r\n\t\t\tthis.copyLinearToSRGB( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetHex: function () {\r\n\r\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t\t},\r\n\r\n\t\tgetHexString: function () {\r\n\r\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t\t},\r\n\r\n\t\tgetHSL: function ( target ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\r\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\t\tvar max = Math.max( r, g, b );\r\n\t\t\tvar min = Math.min( r, g, b );\r\n\r\n\t\t\tvar hue, saturation;\r\n\t\t\tvar lightness = ( min + max ) / 2.0;\r\n\r\n\t\t\tif ( min === max ) {\r\n\r\n\t\t\t\thue = 0;\r\n\t\t\t\tsaturation = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar delta = max - min;\r\n\r\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\thue /= 6;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.h = hue;\r\n\t\t\ttarget.s = saturation;\r\n\t\t\ttarget.l = lightness;\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetStyle: function () {\r\n\r\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t\t},\r\n\r\n\t\toffsetHSL: function () {\r\n\r\n\t\t\tvar hsl = {};\r\n\r\n\t\t\treturn function ( h, s, l ) {\r\n\r\n\t\t\t\tthis.getHSL( hsl );\r\n\r\n\t\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\r\n\r\n\t\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tadd: function ( color ) {\r\n\r\n\t\t\tthis.r += color.r;\r\n\t\t\tthis.g += color.g;\r\n\t\t\tthis.b += color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddColors: function ( color1, color2 ) {\r\n\r\n\t\t\tthis.r = color1.r + color2.r;\r\n\t\t\tthis.g = color1.g + color2.g;\r\n\t\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.r += s;\r\n\t\t\tthis.g += s;\r\n\t\t\tthis.b += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( color ) {\r\n\r\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\r\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\r\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( color ) {\r\n\r\n\t\t\tthis.r *= color.r;\r\n\t\t\tthis.g *= color.g;\r\n\t\t\tthis.b *= color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tthis.r *= s;\r\n\t\t\tthis.g *= s;\r\n\t\t\tthis.b *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( color, alpha ) {\r\n\r\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpHSL: function () {\r\n\r\n\t\t\tvar hslA = { h: 0, s: 0, l: 0 };\r\n\t\t\tvar hslB = { h: 0, s: 0, l: 0 };\r\n\r\n\t\t\treturn function lerpHSL( color, alpha ) {\r\n\r\n\t\t\t\tthis.getHSL( hslA );\r\n\t\t\t\tcolor.getHSL( hslB );\r\n\r\n\t\t\t\tvar h = _Math.lerp( hslA.h, hslB.h, alpha );\r\n\t\t\t\tvar s = _Math.lerp( hslA.s, hslB.s, alpha );\r\n\t\t\t\tvar l = _Math.lerp( hslA.l, hslB.l, alpha );\r\n\r\n\t\t\t\tthis.setHSL( h, s, l );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tequals: function ( c ) {\r\n\r\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis.r = array[ offset ];\r\n\t\t\tthis.g = array[ offset + 1 ];\r\n\t\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this.r;\r\n\t\t\tarray[ offset + 1 ] = this.g;\r\n\t\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\treturn this.getHex();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Uniforms library for shared webgl shaders\r\n\t */\r\n\r\n\tvar UniformsLib = {\r\n\r\n\t\tcommon: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\r\n\t\t\tmap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() },\r\n\r\n\t\t\talphaMap: { value: null },\r\n\r\n\t\t},\r\n\r\n\t\tspecularmap: {\r\n\r\n\t\t\tspecularMap: { value: null },\r\n\r\n\t\t},\r\n\r\n\t\tenvmap: {\r\n\r\n\t\t\tenvMap: { value: null },\r\n\t\t\tflipEnvMap: { value: - 1 },\r\n\t\t\treflectivity: { value: 1.0 },\r\n\t\t\trefractionRatio: { value: 0.98 },\r\n\t\t\tmaxMipLevel: { value: 0 }\r\n\r\n\t\t},\r\n\r\n\t\taomap: {\r\n\r\n\t\t\taoMap: { value: null },\r\n\t\t\taoMapIntensity: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\tlightmap: {\r\n\r\n\t\t\tlightMap: { value: null },\r\n\t\t\tlightMapIntensity: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\temissivemap: {\r\n\r\n\t\t\temissiveMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tbumpmap: {\r\n\r\n\t\t\tbumpMap: { value: null },\r\n\t\t\tbumpScale: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\tnormalmap: {\r\n\r\n\t\t\tnormalMap: { value: null },\r\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\r\n\r\n\t\t},\r\n\r\n\t\tdisplacementmap: {\r\n\r\n\t\t\tdisplacementMap: { value: null },\r\n\t\t\tdisplacementScale: { value: 1 },\r\n\t\t\tdisplacementBias: { value: 0 }\r\n\r\n\t\t},\r\n\r\n\t\troughnessmap: {\r\n\r\n\t\t\troughnessMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tmetalnessmap: {\r\n\r\n\t\t\tmetalnessMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tgradientmap: {\r\n\r\n\t\t\tgradientMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tfog: {\r\n\r\n\t\t\tfogDensity: { value: 0.00025 },\r\n\t\t\tfogNear: { value: 1 },\r\n\t\t\tfogFar: { value: 2000 },\r\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\r\n\r\n\t\t},\r\n\r\n\t\tlights: {\r\n\r\n\t\t\tambientLightColor: { value: [] },\r\n\r\n\t\t\tdirectionalLights: { value: [], properties: {\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tcolor: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {}\r\n\t\t\t} },\r\n\r\n\t\t\tdirectionalShadowMap: { value: [] },\r\n\t\t\tdirectionalShadowMatrix: { value: [] },\r\n\r\n\t\t\tspotLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tdistance: {},\r\n\t\t\t\tconeCos: {},\r\n\t\t\t\tpenumbraCos: {},\r\n\t\t\t\tdecay: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {}\r\n\t\t\t} },\r\n\r\n\t\t\tspotShadowMap: { value: [] },\r\n\t\t\tspotShadowMatrix: { value: [] },\r\n\r\n\t\t\tpointLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\tdecay: {},\r\n\t\t\t\tdistance: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {},\r\n\t\t\t\tshadowCameraNear: {},\r\n\t\t\t\tshadowCameraFar: {}\r\n\t\t\t} },\r\n\r\n\t\t\tpointShadowMap: { value: [] },\r\n\t\t\tpointShadowMatrix: { value: [] },\r\n\r\n\t\t\themisphereLights: { value: [], properties: {\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tskyColor: {},\r\n\t\t\t\tgroundColor: {}\r\n\t\t\t} },\r\n\r\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\r\n\t\t\trectAreaLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\twidth: {},\r\n\t\t\t\theight: {}\r\n\t\t\t} }\r\n\r\n\t\t},\r\n\r\n\t\tpoints: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\t\t\tsize: { value: 1.0 },\r\n\t\t\tscale: { value: 1.0 },\r\n\t\t\tmap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() }\r\n\r\n\t\t},\r\n\r\n\t\tsprite: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\trotation: { value: 0.0 },\r\n\t\t\tmap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() }\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t */\r\n\r\n\tvar ShaderLib = {\r\n\r\n\t\tbasic: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\r\n\r\n\t\t},\r\n\r\n\t\tlambert: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\r\n\r\n\t\t},\r\n\r\n\t\tphong: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.gradientmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\r\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\r\n\t\t\t\t\tshininess: { value: 30 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\r\n\r\n\t\t},\r\n\r\n\t\tstandard: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.roughnessmap,\r\n\t\t\t\tUniformsLib.metalnessmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\r\n\t\t\t\t\troughness: { value: 0.5 },\r\n\t\t\t\t\tmetalness: { value: 0.5 },\r\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\r\n\r\n\t\t},\r\n\r\n\t\tpoints: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.points,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.points_vert,\r\n\t\t\tfragmentShader: ShaderChunk.points_frag\r\n\r\n\t\t},\r\n\r\n\t\tdashed: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tscale: { value: 1 },\r\n\t\t\t\t\tdashSize: { value: 1 },\r\n\t\t\t\t\ttotalSize: { value: 2 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\r\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\r\n\r\n\t\t},\r\n\r\n\t\tdepth: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.displacementmap\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.depth_vert,\r\n\t\t\tfragmentShader: ShaderChunk.depth_frag\r\n\r\n\t\t},\r\n\r\n\t\tnormal: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\t{\r\n\t\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.normal_vert,\r\n\t\t\tfragmentShader: ShaderChunk.normal_frag\r\n\r\n\t\t},\r\n\r\n\t\tsprite: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.sprite,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\r\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\r\n\r\n\t\t},\r\n\r\n\t\t/* -------------------------------------------------------------------------\r\n\t\t//\tCube map shader\r\n\t\t ------------------------------------------------------------------------- */\r\n\r\n\t\tcube: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttCube: { value: null },\r\n\t\t\t\ttFlip: { value: - 1 },\r\n\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.cube_vert,\r\n\t\t\tfragmentShader: ShaderChunk.cube_frag\r\n\r\n\t\t},\r\n\r\n\t\tequirect: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttEquirect: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\r\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\r\n\r\n\t\t},\r\n\r\n\t\tdistanceRGBA: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\t{\r\n\t\t\t\t\treferencePosition: { value: new Vector3() },\r\n\t\t\t\t\tnearDistance: { value: 1 },\r\n\t\t\t\t\tfarDistance: { value: 1000 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\r\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\r\n\r\n\t\t},\r\n\r\n\t\tshadow: {\r\n\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\r\n\t\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t\t},\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\r\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tShaderLib.physical = {\r\n\r\n\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\tShaderLib.standard.uniforms,\r\n\t\t\t{\r\n\t\t\t\tclearCoat: { value: 0 },\r\n\t\t\t\tclearCoatRoughness: { value: 0 }\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\r\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLAnimation() {\r\n\r\n\t\tvar context = null;\r\n\t\tvar isAnimating = false;\r\n\t\tvar animationLoop = null;\r\n\r\n\t\tfunction onAnimationFrame( time, frame ) {\r\n\r\n\t\t\tif ( isAnimating === false ) return;\r\n\r\n\t\t\tanimationLoop( time, frame );\r\n\r\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tstart: function () {\r\n\r\n\t\t\t\tif ( isAnimating === true ) return;\r\n\t\t\t\tif ( animationLoop === null ) return;\r\n\r\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\r\n\r\n\t\t\t\tisAnimating = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tstop: function () {\r\n\r\n\t\t\t\tisAnimating = false;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetAnimationLoop: function ( callback ) {\r\n\r\n\t\t\t\tanimationLoop = callback;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetContext: function ( value ) {\r\n\r\n\t\t\t\tcontext = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLAttributes( gl ) {\r\n\r\n\t\tvar buffers = new WeakMap();\r\n\r\n\t\tfunction createBuffer( attribute, bufferType ) {\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n\t\t\tvar buffer = gl.createBuffer();\r\n\r\n\t\t\tgl.bindBuffer( bufferType, buffer );\r\n\t\t\tgl.bufferData( bufferType, array, usage );\r\n\r\n\t\t\tattribute.onUploadCallback();\r\n\r\n\t\t\tvar type = gl.FLOAT;\r\n\r\n\t\t\tif ( array instanceof Float32Array ) {\r\n\r\n\t\t\t\ttype = gl.FLOAT;\r\n\r\n\t\t\t} else if ( array instanceof Float64Array ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\r\n\r\n\t\t\t} else if ( array instanceof Uint16Array ) {\r\n\r\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\r\n\r\n\t\t\t} else if ( array instanceof Int16Array ) {\r\n\r\n\t\t\t\ttype = gl.SHORT;\r\n\r\n\t\t\t} else if ( array instanceof Uint32Array ) {\r\n\r\n\t\t\t\ttype = gl.UNSIGNED_INT;\r\n\r\n\t\t\t} else if ( array instanceof Int32Array ) {\r\n\r\n\t\t\t\ttype = gl.INT;\r\n\r\n\t\t\t} else if ( array instanceof Int8Array ) {\r\n\r\n\t\t\t\ttype = gl.BYTE;\r\n\r\n\t\t\t} else if ( array instanceof Uint8Array ) {\r\n\r\n\t\t\t\ttype = gl.UNSIGNED_BYTE;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tbuffer: buffer,\r\n\t\t\t\ttype: type,\r\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\r\n\t\t\t\tversion: attribute.version\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar updateRange = attribute.updateRange;\r\n\r\n\t\t\tgl.bindBuffer( bufferType, buffer );\r\n\r\n\t\t\tif ( attribute.dynamic === false ) {\r\n\r\n\t\t\t\tgl.bufferData( bufferType, array, gl.STATIC_DRAW );\r\n\r\n\t\t\t} else if ( updateRange.count === - 1 ) {\r\n\r\n\t\t\t\t// Not using update ranges\r\n\r\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\r\n\r\n\t\t\t} else if ( updateRange.count === 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\r\n\r\n\t\t\t\tupdateRange.count = - 1; // reset range\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction get( attribute ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\r\n\r\n\t\t\treturn buffers.get( attribute );\r\n\r\n\t\t}\r\n\r\n\t\tfunction remove( attribute ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\r\n\r\n\t\t\tvar data = buffers.get( attribute );\r\n\r\n\t\t\tif ( data ) {\r\n\r\n\t\t\t\tgl.deleteBuffer( data.buffer );\r\n\r\n\t\t\t\tbuffers.delete( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( attribute, bufferType ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\r\n\r\n\t\t\tvar data = buffers.get( attribute );\r\n\r\n\t\t\tif ( data === undefined ) {\r\n\r\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\r\n\r\n\t\t\t} else if ( data.version < attribute.version ) {\r\n\r\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\r\n\r\n\t\t\t\tdata.version = attribute.version;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: get,\r\n\t\t\tremove: remove,\r\n\t\t\tupdate: update\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Euler( x, y, z, order ) {\r\n\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._order = order || Euler.DefaultOrder;\r\n\r\n\t}\r\n\r\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\n\tEuler.DefaultOrder = 'XYZ';\r\n\r\n\tObject.defineProperties( Euler.prototype, {\r\n\r\n\t\tx: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._x = value;\r\n\t\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ty: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._y = value;\r\n\t\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tz: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._z = value;\r\n\t\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\torder: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._order;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._order = value;\r\n\t\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Euler.prototype, {\r\n\r\n\t\tisEuler: true,\r\n\r\n\t\tset: function ( x, y, z, order ) {\r\n\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._order = order || this._order;\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( euler ) {\r\n\r\n\t\t\tthis._x = euler._x;\r\n\t\t\tthis._y = euler._y;\r\n\t\t\tthis._z = euler._z;\r\n\t\t\tthis._order = euler._order;\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\t\tvar clamp = _Math.clamp;\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar te = m.elements;\r\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\t\torder = order || this._order;\r\n\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._order = order;\r\n\r\n\t\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromQuaternion: function () {\r\n\r\n\t\t\tvar matrix = new Matrix4();\r\n\r\n\t\t\treturn function setFromQuaternion( q, order, update ) {\r\n\r\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\r\n\r\n\t\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t\t},\r\n\r\n\t\treorder: function () {\r\n\r\n\t\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\t\tvar q = new Quaternion();\r\n\r\n\t\t\treturn function reorder( newOrder ) {\r\n\r\n\t\t\t\tq.setFromEuler( this );\r\n\r\n\t\t\t\treturn this.setFromQuaternion( q, newOrder );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tequals: function ( euler ) {\r\n\r\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array ) {\r\n\r\n\t\t\tthis._x = array[ 0 ];\r\n\t\t\tthis._y = array[ 1 ];\r\n\t\t\tthis._z = array[ 2 ];\r\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\t\tthis.onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\t\tif ( optionalResult ) {\r\n\r\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tonChange: function ( callback ) {\r\n\r\n\t\t\tthis.onChangeCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tonChangeCallback: function () {}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Layers() {\r\n\r\n\t\tthis.mask = 1 | 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Layers.prototype, {\r\n\r\n\t\tset: function ( channel ) {\r\n\r\n\t\t\tthis.mask = 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tenable: function ( channel ) {\r\n\r\n\t\t\tthis.mask |= 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\ttoggle: function ( channel ) {\r\n\r\n\t\t\tthis.mask ^= 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tdisable: function ( channel ) {\r\n\r\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\r\n\r\n\t\t},\r\n\r\n\t\ttest: function ( layers ) {\r\n\r\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author elephantatwork / www.elephantatwork.ch\r\n\t */\r\n\r\n\tvar object3DId = 0;\r\n\r\n\tfunction Object3D() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: object3DId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Object3D';\r\n\r\n\t\tthis.parent = null;\r\n\t\tthis.children = [];\r\n\r\n\t\tthis.up = Object3D.DefaultUp.clone();\r\n\r\n\t\tvar position = new Vector3();\r\n\t\tvar rotation = new Euler();\r\n\t\tvar quaternion = new Quaternion();\r\n\t\tvar scale = new Vector3( 1, 1, 1 );\r\n\r\n\t\tfunction onRotationChange() {\r\n\r\n\t\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onQuaternionChange() {\r\n\r\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t\t}\r\n\r\n\t\trotation.onChange( onRotationChange );\r\n\t\tquaternion.onChange( onQuaternionChange );\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tposition: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: position\r\n\t\t\t},\r\n\t\t\trotation: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: rotation\r\n\t\t\t},\r\n\t\t\tquaternion: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: quaternion\r\n\t\t\t},\r\n\t\t\tscale: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: scale\r\n\t\t\t},\r\n\t\t\tmodelViewMatrix: {\r\n\t\t\t\tvalue: new Matrix4()\r\n\t\t\t},\r\n\t\t\tnormalMatrix: {\r\n\t\t\t\tvalue: new Matrix3()\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.matrixWorld = new Matrix4();\r\n\r\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tthis.layers = new Layers();\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.castShadow = false;\r\n\t\tthis.receiveShadow = false;\r\n\r\n\t\tthis.frustumCulled = true;\r\n\t\tthis.renderOrder = 0;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\r\n\tObject3D.DefaultMatrixAutoUpdate = true;\r\n\r\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Object3D,\r\n\r\n\t\tisObject3D: true,\r\n\r\n\t\tonBeforeRender: function () {},\r\n\t\tonAfterRender: function () {},\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\r\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t\t},\r\n\r\n\t\tapplyQuaternion: function ( q ) {\r\n\r\n\t\t\tthis.quaternion.premultiply( q );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\t// assumes axis is normalized\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromEuler: function ( euler ) {\r\n\r\n\t\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromMatrix: function ( m ) {\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\t// assumes q is normalized\r\n\r\n\t\t\tthis.quaternion.copy( q );\r\n\r\n\t\t},\r\n\r\n\t\trotateOnAxis: function () {\r\n\r\n\t\t\t// rotate object on axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\r\n\t\t\tvar q1 = new Quaternion();\r\n\r\n\t\t\treturn function rotateOnAxis( axis, angle ) {\r\n\r\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\t\tthis.quaternion.multiply( q1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\trotateOnWorldAxis: function () {\r\n\r\n\t\t\t// rotate object on axis in world space\r\n\t\t\t// axis is assumed to be normalized\r\n\t\t\t// method assumes no rotated parent\r\n\r\n\t\t\tvar q1 = new Quaternion();\r\n\r\n\t\t\treturn function rotateOnWorldAxis( axis, angle ) {\r\n\r\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\t\tthis.quaternion.premultiply( q1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\trotateX: function () {\r\n\r\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\r\n\r\n\t\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\trotateY: function () {\r\n\r\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\r\n\r\n\t\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\trotateZ: function () {\r\n\r\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\r\n\r\n\t\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttranslateOnAxis: function () {\r\n\r\n\t\t\t// translate object by distance along axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function translateOnAxis( axis, distance ) {\r\n\r\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttranslateX: function () {\r\n\r\n\t\t\tvar v1 = new Vector3( 1, 0, 0 );\r\n\r\n\t\t\treturn function translateX( distance ) {\r\n\r\n\t\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttranslateY: function () {\r\n\r\n\t\t\tvar v1 = new Vector3( 0, 1, 0 );\r\n\r\n\t\t\treturn function translateY( distance ) {\r\n\r\n\t\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttranslateZ: function () {\r\n\r\n\t\t\tvar v1 = new Vector3( 0, 0, 1 );\r\n\r\n\t\t\treturn function translateZ( distance ) {\r\n\r\n\t\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tlocalToWorld: function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tworldToLocal: function () {\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function worldToLocal( vector ) {\r\n\r\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tlookAt: function () {\r\n\r\n\t\t\t// This method does not support objects with rotated and/or translated parent(s)\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\t\t\tvar vector = new Vector3();\r\n\r\n\t\t\treturn function lookAt( x, y, z ) {\r\n\r\n\t\t\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t\t\tvector.copy( x );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvector.set( x, y, z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.isCamera ) {\r\n\r\n\t\t\t\t\tm1.lookAt( this.position, vector, this.up );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tm1.lookAt( vector, this.position, this.up );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tadd: function ( object ) {\r\n\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object === this ) {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( object && object.isObject3D ) ) {\r\n\r\n\t\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.parent = this;\r\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\r\n\r\n\t\t\t\tthis.children.push( object );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tremove: function ( object ) {\r\n\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tobject.parent = null;\r\n\r\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\r\n\r\n\t\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectById: function ( id ) {\r\n\r\n\t\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectByName: function ( name ) {\r\n\r\n\t\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectByProperty: function ( name, value ) {\r\n\r\n\t\t\tif ( this[ name ] === value ) return this;\r\n\r\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar child = this.children[ i ];\r\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\t\treturn object;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldPosition: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldQuaternion: function () {\r\n\r\n\t\t\tvar position = new Vector3();\r\n\t\t\tvar scale = new Vector3();\r\n\r\n\t\t\treturn function getWorldQuaternion( target ) {\r\n\r\n\t\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\r\n\t\t\t\t\ttarget = new Quaternion();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\t\tthis.matrixWorld.decompose( position, target, scale );\r\n\r\n\t\t\t\treturn target;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tgetWorldScale: function () {\r\n\r\n\t\t\tvar position = new Vector3();\r\n\t\t\tvar quaternion = new Quaternion();\r\n\r\n\t\t\treturn function getWorldScale( target ) {\r\n\r\n\t\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\r\n\t\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, target );\r\n\r\n\t\t\t\treturn target;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tgetWorldDirection: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tvar e = this.matrixWorld.elements;\r\n\r\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\traycast: function () {},\r\n\r\n\t\ttraverse: function ( callback ) {\r\n\r\n\t\t\tcallback( this );\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttraverseVisible: function ( callback ) {\r\n\r\n\t\t\tif ( this.visible === false ) return;\r\n\r\n\t\t\tcallback( this );\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttraverseAncestors: function ( callback ) {\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tif ( parent !== null ) {\r\n\r\n\t\t\t\tcallback( parent );\r\n\r\n\t\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrix: function () {\r\n\r\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\t\tforce = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update children\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\t// meta is a string when called from JSON.stringify\r\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tvar output = {};\r\n\r\n\t\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t\t// not providing it implies that this is the root object\r\n\t\t\t// being serialized.\r\n\t\t\tif ( isRootObject ) {\r\n\r\n\t\t\t\t// initialize meta obj\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\tgeometries: {},\r\n\t\t\t\t\tmaterials: {},\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {},\r\n\t\t\t\t\tshapes: {}\r\n\t\t\t\t};\r\n\r\n\t\t\t\toutput.metadata = {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Object',\r\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// standard Object3D serialization\r\n\r\n\t\t\tvar object = {};\r\n\r\n\t\t\tobject.uuid = this.uuid;\r\n\t\t\tobject.type = this.type;\r\n\r\n\t\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\t\tif ( this.visible === false ) object.visible = false;\r\n\t\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\r\n\t\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\r\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\r\n\r\n\t\t\tobject.layers = this.layers.mask;\r\n\t\t\tobject.matrix = this.matrix.toArray();\r\n\r\n\t\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfunction serialize( library, element ) {\r\n\r\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn element.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\r\n\r\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\r\n\r\n\t\t\t\tvar parameters = this.geometry.parameters;\r\n\r\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\r\n\r\n\t\t\t\t\tvar shapes = parameters.shapes;\r\n\r\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\t\tif ( Array.isArray( this.material ) ) {\r\n\r\n\t\t\t\t\tvar uuids = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.material = uuids;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\t\tobject.children = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isRootObject ) {\r\n\r\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\r\n\r\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\t\tif ( images.length > 0 ) output.images = images;\r\n\t\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.object = object;\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t\t// extract data from the cache hash\r\n\t\t\t// remove metadata on each item\r\n\t\t\t// and return as array\r\n\t\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\t\tvar values = [];\r\n\t\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t\t}\r\n\t\t\t\treturn values;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function ( recursive ) {\r\n\r\n\t\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tif ( recursive === undefined ) recursive = true;\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.up.copy( source.up );\r\n\r\n\t\t\tthis.position.copy( source.position );\r\n\t\t\tthis.quaternion.copy( source.quaternion );\r\n\t\t\tthis.scale.copy( source.scale );\r\n\r\n\t\t\tthis.matrix.copy( source.matrix );\r\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\t\tthis.layers.mask = source.layers.mask;\r\n\t\t\tthis.visible = source.visible;\r\n\r\n\t\t\tthis.castShadow = source.castShadow;\r\n\t\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\t\tif ( recursive === true ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\r\n\tfunction Camera() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Camera';\r\n\r\n\t\tthis.matrixWorldInverse = new Matrix4();\r\n\r\n\t\tthis.projectionMatrix = new Matrix4();\r\n\t\tthis.projectionMatrixInverse = new Matrix4();\r\n\r\n\t}\r\n\r\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Camera,\r\n\r\n\t\tisCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\r\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldDirection: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tvar e = this.matrixWorld.elements;\r\n\r\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author arose / http://github.com/arose\r\n\t */\r\n\r\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\r\n\r\n\t\tCamera.call( this );\r\n\r\n\t\tthis.type = 'OrthographicCamera';\r\n\r\n\t\tthis.zoom = 1;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.left = left;\r\n\t\tthis.right = right;\r\n\t\tthis.top = top;\r\n\t\tthis.bottom = bottom;\r\n\r\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\r\n\r\n\t\tconstructor: OrthographicCamera,\r\n\r\n\t\tisOrthographicCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.left = source.left;\r\n\t\t\tthis.right = source.right;\r\n\t\t\tthis.top = source.top;\r\n\t\t\tthis.bottom = source.bottom;\r\n\t\t\tthis.near = source.near;\r\n\t\t\tthis.far = source.far;\r\n\r\n\t\t\tthis.zoom = source.zoom;\r\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\t\tif ( this.view === null ) {\r\n\r\n\t\t\t\tthis.view = {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tfullWidth: 1,\r\n\t\t\t\t\tfullHeight: 1,\r\n\t\t\t\t\toffsetX: 0,\r\n\t\t\t\t\toffsetY: 0,\r\n\t\t\t\t\twidth: 1,\r\n\t\t\t\t\theight: 1\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.enabled = true;\r\n\t\t\tthis.view.fullWidth = fullWidth;\r\n\t\t\tthis.view.fullHeight = fullHeight;\r\n\t\t\tthis.view.offsetX = x;\r\n\t\t\tthis.view.offsetY = y;\r\n\t\t\tthis.view.width = width;\r\n\t\t\tthis.view.height = height;\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tclearViewOffset: function () {\r\n\r\n\t\t\tif ( this.view !== null ) {\r\n\r\n\t\t\t\tthis.view.enabled = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tupdateProjectionMatrix: function () {\r\n\r\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\t\tvar cx = ( this.right + this.left ) / 2;\r\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\r\n\r\n\t\t\tvar left = cx - dx;\r\n\t\t\tvar right = cx + dx;\r\n\t\t\tvar top = cy + dy;\r\n\t\t\tvar bottom = cy - dy;\r\n\r\n\t\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\r\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\r\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\r\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\r\n\r\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\r\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\r\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\r\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\r\n\r\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.zoom = this.zoom;\r\n\t\t\tdata.object.left = this.left;\r\n\t\t\tdata.object.right = this.right;\r\n\t\t\tdata.object.top = this.top;\r\n\t\t\tdata.object.bottom = this.bottom;\r\n\t\t\tdata.object.near = this.near;\r\n\t\t\tdata.object.far = this.far;\r\n\r\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\r\n\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\r\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\r\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\r\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\r\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\r\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Face3.prototype, {\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.a = source.a;\r\n\t\t\tthis.b = source.b;\r\n\t\t\tthis.c = source.c;\r\n\r\n\t\t\tthis.normal.copy( source.normal );\r\n\t\t\tthis.color.copy( source.color );\r\n\r\n\t\t\tthis.materialIndex = source.materialIndex;\r\n\r\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author kile / http://kile.stravaganza.org/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar geometryId = 0; // Geometry uses even numbers as Id\r\n\r\n\tfunction Geometry() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: geometryId += 2 } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Geometry';\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [[]];\r\n\r\n\t\tthis.morphTargets = [];\r\n\t\tthis.morphNormals = [];\r\n\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\r\n\t\tthis.lineDistances = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// update flags\r\n\r\n\t\tthis.elementsNeedUpdate = false;\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.lineDistancesNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\r\n\t}\r\n\r\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Geometry,\r\n\r\n\t\tisGeometry: true,\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.verticesNeedUpdate = true;\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function () {\r\n\r\n\t\t\t// rotate geometry around world x-axis\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\trotateY: function () {\r\n\r\n\t\t\t// rotate geometry around world y-axis\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\trotateZ: function () {\r\n\r\n\t\t\t// rotate geometry around world z-axis\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttranslate: function () {\r\n\r\n\t\t\t// translate geometry\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tscale: function () {\r\n\r\n\t\t\t// scale geometry\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tlookAt: function () {\r\n\r\n\t\t\tvar obj = new Object3D();\r\n\r\n\t\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\t\tobj.updateMatrix();\r\n\r\n\t\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tfromBufferGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\r\n\t\t\tvar positions = attributes.position.array;\r\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\r\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\r\n\r\n\t\t\tvar tempNormals = [];\r\n\t\t\tvar tempUVs = [];\r\n\t\t\tvar tempUVs2 = [];\r\n\r\n\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\r\n\r\n\t\t\t\tscope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\r\n\r\n\t\t\t\tif ( normals !== undefined ) {\r\n\r\n\t\t\t\t\ttempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( colors !== undefined ) {\r\n\r\n\t\t\t\t\tscope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\t\ttempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\t\ttempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\r\n\r\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\r\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\r\n\r\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\r\n\r\n\t\t\t\tscope.faces.push( face );\r\n\r\n\t\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function () {\r\n\r\n\t\t\tvar offset = new Vector3();\r\n\r\n\t\t\treturn function center() {\r\n\r\n\t\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\t\tthis.boundingBox.getCenter( offset ).negate();\r\n\r\n\t\t\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\tvar center = this.boundingSphere.center;\r\n\t\t\tvar radius = this.boundingSphere.radius;\r\n\r\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\r\n\t\t\tvar matrix = new Matrix4();\r\n\t\t\tmatrix.set(\r\n\t\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t\tthis.applyMatrix( matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFaceNormals: function () {\r\n\r\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ f ];\r\n\r\n\t\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\t\tvar vC = this.vertices[ face.c ];\r\n\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\tcb.normalize();\r\n\r\n\t\t\t\tface.normal.copy( cb );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\r\n\r\n\t\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\t\tvertices = new Array( this.vertices.length );\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ] = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\t\tvar vA, vB, vC;\r\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFlatVertexNormals: function () {\r\n\r\n\t\t\tvar f, fl, face;\r\n\r\n\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\r\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\r\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\r\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\r\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeMorphNormals: function () {\r\n\r\n\t\t\tvar i, il, f, fl, face;\r\n\r\n\t\t\t// save original normals\r\n\t\t\t// - create temp variables on first access\r\n\t\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\r\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\t\tvar tmpGeo = new Geometry();\r\n\t\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// create on first access\r\n\r\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\tfaceNormal = new Vector3();\r\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\r\n\r\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t\t// set vertices to morph target\r\n\r\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t\t// compute morph normals\r\n\r\n\t\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t\t// store morph normals\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// restore original normals\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingBox: function () {\r\n\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingSphere: function () {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\r\n\t\t},\r\n\r\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\r\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normalMatrix,\r\n\t\t\t\tvertexOffset = this.vertices.length,\r\n\t\t\t\tvertices1 = this.vertices,\r\n\t\t\t\tvertices2 = geometry.vertices,\r\n\t\t\t\tfaces1 = this.faces,\r\n\t\t\t\tfaces2 = geometry.faces,\r\n\t\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\r\n\t\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ],\r\n\t\t\t\tcolors1 = this.colors,\r\n\t\t\t\tcolors2 = geometry.colors;\r\n\r\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\r\n\r\n\t\t\tif ( matrix !== undefined ) {\r\n\r\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// vertices\r\n\r\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\r\n\r\n\t\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// faces\r\n\r\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\r\n\t\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\r\n\t\t\t\tif ( uv === undefined ) {\r\n\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuvs1.push( uvCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tmergeMesh: function ( mesh ) {\r\n\r\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mesh.matrixAutoUpdate ) mesh.updateMatrix();\r\n\r\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * Checks for duplicate vertices with hashmap.\r\n\t\t * Duplicated vertices are removed\r\n\t\t * and faces' vertices are updated.\r\n\t\t */\r\n\r\n\t\tmergeVertices: function () {\r\n\r\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\t\tvar unique = [], changes = [];\r\n\r\n\t\t\tvar v, key;\r\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\t\tvar i, il, face;\r\n\t\t\tvar indices, j, jl;\r\n\r\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tv = this.vertices[ i ];\r\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\r\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t\t// have to remove them from the geometry.\r\n\t\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\r\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\r\n\t\t\t\tthis.faces.splice( idx, 1 );\r\n\r\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Use unique set of vertices\r\n\r\n\t\t\tvar diff = this.vertices.length - unique.length;\r\n\t\t\tthis.vertices = unique;\r\n\t\t\treturn diff;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.vertices = [];\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsortFacesByMaterialIndex: function () {\r\n\r\n\t\t\tvar faces = this.faces;\r\n\t\t\tvar length = faces.length;\r\n\r\n\t\t\t// tag faces\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tfaces[ i ]._id = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// sort faces\r\n\r\n\t\t\tfunction materialIndexSort( a, b ) {\r\n\r\n\t\t\t\treturn a.materialIndex - b.materialIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaces.sort( materialIndexSort );\r\n\r\n\t\t\t// sort uvs\r\n\r\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\r\n\t\t\tvar newUvs1, newUvs2;\r\n\r\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\r\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar id = faces[ i ]._id;\r\n\r\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\r\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\r\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Geometry',\r\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard Geometry serialization\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vertices = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar faces = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar normalsHash = {};\r\n\t\t\tvar colors = [];\r\n\t\t\tvar colorsHash = {};\r\n\t\t\tvar uvs = [];\r\n\t\t\tvar uvsHash = {};\r\n\r\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\r\n\t\t\t\tvar hasMaterial = true;\r\n\t\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\r\n\t\t\t\tvar faceType = 0;\r\n\r\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\r\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\r\n\t\t\t\tfaces.push( faceType );\r\n\t\t\t\tfaces.push( face.a, face.b, face.c );\r\n\t\t\t\tfaces.push( face.materialIndex );\r\n\r\n\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction setBit( value, position, enabled ) {\r\n\r\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getNormalIndex( normal ) {\r\n\r\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\r\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getColorIndex( color ) {\r\n\r\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\r\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\t\tcolors.push( color.getHex() );\r\n\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getUvIndex( uv ) {\r\n\r\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\r\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdata.data = {};\r\n\r\n\t\t\tdata.data.vertices = vertices;\r\n\t\t\tdata.data.normals = normals;\r\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\r\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\r\n\t\t\tdata.data.faces = faces;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\t/*\r\n\t\t\t // Handle primitives\r\n\r\n\t\t\t var parameters = this.parameters;\r\n\r\n\t\t\t if ( parameters !== undefined ) {\r\n\r\n\t\t\t var values = [];\r\n\r\n\t\t\t for ( var key in parameters ) {\r\n\r\n\t\t\t values.push( parameters[ key ] );\r\n\r\n\t\t\t }\r\n\r\n\t\t\t var geometry = Object.create( this.constructor.prototype );\r\n\t\t\t this.constructor.apply( geometry, values );\r\n\t\t\t return geometry;\r\n\r\n\t\t\t }\r\n\r\n\t\t\t return new this.constructor().copy( this );\r\n\t\t\t */\r\n\r\n\t\t\treturn new Geometry().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tvar i, il, j, jl, k, kl;\r\n\r\n\t\t\t// reset\r\n\r\n\t\t\tthis.vertices = [];\r\n\t\t\tthis.colors = [];\r\n\t\t\tthis.faces = [];\r\n\t\t\tthis.faceVertexUvs = [[]];\r\n\t\t\tthis.morphTargets = [];\r\n\t\t\tthis.morphNormals = [];\r\n\t\t\tthis.skinWeights = [];\r\n\t\t\tthis.skinIndices = [];\r\n\t\t\tthis.lineDistances = [];\r\n\t\t\tthis.boundingBox = null;\r\n\t\t\tthis.boundingSphere = null;\r\n\r\n\t\t\t// name\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\t// vertices\r\n\r\n\t\t\tvar vertices = source.vertices;\r\n\r\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tvar colors = source.colors;\r\n\r\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// faces\r\n\r\n\t\t\tvar faces = source.faces;\r\n\r\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// face vertex uvs\r\n\r\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\r\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\r\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\tvar uv = uvs[ k ];\r\n\r\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph targets\r\n\r\n\t\t\tvar morphTargets = source.morphTargets;\r\n\r\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = {};\r\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\r\n\r\n\t\t\t\t// vertices\r\n\r\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\r\n\r\n\t\t\t\t\tmorphTarget.vertices = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// normals\r\n\r\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphTarget.normals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.push( morphTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph normals\r\n\r\n\t\t\tvar morphNormals = source.morphNormals;\r\n\r\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphNormal = {};\r\n\r\n\t\t\t\t// vertex normals\r\n\r\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphNormal.vertexNormals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\r\n\t\t\t\t\t\tvar destVertexNormal = {};\r\n\r\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\r\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\r\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\r\n\r\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// face normals\r\n\r\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphNormal.faceNormals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphNormals.push( morphNormal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skin weights\r\n\r\n\t\t\tvar skinWeights = source.skinWeights;\r\n\r\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skin indices\r\n\r\n\t\t\tvar skinIndices = source.skinIndices;\r\n\r\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// line distances\r\n\r\n\t\t\tvar lineDistances = source.lineDistances;\r\n\r\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding box\r\n\r\n\t\t\tvar boundingBox = source.boundingBox;\r\n\r\n\t\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding sphere\r\n\r\n\t\t\tvar boundingSphere = source.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update flags\r\n\r\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\r\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\r\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\r\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\r\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\r\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\r\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tif ( Array.isArray( array ) ) {\r\n\r\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\r\n\t\tthis.normalized = normalized === true;\r\n\r\n\t\tthis.dynamic = false;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) this.version ++;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( BufferAttribute.prototype, {\r\n\r\n\t\tisBufferAttribute: true,\r\n\r\n\t\tonUploadCallback: function () {},\r\n\r\n\t\tsetArray: function ( array ) {\r\n\r\n\t\t\tif ( Array.isArray( array ) ) {\r\n\r\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.count = array !== undefined ? array.length / this.itemSize : 0;\r\n\t\t\tthis.array = array;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetDynamic: function ( value ) {\r\n\r\n\t\t\tthis.dynamic = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.itemSize = source.itemSize;\r\n\t\t\tthis.count = source.count;\r\n\t\t\tthis.normalized = source.normalized;\r\n\r\n\t\t\tthis.dynamic = source.dynamic;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\t\tindex1 *= this.itemSize;\r\n\t\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyArray: function ( array ) {\r\n\r\n\t\t\tthis.array.set( array );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyColorsArray: function ( colors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar color = colors[ i ];\r\n\r\n\t\t\t\tif ( color === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\t\tcolor = new Color();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\t\tarray[ offset ++ ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector2sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector2();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector3sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector3();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector4sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector4();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\t\tarray[ offset ++ ] = vector.w;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis.array.set( value, offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetX: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize ];\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( index, x ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetY: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( index, y ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetZ: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( index, z ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetW: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( index, w ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXY: function ( index, x, y ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\t\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tonUpload: function ( callback ) {\r\n\r\n\t\t\tthis.onUploadCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\r\n\r\n\r\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\r\n\r\n\r\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\r\n\r\n\r\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\r\n\r\n\r\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\r\n\r\n\r\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\r\n\r\n\r\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\r\n\r\n\r\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\r\n\r\n\r\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction DirectGeometry() {\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.normals = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.uvs = [];\r\n\t\tthis.uvs2 = [];\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t\tthis.morphTargets = {};\r\n\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\r\n\t\t// this.lineDistances = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// update flags\r\n\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\r\n\t}\r\n\r\n\tObject.assign( DirectGeometry.prototype, {\r\n\r\n\t\tcomputeGroups: function ( geometry ) {\r\n\r\n\t\t\tvar group;\r\n\t\t\tvar groups = [];\r\n\t\t\tvar materialIndex = undefined;\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\t// materials\r\n\r\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\r\n\t\t\t\t\tmaterialIndex = face.materialIndex;\r\n\r\n\t\t\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgroup = {\r\n\t\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.groups = groups;\r\n\r\n\t\t},\r\n\r\n\t\tfromGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\tvar morphTargetsLength = morphTargets.length;\r\n\r\n\t\t\tvar morphTargetsPosition;\r\n\r\n\t\t\tif ( morphTargetsLength > 0 ) {\r\n\r\n\t\t\t\tmorphTargetsPosition = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\r\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\r\n\t\t\t\t\t\tname: morphTargets[ i ].name,\r\n\t\t\t\t\t \tdata: []\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = geometry.morphNormals;\r\n\t\t\tvar morphNormalsLength = morphNormals.length;\r\n\r\n\t\t\tvar morphTargetsNormal;\r\n\r\n\t\t\tif ( morphNormalsLength > 0 ) {\r\n\r\n\t\t\t\tmorphTargetsNormal = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\r\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\r\n\t\t\t\t\t\tname: morphNormals[ i ].name,\r\n\t\t\t\t\t \tdata: []\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skins\r\n\r\n\t\t\tvar skinIndices = geometry.skinIndices;\r\n\t\t\tvar skinWeights = geometry.skinWeights;\r\n\r\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\tif ( vertexColors.length === 3 ) {\r\n\r\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar color = face.color;\r\n\r\n\t\t\t\t\tthis.colors.push( color, color, color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexUv === true ) {\r\n\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\r\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\r\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// morphs\r\n\r\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\r\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\r\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\r\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\r\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// skins\r\n\r\n\t\t\t\tif ( hasSkinIndices ) {\r\n\r\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasSkinWeights ) {\r\n\r\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.computeGroups( geometry );\r\n\r\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction arrayMax( array ) {\r\n\r\n\t\tif ( array.length === 0 ) return - Infinity;\r\n\r\n\t\tvar max = array[ 0 ];\r\n\r\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\t\tif ( array[ i ] > max ) max = array[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn max;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\r\n\r\n\tfunction BufferGeometry() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'BufferGeometry';\r\n\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\r\n\t\tthis.morphAttributes = {};\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: BufferGeometry,\r\n\r\n\t\tisBufferGeometry: true,\r\n\r\n\t\tgetIndex: function () {\r\n\r\n\t\t\treturn this.index;\r\n\r\n\t\t},\r\n\r\n\t\tsetIndex: function ( index ) {\r\n\r\n\t\t\tif ( Array.isArray( index ) ) {\r\n\r\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.index = index;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\taddAttribute: function ( name, attribute ) {\r\n\r\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\r\n\t\t\t\treturn this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( name === 'index' ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\t\tthis.setIndex( attribute );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetAttribute: function ( name ) {\r\n\r\n\t\t\treturn this.attributes[ name ];\r\n\r\n\t\t},\r\n\r\n\t\tremoveAttribute: function ( name ) {\r\n\r\n\t\t\tdelete this.attributes[ name ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddGroup: function ( start, count, materialIndex ) {\r\n\r\n\t\t\tthis.groups.push( {\r\n\r\n\t\t\t\tstart: start,\r\n\t\t\t\tcount: count,\r\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\r\n\t\t\t} );\r\n\r\n\t\t},\r\n\r\n\t\tclearGroups: function () {\r\n\r\n\t\t\tthis.groups = [];\r\n\r\n\t\t},\r\n\r\n\t\tsetDrawRange: function ( start, count ) {\r\n\r\n\t\t\tthis.drawRange.start = start;\r\n\t\t\tthis.drawRange.count = count;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\r\n\t\t\tif ( position !== undefined ) {\r\n\r\n\t\t\t\tmatrix.applyToBufferAttribute( position );\r\n\t\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normal = this.attributes.normal;\r\n\r\n\t\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\r\n\t\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function () {\r\n\r\n\t\t\t// rotate geometry around world x-axis\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\trotateY: function () {\r\n\r\n\t\t\t// rotate geometry around world y-axis\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\trotateZ: function () {\r\n\r\n\t\t\t// rotate geometry around world z-axis\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttranslate: function () {\r\n\r\n\t\t\t// translate geometry\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tscale: function () {\r\n\r\n\t\t\t// scale geometry\r\n\r\n\t\t\tvar m1 = new Matrix4();\r\n\r\n\t\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tlookAt: function () {\r\n\r\n\t\t\tvar obj = new Object3D();\r\n\r\n\t\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\t\tobj.updateMatrix();\r\n\r\n\t\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tcenter: function () {\r\n\r\n\t\t\tvar offset = new Vector3();\r\n\r\n\t\t\treturn function center() {\r\n\r\n\t\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\t\tthis.boundingBox.getCenter( offset ).negate();\r\n\r\n\t\t\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tsetFromObject: function ( object ) {\r\n\r\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( object.isPoints || object.isLine ) {\r\n\r\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\r\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\r\n\r\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\r\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\r\n\r\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tthis.fromGeometry( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tvar position = [];\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateFromObject: function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tvar direct = geometry.__directGeometry;\r\n\r\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\r\n\r\n\t\t\t\t\tdirect = undefined;\r\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( direct === undefined ) {\r\n\r\n\t\t\t\t\treturn this.fromGeometry( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\t\tgeometry = direct;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute;\r\n\r\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.position;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.normal;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.color;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvsNeedUpdate ) {\r\n\r\n\t\t\t\tattribute = this.attributes.uv;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\r\n\t\t\t\tattribute = this.attributes.lineDistance;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.groupsNeedUpdate ) {\r\n\r\n\t\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tfromGeometry: function ( geometry ) {\r\n\r\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\r\n\r\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\r\n\t\t},\r\n\r\n\t\tfromDirectGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\t\tthis.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\r\n\t\t\tif ( geometry.normals.length > 0 ) {\r\n\r\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.colors.length > 0 ) {\r\n\r\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\t\tthis.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvs.length > 0 ) {\r\n\r\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\t\tthis.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvs2.length > 0 ) {\r\n\r\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\t\tthis.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tfor ( var name in geometry.morphTargets ) {\r\n\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\r\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\r\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\r\n\t\t\t\t\tattribute.name = morphTarget.name;\r\n\r\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skinning\r\n\r\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\r\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\r\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingBox: function () {\r\n\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\r\n\t\t\tif ( position !== undefined ) {\r\n\r\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingSphere: function () {\r\n\r\n\t\t\tvar box = new Box3();\r\n\t\t\tvar vector = new Vector3();\r\n\r\n\t\t\treturn function computeBoundingSphere() {\r\n\r\n\t\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar position = this.attributes.position;\r\n\r\n\t\t\t\tif ( position ) {\r\n\r\n\t\t\t\t\tvar center = this.boundingSphere.center;\r\n\r\n\t\t\t\t\tbox.setFromBufferAttribute( position );\r\n\t\t\t\t\tbox.getCenter( center );\r\n\r\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvector.x = position.getX( i );\r\n\t\t\t\t\t\tvector.y = position.getY( i );\r\n\t\t\t\t\t\tvector.z = position.getZ( i );\r\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tcomputeFaceNormals: function () {\r\n\r\n\t\t\t// backwards compatibility\r\n\r\n\t\t},\r\n\r\n\t\tcomputeVertexNormals: function () {\r\n\r\n\t\t\tvar index = this.index;\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tif ( attributes.position ) {\r\n\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( attributes.normal === undefined ) {\r\n\r\n\t\t\t\t\tthis.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\t\tvar array = attributes.normal.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tarray[ i ] = 0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\t\tvar vA, vB, vC;\r\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\r\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t\t// indexed elements\r\n\r\n\t\t\t\tif ( index ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\t\tpC.fromArray( positions, vC );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\t\tattributes.normal.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tmerge: function ( geometry, offset ) {\r\n\r\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset === undefined ) {\r\n\r\n\t\t\t\toffset = 0;\r\n\r\n\t\t\t\tconsole.warn(\r\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\r\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\r\n\r\n\t\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\t\tvar attributeArray1 = attribute1.array;\r\n\r\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\t\tvar attributeArray2 = attribute2.array;\r\n\r\n\t\t\t\tvar attributeSize = attribute2.itemSize;\r\n\r\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\r\n\r\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalizeNormals: function () {\r\n\r\n\t\t\tvar vector = new Vector3();\r\n\r\n\t\t\treturn function normalizeNormals() {\r\n\r\n\t\t\t\tvar normals = this.attributes.normal;\r\n\r\n\t\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvector.x = normals.getX( i );\r\n\t\t\t\t\tvector.y = normals.getY( i );\r\n\t\t\t\t\tvector.z = normals.getZ( i );\r\n\r\n\t\t\t\t\tvector.normalize();\r\n\r\n\t\t\t\t\tnormals.setXYZ( i, vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttoNonIndexed: function () {\r\n\r\n\t\t\tif ( this.index === null ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry2 = new BufferGeometry();\r\n\r\n\t\t\tvar indices = this.index.array;\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\r\n\t\t\t\tvar array = attribute.array;\r\n\t\t\t\tvar itemSize = attribute.itemSize;\r\n\r\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\t\tvar index = 0, index2 = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = this.groups;\r\n\r\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry2;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard BufferGeometry serialization\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\r\n\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdata.data = { attributes: {} };\r\n\r\n\t\t\tvar index = this.index;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\r\n\r\n\t\t\t\tdata.data.index = {\r\n\t\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\t\tarray: array\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\r\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\r\n\r\n\t\t\t\tdata.data.attributes[ key ] = {\r\n\t\t\t\t\titemSize: attribute.itemSize,\r\n\t\t\t\t\ttype: attribute.array.constructor.name,\r\n\t\t\t\t\tarray: array,\r\n\t\t\t\t\tnormalized: attribute.normalized\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = this.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundingSphere = this.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\t/*\r\n\t\t\t // Handle primitives\r\n\r\n\t\t\t var parameters = this.parameters;\r\n\r\n\t\t\t if ( parameters !== undefined ) {\r\n\r\n\t\t\t var values = [];\r\n\r\n\t\t\t for ( var key in parameters ) {\r\n\r\n\t\t\t values.push( parameters[ key ] );\r\n\r\n\t\t\t }\r\n\r\n\t\t\t var geometry = Object.create( this.constructor.prototype );\r\n\t\t\t this.constructor.apply( geometry, values );\r\n\t\t\t return geometry;\r\n\r\n\t\t\t }\r\n\r\n\t\t\t return new this.constructor().copy( this );\r\n\t\t\t */\r\n\r\n\t\t\treturn new BufferGeometry().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tvar name, i, l;\r\n\r\n\t\t\t// reset\r\n\r\n\t\t\tthis.index = null;\r\n\t\t\tthis.attributes = {};\r\n\t\t\tthis.morphAttributes = {};\r\n\t\t\tthis.groups = [];\r\n\t\t\tthis.boundingBox = null;\r\n\t\t\tthis.boundingSphere = null;\r\n\r\n\t\t\t// name\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\t// index\r\n\r\n\t\t\tvar index = source.index;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tthis.setIndex( index.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// attributes\r\n\r\n\t\t\tvar attributes = source.attributes;\r\n\r\n\t\t\tfor ( name in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph attributes\r\n\r\n\t\t\tvar morphAttributes = source.morphAttributes;\r\n\r\n\t\t\tfor ( name in morphAttributes ) {\r\n\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tvar groups = source.groups;\r\n\r\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding box\r\n\r\n\t\t\tvar boundingBox = source.boundingBox;\r\n\r\n\t\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding sphere\r\n\r\n\t\t\tvar boundingSphere = source.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// draw range\r\n\r\n\t\t\tthis.drawRange.start = source.drawRange.start;\r\n\t\t\tthis.drawRange.count = source.drawRange.count;\r\n\r\n\t\t\t// user data\r\n\r\n\t\t\tthis.userData = source.userData;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// BoxGeometry\r\n\r\n\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'BoxGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\tdepth: depth,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tdepthSegments: depthSegments\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tBoxGeometry.prototype = Object.create( Geometry.prototype );\r\n\tBoxGeometry.prototype.constructor = BoxGeometry;\r\n\r\n\t// BoxBufferGeometry\r\n\r\n\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'BoxBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\tdepth: depth,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tdepthSegments: depthSegments\r\n\t\t};\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\twidth = width || 1;\r\n\t\theight = height || 1;\r\n\t\tdepth = depth || 1;\r\n\r\n\t\t// segments\r\n\r\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\r\n\t\theightSegments = Math.floor( heightSegments ) || 1;\r\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar numberOfVertices = 0;\r\n\t\tvar groupStart = 0;\r\n\r\n\t\t// build each side of the box geometry\r\n\r\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\r\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\r\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\r\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\r\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\r\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\r\n\r\n\t\t\tvar segmentWidth = width / gridX;\r\n\t\t\tvar segmentHeight = height / gridY;\r\n\r\n\t\t\tvar widthHalf = width / 2;\r\n\t\t\tvar heightHalf = height / 2;\r\n\t\t\tvar depthHalf = depth / 2;\r\n\r\n\t\t\tvar gridX1 = gridX + 1;\r\n\t\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\t\tvar vertexCounter = 0;\r\n\t\t\tvar groupCount = 0;\r\n\r\n\t\t\tvar ix, iy;\r\n\r\n\t\t\tvar vector = new Vector3();\r\n\r\n\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\r\n\r\n\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\r\n\r\n\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\tvector[ u ] = x * udir;\r\n\t\t\t\t\tvector[ v ] = y * vdir;\r\n\t\t\t\t\tvector[ w ] = depthHalf;\r\n\r\n\t\t\t\t\t// now apply vector to vertex buffer\r\n\r\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\tvector[ u ] = 0;\r\n\t\t\t\t\tvector[ v ] = 0;\r\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\t\t\t\t// now apply vector to normal buffer\r\n\r\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t\t\t// counters\r\n\r\n\t\t\t\t\tvertexCounter += 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// indices\r\n\r\n\t\t\t// 1. you need three indices to draw a single face\r\n\t\t\t// 2. a single segment consists of two faces\r\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\r\n\r\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\r\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\r\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t\t// increase counter\r\n\r\n\t\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t\t// update total number of vertices\r\n\r\n\t\t\tnumberOfVertices += vertexCounter;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tBoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// PlaneGeometry\r\n\r\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'PlaneGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\r\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\r\n\r\n\t// PlaneBufferGeometry\r\n\r\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'PlaneBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\r\n\t\twidth = width || 1;\r\n\t\theight = height || 1;\r\n\r\n\t\tvar width_half = width / 2;\r\n\t\tvar height_half = height / 2;\r\n\r\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\r\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\r\n\r\n\t\tvar gridX1 = gridX + 1;\r\n\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\tvar segment_width = width / gridX;\r\n\t\tvar segment_height = height / gridY;\r\n\r\n\t\tvar ix, iy;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tvar y = iy * segment_height - height_half;\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar x = ix * segment_width - width_half;\r\n\r\n\t\t\t\tvertices.push( x, - y, 0 );\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar materialId = 0;\r\n\r\n\tfunction Material() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Material';\r\n\r\n\t\tthis.fog = true;\r\n\t\tthis.lights = true;\r\n\r\n\t\tthis.blending = NormalBlending;\r\n\t\tthis.side = FrontSide;\r\n\t\tthis.flatShading = false;\r\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\r\n\r\n\t\tthis.opacity = 1;\r\n\t\tthis.transparent = false;\r\n\r\n\t\tthis.blendSrc = SrcAlphaFactor;\r\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\r\n\t\tthis.blendEquation = AddEquation;\r\n\t\tthis.blendSrcAlpha = null;\r\n\t\tthis.blendDstAlpha = null;\r\n\t\tthis.blendEquationAlpha = null;\r\n\r\n\t\tthis.depthFunc = LessEqualDepth;\r\n\t\tthis.depthTest = true;\r\n\t\tthis.depthWrite = true;\r\n\r\n\t\tthis.clippingPlanes = null;\r\n\t\tthis.clipIntersection = false;\r\n\t\tthis.clipShadows = false;\r\n\r\n\t\tthis.shadowSide = null;\r\n\r\n\t\tthis.colorWrite = true;\r\n\r\n\t\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\t\tthis.polygonOffset = false;\r\n\t\tthis.polygonOffsetFactor = 0;\r\n\t\tthis.polygonOffsetUnits = 0;\r\n\r\n\t\tthis.dithering = false;\r\n\r\n\t\tthis.alphaTest = 0;\r\n\t\tthis.premultipliedAlpha = false;\r\n\r\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\r\n\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Material,\r\n\r\n\t\tisMaterial: true,\r\n\r\n\t\tonBeforeCompile: function () {},\r\n\r\n\t\tsetValues: function ( values ) {\r\n\r\n\t\t\tif ( values === undefined ) return;\r\n\r\n\t\t\tfor ( var key in values ) {\r\n\r\n\t\t\t\tvar newValue = values[ key ];\r\n\r\n\t\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// for backward compatability if shading is set in the constructor\r\n\t\t\t\tif ( key === 'shading' ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\r\n\r\n\t\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\r\n\r\n\t\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t\t} else if ( key === 'overdraw' ) {\r\n\r\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\r\n\t\t\t\t\tthis[ key ] = Number( newValue );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tif ( isRoot ) {\r\n\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {}\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Material',\r\n\t\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard Material serialization\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\r\n\t\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\r\n\r\n\t\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\r\n\t\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\r\n\r\n\t\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\r\n\t\t\tif ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\r\n\r\n\t\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\r\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\t\t\tif ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;\r\n\t\t\tif ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;\r\n\r\n\t\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\r\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\r\n\r\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\r\n\r\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\r\n\r\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.normalMapType = this.normalMapType;\r\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\r\n\r\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\r\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\r\n\r\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\r\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\r\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\r\n\r\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\r\n\r\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\t\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\r\n\t\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\r\n\t\t\tif ( this.side !== FrontSide ) data.side = this.side;\r\n\t\t\tif ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;\r\n\r\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\r\n\r\n\t\t\tdata.depthFunc = this.depthFunc;\r\n\t\t\tdata.depthTest = this.depthTest;\r\n\t\t\tdata.depthWrite = this.depthWrite;\r\n\r\n\t\t\t// rotation (SpriteMaterial)\r\n\t\t\tif ( this.rotation !== 0 ) data.rotation = this.rotation;\r\n\r\n\t\t\tif ( this.linewidth !== 1 ) data.linewidth = this.linewidth;\r\n\t\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\r\n\t\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\r\n\t\t\tif ( this.scale !== undefined ) data.scale = this.scale;\r\n\r\n\t\t\tif ( this.dithering === true ) data.dithering = true;\r\n\r\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\r\n\r\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\r\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\t\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\r\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\t\t\tif ( this.morphTargets === true ) data.morphTargets = true;\r\n\t\t\tif ( this.skinning === true ) data.skinning = true;\r\n\r\n\t\t\tif ( this.visible === false ) data.visible = false;\r\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\r\n\r\n\t\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn values;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isRoot ) {\r\n\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\t\tif ( images.length > 0 ) data.images = images;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.fog = source.fog;\r\n\t\t\tthis.lights = source.lights;\r\n\r\n\t\t\tthis.blending = source.blending;\r\n\t\t\tthis.side = source.side;\r\n\t\t\tthis.flatShading = source.flatShading;\r\n\t\t\tthis.vertexColors = source.vertexColors;\r\n\r\n\t\t\tthis.opacity = source.opacity;\r\n\t\t\tthis.transparent = source.transparent;\r\n\r\n\t\t\tthis.blendSrc = source.blendSrc;\r\n\t\t\tthis.blendDst = source.blendDst;\r\n\t\t\tthis.blendEquation = source.blendEquation;\r\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\r\n\t\t\tthis.depthFunc = source.depthFunc;\r\n\t\t\tthis.depthTest = source.depthTest;\r\n\t\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\t\tthis.precision = source.precision;\r\n\r\n\t\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\t\tthis.dithering = source.dithering;\r\n\r\n\t\t\tthis.alphaTest = source.alphaTest;\r\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\r\n\t\t\tthis.overdraw = source.overdraw;\r\n\r\n\t\t\tthis.visible = source.visible;\r\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\t\tthis.clipShadows = source.clipShadows;\r\n\t\t\tthis.clipIntersection = source.clipIntersection;\r\n\r\n\t\t\tvar srcPlanes = source.clippingPlanes,\r\n\t\t\t\tdstPlanes = null;\r\n\r\n\t\t\tif ( srcPlanes !== null ) {\r\n\r\n\t\t\t\tvar n = srcPlanes.length;\r\n\t\t\t\tdstPlanes = new Array( n );\r\n\r\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.clippingPlanes = dstPlanes;\r\n\r\n\t\t\tthis.shadowSide = source.shadowSide;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshBasicMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // emissive\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\r\n\r\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\r\n\r\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  defines: { \"label\" : \"value\" },\r\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\r\n\t *\r\n\t *  fragmentShader: <string>,\r\n\t *  vertexShader: <string>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  lights: <bool>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction ShaderMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'ShaderMaterial';\r\n\r\n\t\tthis.defines = {};\r\n\t\tthis.uniforms = {};\r\n\r\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\r\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\r\n\r\n\t\tthis.linewidth = 1;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false; // set to use scene fog\r\n\t\tthis.lights = false; // set to use scene lights\r\n\t\tthis.clipping = false; // set to use user-defined clipping planes\r\n\r\n\t\tthis.skinning = false; // set to use skinning attribute streams\r\n\t\tthis.morphTargets = false; // set to use morph targets\r\n\t\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\t\tthis.extensions = {\r\n\t\t\tderivatives: false, // set to use derivatives\r\n\t\t\tfragDepth: false, // set to use fragment depth values\r\n\t\t\tdrawBuffers: false, // set to use draw buffers\r\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\r\n\t\t};\r\n\r\n\t\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\t\tthis.defaultAttributeValues = {\r\n\t\t\t'color': [ 1, 1, 1 ],\r\n\t\t\t'uv': [ 0, 0 ],\r\n\t\t\t'uv2': [ 0, 0 ]\r\n\t\t};\r\n\r\n\t\tthis.index0AttributeName = undefined;\r\n\t\tthis.uniformsNeedUpdate = false;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tif ( parameters.attributes !== undefined ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setValues( parameters );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tShaderMaterial.prototype = Object.create( Material.prototype );\r\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\r\n\r\n\tShaderMaterial.prototype.isShaderMaterial = true;\r\n\r\n\tShaderMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.fragmentShader = source.fragmentShader;\r\n\t\tthis.vertexShader = source.vertexShader;\r\n\r\n\t\tthis.uniforms = UniformsUtils.clone( source.uniforms );\r\n\r\n\t\tthis.defines = Object.assign( {}, source.defines );\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.lights = source.lights;\r\n\t\tthis.clipping = source.clipping;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\tthis.extensions = source.extensions;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\r\n\r\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.uniforms = {};\r\n\r\n\t\tfor ( var name in this.uniforms ) {\r\n\r\n\t\t\tvar uniform = this.uniforms[ name ];\r\n\t\t\tvar value = uniform.value;\r\n\r\n\t\t\tif ( value.isTexture ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 't',\r\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value.isColor ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'c',\r\n\t\t\t\t\tvalue: value.getHex()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value.isVector2 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v2',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value.isVector3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value.isVector4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value.isMatrix4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\tvalue: value\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\r\n\r\n\t\tdata.vertexShader = this.vertexShader;\r\n\t\tdata.fragmentShader = this.fragmentShader;\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Ray( origin, direction ) {\r\n\r\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\r\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3();\r\n\r\n\t}\r\n\r\n\tObject.assign( Ray.prototype, {\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\tthis.origin.copy( origin );\r\n\t\t\tthis.direction.copy( direction );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( ray ) {\r\n\r\n\t\t\tthis.origin.copy( ray.origin );\r\n\t\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tat: function ( t, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( v ) {\r\n\r\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trecast: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function recast( t ) {\r\n\r\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tclosestPointToPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.subVectors( point, this.origin );\r\n\r\n\t\t\tvar directionDistance = target.dot( this.direction );\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn target.copy( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSqToPoint: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function distanceSqToPoint( point ) {\r\n\r\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t\t\t// point behind the ray\r\n\r\n\t\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t\t\treturn v1.distanceToSquared( point );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tdistanceSqToSegment: function () {\r\n\r\n\t\t\tvar segCenter = new Vector3();\r\n\t\t\tvar segDir = new Vector3();\r\n\t\t\tvar diff = new Vector3();\r\n\r\n\t\t\treturn function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t\t// defined by v0 and v1\r\n\t\t\t\t// It can also set two optional targets :\r\n\t\t\t\t// - The closest point on the ray\r\n\t\t\t\t// - The closest point on the segment\r\n\r\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\r\n\r\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\r\n\t\t\t\tvar b0 = diff.dot( this.direction );\r\n\t\t\t\tvar b1 = - diff.dot( segDir );\r\n\t\t\t\tvar c = diff.lengthSq();\r\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\t\tvar s0, s1, sqrDist, extDet;\r\n\r\n\t\t\t\tif ( det > 0 ) {\r\n\r\n\t\t\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\t\textDet = segExtent * det;\r\n\r\n\t\t\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn sqrDist;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tintersectSphere: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function intersectSphere( sphere, target ) {\r\n\r\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\r\n\t\t\t\tvar tca = v1.dot( this.direction );\r\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\r\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\t\t\tif ( d2 > radius2 ) return null;\r\n\r\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\t\tvar t0 = tca - thc;\r\n\r\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\t\tvar t1 = tca + thc;\r\n\r\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\r\n\r\n\t\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, target );\r\n\r\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\t\treturn this.at( t0, target );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t\t// Return if the ray never intersects the plane\r\n\r\n\t\t\treturn t >= 0 ? t : null;\r\n\r\n\t\t},\r\n\r\n\t\tintersectPlane: function ( plane, target ) {\r\n\r\n\t\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\t\tif ( t === null ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.at( t, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\t// check if the ray lies on the plane first\r\n\r\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t},\r\n\r\n\t\tintersectBox: function ( box, target ) {\r\n\r\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\t\tvar origin = this.origin;\r\n\r\n\t\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\r\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\r\n\r\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\r\n\r\n\t\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\r\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\r\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\r\n\t\t\t//return point closest to the ray (positive side)\r\n\r\n\t\t\tif ( tmax < 0 ) return null;\r\n\r\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: ( function () {\r\n\r\n\t\t\tvar v = new Vector3();\r\n\r\n\t\t\treturn function intersectsBox( box ) {\r\n\r\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\r\n\r\n\t\t\t};\r\n\r\n\t\t} )(),\r\n\r\n\t\tintersectTriangle: function () {\r\n\r\n\t\t\t// Compute the offset origin, edges, and normal.\r\n\t\t\tvar diff = new Vector3();\r\n\t\t\tvar edge1 = new Vector3();\r\n\t\t\tvar edge2 = new Vector3();\r\n\t\t\tvar normal = new Vector3();\r\n\r\n\t\t\treturn function intersectTriangle( a, b, c, backfaceCulling, target ) {\r\n\r\n\t\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t\t\tedge1.subVectors( b, a );\r\n\t\t\t\tedge2.subVectors( c, a );\r\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\r\n\r\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\t\tvar DdN = this.direction.dot( normal );\r\n\t\t\t\tvar sign;\r\n\r\n\t\t\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\t\t\tsign = 1;\r\n\r\n\t\t\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\t\t\tsign = - 1;\r\n\t\t\t\t\tDdN = - DdN;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdiff.subVectors( this.origin, a );\r\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\r\n\r\n\t\t\t\t// b1 < 0, no intersection\r\n\t\t\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\r\n\r\n\t\t\t\t// b2 < 0, no intersection\r\n\t\t\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\r\n\r\n\t\t\t\t// t < 0, no intersection\r\n\t\t\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Ray intersects triangle.\r\n\t\t\t\treturn this.at( QdN / DdN, target );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tapplyMatrix4: function ( matrix4 ) {\r\n\r\n\t\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\t\tthis.direction.transformDirection( matrix4 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( ray ) {\r\n\r\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Triangle( a, b, c ) {\r\n\r\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\r\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\r\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\r\n\r\n\t}\r\n\r\n\tObject.assign( Triangle, {\r\n\r\n\t\tgetNormal: function () {\r\n\r\n\t\t\tvar v0 = new Vector3();\r\n\r\n\t\t\treturn function getNormal( a, b, c, target ) {\r\n\r\n\t\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\r\n\t\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttarget.subVectors( c, b );\r\n\t\t\t\tv0.subVectors( a, b );\r\n\t\t\t\ttarget.cross( v0 );\r\n\r\n\t\t\t\tvar targetLengthSq = target.lengthSq();\r\n\t\t\t\tif ( targetLengthSq > 0 ) {\r\n\r\n\t\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn target.set( 0, 0, 0 );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\t// static/instance method to calculate barycentric coordinates\r\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\t\tgetBarycoord: function () {\r\n\r\n\t\t\tvar v0 = new Vector3();\r\n\t\t\tvar v1 = new Vector3();\r\n\t\t\tvar v2 = new Vector3();\r\n\r\n\t\t\treturn function getBarycoord( point, a, b, c, target ) {\r\n\r\n\t\t\t\tv0.subVectors( c, a );\r\n\t\t\t\tv1.subVectors( b, a );\r\n\t\t\t\tv2.subVectors( point, a );\r\n\r\n\t\t\t\tvar dot00 = v0.dot( v0 );\r\n\t\t\t\tvar dot01 = v0.dot( v1 );\r\n\t\t\t\tvar dot02 = v0.dot( v2 );\r\n\t\t\t\tvar dot11 = v1.dot( v1 );\r\n\t\t\t\tvar dot12 = v1.dot( v2 );\r\n\r\n\t\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\r\n\t\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// collinear or singular triangle\r\n\t\t\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\t\t\treturn target.set( - 2, - 1, - 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar invDenom = 1 / denom;\r\n\t\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t\t\t// barycentric coordinates must always sum to 1\r\n\t\t\t\treturn target.set( 1 - u - v, v, u );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tcontainsPoint: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function containsPoint( point, a, b, c ) {\r\n\r\n\t\t\t\tTriangle.getBarycoord( point, a, b, c, v1 );\r\n\r\n\t\t\t\treturn ( v1.x >= 0 ) && ( v1.y >= 0 ) && ( ( v1.x + v1.y ) <= 1 );\r\n\r\n\t\t\t};\r\n\r\n\t\t}()\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle.prototype, {\r\n\r\n\t\tset: function ( a, b, c ) {\r\n\r\n\t\t\tthis.a.copy( a );\r\n\t\t\tthis.b.copy( b );\r\n\t\t\tthis.c.copy( c );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\t\tthis.a.copy( points[ i0 ] );\r\n\t\t\tthis.b.copy( points[ i1 ] );\r\n\t\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( triangle ) {\r\n\r\n\t\t\tthis.a.copy( triangle.a );\r\n\t\t\tthis.b.copy( triangle.b );\r\n\t\t\tthis.c.copy( triangle.c );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetArea: function () {\r\n\r\n\t\t\tvar v0 = new Vector3();\r\n\t\t\tvar v1 = new Vector3();\r\n\r\n\t\t\treturn function getArea() {\r\n\r\n\t\t\t\tv0.subVectors( this.c, this.b );\r\n\t\t\t\tv1.subVectors( this.a, this.b );\r\n\r\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tgetMidpoint: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t\t},\r\n\r\n\t\tgetNormal: function ( target ) {\r\n\r\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\r\n\r\n\t\t},\r\n\r\n\t\tgetPlane: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t\t},\r\n\r\n\t\tgetBarycoord: function ( point, target ) {\r\n\r\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsTriangle( this );\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPoint: function () {\r\n\r\n\t\t\tvar vab = new Vector3();\r\n\t\t\tvar vac = new Vector3();\r\n\t\t\tvar vbc = new Vector3();\r\n\t\t\tvar vap = new Vector3();\r\n\t\t\tvar vbp = new Vector3();\r\n\t\t\tvar vcp = new Vector3();\r\n\r\n\t\t\treturn function closestPointToPoint( p, target ) {\r\n\r\n\t\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\r\n\t\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar a = this.a, b = this.b, c = this.c;\r\n\t\t\t\tvar v, w;\r\n\r\n\t\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n\t\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n\t\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n\t\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\r\n\t\t\t\t// the point lies in with the minimum amount of redundant computation.\r\n\r\n\t\t\t\tvab.subVectors( b, a );\r\n\t\t\t\tvac.subVectors( c, a );\r\n\t\t\t\tvap.subVectors( p, a );\r\n\t\t\t\tvar d1 = vab.dot( vap );\r\n\t\t\t\tvar d2 = vac.dot( vap );\r\n\t\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\r\n\r\n\t\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\r\n\t\t\t\t\treturn target.copy( a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvbp.subVectors( p, b );\r\n\t\t\t\tvar d3 = vab.dot( vbp );\r\n\t\t\t\tvar d4 = vac.dot( vbp );\r\n\t\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\r\n\r\n\t\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\r\n\t\t\t\t\treturn target.copy( b );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar vc = d1 * d4 - d3 * d2;\r\n\t\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\r\n\r\n\t\t\t\t\tv = d1 / ( d1 - d3 );\r\n\t\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\r\n\t\t\t\t\treturn target.copy( a ).addScaledVector( vab, v );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvcp.subVectors( p, c );\r\n\t\t\t\tvar d5 = vab.dot( vcp );\r\n\t\t\t\tvar d6 = vac.dot( vcp );\r\n\t\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\r\n\r\n\t\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\r\n\t\t\t\t\treturn target.copy( c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar vb = d5 * d2 - d1 * d6;\r\n\t\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\r\n\r\n\t\t\t\t\tw = d2 / ( d2 - d6 );\r\n\t\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\r\n\t\t\t\t\treturn target.copy( a ).addScaledVector( vac, w );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar va = d3 * d6 - d5 * d4;\r\n\t\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\r\n\r\n\t\t\t\t\tvbc.subVectors( c, b );\r\n\t\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\r\n\t\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\r\n\t\t\t\t\treturn target.copy( b ).addScaledVector( vbc, w ); // edge region of BC\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// face region\r\n\t\t\t\tvar denom = 1 / ( va + vb + vc );\r\n\t\t\t\t// u = va * denom\r\n\t\t\t\tv = vb * denom;\r\n\t\t\t\tw = vc * denom;\r\n\t\t\t\treturn target.copy( a ).addScaledVector( vab, v ).addScaledVector( vac, w );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tequals: function ( triangle ) {\r\n\r\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author jonobr1 / http://jonobr1.com/\r\n\t */\r\n\r\n\tfunction Mesh( geometry, material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Mesh';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t\tthis.drawMode = TrianglesDrawMode;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Mesh,\r\n\r\n\t\tisMesh: true,\r\n\r\n\t\tsetDrawMode: function ( value ) {\r\n\r\n\t\t\tthis.drawMode = value;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.drawMode = source.drawMode;\r\n\r\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMorphTargets: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar m, ml, name;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\t\t\tvar keys = Object.keys( morphAttributes );\r\n\r\n\t\t\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\r\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\r\n\r\n\t\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\t\tfor ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\tname = morphTargets[ m ].name || String( m );\r\n\r\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\traycast: ( function () {\r\n\r\n\t\t\tvar inverseMatrix = new Matrix4();\r\n\t\t\tvar ray = new Ray();\r\n\t\t\tvar sphere = new Sphere();\r\n\r\n\t\t\tvar vA = new Vector3();\r\n\t\t\tvar vB = new Vector3();\r\n\t\t\tvar vC = new Vector3();\r\n\r\n\t\t\tvar tempA = new Vector3();\r\n\t\t\tvar tempB = new Vector3();\r\n\t\t\tvar tempC = new Vector3();\r\n\r\n\t\t\tvar uvA = new Vector2();\r\n\t\t\tvar uvB = new Vector2();\r\n\t\t\tvar uvC = new Vector2();\r\n\r\n\t\t\tvar barycoord = new Vector3();\r\n\r\n\t\t\tvar intersectionPoint = new Vector3();\r\n\t\t\tvar intersectionPointWorld = new Vector3();\r\n\r\n\t\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\r\n\r\n\t\t\t\tTriangle.getBarycoord( point, p1, p2, p3, barycoord );\r\n\r\n\t\t\t\tuv1.multiplyScalar( barycoord.x );\r\n\t\t\t\tuv2.multiplyScalar( barycoord.y );\r\n\t\t\t\tuv3.multiplyScalar( barycoord.z );\r\n\r\n\t\t\t\tuv1.add( uv2 ).add( uv3 );\r\n\r\n\t\t\t\treturn uv1.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\t\t\t\tvar intersect;\r\n\r\n\t\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( intersect === null ) return null;\r\n\r\n\t\t\t\tintersectionPointWorld.copy( point );\r\n\t\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\r\n\r\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\tpoint: intersectionPointWorld.clone(),\r\n\t\t\t\t\tobject: object\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, uv, a, b, c ) {\r\n\r\n\t\t\t\tvA.fromBufferAttribute( position, a );\r\n\t\t\t\tvB.fromBufferAttribute( position, b );\r\n\t\t\t\tvC.fromBufferAttribute( position, c );\r\n\r\n\t\t\t\tvar intersection = checkIntersection( object, material, raycaster, ray, vA, vB, vC, intersectionPoint );\r\n\r\n\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\tif ( uv ) {\r\n\r\n\t\t\t\t\t\tuvA.fromBufferAttribute( uv, a );\r\n\t\t\t\t\t\tuvB.fromBufferAttribute( uv, b );\r\n\t\t\t\t\t\tuvC.fromBufferAttribute( uv, c );\r\n\r\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar face = new Face3( a, b, c );\r\n\t\t\t\t\tTriangle.getNormal( vA, vB, vC, face.normal );\r\n\r\n\t\t\t\t\tintersection.face = face;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn intersection;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\t\tvar geometry = this.geometry;\r\n\t\t\t\tvar material = this.material;\r\n\t\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\t\tif ( material === undefined ) return;\r\n\r\n\t\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\t\t\t// Check boundingBox before continuing\r\n\r\n\t\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar intersection;\r\n\r\n\t\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\tvar a, b, c;\r\n\t\t\t\t\tvar index = geometry.index;\r\n\t\t\t\t\tvar position = geometry.attributes.position;\r\n\t\t\t\t\tvar uv = geometry.attributes.uv;\r\n\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\tvar drawRange = geometry.drawRange;\r\n\t\t\t\t\tvar i, j, il, jl;\r\n\t\t\t\t\tvar group, groupMaterial;\r\n\t\t\t\t\tvar start, end;\r\n\r\n\t\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\t\t// indexed buffer geometry\r\n\r\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tgroup = groups[ i ];\r\n\t\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\t\ta = index.getX( j );\r\n\t\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\r\n\t\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\r\n\r\n\t\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );\r\n\r\n\t\t\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\r\n\t\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\ta = index.getX( i );\r\n\t\t\t\t\t\t\t\tb = index.getX( i + 1 );\r\n\t\t\t\t\t\t\t\tc = index.getX( i + 2 );\r\n\r\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );\r\n\r\n\t\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t\t\t\t// non-indexed buffer geometry\r\n\r\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tgroup = groups[ i ];\r\n\t\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\t\ta = j;\r\n\t\t\t\t\t\t\t\t\tb = j + 1;\r\n\t\t\t\t\t\t\t\t\tc = j + 2;\r\n\r\n\t\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, ray, position, uv, a, b, c );\r\n\r\n\t\t\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\r\n\t\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\ta = i;\r\n\t\t\t\t\t\t\t\tb = i + 1;\r\n\t\t\t\t\t\t\t\tc = i + 2;\r\n\r\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, ray, position, uv, a, b, c );\r\n\r\n\t\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tvar fvA, fvB, fvC;\r\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\r\n\r\n\t\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\t\tvar uvs;\r\n\r\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\r\n\r\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\tvar face = faces[ f ];\r\n\t\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\r\n\r\n\t\t\t\t\t\tif ( faceMaterial === undefined ) continue;\r\n\r\n\t\t\t\t\t\tfvA = vertices[ face.a ];\r\n\t\t\t\t\t\tfvB = vertices[ face.b ];\r\n\t\t\t\t\t\tfvC = vertices[ face.c ];\r\n\r\n\t\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\r\n\r\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\r\n\r\n\t\t\t\t\t\t\tvA.set( 0, 0, 0 );\r\n\t\t\t\t\t\t\tvB.set( 0, 0, 0 );\r\n\t\t\t\t\t\t\tvC.set( 0, 0, 0 );\r\n\r\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\r\n\r\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\r\n\r\n\t\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\r\n\t\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\r\n\t\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvA.add( fvA );\r\n\t\t\t\t\t\t\tvB.add( fvB );\r\n\t\t\t\t\t\t\tvC.add( fvC );\r\n\r\n\t\t\t\t\t\t\tfvA = vA;\r\n\t\t\t\t\t\t\tfvB = vB;\r\n\t\t\t\t\t\t\tfvC = vC;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\r\n\r\n\t\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\r\n\t\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\r\n\t\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\r\n\t\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\r\n\r\n\t\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tintersection.face = face;\r\n\t\t\t\t\t\t\tintersection.faceIndex = f;\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}() ),\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\r\n\r\n\t\tvar clearColor = new Color( 0x000000 );\r\n\t\tvar clearAlpha = 0;\r\n\r\n\t\tvar planeCamera, planeMesh;\r\n\t\tvar boxMesh;\r\n\r\n\t\tfunction render( renderList, scene, camera, forceClear ) {\r\n\r\n\t\t\tvar background = scene.background;\r\n\r\n\t\t\tif ( background === null ) {\r\n\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t\t} else if ( background && background.isColor ) {\r\n\r\n\t\t\t\tsetClear( background, 1 );\r\n\t\t\t\tforceClear = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderer.autoClear || forceClear ) {\r\n\r\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( background && background.isCubeTexture ) {\r\n\r\n\t\t\t\tif ( boxMesh === undefined ) {\r\n\r\n\t\t\t\t\tboxMesh = new Mesh(\r\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\r\n\t\t\t\t\t\tnew ShaderMaterial( {\r\n\t\t\t\t\t\t\tuniforms: ShaderLib.cube.uniforms,\r\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\r\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\r\n\t\t\t\t\t\t\tside: BackSide,\r\n\t\t\t\t\t\t\tdepthTest: true,\r\n\t\t\t\t\t\t\tdepthWrite: false,\r\n\t\t\t\t\t\t\tfog: false\r\n\t\t\t\t\t\t} )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tboxMesh.geometry.removeAttribute( 'normal' );\r\n\t\t\t\t\tboxMesh.geometry.removeAttribute( 'uv' );\r\n\r\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\r\n\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tobjects.update( boxMesh );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tboxMesh.material.uniforms.tCube.value = background;\r\n\r\n\t\t\t\trenderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );\r\n\r\n\t\t\t} else if ( background && background.isTexture ) {\r\n\r\n\t\t\t\tif ( planeCamera === undefined ) {\r\n\r\n\t\t\t\t\tplaneCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\r\n\t\t\t\t\tplaneMesh = new Mesh(\r\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\r\n\t\t\t\t\t\tnew MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tobjects.update( planeMesh );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tplaneMesh.material.map = background;\r\n\r\n\t\t\t\t// TODO Push this to renderList\r\n\r\n\t\t\t\trenderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setClear( color, alpha ) {\r\n\r\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tgetClearColor: function () {\r\n\r\n\t\t\t\treturn clearColor;\r\n\r\n\t\t\t},\r\n\t\t\tsetClearColor: function ( color, alpha ) {\r\n\r\n\t\t\t\tclearColor.set( color );\r\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t\t},\r\n\t\t\tgetClearAlpha: function () {\r\n\r\n\t\t\t\treturn clearAlpha;\r\n\r\n\t\t\t},\r\n\t\t\tsetClearAlpha: function ( alpha ) {\r\n\r\n\t\t\t\tclearAlpha = alpha;\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t\t},\r\n\t\t\trender: render\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\r\n\r\n\t\tvar mode;\r\n\r\n\t\tfunction setMode( value ) {\r\n\r\n\t\t\tmode = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction render( start, count ) {\r\n\r\n\t\t\tgl.drawArrays( mode, start, count );\r\n\r\n\t\t\tinfo.update( count, mode );\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderInstances( geometry, start, count ) {\r\n\r\n\t\t\tvar extension;\r\n\r\n\t\t\tif ( capabilities.isWebGL2 ) {\r\n\r\n\t\t\t\textension = gl;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\textension[ capabilities.isWebGL2 ? 'drawArraysInstanced' : 'drawArraysInstancedANGLE' ]( mode, start, count, geometry.maxInstancedCount );\r\n\r\n\t\t\tinfo.update( count, mode, geometry.maxInstancedCount );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\r\n\r\n\t\tvar maxAnisotropy;\r\n\r\n\t\tfunction getMaxAnisotropy() {\r\n\r\n\t\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaxAnisotropy = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxAnisotropy;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getMaxPrecision( precision ) {\r\n\r\n\t\t\tif ( precision === 'highp' ) {\r\n\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\t\treturn 'highp';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprecision = 'mediump';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( precision === 'mediump' ) {\r\n\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\t\treturn 'mediump';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 'lowp';\r\n\r\n\t\t}\r\n\r\n\t\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext;\r\n\r\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n\t\tvar maxPrecision = getMaxPrecision( precision );\r\n\r\n\t\tif ( maxPrecision !== precision ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n\t\t\tprecision = maxPrecision;\r\n\r\n\t\t}\r\n\r\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\r\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\t\tvar maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\t\tvar maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n\t\tvar maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n\t\tvar maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\t\tvar maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\t\tvar maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n\t\tvar maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n\t\tvar vertexTextures = maxVertexTextures > 0;\r\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\r\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n\r\n\t\treturn {\r\n\r\n\t\t\tisWebGL2: isWebGL2,\r\n\r\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\r\n\t\t\tgetMaxPrecision: getMaxPrecision,\r\n\r\n\t\t\tprecision: precision,\r\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n\t\t\tmaxTextures: maxTextures,\r\n\t\t\tmaxVertexTextures: maxVertexTextures,\r\n\t\t\tmaxTextureSize: maxTextureSize,\r\n\t\t\tmaxCubemapSize: maxCubemapSize,\r\n\r\n\t\t\tmaxAttributes: maxAttributes,\r\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\r\n\t\t\tmaxVaryings: maxVaryings,\r\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\r\n\r\n\t\t\tvertexTextures: vertexTextures,\r\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\r\n\t\t\tfloatVertexTextures: floatVertexTextures\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction WebGLClipping() {\r\n\r\n\t\tvar scope = this,\r\n\r\n\t\t\tglobalState = null,\r\n\t\t\tnumGlobalPlanes = 0,\r\n\t\t\tlocalClippingEnabled = false,\r\n\t\t\trenderingShadows = false,\r\n\r\n\t\t\tplane = new Plane(),\r\n\t\t\tviewNormalMatrix = new Matrix3(),\r\n\r\n\t\t\tuniform = { value: null, needsUpdate: false };\r\n\r\n\t\tthis.uniform = uniform;\r\n\t\tthis.numPlanes = 0;\r\n\t\tthis.numIntersection = 0;\r\n\r\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\r\n\r\n\t\t\tvar enabled =\r\n\t\t\t\tplanes.length !== 0 ||\r\n\t\t\t\tenableLocalClipping ||\r\n\t\t\t\t// enable state of previous frame - the clipping code has to\r\n\t\t\t\t// run another frame in order to reset the state:\r\n\t\t\t\tnumGlobalPlanes !== 0 ||\r\n\t\t\t\tlocalClippingEnabled;\r\n\r\n\t\t\tlocalClippingEnabled = enableLocalClipping;\r\n\r\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\r\n\t\t\tnumGlobalPlanes = planes.length;\r\n\r\n\t\t\treturn enabled;\r\n\r\n\t\t};\r\n\r\n\t\tthis.beginShadows = function () {\r\n\r\n\t\t\trenderingShadows = true;\r\n\t\t\tprojectPlanes( null );\r\n\r\n\t\t};\r\n\r\n\t\tthis.endShadows = function () {\r\n\r\n\t\t\trenderingShadows = false;\r\n\t\t\tresetGlobalState();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\r\n\r\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\r\n\r\n\t\t\t\t// there's no local clipping\r\n\r\n\t\t\t\tif ( renderingShadows ) {\r\n\r\n\t\t\t\t\t// there's no global clipping\r\n\r\n\t\t\t\t\tprojectPlanes( null );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tresetGlobalState();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\r\n\t\t\t\t\tlGlobal = nGlobal * 4,\r\n\r\n\t\t\t\t\tdstArray = cache.clippingState || null;\r\n\r\n\t\t\t\tuniform.value = dstArray; // ensure unique state\r\n\r\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\r\n\r\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\r\n\r\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcache.clippingState = dstArray;\r\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\r\n\t\t\t\tthis.numPlanes += nGlobal;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t};\r\n\r\n\t\tfunction resetGlobalState() {\r\n\r\n\t\t\tif ( uniform.value !== globalState ) {\r\n\r\n\t\t\t\tuniform.value = globalState;\r\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.numPlanes = numGlobalPlanes;\r\n\t\t\tscope.numIntersection = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\r\n\r\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\r\n\t\t\t\tdstArray = null;\r\n\r\n\t\t\tif ( nPlanes !== 0 ) {\r\n\r\n\t\t\t\tdstArray = uniform.value;\r\n\r\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\r\n\r\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\r\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\r\n\r\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\r\n\r\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\r\n\r\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\r\n\r\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\r\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniform.value = dstArray;\r\n\t\t\t\tuniform.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.numPlanes = nPlanes;\r\n\r\n\t\t\treturn dstArray;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLExtensions( gl ) {\r\n\r\n\t\tvar extensions = {};\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: function ( name ) {\r\n\r\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn extensions[ name ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar extension;\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\t\tcase 'WEBGL_depth_texture':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\textension = gl.getExtension( name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\textensions[ name ] = extension;\r\n\r\n\t\t\t\treturn extension;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLGeometries( gl, attributes, info ) {\r\n\r\n\t\tvar geometries = {};\r\n\t\tvar wireframeAttributes = {};\r\n\r\n\t\tfunction onGeometryDispose( event ) {\r\n\r\n\t\t\tvar geometry = event.target;\r\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\r\n\r\n\t\t\tif ( buffergeometry.index !== null ) {\r\n\r\n\t\t\t\tattributes.remove( buffergeometry.index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var name in buffergeometry.attributes ) {\r\n\r\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\tdelete geometries[ geometry.id ];\r\n\r\n\t\t\tvar attribute = wireframeAttributes[ buffergeometry.id ];\r\n\r\n\t\t\tif ( attribute ) {\r\n\r\n\t\t\t\tattributes.remove( attribute );\r\n\t\t\t\tdelete wireframeAttributes[ buffergeometry.id ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tinfo.memory.geometries --;\r\n\r\n\t\t}\r\n\r\n\t\tfunction get( object, geometry ) {\r\n\r\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\r\n\r\n\t\t\tif ( buffergeometry ) return buffergeometry;\r\n\r\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tbuffergeometry = geometry;\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\r\n\r\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometries[ geometry.id ] = buffergeometry;\r\n\r\n\t\t\tinfo.memory.geometries ++;\r\n\r\n\t\t\treturn buffergeometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( geometry ) {\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var name in geometryAttributes ) {\r\n\r\n\t\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph targets\r\n\r\n\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\t\tfor ( var name in morphAttributes ) {\r\n\r\n\t\t\t\tvar array = morphAttributes[ name ];\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getWireframeAttribute( geometry ) {\r\n\r\n\t\t\tvar attribute = wireframeAttributes[ geometry.id ];\r\n\r\n\t\t\tif ( attribute ) return attribute;\r\n\r\n\t\t\tvar indices = [];\r\n\r\n\t\t\tvar geometryIndex = geometry.index;\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\t\t// console.time( 'wireframe' );\r\n\r\n\t\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\t\tvar array = geometryIndex.array;\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\tvar a = array[ i + 0 ];\r\n\t\t\t\t\tvar b = array[ i + 1 ];\r\n\t\t\t\t\tvar c = array[ i + 2 ];\r\n\r\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar array = geometryAttributes.position.array;\r\n\r\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\tvar a = i + 0;\r\n\t\t\t\t\tvar b = i + 1;\r\n\t\t\t\t\tvar c = i + 2;\r\n\r\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// console.timeEnd( 'wireframe' );\r\n\r\n\t\t\tattribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\r\n\r\n\t\t\tattributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\t\twireframeAttributes[ geometry.id ] = attribute;\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: get,\r\n\t\t\tupdate: update,\r\n\r\n\t\t\tgetWireframeAttribute: getWireframeAttribute\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\r\n\r\n\t\tvar mode;\r\n\r\n\t\tfunction setMode( value ) {\r\n\r\n\t\t\tmode = value;\r\n\r\n\t\t}\r\n\r\n\t\tvar type, bytesPerElement;\r\n\r\n\t\tfunction setIndex( value ) {\r\n\r\n\t\t\ttype = value.type;\r\n\t\t\tbytesPerElement = value.bytesPerElement;\r\n\r\n\t\t}\r\n\r\n\t\tfunction render( start, count ) {\r\n\r\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\r\n\r\n\t\t\tinfo.update( count, mode );\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderInstances( geometry, start, count ) {\r\n\r\n\t\t\tvar extension;\r\n\r\n\t\t\tif ( capabilities.isWebGL2 ) {\r\n\r\n\t\t\t\textension = gl;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\textension[ capabilities.isWebGL2 ? 'drawElementsInstanced' : 'drawElementsInstancedANGLE' ]( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );\r\n\r\n\t\t\tinfo.update( count, mode, geometry.maxInstancedCount );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.setIndex = setIndex;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WebGLInfo( gl ) {\r\n\r\n\t\tvar memory = {\r\n\t\t\tgeometries: 0,\r\n\t\t\ttextures: 0\r\n\t\t};\r\n\r\n\t\tvar render = {\r\n\t\t\tframe: 0,\r\n\t\t\tcalls: 0,\r\n\t\t\ttriangles: 0,\r\n\t\t\tpoints: 0,\r\n\t\t\tlines: 0\r\n\t\t};\r\n\r\n\t\tfunction update( count, mode, instanceCount ) {\r\n\r\n\t\t\tinstanceCount = instanceCount || 1;\r\n\r\n\t\t\trender.calls ++;\r\n\r\n\t\t\tswitch ( mode ) {\r\n\r\n\t\t\t\tcase gl.TRIANGLES:\r\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase gl.TRIANGLE_STRIP:\r\n\t\t\t\tcase gl.TRIANGLE_FAN:\r\n\t\t\t\t\trender.triangles += instanceCount * ( count - 2 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase gl.LINES:\r\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase gl.LINE_STRIP:\r\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase gl.LINE_LOOP:\r\n\t\t\t\t\trender.lines += instanceCount * count;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase gl.POINTS:\r\n\t\t\t\t\trender.points += instanceCount * count;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction reset() {\r\n\r\n\t\t\trender.frame ++;\r\n\t\t\trender.calls = 0;\r\n\t\t\trender.triangles = 0;\r\n\t\t\trender.points = 0;\r\n\t\t\trender.lines = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tmemory: memory,\r\n\t\t\trender: render,\r\n\t\t\tprograms: null,\r\n\t\t\tautoReset: true,\r\n\t\t\treset: reset,\r\n\t\t\tupdate: update\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction absNumericalSort( a, b ) {\r\n\r\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\r\n\r\n\t}\r\n\r\n\tfunction WebGLMorphtargets( gl ) {\r\n\r\n\t\tvar influencesList = {};\r\n\t\tvar morphInfluences = new Float32Array( 8 );\r\n\r\n\t\tfunction update( object, geometry, material, program ) {\r\n\r\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\r\n\r\n\t\t\tvar length = objectInfluences.length;\r\n\r\n\t\t\tvar influences = influencesList[ geometry.id ];\r\n\r\n\t\t\tif ( influences === undefined ) {\r\n\r\n\t\t\t\t// initialise list\r\n\r\n\t\t\t\tinfluences = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\r\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\r\n\r\n\t\t\t// Remove current morphAttributes\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\r\n\r\n\t\t\t\t\tif ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );\r\n\t\t\t\t\tif ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Collect influences\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tinfluence[ 0 ] = i;\r\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinfluences.sort( absNumericalSort );\r\n\r\n\t\t\t// Add morphAttributes\r\n\r\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence ) {\r\n\r\n\t\t\t\t\tvar index = influence[ 0 ];\r\n\t\t\t\t\tvar value = influence[ 1 ];\r\n\r\n\t\t\t\t\tif ( value ) {\r\n\r\n\t\t\t\t\t\tif ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );\r\n\t\t\t\t\t\tif ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );\r\n\r\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmorphInfluences[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tupdate: update\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLObjects( geometries, info ) {\r\n\r\n\t\tvar updateList = {};\r\n\r\n\t\tfunction update( object ) {\r\n\r\n\t\t\tvar frame = info.render.frame;\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\r\n\r\n\t\t\t// Update once per frame\r\n\r\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\r\n\r\n\t\t\t\tif ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometries.update( buffergeometry );\r\n\r\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffergeometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tupdateList = {};\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tupdate: update,\r\n\t\t\tdispose: dispose\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\t\timages = images !== undefined ? images : [];\r\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\r\n\r\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.flipY = false;\r\n\r\n\t}\r\n\r\n\tCubeTexture.prototype = Object.create( Texture.prototype );\r\n\tCubeTexture.prototype.constructor = CubeTexture;\r\n\r\n\tCubeTexture.prototype.isCubeTexture = true;\r\n\r\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.image;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis.image = value;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * Uniforms of a program.\r\n\t * Those form a tree structure with a special top-level container for the root,\r\n\t * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\r\n\t *\r\n\t *\r\n\t * Properties of inner nodes including the top-level container:\r\n\t *\r\n\t * .seq - array of nested uniforms\r\n\t * .map - nested uniforms by name\r\n\t *\r\n\t *\r\n\t * Methods of all nodes except the top-level container:\r\n\t *\r\n\t * .setValue( gl, value, [renderer] )\r\n\t *\r\n\t * \t\tuploads a uniform value(s)\r\n\t *  \tthe 'renderer' parameter is needed for sampler uniforms\r\n\t *\r\n\t *\r\n\t * Static methods of the top-level container (renderer factorizations):\r\n\t *\r\n\t * .upload( gl, seq, values, renderer )\r\n\t *\r\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\r\n\t *\r\n\t * .seqWithValue( seq, values ) : filteredSeq\r\n\t *\r\n\t * \t\tfilters 'seq' entries with corresponding entry in values\r\n\t *\r\n\t *\r\n\t * Methods of the top-level container (renderer factorizations):\r\n\t *\r\n\t * .setValue( gl, name, value )\r\n\t *\r\n\t * \t\tsets uniform with  name 'name' to 'value'\r\n\t *\r\n\t * .set( gl, obj, prop )\r\n\t *\r\n\t * \t\tsets uniform from object and property with same name than uniform\r\n\t *\r\n\t * .setOptional( gl, obj, prop )\r\n\t *\r\n\t * \t\tlike .set for an optional property of the object\r\n\t *\r\n\t */\r\n\r\n\tvar emptyTexture = new Texture();\r\n\tvar emptyCubeTexture = new CubeTexture();\r\n\r\n\t// --- Base for inner nodes (including the root) ---\r\n\r\n\tfunction UniformContainer() {\r\n\r\n\t\tthis.seq = [];\r\n\t\tthis.map = {};\r\n\r\n\t}\r\n\r\n\t// --- Utilities ---\r\n\r\n\t// Array Caches (provide typed arrays for temporary by size)\r\n\r\n\tvar arrayCacheF32 = [];\r\n\tvar arrayCacheI32 = [];\r\n\r\n\t// Float32Array caches used for uploading Matrix uniforms\r\n\r\n\tvar mat4array = new Float32Array( 16 );\r\n\tvar mat3array = new Float32Array( 9 );\r\n\tvar mat2array = new Float32Array( 4 );\r\n\r\n\t// Flattening for arrays of vectors and matrices\r\n\r\n\tfunction flatten( array, nBlocks, blockSize ) {\r\n\r\n\t\tvar firstElem = array[ 0 ];\r\n\r\n\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\r\n\t\t// unoptimized: ! isNaN( firstElem )\r\n\t\t// see http://jacksondunstan.com/articles/983\r\n\r\n\t\tvar n = nBlocks * blockSize,\r\n\t\t\tr = arrayCacheF32[ n ];\r\n\r\n\t\tif ( r === undefined ) {\r\n\r\n\t\t\tr = new Float32Array( n );\r\n\t\t\tarrayCacheF32[ n ] = r;\r\n\r\n\t\t}\r\n\r\n\t\tif ( nBlocks !== 0 ) {\r\n\r\n\t\t\tfirstElem.toArray( r, 0 );\r\n\r\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\r\n\r\n\t\t\t\toffset += blockSize;\r\n\t\t\t\tarray[ i ].toArray( r, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n\tfunction arraysEqual( a, b ) {\r\n\r\n\t\tif ( a.length !== b.length ) return false;\r\n\r\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( a[ i ] !== b[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction copyArray( a, b ) {\r\n\r\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\r\n\r\n\t\t\ta[ i ] = b[ i ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Texture unit allocation\r\n\r\n\tfunction allocTexUnits( renderer, n ) {\r\n\r\n\t\tvar r = arrayCacheI32[ n ];\r\n\r\n\t\tif ( r === undefined ) {\r\n\r\n\t\t\tr = new Int32Array( n );\r\n\t\t\tarrayCacheI32[ n ] = r;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\tr[ i ] = renderer.allocTextureUnit();\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n\t// --- Setters ---\r\n\r\n\t// Note: Defining these methods externally, because they come in a bunch\r\n\t// and this way their names minify.\r\n\r\n\t// Single scalar\r\n\r\n\tfunction setValue1f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( cache[ 0 ] === v ) return;\r\n\r\n\t\tgl.uniform1f( this.addr, v );\r\n\r\n\t\tcache[ 0 ] = v;\r\n\r\n\t}\r\n\r\n\tfunction setValue1i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( cache[ 0 ] === v ) return;\r\n\r\n\t\tgl.uniform1i( this.addr, v );\r\n\r\n\t\tcache[ 0 ] = v;\r\n\r\n\t}\r\n\r\n\t// Single float vector (from flat array or THREE.VectorN)\r\n\r\n\tfunction setValue2fv( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\r\n\r\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\t\tgl.uniform2fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValue3fv( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\r\n\r\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\t\t\t\tcache[ 2 ] = v.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( v.r !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\r\n\r\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\r\n\r\n\t\t\t\tcache[ 0 ] = v.r;\r\n\t\t\t\tcache[ 1 ] = v.g;\r\n\t\t\t\tcache[ 2 ] = v.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\t\tgl.uniform3fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValue4fv( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\r\n\r\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\t\t\t\tcache[ 2 ] = v.z;\r\n\t\t\t\tcache[ 3 ] = v.w;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\t\tgl.uniform4fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Single matrix (from flat array or MatrixN)\r\n\r\n\tfunction setValue2fm( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) return;\r\n\r\n\t\t\tmat2array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValue3fm( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) return;\r\n\r\n\t\t\tmat3array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValue4fm( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) return;\r\n\r\n\t\t\tmat4array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Single texture (2D / Cube)\r\n\r\n\tfunction setValueT1( gl, v, renderer ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = renderer.allocTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setTexture2D( v || emptyTexture, unit );\r\n\r\n\t}\r\n\r\n\tfunction setValueT6( gl, v, renderer ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = renderer.allocTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setTextureCube( v || emptyCubeTexture, unit );\r\n\r\n\t}\r\n\r\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\r\n\r\n\tfunction setValue2iv( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform2iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\tfunction setValue3iv( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform3iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\tfunction setValue4iv( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform4iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\t// Helper to pick the right setter for the singular case\r\n\r\n\tfunction getSingularSetter( type ) {\r\n\r\n\t\tswitch ( type ) {\r\n\r\n\t\t\tcase 0x1406: return setValue1f; // FLOAT\r\n\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\r\n\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\r\n\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\r\n\r\n\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\r\n\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\r\n\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\r\n\r\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\r\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\r\n\r\n\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\r\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\r\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\r\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Array of scalars\r\n\r\n\tfunction setValue1fv( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform1fv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\tfunction setValue1iv( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) return;\r\n\r\n\t\tgl.uniform1iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\t// Array of vectors (flat or from THREE classes)\r\n\r\n\tfunction setValueV2a( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar data = flatten( v, this.size, 2 );\r\n\r\n\t\tif ( arraysEqual( cache, data ) ) return;\r\n\r\n\t\tgl.uniform2fv( this.addr, data );\r\n\r\n\t\tthis.updateCache( data );\r\n\r\n\t}\r\n\r\n\tfunction setValueV3a( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar data = flatten( v, this.size, 3 );\r\n\r\n\t\tif ( arraysEqual( cache, data ) ) return;\r\n\r\n\t\tgl.uniform3fv( this.addr, data );\r\n\r\n\t\tthis.updateCache( data );\r\n\r\n\t}\r\n\r\n\tfunction setValueV4a( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar data = flatten( v, this.size, 4 );\r\n\r\n\t\tif ( arraysEqual( cache, data ) ) return;\r\n\r\n\t\tgl.uniform4fv( this.addr, data );\r\n\r\n\t\tthis.updateCache( data );\r\n\r\n\t}\r\n\r\n\t// Array of matrices (flat or from THREE clases)\r\n\r\n\tfunction setValueM2a( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar data = flatten( v, this.size, 4 );\r\n\r\n\t\tif ( arraysEqual( cache, data ) ) return;\r\n\r\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\r\n\r\n\t\tthis.updateCache( data );\r\n\r\n\t}\r\n\r\n\tfunction setValueM3a( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar data = flatten( v, this.size, 9 );\r\n\r\n\t\tif ( arraysEqual( cache, data ) ) return;\r\n\r\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\r\n\r\n\t\tthis.updateCache( data );\r\n\r\n\t}\r\n\r\n\tfunction setValueM4a( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar data = flatten( v, this.size, 16 );\r\n\r\n\t\tif ( arraysEqual( cache, data ) ) return;\r\n\r\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\r\n\r\n\t\tthis.updateCache( data );\r\n\r\n\t}\r\n\r\n\t// Array of textures (2D / Cube)\r\n\r\n\tfunction setValueT1a( gl, v, renderer ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar n = v.length;\r\n\r\n\t\tvar units = allocTexUnits( renderer, n );\r\n\r\n\t\tif ( arraysEqual( cache, units ) === false ) {\r\n\r\n\t\t\tgl.uniform1iv( this.addr, units );\r\n\t\t\tcopyArray( cache, units );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\trenderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueT6a( gl, v, renderer ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar n = v.length;\r\n\r\n\t\tvar units = allocTexUnits( renderer, n );\r\n\r\n\t\tif ( arraysEqual( cache, units ) === false ) {\r\n\r\n\t\t\tgl.uniform1iv( this.addr, units );\r\n\t\t\tcopyArray( cache, units );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\trenderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Helper to pick the right setter for a pure (bottom-level) array\r\n\r\n\tfunction getPureArraySetter( type ) {\r\n\r\n\t\tswitch ( type ) {\r\n\r\n\t\t\tcase 0x1406: return setValue1fv; // FLOAT\r\n\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\r\n\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\r\n\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\r\n\r\n\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\r\n\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\r\n\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\r\n\r\n\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\r\n\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\r\n\r\n\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\r\n\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\r\n\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\r\n\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// --- Uniform Classes ---\r\n\r\n\tfunction SingleUniform( id, activeInfo, addr ) {\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.addr = addr;\r\n\t\tthis.cache = [];\r\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\r\n\r\n\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t}\r\n\r\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.addr = addr;\r\n\t\tthis.cache = [];\r\n\t\tthis.size = activeInfo.size;\r\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\r\n\r\n\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t}\r\n\r\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\r\n\r\n\t\t\tthis.cache = new Float32Array( data.length );\r\n\r\n\t\t}\r\n\r\n\t\tcopyArray( cache, data );\r\n\r\n\t};\r\n\r\n\tfunction StructuredUniform( id ) {\r\n\r\n\t\tthis.id = id;\r\n\r\n\t\tUniformContainer.call( this ); // mix-in\r\n\r\n\t}\r\n\r\n\tStructuredUniform.prototype.setValue = function ( gl, value, renderer ) {\r\n\r\n\t\tvar seq = this.seq;\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tu.setValue( gl, value[ u.id ], renderer );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// --- Top-level ---\r\n\r\n\t// Parser - builds up the property tree from the path strings\r\n\r\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\r\n\r\n\t// extracts\r\n\t// \t- the identifier (member name or array index)\r\n\t//  - followed by an optional right bracket (found when array index)\r\n\t//  - followed by an optional left bracket or dot (type of subscript)\r\n\t//\r\n\t// Note: These portions can be read in a non-overlapping fashion and\r\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\r\n\t// in the uniform names.\r\n\r\n\tfunction addUniform( container, uniformObject ) {\r\n\r\n\t\tcontainer.seq.push( uniformObject );\r\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\r\n\r\n\t}\r\n\r\n\tfunction parseUniform( activeInfo, addr, container ) {\r\n\r\n\t\tvar path = activeInfo.name,\r\n\t\t\tpathLength = path.length;\r\n\r\n\t\t// reset RegExp object, because of the early exit of a previous run\r\n\t\tRePathPart.lastIndex = 0;\r\n\r\n\t\twhile ( true ) {\r\n\r\n\t\t\tvar match = RePathPart.exec( path ),\r\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\r\n\r\n\t\t\t\tid = match[ 1 ],\r\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\r\n\t\t\t\tsubscript = match[ 3 ];\r\n\r\n\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\r\n\r\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\r\n\r\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\r\n\r\n\t\t\t\taddUniform( container, subscript === undefined ?\r\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\r\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// step into inner node / create it in case it doesn't exist\r\n\r\n\t\t\t\tvar map = container.map, next = map[ id ];\r\n\r\n\t\t\t\tif ( next === undefined ) {\r\n\r\n\t\t\t\t\tnext = new StructuredUniform( id );\r\n\t\t\t\t\taddUniform( container, next );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontainer = next;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Root Container\r\n\r\n\tfunction WebGLUniforms( gl, program, renderer ) {\r\n\r\n\t\tUniformContainer.call( this );\r\n\r\n\t\tthis.renderer = renderer;\r\n\r\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\r\n\r\n\t\tfor ( var i = 0; i < n; ++ i ) {\r\n\r\n\t\t\tvar info = gl.getActiveUniform( program, i ),\r\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\r\n\r\n\t\t\tparseUniform( info, addr, this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value ) {\r\n\r\n\t\tvar u = this.map[ name ];\r\n\r\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\r\n\r\n\t\tvar v = object[ name ];\r\n\r\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\r\n\r\n\t};\r\n\r\n\r\n\t// Static interface\r\n\r\n\tWebGLUniforms.upload = function ( gl, seq, values, renderer ) {\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ],\r\n\t\t\t\tv = values[ u.id ];\r\n\r\n\t\t\tif ( v.needsUpdate !== false ) {\r\n\r\n\t\t\t\t// note: always updating when .needsUpdate is undefined\r\n\t\t\t\tu.setValue( gl, v.value, renderer );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\r\n\r\n\t\tvar r = [];\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tif ( u.id in values ) r.push( u );\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction addLineNumbers( string ) {\r\n\r\n\t\tvar lines = string.split( '\\n' );\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn lines.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction WebGLShader( gl, type, string ) {\r\n\r\n\t\tvar shader = gl.createShader( type );\r\n\r\n\t\tgl.shaderSource( shader, string );\r\n\t\tgl.compileShader( shader );\r\n\r\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\r\n\r\n\t\t}\r\n\r\n\t\t// --enable-privileged-webgl-extension\r\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\r\n\t\treturn shader;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar programIdCount = 0;\r\n\r\n\tfunction getEncodingComponents( encoding ) {\r\n\r\n\t\tswitch ( encoding ) {\r\n\r\n\t\t\tcase LinearEncoding:\r\n\t\t\t\treturn [ 'Linear', '( value )' ];\r\n\t\t\tcase sRGBEncoding:\r\n\t\t\t\treturn [ 'sRGB', '( value )' ];\r\n\t\t\tcase RGBEEncoding:\r\n\t\t\t\treturn [ 'RGBE', '( value )' ];\r\n\t\t\tcase RGBM7Encoding:\r\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\r\n\t\t\tcase RGBM16Encoding:\r\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\r\n\t\t\tcase RGBDEncoding:\r\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\r\n\t\t\tcase GammaEncoding:\r\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\r\n\r\n\t}\r\n\r\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\r\n\r\n\t}\r\n\r\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\r\n\r\n\t\tvar toneMappingName;\r\n\r\n\t\tswitch ( toneMapping ) {\r\n\r\n\t\t\tcase LinearToneMapping:\r\n\t\t\t\ttoneMappingName = 'Linear';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ReinhardToneMapping:\r\n\t\t\t\ttoneMappingName = 'Reinhard';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase Uncharted2ToneMapping:\r\n\t\t\t\ttoneMappingName = 'Uncharted2';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase CineonToneMapping:\r\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\r\n\r\n\t\t}\r\n\r\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\r\n\r\n\t}\r\n\r\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\r\n\r\n\t\textensions = extensions || {};\r\n\r\n\t\tvar chunks = [\r\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || ( parameters.normalMap && ! parameters.objectSpaceNormalMap ) || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\r\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\r\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\r\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\r\n\t\t];\r\n\r\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction generateDefines( defines ) {\r\n\r\n\t\tvar chunks = [];\r\n\r\n\t\tfor ( var name in defines ) {\r\n\r\n\t\t\tvar value = defines[ name ];\r\n\r\n\t\t\tif ( value === false ) continue;\r\n\r\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction fetchAttributeLocations( gl, program ) {\r\n\r\n\t\tvar attributes = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\r\n\r\n\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tvar info = gl.getActiveAttrib( program, i );\r\n\t\t\tvar name = info.name;\r\n\r\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\r\n\r\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\r\n\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\r\n\t}\r\n\r\n\tfunction filterEmptyLine( string ) {\r\n\r\n\t\treturn string !== '';\r\n\r\n\t}\r\n\r\n\tfunction replaceLightNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\r\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\r\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\r\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\r\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\r\n\r\n\t}\r\n\r\n\tfunction replaceClippingPlaneNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\r\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\r\n\r\n\t}\r\n\r\n\tfunction parseIncludes( string ) {\r\n\r\n\t\tvar pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\r\n\r\n\t\tfunction replace( match, include ) {\r\n\r\n\t\t\tvar replace = ShaderChunk[ include ];\r\n\r\n\t\t\tif ( replace === undefined ) {\r\n\r\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn parseIncludes( replace );\r\n\r\n\t\t}\r\n\r\n\t\treturn string.replace( pattern, replace );\r\n\r\n\t}\r\n\r\n\tfunction unrollLoops( string ) {\r\n\r\n\t\tvar pattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\r\n\r\n\t\tfunction replace( match, start, end, snippet ) {\r\n\r\n\t\t\tvar unroll = '';\r\n\r\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\r\n\r\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn unroll;\r\n\r\n\t\t}\r\n\r\n\t\treturn string.replace( pattern, replace );\r\n\r\n\t}\r\n\r\n\tfunction WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities ) {\r\n\r\n\t\tvar gl = renderer.context;\r\n\r\n\t\tvar defines = material.defines;\r\n\r\n\t\tvar vertexShader = shader.vertexShader;\r\n\t\tvar fragmentShader = shader.fragmentShader;\r\n\r\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\r\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\r\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\r\n\t\t}\r\n\r\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( material.envMap.mapping ) {\r\n\r\n\t\t\t\tcase CubeReflectionMapping:\r\n\t\t\t\tcase CubeRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase CubeUVReflectionMapping:\r\n\t\t\t\tcase CubeUVRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase EquirectangularReflectionMapping:\r\n\t\t\t\tcase EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase SphericalReflectionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( material.envMap.mapping ) {\r\n\r\n\t\t\t\tcase CubeRefractionMapping:\r\n\t\t\t\tcase EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( material.combine ) {\r\n\r\n\t\t\t\tcase MultiplyOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MixOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AddOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\r\n\r\n\t\t// console.log( 'building new program ' );\r\n\r\n\t\t//\r\n\r\n\t\tvar customExtensions = capabilities.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\t//\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar prefixVertex, prefixFragment;\r\n\r\n\t\tif ( material.isRawShaderMaterial ) {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\tcustomDefines\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tif ( prefixVertex.length > 0 ) {\r\n\r\n\t\t\t\tprefixVertex += '\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\t\t\t\tcustomDefines\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tif ( prefixFragment.length > 0 ) {\r\n\r\n\t\t\t\tprefixFragment += '\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\r\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n\r\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\r\n\t\t\t\t'attribute vec3 position;',\r\n\t\t\t\t'attribute vec3 normal;',\r\n\t\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t\t'#ifdef USE_COLOR',\r\n\r\n\t\t\t\t'\tattribute vec3 color;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\r\n\r\n\t\t\t\t'\tattribute vec3 morphTarget0;',\r\n\t\t\t\t'\tattribute vec3 morphTarget1;',\r\n\t\t\t\t'\tattribute vec3 morphTarget2;',\r\n\t\t\t\t'\tattribute vec3 morphTarget3;',\r\n\r\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_SKINNING',\r\n\r\n\t\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t\t'\tattribute vec4 skinWeight;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\r\n\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\r\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\r\n\r\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && ( capabilities.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\tparameters.envMap && ( capabilities.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\r\n\r\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\r\n\r\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\r\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\r\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\r\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\r\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\r\n\r\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t}\r\n\r\n\t\tvertexShader = parseIncludes( vertexShader );\r\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\r\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\r\n\r\n\t\tfragmentShader = parseIncludes( fragmentShader );\r\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\r\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\r\n\r\n\t\tvertexShader = unrollLoops( vertexShader );\r\n\t\tfragmentShader = unrollLoops( fragmentShader );\r\n\r\n\t\tif ( capabilities.isWebGL2 && ! material.isRawShaderMaterial ) {\r\n\r\n\t\t\tvar isGLSL3ShaderMaterial = false;\r\n\r\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\r\n\r\n\t\t\tif ( material.isShaderMaterial &&\r\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\r\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\r\n\r\n\t\t\t\tisGLSL3ShaderMaterial = true;\r\n\r\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\r\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// GLSL 3.0 conversion\r\n\t\t\tprefixVertex = [\r\n\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t'#define attribute in',\r\n\t\t\t\t'#define varying out',\r\n\t\t\t\t'#define texture2D texture'\r\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\r\n\r\n\t\t\tprefixFragment = [\r\n\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t'#define varying in',\r\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\r\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\r\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\r\n\t\t\t\t'#define texture2D texture',\r\n\t\t\t\t'#define textureCube texture',\r\n\t\t\t\t'#define texture2DProj textureProj',\r\n\t\t\t\t'#define texture2DLodEXT textureLod',\r\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\r\n\t\t\t\t'#define textureCubeLodEXT textureLod',\r\n\t\t\t\t'#define texture2DGradEXT textureGrad',\r\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\r\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\r\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\r\n\r\n\t\t}\r\n\r\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\r\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\r\n\r\n\t\t// console.log( '*VERTEX*', vertexGlsl );\r\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\r\n\r\n\t\tvar glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\r\n\t\tvar glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\r\n\r\n\t\tgl.attachShader( program, glVertexShader );\r\n\t\tgl.attachShader( program, glFragmentShader );\r\n\r\n\t\t// Force a particular attribute to index 0.\r\n\r\n\t\tif ( material.index0AttributeName !== undefined ) {\r\n\r\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\r\n\r\n\t\t} else if ( parameters.morphTargets === true ) {\r\n\r\n\t\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\r\n\t\t}\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\r\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\r\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\r\n\r\n\t\tvar runnable = true;\r\n\t\tvar haveDiagnostics = true;\r\n\r\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\r\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\r\n\r\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\r\n\r\n\t\t\trunnable = false;\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\r\n\r\n\t\t} else if ( programLog !== '' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\r\n\r\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\r\n\t\t\thaveDiagnostics = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( haveDiagnostics ) {\r\n\r\n\t\t\tthis.diagnostics = {\r\n\r\n\t\t\t\trunnable: runnable,\r\n\t\t\t\tmaterial: material,\r\n\r\n\t\t\t\tprogramLog: programLog,\r\n\r\n\t\t\t\tvertexShader: {\r\n\r\n\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\tprefix: prefixVertex\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfragmentShader: {\r\n\r\n\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\tprefix: prefixFragment\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\tgl.deleteShader( glVertexShader );\r\n\t\tgl.deleteShader( glFragmentShader );\r\n\r\n\t\t// set up caching for uniform locations\r\n\r\n\t\tvar cachedUniforms;\r\n\r\n\t\tthis.getUniforms = function () {\r\n\r\n\t\t\tif ( cachedUniforms === undefined ) {\r\n\r\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program, renderer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedUniforms;\r\n\r\n\t\t};\r\n\r\n\t\t// set up caching for attribute locations\r\n\r\n\t\tvar cachedAttributes;\r\n\r\n\t\tthis.getAttributes = function () {\r\n\r\n\t\t\tif ( cachedAttributes === undefined ) {\r\n\r\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedAttributes;\r\n\r\n\t\t};\r\n\r\n\t\t// free resource\r\n\r\n\t\tthis.destroy = function () {\r\n\r\n\t\t\tgl.deleteProgram( program );\r\n\t\t\tthis.program = undefined;\r\n\r\n\t\t};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tObject.defineProperties( this, {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\r\n\t\t\t\t\treturn this.getUniforms();\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tattributes: {\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\r\n\t\t\t\t\treturn this.getAttributes();\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\r\n\t\t//\r\n\r\n\t\tthis.name = shader.name;\r\n\t\tthis.id = programIdCount ++;\r\n\t\tthis.code = code;\r\n\t\tthis.usedTimes = 1;\r\n\t\tthis.program = program;\r\n\t\tthis.vertexShader = glVertexShader;\r\n\t\tthis.fragmentShader = glFragmentShader;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\r\n\r\n\t\tvar programs = [];\r\n\r\n\t\tvar shaderIDs = {\r\n\t\t\tMeshDepthMaterial: 'depth',\r\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\r\n\t\t\tMeshNormalMaterial: 'normal',\r\n\t\t\tMeshBasicMaterial: 'basic',\r\n\t\t\tMeshLambertMaterial: 'lambert',\r\n\t\t\tMeshPhongMaterial: 'phong',\r\n\t\t\tMeshToonMaterial: 'phong',\r\n\t\t\tMeshStandardMaterial: 'physical',\r\n\t\t\tMeshPhysicalMaterial: 'physical',\r\n\t\t\tLineBasicMaterial: 'basic',\r\n\t\t\tLineDashedMaterial: 'dashed',\r\n\t\t\tPointsMaterial: 'points',\r\n\t\t\tShadowMaterial: 'shadow',\r\n\t\t\tSpriteMaterial: 'sprite'\r\n\t\t};\r\n\r\n\t\tvar parameterNames = [\r\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\r\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"displacementMap\", \"specularMap\",\r\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\r\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\r\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\r\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\r\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\r\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\r\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\r\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\"\r\n\t\t];\r\n\r\n\r\n\t\tfunction allocateBones( object ) {\r\n\r\n\t\t\tvar skeleton = object.skeleton;\r\n\t\t\tvar bones = skeleton.bones;\r\n\r\n\t\t\tif ( capabilities.floatVertexTextures ) {\r\n\r\n\t\t\t\treturn 1024;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// default for when object is not specified\r\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t\t//\r\n\t\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\r\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\r\n\r\n\t\t\t\tif ( maxBones < bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn maxBones;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\r\n\r\n\t\t\tvar encoding;\r\n\r\n\t\t\tif ( ! map ) {\r\n\r\n\t\t\t\tencoding = LinearEncoding;\r\n\r\n\t\t\t} else if ( map.isTexture ) {\r\n\r\n\t\t\t\tencoding = map.encoding;\r\n\r\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\tencoding = map.texture.encoding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\r\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\r\n\r\n\t\t\t\tencoding = GammaEncoding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn encoding;\r\n\r\n\t\t}\r\n\r\n\t\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\r\n\r\n\t\t\tvar shaderID = shaderIDs[ material.type ];\r\n\r\n\t\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t\t// (not to blow over maxLights budget)\r\n\r\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\r\n\t\t\tvar precision = capabilities.precision;\r\n\r\n\t\t\tif ( material.precision !== null ) {\r\n\r\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\r\n\t\t\t\tif ( precision !== material.precision ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\t\tvar parameters = {\r\n\r\n\t\t\t\tshaderID: shaderID,\r\n\r\n\t\t\t\tprecision: precision,\r\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\r\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\r\n\t\t\t\tmap: !! material.map,\r\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\r\n\t\t\t\tenvMap: !! material.envMap,\r\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\r\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\r\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\r\n\t\t\t\tlightMap: !! material.lightMap,\r\n\t\t\t\taoMap: !! material.aoMap,\r\n\t\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\r\n\t\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\r\n\t\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\t\troughnessMap: !! material.roughnessMap,\r\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\r\n\t\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\t\talphaMap: !! material.alphaMap,\r\n\r\n\t\t\t\tgradientMap: !! material.gradientMap,\r\n\r\n\t\t\t\tcombine: material.combine,\r\n\r\n\t\t\t\tvertexColors: material.vertexColors,\r\n\r\n\t\t\t\tfog: !! fog,\r\n\t\t\t\tuseFog: material.fog,\r\n\t\t\t\tfogExp: ( fog && fog.isFogExp2 ),\r\n\r\n\t\t\t\tflatShading: material.flatShading,\r\n\r\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\r\n\r\n\t\t\t\tskinning: material.skinning && maxBones > 0,\r\n\t\t\t\tmaxBones: maxBones,\r\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures,\r\n\r\n\t\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\r\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\r\n\r\n\t\t\t\tnumDirLights: lights.directional.length,\r\n\t\t\t\tnumPointLights: lights.point.length,\r\n\t\t\t\tnumSpotLights: lights.spot.length,\r\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\r\n\t\t\t\tnumHemiLights: lights.hemi.length,\r\n\r\n\t\t\t\tnumClippingPlanes: nClipPlanes,\r\n\t\t\t\tnumClipIntersection: nClipIntersection,\r\n\r\n\t\t\t\tdithering: material.dithering,\r\n\r\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\r\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\r\n\t\t\t\ttoneMapping: renderer.toneMapping,\r\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\r\n\r\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\r\n\r\n\t\t\t\talphaTest: material.alphaTest,\r\n\t\t\t\tdoubleSided: material.side === DoubleSide,\r\n\t\t\t\tflipSided: material.side === BackSide,\r\n\r\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\r\n\r\n\t\t\t};\r\n\r\n\t\t\treturn parameters;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getProgramCode = function ( material, parameters ) {\r\n\r\n\t\t\tvar array = [];\r\n\r\n\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\tarray.push( parameters.shaderID );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tarray.push( material.fragmentShader );\r\n\t\t\t\tarray.push( material.vertexShader );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.defines !== undefined ) {\r\n\r\n\t\t\t\tfor ( var name in material.defines ) {\r\n\r\n\t\t\t\t\tarray.push( name );\r\n\t\t\t\t\tarray.push( material.defines[ name ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\r\n\r\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray.push( material.onBeforeCompile.toString() );\r\n\r\n\t\t\tarray.push( renderer.gammaOutput );\r\n\r\n\t\t\treturn array.join();\r\n\r\n\t\t};\r\n\r\n\t\tthis.acquireProgram = function ( material, shader, parameters, code ) {\r\n\r\n\t\t\tvar program;\r\n\r\n\t\t\t// Check if code has been already compiled\r\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\t\tvar programInfo = programs[ p ];\r\n\r\n\t\t\t\tif ( programInfo.code === code ) {\r\n\r\n\t\t\t\t\tprogram = programInfo;\r\n\t\t\t\t\t++ program.usedTimes;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( program === undefined ) {\r\n\r\n\t\t\t\tprogram = new WebGLProgram( renderer, extensions, code, material, shader, parameters, capabilities );\r\n\t\t\t\tprograms.push( program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn program;\r\n\r\n\t\t};\r\n\r\n\t\tthis.releaseProgram = function ( program ) {\r\n\r\n\t\t\tif ( -- program.usedTimes === 0 ) {\r\n\r\n\t\t\t\t// Remove from unordered set\r\n\t\t\t\tvar i = programs.indexOf( program );\r\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\t\tprograms.pop();\r\n\r\n\t\t\t\t// Free WebGL resources\r\n\t\t\t\tprogram.destroy();\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\t\tthis.programs = programs;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author fordacious / fordacious.github.io\r\n\t */\r\n\r\n\tfunction WebGLProperties() {\r\n\r\n\t\tvar properties = new WeakMap();\r\n\r\n\t\tfunction get( object ) {\r\n\r\n\t\t\tvar map = properties.get( object );\r\n\r\n\t\t\tif ( map === undefined ) {\r\n\r\n\t\t\t\tmap = {};\r\n\t\t\t\tproperties.set( object, map );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn map;\r\n\r\n\t\t}\r\n\r\n\t\tfunction remove( object ) {\r\n\r\n\t\t\tproperties.delete( object );\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( object, key, value ) {\r\n\r\n\t\t\tproperties.get( object )[ key ] = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tproperties = new WeakMap();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tremove: remove,\r\n\t\t\tupdate: update,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction painterSortStable( a, b ) {\r\n\r\n\t\tif ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.program && b.program && a.program !== b.program ) {\r\n\r\n\t\t\treturn a.program.id - b.program.id;\r\n\r\n\t\t} else if ( a.material.id !== b.material.id ) {\r\n\r\n\t\t\treturn a.material.id - b.material.id;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn a.z - b.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction reversePainterSortStable( a, b ) {\r\n\r\n\t\tif ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction WebGLRenderList() {\r\n\r\n\t\tvar renderItems = [];\r\n\t\tvar renderItemsIndex = 0;\r\n\r\n\t\tvar opaque = [];\r\n\t\tvar transparent = [];\r\n\r\n\t\tfunction init() {\r\n\r\n\t\t\trenderItemsIndex = 0;\r\n\r\n\t\t\topaque.length = 0;\r\n\t\t\ttransparent.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction push( object, geometry, material, z, group ) {\r\n\r\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\r\n\r\n\t\t\tif ( renderItem === undefined ) {\r\n\r\n\t\t\t\trenderItem = {\r\n\t\t\t\t\tid: object.id,\r\n\t\t\t\t\tobject: object,\r\n\t\t\t\t\tgeometry: geometry,\r\n\t\t\t\t\tmaterial: material,\r\n\t\t\t\t\tprogram: material.program,\r\n\t\t\t\t\trenderOrder: object.renderOrder,\r\n\t\t\t\t\tz: z,\r\n\t\t\t\t\tgroup: group\r\n\t\t\t\t};\r\n\r\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderItem.id = object.id;\r\n\t\t\t\trenderItem.object = object;\r\n\t\t\t\trenderItem.geometry = geometry;\r\n\t\t\t\trenderItem.material = material;\r\n\t\t\t\trenderItem.program = material.program;\r\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\r\n\t\t\t\trenderItem.z = z;\r\n\t\t\t\trenderItem.group = group;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\r\n\r\n\t\t\trenderItemsIndex ++;\r\n\r\n\t\t}\r\n\r\n\t\tfunction sort() {\r\n\r\n\t\t\tif ( opaque.length > 1 ) opaque.sort( painterSortStable );\r\n\t\t\tif ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\topaque: opaque,\r\n\t\t\ttransparent: transparent,\r\n\r\n\t\t\tinit: init,\r\n\t\t\tpush: push,\r\n\r\n\t\t\tsort: sort\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction WebGLRenderLists() {\r\n\r\n\t\tvar lists = {};\r\n\r\n\t\tfunction get( scene, camera ) {\r\n\r\n\t\t\tvar hash = scene.id + ',' + camera.id;\r\n\t\t\tvar list = lists[ hash ];\r\n\r\n\t\t\tif ( list === undefined ) {\r\n\r\n\t\t\t\t// console.log( 'THREE.WebGLRenderLists:', hash );\r\n\r\n\t\t\t\tlist = new WebGLRenderList();\r\n\t\t\t\tlists[ hash ] = list;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tlists = {};\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction UniformsCache() {\r\n\r\n\t\tvar lights = {};\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: function ( light ) {\r\n\r\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn lights[ light.id ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uniforms;\r\n\r\n\t\t\t\tswitch ( light.type ) {\r\n\r\n\t\t\t\t\tcase 'DirectionalLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'SpotLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\t\tconeCos: 0,\r\n\t\t\t\t\t\t\tpenumbraCos: 0,\r\n\t\t\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'PointLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\r\n\t\t\t\t\t\t\tshadowCameraNear: 1,\r\n\t\t\t\t\t\t\tshadowCameraFar: 1000\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'HemisphereLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tskyColor: new Color(),\r\n\t\t\t\t\t\t\tgroundColor: new Color()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'RectAreaLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\r\n\t\t\t\t\t\t\thalfHeight: new Vector3()\r\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlights[ light.id ] = uniforms;\r\n\r\n\t\t\t\treturn uniforms;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar count = 0;\r\n\r\n\tfunction WebGLLights() {\r\n\r\n\t\tvar cache = new UniformsCache();\r\n\r\n\t\tvar state = {\r\n\r\n\t\t\tid: count ++,\r\n\r\n\t\t\thash: {\r\n\t\t\t\tstateID: - 1,\r\n\t\t\t\tdirectionalLength: - 1,\r\n\t\t\t\tpointLength: - 1,\r\n\t\t\t\tspotLength: - 1,\r\n\t\t\t\trectAreaLength: - 1,\r\n\t\t\t\themiLength: - 1,\r\n\t\t\t\tshadowsLength: - 1\r\n\t\t\t},\r\n\r\n\t\t\tambient: [ 0, 0, 0 ],\r\n\t\t\tdirectional: [],\r\n\t\t\tdirectionalShadowMap: [],\r\n\t\t\tdirectionalShadowMatrix: [],\r\n\t\t\tspot: [],\r\n\t\t\tspotShadowMap: [],\r\n\t\t\tspotShadowMatrix: [],\r\n\t\t\trectArea: [],\r\n\t\t\tpoint: [],\r\n\t\t\tpointShadowMap: [],\r\n\t\t\tpointShadowMatrix: [],\r\n\t\t\themi: []\r\n\r\n\t\t};\r\n\r\n\t\tvar vector3 = new Vector3();\r\n\t\tvar matrix4 = new Matrix4();\r\n\t\tvar matrix42 = new Matrix4();\r\n\r\n\t\tfunction setup( lights, shadows, camera ) {\r\n\r\n\t\t\tvar r = 0, g = 0, b = 0;\r\n\r\n\t\t\tvar directionalLength = 0;\r\n\t\t\tvar pointLength = 0;\r\n\t\t\tvar spotLength = 0;\r\n\t\t\tvar rectAreaLength = 0;\r\n\t\t\tvar hemiLength = 0;\r\n\r\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\r\n\t\t\t\tvar color = light.color;\r\n\t\t\t\tvar intensity = light.intensity;\r\n\t\t\t\tvar distance = light.distance;\r\n\r\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\r\n\r\n\t\t\t\tif ( light.isAmbientLight ) {\r\n\r\n\t\t\t\t\tr += color.r * intensity;\r\n\t\t\t\t\tg += color.g * intensity;\r\n\t\t\t\t\tb += color.b * intensity;\r\n\r\n\t\t\t\t} else if ( light.isDirectionalLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.sub( vector3 );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\r\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\r\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\r\n\r\n\t\t\t\t\tdirectionalLength ++;\r\n\r\n\t\t\t\t} else if ( light.isSpotLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\t\t\t\t\tuniforms.distance = distance;\r\n\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.sub( vector3 );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\r\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\r\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\r\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\r\n\r\n\t\t\t\t\tspotLength ++;\r\n\r\n\t\t\t\t} else if ( light.isRectAreaLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\t// (a) intensity is the total visible light emitted\r\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\r\n\r\n\t\t\t\t\t// (b) intensity is the brightness of the light\r\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\r\n\t\t\t\t\tmatrix42.identity();\r\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\r\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\r\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\r\n\r\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\r\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\r\n\r\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\r\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\r\n\r\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\r\n\t\t\t\t\t// uniforms.distance = distance;\r\n\r\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\r\n\r\n\t\t\t\t\trectAreaLength ++;\r\n\r\n\t\t\t\t} else if ( light.isPointLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\t\tuniforms.distance = light.distance;\r\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\r\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\r\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\r\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\r\n\r\n\t\t\t\t\tpointLength ++;\r\n\r\n\t\t\t\t} else if ( light.isHemisphereLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\t\t\t\t\tuniforms.direction.normalize();\r\n\r\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\r\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\r\n\r\n\t\t\t\t\themiLength ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.ambient[ 0 ] = r;\r\n\t\t\tstate.ambient[ 1 ] = g;\r\n\t\t\tstate.ambient[ 2 ] = b;\r\n\r\n\t\t\tstate.directional.length = directionalLength;\r\n\t\t\tstate.spot.length = spotLength;\r\n\t\t\tstate.rectArea.length = rectAreaLength;\r\n\t\t\tstate.point.length = pointLength;\r\n\t\t\tstate.hemi.length = hemiLength;\r\n\r\n\t\t\tstate.hash.stateID = state.id;\r\n\t\t\tstate.hash.directionalLength = directionalLength;\r\n\t\t\tstate.hash.pointLength = pointLength;\r\n\t\t\tstate.hash.spotLength = spotLength;\r\n\t\t\tstate.hash.rectAreaLength = rectAreaLength;\r\n\t\t\tstate.hash.hemiLength = hemiLength;\r\n\t\t\tstate.hash.shadowsLength = shadows.length;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tsetup: setup,\r\n\t\t\tstate: state\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WebGLRenderState() {\r\n\r\n\t\tvar lights = new WebGLLights();\r\n\r\n\t\tvar lightsArray = [];\r\n\t\tvar shadowsArray = [];\r\n\r\n\t\tfunction init() {\r\n\r\n\t\t\tlightsArray.length = 0;\r\n\t\t\tshadowsArray.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushLight( light ) {\r\n\r\n\t\t\tlightsArray.push( light );\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushShadow( shadowLight ) {\r\n\r\n\t\t\tshadowsArray.push( shadowLight );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setupLights( camera ) {\r\n\r\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\r\n\r\n\t\t}\r\n\r\n\t\tvar state = {\r\n\t\t\tlightsArray: lightsArray,\r\n\t\t\tshadowsArray: shadowsArray,\r\n\r\n\t\t\tlights: lights\r\n\t\t};\r\n\r\n\t\treturn {\r\n\t\t\tinit: init,\r\n\t\t\tstate: state,\r\n\t\t\tsetupLights: setupLights,\r\n\r\n\t\t\tpushLight: pushLight,\r\n\t\t\tpushShadow: pushShadow\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction WebGLRenderStates() {\r\n\r\n\t\tvar renderStates = {};\r\n\r\n\t\tfunction get( scene, camera ) {\r\n\r\n\t\t\tvar renderState;\r\n\r\n\t\t\tif ( renderStates[ scene.id ] === undefined ) {\r\n\r\n\t\t\t\trenderState = new WebGLRenderState();\r\n\t\t\t\trenderStates[ scene.id ] = {};\r\n\t\t\t\trenderStates[ scene.id ][ camera.id ] = renderState;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( renderStates[ scene.id ][ camera.id ] === undefined ) {\r\n\r\n\t\t\t\t\trenderState = new WebGLRenderState();\r\n\t\t\t\t\trenderStates[ scene.id ][ camera.id ] = renderState;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderState = renderStates[ scene.id ][ camera.id ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn renderState;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\trenderStates = {};\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author bhouston / https://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshDepthMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshDepthMaterial';\r\n\r\n\t\tthis.depthPacking = BasicDepthPacking;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false;\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\r\n\r\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\r\n\r\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.depthPacking = source.depthPacking;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  referencePosition: <float>,\r\n\t *  nearDistance: <float>,\r\n\t *  farDistance: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>\r\n\t *\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshDistanceMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshDistanceMaterial';\r\n\r\n\t\tthis.referencePosition = new Vector3();\r\n\t\tthis.nearDistance = 1;\r\n\t\tthis.farDistance = 1000;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.fog = false;\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\r\n\r\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\r\n\r\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.referencePosition.copy( source.referencePosition );\r\n\t\tthis.nearDistance = source.nearDistance;\r\n\t\tthis.farDistance = source.farDistance;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\r\n\r\n\t\tvar _frustum = new Frustum(),\r\n\t\t\t_projScreenMatrix = new Matrix4(),\r\n\r\n\t\t\t_shadowMapSize = new Vector2(),\r\n\t\t\t_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),\r\n\r\n\t\t\t_lookTarget = new Vector3(),\r\n\t\t\t_lightPositionWorld = new Vector3(),\r\n\r\n\t\t\t_MorphingFlag = 1,\r\n\t\t\t_SkinningFlag = 2,\r\n\r\n\t\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\r\n\r\n\t\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\r\n\t\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\r\n\r\n\t\t\t_materialCache = {};\r\n\r\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\r\n\r\n\t\tvar cubeDirections = [\r\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\r\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\r\n\t\t];\r\n\r\n\t\tvar cubeUps = [\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\r\n\t\t];\r\n\r\n\t\tvar cube2DViewPorts = [\r\n\t\t\tnew Vector4(), new Vector4(), new Vector4(),\r\n\t\t\tnew Vector4(), new Vector4(), new Vector4()\r\n\t\t];\r\n\r\n\t\t// init\r\n\r\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\r\n\r\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\r\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\r\n\r\n\t\t\tvar depthMaterial = new MeshDepthMaterial( {\r\n\r\n\t\t\t\tdepthPacking: RGBADepthPacking,\r\n\r\n\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\tskinning: useSkinning\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t_depthMaterials[ i ] = depthMaterial;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar distanceMaterial = new MeshDistanceMaterial( {\r\n\r\n\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\tskinning: useSkinning\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.autoUpdate = true;\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tthis.type = PCFShadowMap;\r\n\r\n\t\tthis.render = function ( lights, scene, camera ) {\r\n\r\n\t\t\tif ( scope.enabled === false ) return;\r\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\r\n\r\n\t\t\tif ( lights.length === 0 ) return;\r\n\r\n\t\t\t// TODO Clean up (needed in case of contextlost)\r\n\t\t\tvar _gl = _renderer.context;\r\n\t\t\tvar _state = _renderer.state;\r\n\r\n\t\t\t// Set GL state for depth map.\r\n\t\t\t_state.disable( _gl.BLEND );\r\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\r\n\t\t\t_state.buffers.depth.setTest( true );\r\n\t\t\t_state.setScissorTest( false );\r\n\r\n\t\t\t// render depth map\r\n\r\n\t\t\tvar faceCount;\r\n\r\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\t\t\t\tvar shadow = light.shadow;\r\n\t\t\t\tvar isPointLight = light && light.isPointLight;\r\n\r\n\t\t\t\tif ( shadow === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar shadowCamera = shadow.camera;\r\n\r\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\r\n\t\t\t\t_shadowMapSize.min( _maxShadowMapSize );\r\n\r\n\t\t\t\tif ( isPointLight ) {\r\n\r\n\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\r\n\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\r\n\r\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t\t\t// following orientation:\r\n\t\t\t\t\t//\r\n\t\t\t\t\t//  xzXZ\r\n\t\t\t\t\t//   y Y\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// X - Positive x direction\r\n\t\t\t\t\t// x - Negative x direction\r\n\t\t\t\t\t// Y - Positive y direction\r\n\t\t\t\t\t// y - Negative y direction\r\n\t\t\t\t\t// Z - Positive z direction\r\n\t\t\t\t\t// z - Negative z direction\r\n\r\n\t\t\t\t\t// positive X\r\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// negative X\r\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// positive Z\r\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// negative Z\r\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// positive Y\r\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\r\n\t\t\t\t\t// negative Y\r\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\r\n\r\n\t\t\t\t\t_shadowMapSize.x *= 4.0;\r\n\t\t\t\t\t_shadowMapSize.y *= 2.0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( shadow.map === null ) {\r\n\r\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\r\n\r\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\r\n\r\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( shadow.isSpotLightShadow ) {\r\n\r\n\t\t\t\t\tshadow.update( light );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar shadowMap = shadow.map;\r\n\t\t\t\tvar shadowMatrix = shadow.matrix;\r\n\r\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\r\n\r\n\t\t\t\tif ( isPointLight ) {\r\n\r\n\t\t\t\t\tfaceCount = 6;\r\n\r\n\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\r\n\t\t\t\t\t// equal to inverse of the light's position\r\n\r\n\t\t\t\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfaceCount = 1;\r\n\r\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\r\n\r\n\t\t\t\t\t// compute shadow matrix\r\n\r\n\t\t\t\t\tshadowMatrix.set(\r\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\r\n\t\t\t\t_renderer.clear();\r\n\r\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\r\n\t\t\t\t// run a single pass if not\r\n\r\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\r\n\r\n\t\t\t\t\tif ( isPointLight ) {\r\n\r\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\r\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\r\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\r\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\t\t\t\t\t\tshadowCamera.updateMatrixWorld();\r\n\r\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\r\n\t\t\t\t\t\t_state.viewport( vpDimensions );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t\t\t// set object matrices & frustum culling\r\n\r\n\t\t\t\t\trenderObject( scene, camera, shadowCamera, isPointLight );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.needsUpdate = false;\r\n\r\n\t\t};\r\n\r\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tvar result = null;\r\n\r\n\t\t\tvar materialVariants = _depthMaterials;\r\n\t\t\tvar customMaterial = object.customDepthMaterial;\r\n\r\n\t\t\tif ( isPointLight ) {\r\n\r\n\t\t\t\tmaterialVariants = _distanceMaterials;\r\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! customMaterial ) {\r\n\r\n\t\t\t\tvar useMorphing = false;\r\n\r\n\t\t\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\t\t\tif ( geometry && geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\r\n\r\n\t\t\t\t\t} else if ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( object.isSkinnedMesh && material.skinning === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar useSkinning = object.isSkinnedMesh && material.skinning;\r\n\r\n\t\t\t\tvar variantIndex = 0;\r\n\r\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\r\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\r\n\r\n\t\t\t\tresult = materialVariants[ variantIndex ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = customMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _renderer.localClippingEnabled &&\r\n\t\t\t\t\tmaterial.clipShadows === true &&\r\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\r\n\r\n\t\t\t\t// in this case we need a unique material instance reflecting the\r\n\t\t\t\t// appropriate state\r\n\r\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\r\n\r\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\r\n\r\n\t\t\t\tif ( materialsForVariant === undefined ) {\r\n\r\n\t\t\t\t\tmaterialsForVariant = {};\r\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\r\n\r\n\t\t\t\tif ( cachedMaterial === undefined ) {\r\n\r\n\t\t\t\t\tcachedMaterial = result.clone();\r\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = cachedMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult.visible = material.visible;\r\n\t\t\tresult.wireframe = material.wireframe;\r\n\r\n\t\t\tresult.side = ( material.shadowSide != null ) ? material.shadowSide : shadowSide[ material.side ];\r\n\r\n\t\t\tresult.clipShadows = material.clipShadows;\r\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\r\n\t\t\tresult.clipIntersection = material.clipIntersection;\r\n\r\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\r\n\t\t\tresult.linewidth = material.linewidth;\r\n\r\n\t\t\tif ( isPointLight && result.isMeshDistanceMaterial ) {\r\n\r\n\t\t\t\tresult.referencePosition.copy( lightPositionWorld );\r\n\t\t\t\tresult.nearDistance = shadowCameraNear;\r\n\t\t\t\tresult.farDistance = shadowCameraFar;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObject( object, camera, shadowCamera, isPointLight ) {\r\n\r\n\t\t\tif ( object.visible === false ) return;\r\n\r\n\t\t\tvar visible = object.layers.test( camera.layers );\r\n\r\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\r\n\r\n\t\t\t\tif ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\r\n\r\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\tvar geometry = _objects.update( object );\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar group = groups[ k ];\r\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\r\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );\r\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, isPointLight );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLState( gl, extensions, utils, capabilities ) {\r\n\r\n\t\tfunction ColorBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar color = new Vector4();\r\n\t\t\tvar currentColorMask = null;\r\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetMask: function ( colorMask ) {\r\n\r\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\r\n\t\t\t\t\t\tcurrentColorMask = colorMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\r\n\r\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcolor.set( r, g, b, a );\r\n\r\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\r\n\r\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\r\n\t\t\t\t\t\tcurrentColorClear.copy( color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentColorMask = null;\r\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction DepthBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar currentDepthMask = null;\r\n\t\t\tvar currentDepthFunc = null;\r\n\t\t\tvar currentDepthClear = null;\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetTest: function ( depthTest ) {\r\n\r\n\t\t\t\t\tif ( depthTest ) {\r\n\r\n\t\t\t\t\t\tenable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tdisable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetMask: function ( depthMask ) {\r\n\r\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.depthMask( depthMask );\r\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetFunc: function ( depthFunc ) {\r\n\r\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\r\n\t\t\t\t\t\tif ( depthFunc ) {\r\n\r\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\t\t\t\t\tcase NeverDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase LessDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase EqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase GreaterDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( depth ) {\r\n\r\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\r\n\r\n\t\t\t\t\t\tgl.clearDepth( depth );\r\n\t\t\t\t\t\tcurrentDepthClear = depth;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentDepthMask = null;\r\n\t\t\t\t\tcurrentDepthFunc = null;\r\n\t\t\t\t\tcurrentDepthClear = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction StencilBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar currentStencilMask = null;\r\n\t\t\tvar currentStencilFunc = null;\r\n\t\t\tvar currentStencilRef = null;\r\n\t\t\tvar currentStencilFuncMask = null;\r\n\t\t\tvar currentStencilFail = null;\r\n\t\t\tvar currentStencilZFail = null;\r\n\t\t\tvar currentStencilZPass = null;\r\n\t\t\tvar currentStencilClear = null;\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetTest: function ( stencilTest ) {\r\n\r\n\t\t\t\t\tif ( stencilTest ) {\r\n\r\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetMask: function ( stencilMask ) {\r\n\r\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\r\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\r\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\r\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\r\n\r\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\r\n\r\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\r\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\r\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\r\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\r\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\r\n\r\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\r\n\r\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\r\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\r\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( stencil ) {\r\n\r\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\r\n\r\n\t\t\t\t\t\tgl.clearStencil( stencil );\r\n\t\t\t\t\t\tcurrentStencilClear = stencil;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentStencilMask = null;\r\n\t\t\t\t\tcurrentStencilFunc = null;\r\n\t\t\t\t\tcurrentStencilRef = null;\r\n\t\t\t\t\tcurrentStencilFuncMask = null;\r\n\t\t\t\t\tcurrentStencilFail = null;\r\n\t\t\t\t\tcurrentStencilZFail = null;\r\n\t\t\t\t\tcurrentStencilZPass = null;\r\n\t\t\t\t\tcurrentStencilClear = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar colorBuffer = new ColorBuffer();\r\n\t\tvar depthBuffer = new DepthBuffer();\r\n\t\tvar stencilBuffer = new StencilBuffer();\r\n\r\n\t\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\r\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\r\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\r\n\r\n\t\tvar enabledCapabilities = {};\r\n\r\n\t\tvar compressedTextureFormats = null;\r\n\r\n\t\tvar currentProgram = null;\r\n\r\n\t\tvar currentBlendingEnabled = null;\r\n\t\tvar currentBlending = null;\r\n\t\tvar currentBlendEquation = null;\r\n\t\tvar currentBlendSrc = null;\r\n\t\tvar currentBlendDst = null;\r\n\t\tvar currentBlendEquationAlpha = null;\r\n\t\tvar currentBlendSrcAlpha = null;\r\n\t\tvar currentBlendDstAlpha = null;\r\n\t\tvar currentPremultipledAlpha = false;\r\n\r\n\t\tvar currentFlipSided = null;\r\n\t\tvar currentCullFace = null;\r\n\r\n\t\tvar currentLineWidth = null;\r\n\r\n\t\tvar currentPolygonOffsetFactor = null;\r\n\t\tvar currentPolygonOffsetUnits = null;\r\n\r\n\t\tvar maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\r\n\r\n\t\tvar lineWidthAvailable = false;\r\n\t\tvar version = 0;\r\n\t\tvar glVersion = gl.getParameter( gl.VERSION );\r\n\r\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\r\n\r\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\r\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\r\n\r\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\r\n\r\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\r\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\r\n\r\n\t\t}\r\n\r\n\t\tvar currentTextureSlot = null;\r\n\t\tvar currentBoundTextures = {};\r\n\r\n\t\tvar currentScissor = new Vector4();\r\n\t\tvar currentViewport = new Vector4();\r\n\r\n\t\tfunction createTexture( type, target, count ) {\r\n\r\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\r\n\t\t\tvar texture = gl.createTexture();\r\n\r\n\t\t\tgl.bindTexture( type, texture );\r\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\t\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\r\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t\tvar emptyTextures = {};\r\n\t\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\r\n\t\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\r\n\r\n\t\t// init\r\n\r\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\r\n\t\tdepthBuffer.setClear( 1 );\r\n\t\tstencilBuffer.setClear( 0 );\r\n\r\n\t\tenable( gl.DEPTH_TEST );\r\n\t\tdepthBuffer.setFunc( LessEqualDepth );\r\n\r\n\t\tsetFlipSided( false );\r\n\t\tsetCullFace( CullFaceBack );\r\n\t\tenable( gl.CULL_FACE );\r\n\r\n\t\tsetBlending( NoBlending );\r\n\r\n\t\t//\r\n\r\n\t\tfunction initAttributes() {\r\n\r\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tnewAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction enableAttribute( attribute ) {\r\n\r\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\r\n\r\n\t\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\r\n\t\t\t\tvar extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\r\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction disableUnusedAttributes() {\r\n\r\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\r\n\r\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction enable( id ) {\r\n\r\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\r\n\r\n\t\t\t\tgl.enable( id );\r\n\t\t\t\tenabledCapabilities[ id ] = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction disable( id ) {\r\n\r\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\r\n\r\n\t\t\t\tgl.disable( id );\r\n\t\t\t\tenabledCapabilities[ id ] = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getCompressedTextureFormats() {\r\n\r\n\t\t\tif ( compressedTextureFormats === null ) {\r\n\r\n\t\t\t\tcompressedTextureFormats = [];\r\n\r\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ||\r\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_astc' ) ) {\r\n\r\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn compressedTextureFormats;\r\n\r\n\t\t}\r\n\r\n\t\tfunction useProgram( program ) {\r\n\r\n\t\t\tif ( currentProgram !== program ) {\r\n\r\n\t\t\t\tgl.useProgram( program );\r\n\r\n\t\t\t\tcurrentProgram = program;\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\r\n\r\n\t\t\tif ( blending === NoBlending ) {\r\n\r\n\t\t\t\tif ( currentBlendingEnabled ) {\r\n\r\n\t\t\t\t\tdisable( gl.BLEND );\r\n\t\t\t\t\tcurrentBlendingEnabled = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! currentBlendingEnabled ) {\r\n\r\n\t\t\t\tenable( gl.BLEND );\r\n\t\t\t\tcurrentBlendingEnabled = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blending !== CustomBlending ) {\r\n\r\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\r\n\r\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\r\n\r\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\r\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\r\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentBlendSrc = null;\r\n\t\t\t\t\tcurrentBlendDst = null;\r\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\t\t\tcurrentBlendDstAlpha = null;\r\n\r\n\t\t\t\t\tcurrentBlending = blending;\r\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// custom blending\r\n\r\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\r\n\t\t\t\tgl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );\r\n\r\n\t\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\r\n\t\t\t\tgl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );\r\n\r\n\t\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentBlending = blending;\r\n\t\t\tcurrentPremultipledAlpha = null;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setMaterial( material, frontFaceCW ) {\r\n\r\n\t\t\tmaterial.side === DoubleSide\r\n\t\t\t\t? disable( gl.CULL_FACE )\r\n\t\t\t\t: enable( gl.CULL_FACE );\r\n\r\n\t\t\tvar flipSided = ( material.side === BackSide );\r\n\t\t\tif ( frontFaceCW ) flipSided = ! flipSided;\r\n\r\n\t\t\tsetFlipSided( flipSided );\r\n\r\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\r\n\t\t\t\t? setBlending( NoBlending )\r\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\r\n\r\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\r\n\t\t\tdepthBuffer.setTest( material.depthTest );\r\n\t\t\tdepthBuffer.setMask( material.depthWrite );\r\n\t\t\tcolorBuffer.setMask( material.colorWrite );\r\n\r\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction setFlipSided( flipSided ) {\r\n\r\n\t\t\tif ( currentFlipSided !== flipSided ) {\r\n\r\n\t\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\t\tgl.frontFace( gl.CW );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.frontFace( gl.CCW );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentFlipSided = flipSided;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setCullFace( cullFace ) {\r\n\r\n\t\t\tif ( cullFace !== CullFaceNone ) {\r\n\r\n\t\t\t\tenable( gl.CULL_FACE );\r\n\r\n\t\t\t\tif ( cullFace !== currentCullFace ) {\r\n\r\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\r\n\r\n\t\t\t\t\t\tgl.cullFace( gl.BACK );\r\n\r\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\r\n\r\n\t\t\t\t\t\tgl.cullFace( gl.FRONT );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( gl.CULL_FACE );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentCullFace = cullFace;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setLineWidth( width ) {\r\n\r\n\t\t\tif ( width !== currentLineWidth ) {\r\n\r\n\t\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\r\n\r\n\t\t\t\tcurrentLineWidth = width;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\r\n\r\n\t\t\tif ( polygonOffset ) {\r\n\r\n\t\t\t\tenable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\r\n\r\n\t\t\t\t\tgl.polygonOffset( factor, units );\r\n\r\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setScissorTest( scissorTest ) {\r\n\r\n\t\t\tif ( scissorTest ) {\r\n\r\n\t\t\t\tenable( gl.SCISSOR_TEST );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( gl.SCISSOR_TEST );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// texture\r\n\r\n\t\tfunction activeTexture( webglSlot ) {\r\n\r\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\r\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction bindTexture( webglType, webglTexture ) {\r\n\r\n\t\t\tif ( currentTextureSlot === null ) {\r\n\r\n\t\t\t\tactiveTexture();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\t\tif ( boundTexture === undefined ) {\r\n\r\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\r\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\r\n\r\n\t\t\t\tboundTexture.type = webglType;\r\n\t\t\t\tboundTexture.texture = webglTexture;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction compressedTexImage2D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction texImage2D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction scissor( scissor ) {\r\n\r\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\r\n\r\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\r\n\t\t\t\tcurrentScissor.copy( scissor );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction viewport( viewport ) {\r\n\r\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\r\n\r\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\r\n\t\t\t\tcurrentViewport.copy( viewport );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction reset() {\r\n\r\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\r\n\r\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\r\n\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tenabledCapabilities = {};\r\n\r\n\t\t\tcompressedTextureFormats = null;\r\n\r\n\t\t\tcurrentTextureSlot = null;\r\n\t\t\tcurrentBoundTextures = {};\r\n\r\n\t\t\tcurrentProgram = null;\r\n\r\n\t\t\tcurrentBlending = null;\r\n\r\n\t\t\tcurrentFlipSided = null;\r\n\t\t\tcurrentCullFace = null;\r\n\r\n\t\t\tcolorBuffer.reset();\r\n\t\t\tdepthBuffer.reset();\r\n\t\t\tstencilBuffer.reset();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tbuffers: {\r\n\t\t\t\tcolor: colorBuffer,\r\n\t\t\t\tdepth: depthBuffer,\r\n\t\t\t\tstencil: stencilBuffer\r\n\t\t\t},\r\n\r\n\t\t\tinitAttributes: initAttributes,\r\n\t\t\tenableAttribute: enableAttribute,\r\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\r\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\r\n\t\t\tenable: enable,\r\n\t\t\tdisable: disable,\r\n\t\t\tgetCompressedTextureFormats: getCompressedTextureFormats,\r\n\r\n\t\t\tuseProgram: useProgram,\r\n\r\n\t\t\tsetBlending: setBlending,\r\n\t\t\tsetMaterial: setMaterial,\r\n\r\n\t\t\tsetFlipSided: setFlipSided,\r\n\t\t\tsetCullFace: setCullFace,\r\n\r\n\t\t\tsetLineWidth: setLineWidth,\r\n\t\t\tsetPolygonOffset: setPolygonOffset,\r\n\r\n\t\t\tsetScissorTest: setScissorTest,\r\n\r\n\t\t\tactiveTexture: activeTexture,\r\n\t\t\tbindTexture: bindTexture,\r\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\r\n\t\t\ttexImage2D: texImage2D,\r\n\r\n\t\t\tscissor: scissor,\r\n\t\t\tviewport: viewport,\r\n\r\n\t\t\treset: reset\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\r\n\r\n\t\tvar _videoTextures = {};\r\n\t\tvar _canvas;\r\n\r\n\t\t//\r\n\r\n\t\tfunction clampToMaxSize( image, maxSize ) {\r\n\r\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\r\n\t\t\t\tif ( 'data' in image ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\r\n\t\t\t\t// premultiplied alpha.\r\n\r\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\r\n\r\n\t\t\t\tvar canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\r\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\r\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\r\n\r\n\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height );\r\n\r\n\t\t\t\treturn canvas;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPowerOfTwo( image ) {\r\n\r\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\r\n\r\n\t\t}\r\n\r\n\t\tfunction makePowerOfTwo( image ) {\r\n\r\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {\r\n\r\n\t\t\t\tif ( _canvas === undefined ) _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\r\n\r\n\t\t\t\t_canvas.width = _Math.floorPowerOfTwo( image.width );\r\n\t\t\t\t_canvas.height = _Math.floorPowerOfTwo( image.height );\r\n\r\n\t\t\t\tvar context = _canvas.getContext( '2d' );\r\n\t\t\t\tcontext.drawImage( image, 0, 0, _canvas.width, _canvas.height );\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + _canvas.width + 'x' + _canvas.height );\r\n\r\n\t\t\t\treturn _canvas;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\r\n\t\t\tif ( capabilities.isWebGL2 ) return false;\r\n\r\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\r\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\r\n\r\n\t\t}\r\n\r\n\t\tfunction textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {\r\n\r\n\t\t\treturn texture.generateMipmaps && isPowerOfTwo &&\r\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateMipmap( target, texture, width, height ) {\r\n\r\n\t\t\t_gl.generateMipmap( target );\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\r\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getInternalFormat( glFormat, glType ) {\r\n\r\n\t\t\tif ( ! capabilities.isWebGL2 ) return glFormat;\r\n\r\n\t\t\tif ( glFormat === _gl.RGB ) {\r\n\r\n\t\t\t\tif ( glType === _gl.FLOAT ) return _gl.RGB32F;\r\n\t\t\t\tif ( glType === _gl.HALF_FLOAT ) return _gl.RGB16F;\r\n\t\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) return _gl.RGB8;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( glFormat === _gl.RGBA ) {\r\n\r\n\t\t\t\tif ( glType === _gl.FLOAT ) return _gl.RGBA32F;\r\n\t\t\t\tif ( glType === _gl.HALF_FLOAT ) return _gl.RGBA16F;\r\n\t\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) return _gl.RGBA8;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn glFormat;\r\n\r\n\t\t}\r\n\r\n\t\t// Fallback filters for non-power-of-2 textures\r\n\r\n\t\tfunction filterFallback( f ) {\r\n\r\n\t\t\tif ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {\r\n\r\n\t\t\t\treturn _gl.NEAREST;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn _gl.LINEAR;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction onTextureDispose( event ) {\r\n\r\n\t\t\tvar texture = event.target;\r\n\r\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\tdeallocateTexture( texture );\r\n\r\n\t\t\tif ( texture.isVideoTexture ) {\r\n\r\n\t\t\t\tdelete _videoTextures[ texture.id ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinfo.memory.textures --;\r\n\r\n\t\t}\r\n\r\n\t\tfunction onRenderTargetDispose( event ) {\r\n\r\n\t\t\tvar renderTarget = event.target;\r\n\r\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t\tinfo.memory.textures --;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction deallocateTexture( texture ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\r\n\r\n\t\t\t\t// cube texture\r\n\r\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// 2D texture\r\n\r\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\r\n\r\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// remove all webgl properties\r\n\t\t\tproperties.remove( texture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction deallocateRenderTarget( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\t\tif ( ! renderTarget ) return;\r\n\r\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\r\n\r\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\t\trenderTarget.depthTexture.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tproperties.remove( renderTarget.texture );\r\n\t\t\tproperties.remove( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\r\n\r\n\t\tfunction setTexture2D( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tvar image = texture.image;\r\n\r\n\t\t\t\tif ( image === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\r\n\r\n\t\t\t\t} else if ( image.complete === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTextureCube( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.image.length === 6 ) {\r\n\r\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\r\n\r\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\r\n\r\n\t\t\t\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\r\n\t\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\r\n\t\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\r\n\r\n\t\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\r\n\r\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\r\n\t\t\t\t\t\tglFormat = utils.convert( texture.format ),\r\n\t\t\t\t\t\tglType = utils.convert( texture.type ),\r\n\t\t\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( ! isCompressed ) {\r\n\r\n\t\t\t\t\t\t\tif ( isDataTexture ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! isCompressed ) {\r\n\r\n\t\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\r\n\r\n\t\t\t\t\t\t// We assume images for cube map have the same size.\r\n\t\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, texture, image.width, image.height );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\r\n\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTextureParameters( textureType, texture, isPowerOfTwoImage ) {\r\n\r\n\t\t\tvar extension;\r\n\r\n\t\t\tif ( isPowerOfTwoImage ) {\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\r\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\r\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension ) {\r\n\r\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\r\n\t\t\t\tif ( texture.type === HalfFloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) return;\r\n\r\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\r\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\r\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\r\n\t\t\t\ttextureProperties.__webglInit = true;\r\n\r\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\r\n\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\r\n\r\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\r\n\r\n\t\t\t\timage = makePowerOfTwo( image );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\r\n\t\t\t\tglFormat = utils.convert( texture.format ),\r\n\t\t\t\tglType = utils.convert( texture.type ),\r\n\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\r\n\r\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\t\tif ( texture.isDepthTexture ) {\r\n\r\n\t\t\t\t// populate depth texture with dummy data\r\n\r\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\r\n\r\n\t\t\t\tif ( texture.type === FloatType ) {\r\n\r\n\t\t\t\t\tif ( ! capabilities.isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );\r\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\r\n\r\n\t\t\t\t} else if ( capabilities.isWebGL2 ) {\r\n\r\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\r\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\r\n\r\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\r\n\r\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\r\n\t\t\t\t\t\tglType = utils.convert( texture.type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\r\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\r\n\r\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL;\r\n\r\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\r\n\r\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\r\n\t\t\t\t\t\tglType = utils.convert( texture.type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t} else if ( texture.isDataTexture ) {\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isCompressedTexture ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\r\n\r\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\r\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// regular Texture (image, video, canvas)\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {\r\n\r\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D, texture, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\t}\r\n\r\n\t\t// Render targets\r\n\r\n\t\t// Setup storage for target texture and bind it to correct framebuffer\r\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\r\n\r\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\r\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\r\n\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\r\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget ) {\r\n\r\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\r\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// FIXME: We don't support !depth !stencil\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\r\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\r\n\r\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\r\n\t\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\r\n\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// upload an empty depth texture with framebuffer size\r\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\r\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\r\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\r\n\r\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\r\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\r\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\r\n\r\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\r\n\r\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\r\n\r\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Setup GL resources for a non-texture depth buffer\r\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\r\n\r\n\t\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\r\n\r\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Set up GL resources for the render target\r\n\t\tfunction setupRenderTarget( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\r\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\r\n\r\n\t\t\t// Setup framebuffer\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Setup color buffer\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {\r\n\r\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) {\r\n\r\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D, renderTarget.texture, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Setup depth and stencil buffers\r\n\r\n\t\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\r\n\t\t\tvar texture = renderTarget.texture;\r\n\t\t\tvar isTargetPowerOfTwo = isPowerOfTwo( renderTarget );\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {\r\n\r\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\r\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\r\n\r\n\t\t\t\tstate.bindTexture( target, webglTexture );\r\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\r\n\t\t\t\tstate.bindTexture( target, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateVideoTexture( texture ) {\r\n\r\n\t\t\tvar id = texture.id;\r\n\t\t\tvar frame = info.render.frame;\r\n\r\n\t\t\t// Check the last frame we updated the VideoTexture\r\n\r\n\t\t\tif ( _videoTextures[ id ] !== frame ) {\r\n\r\n\t\t\t\t_videoTextures[ id ] = frame;\r\n\t\t\t\ttexture.update();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.setTexture2D = setTexture2D;\r\n\t\tthis.setTextureCube = setTextureCube;\r\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\r\n\t\tthis.setupRenderTarget = setupRenderTarget;\r\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author thespite / http://www.twitter.com/thespite\r\n\t */\r\n\r\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\r\n\r\n\t\tfunction convert( p ) {\r\n\r\n\t\t\tvar extension;\r\n\r\n\t\t\tif ( p === RepeatWrapping ) return gl.REPEAT;\r\n\t\t\tif ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;\r\n\t\t\tif ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;\r\n\r\n\t\t\tif ( p === NearestFilter ) return gl.NEAREST;\r\n\t\t\tif ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;\r\n\t\t\tif ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;\r\n\r\n\t\t\tif ( p === LinearFilter ) return gl.LINEAR;\r\n\t\t\tif ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;\r\n\t\t\tif ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;\r\n\r\n\t\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\r\n\t\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\t\tif ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;\r\n\r\n\t\t\tif ( p === ByteType ) return gl.BYTE;\r\n\t\t\tif ( p === ShortType ) return gl.SHORT;\r\n\t\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\r\n\t\t\tif ( p === IntType ) return gl.INT;\r\n\t\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\r\n\t\t\tif ( p === FloatType ) return gl.FLOAT;\r\n\r\n\t\t\tif ( p === HalfFloatType ) {\r\n\r\n\t\t\t\tif ( capabilities.isWebGL2 ) return gl.HALF_FLOAT;\r\n\r\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\t\t\tif ( extension !== null ) return extension.HALF_FLOAT_OES;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === AlphaFormat ) return gl.ALPHA;\r\n\t\t\tif ( p === RGBFormat ) return gl.RGB;\r\n\t\t\tif ( p === RGBAFormat ) return gl.RGBA;\r\n\t\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\r\n\t\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\r\n\t\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\r\n\t\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\r\n\r\n\t\t\tif ( p === AddEquation ) return gl.FUNC_ADD;\r\n\t\t\tif ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;\r\n\t\t\tif ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;\r\n\r\n\t\t\tif ( p === ZeroFactor ) return gl.ZERO;\r\n\t\t\tif ( p === OneFactor ) return gl.ONE;\r\n\t\t\tif ( p === SrcColorFactor ) return gl.SRC_COLOR;\r\n\t\t\tif ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;\r\n\t\t\tif ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;\r\n\t\t\tif ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;\r\n\t\t\tif ( p === DstAlphaFactor ) return gl.DST_ALPHA;\r\n\t\t\tif ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;\r\n\r\n\t\t\tif ( p === DstColorFactor ) return gl.DST_COLOR;\r\n\t\t\tif ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;\r\n\t\t\tif ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;\r\n\r\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\r\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\r\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGB_ETC1_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\r\n\r\n\t\t\t\tif ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\r\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\treturn p;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === MinEquation || p === MaxEquation ) {\r\n\r\n\t\t\t\tif ( capabilities.isWebGL2 ) {\r\n\r\n\t\t\t\t\tif ( p === MinEquation ) return gl.MIN;\r\n\t\t\t\t\tif ( p === MaxEquation ) return gl.MAX;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\textension = extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === MinEquation ) return extension.MIN_EXT;\r\n\t\t\t\t\tif ( p === MaxEquation ) return extension.MAX_EXT;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === UnsignedInt248Type ) {\r\n\r\n\t\t\t\tif ( capabilities.isWebGL2 ) return gl.UNSIGNED_INT_24_8;\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\r\n\r\n\t\t\t\tif ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn { convert: convert };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Group() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Group';\r\n\r\n\t}\r\n\r\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Group,\r\n\r\n\t\tisGroup: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author greggman / http://games.greggman.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\r\n\r\n\t\tCamera.call( this );\r\n\r\n\t\tthis.type = 'PerspectiveCamera';\r\n\r\n\t\tthis.fov = fov !== undefined ? fov : 50;\r\n\t\tthis.zoom = 1;\r\n\r\n\t\tthis.near = near !== undefined ? near : 0.1;\r\n\t\tthis.far = far !== undefined ? far : 2000;\r\n\t\tthis.focus = 10;\r\n\r\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\r\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\r\n\r\n\t\tconstructor: PerspectiveCamera,\r\n\r\n\t\tisPerspectiveCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.fov = source.fov;\r\n\t\t\tthis.zoom = source.zoom;\r\n\r\n\t\t\tthis.near = source.near;\r\n\t\t\tthis.far = source.far;\r\n\t\t\tthis.focus = source.focus;\r\n\r\n\t\t\tthis.aspect = source.aspect;\r\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\t\tthis.filmGauge = source.filmGauge;\r\n\t\t\tthis.filmOffset = source.filmOffset;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\r\n\t\t *\r\n\t\t * The default film gauge is 35, so that the focal length can be specified for\r\n\t\t * a 35mm (full frame) camera.\r\n\t\t *\r\n\t\t * Values for focal length and film gauge must have the same unit.\r\n\t\t */\r\n\t\tsetFocalLength: function ( focalLength ) {\r\n\r\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\r\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\r\n\r\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\r\n\t\t */\r\n\t\tgetFocalLength: function () {\r\n\r\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\r\n\r\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\r\n\r\n\t\t},\r\n\r\n\t\tgetEffectiveFOV: function () {\r\n\r\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\r\n\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\r\n\r\n\t\t},\r\n\r\n\t\tgetFilmWidth: function () {\r\n\r\n\t\t\t// film not completely covered in portrait format (aspect < 1)\r\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\r\n\r\n\t\t},\r\n\r\n\t\tgetFilmHeight: function () {\r\n\r\n\t\t\t// film not completely covered in landscape format (aspect > 1)\r\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t\t * multi-monitor/multi-machine setups.\r\n\t\t *\r\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t\t * the monitors are in grid like this\r\n\t\t *\r\n\t\t *   +---+---+---+\r\n\t\t *   | A | B | C |\r\n\t\t *   +---+---+---+\r\n\t\t *   | D | E | F |\r\n\t\t *   +---+---+---+\r\n\t\t *\r\n\t\t * then for each monitor you would call it like this\r\n\t\t *\r\n\t\t *   var w = 1920;\r\n\t\t *   var h = 1080;\r\n\t\t *   var fullWidth = w * 3;\r\n\t\t *   var fullHeight = h * 2;\r\n\t\t *\r\n\t\t *   --A--\r\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t\t *   --B--\r\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t\t *   --C--\r\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t\t *   --D--\r\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t\t *   --E--\r\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t\t *   --F--\r\n\t\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t\t *\r\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\r\n\t\t */\r\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\t\tthis.aspect = fullWidth / fullHeight;\r\n\r\n\t\t\tif ( this.view === null ) {\r\n\r\n\t\t\t\tthis.view = {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tfullWidth: 1,\r\n\t\t\t\t\tfullHeight: 1,\r\n\t\t\t\t\toffsetX: 0,\r\n\t\t\t\t\toffsetY: 0,\r\n\t\t\t\t\twidth: 1,\r\n\t\t\t\t\theight: 1\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.enabled = true;\r\n\t\t\tthis.view.fullWidth = fullWidth;\r\n\t\t\tthis.view.fullHeight = fullHeight;\r\n\t\t\tthis.view.offsetX = x;\r\n\t\t\tthis.view.offsetY = y;\r\n\t\t\tthis.view.width = width;\r\n\t\t\tthis.view.height = height;\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tclearViewOffset: function () {\r\n\r\n\t\t\tif ( this.view !== null ) {\r\n\r\n\t\t\t\tthis.view.enabled = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tupdateProjectionMatrix: function () {\r\n\r\n\t\t\tvar near = this.near,\r\n\t\t\t\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\r\n\t\t\t\theight = 2 * top,\r\n\t\t\t\twidth = this.aspect * height,\r\n\t\t\t\tleft = - 0.5 * width,\r\n\t\t\t\tview = this.view;\r\n\r\n\t\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\t\tvar fullWidth = view.fullWidth,\r\n\t\t\t\t\tfullHeight = view.fullHeight;\r\n\r\n\t\t\t\tleft += view.offsetX * width / fullWidth;\r\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\r\n\t\t\t\twidth *= view.width / fullWidth;\r\n\t\t\t\theight *= view.height / fullHeight;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar skew = this.filmOffset;\r\n\t\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\r\n\r\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\r\n\r\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.fov = this.fov;\r\n\t\t\tdata.object.zoom = this.zoom;\r\n\r\n\t\t\tdata.object.near = this.near;\r\n\t\t\tdata.object.far = this.far;\r\n\t\t\tdata.object.focus = this.focus;\r\n\r\n\t\t\tdata.object.aspect = this.aspect;\r\n\r\n\t\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\r\n\r\n\t\t\tdata.object.filmGauge = this.filmGauge;\r\n\t\t\tdata.object.filmOffset = this.filmOffset;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ArrayCamera( array ) {\r\n\r\n\t\tPerspectiveCamera.call( this );\r\n\r\n\t\tthis.cameras = array || [];\r\n\r\n\t}\r\n\r\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\r\n\r\n\t\tconstructor: ArrayCamera,\r\n\r\n\t\tisArrayCamera: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebVRManager( renderer ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar device = null;\r\n\t\tvar frameData = null;\r\n\r\n\t\tvar poseTarget = null;\r\n\r\n\t\tvar controllers = [];\r\n\t\tvar standingMatrix = new Matrix4();\r\n\t\tvar standingMatrixInverse = new Matrix4();\r\n\r\n\t\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\r\n\r\n\t\t\tframeData = new window.VRFrameData();\r\n\t\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\r\n\r\n\t\t}\r\n\r\n\t\tvar matrixWorldInverse = new Matrix4();\r\n\t\tvar tempQuaternion = new Quaternion();\r\n\t\tvar tempPosition = new Vector3();\r\n\r\n\t\tvar cameraL = new PerspectiveCamera();\r\n\t\tcameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );\r\n\t\tcameraL.layers.enable( 1 );\r\n\r\n\t\tvar cameraR = new PerspectiveCamera();\r\n\t\tcameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );\r\n\t\tcameraR.layers.enable( 2 );\r\n\r\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\r\n\t\tcameraVR.layers.enable( 1 );\r\n\t\tcameraVR.layers.enable( 2 );\r\n\r\n\t\t//\r\n\r\n\t\tfunction isPresenting() {\r\n\r\n\t\t\treturn device !== null && device.isPresenting === true;\r\n\r\n\t\t}\r\n\r\n\t\tvar currentSize, currentPixelRatio;\r\n\r\n\t\tfunction onVRDisplayPresentChange() {\r\n\r\n\t\t\tif ( isPresenting() ) {\r\n\r\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\r\n\t\t\t\tvar renderWidth = eyeParameters.renderWidth;\r\n\t\t\t\tvar renderHeight = eyeParameters.renderHeight;\r\n\r\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\r\n\t\t\t\tcurrentSize = renderer.getSize();\r\n\r\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );\r\n\r\n\t\t\t\tanimation.start();\r\n\r\n\t\t\t} else if ( scope.enabled ) {\r\n\r\n\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\r\n\r\n\t\t\t\tanimation.stop();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar triggers = [];\r\n\r\n\t\tfunction findGamepad( id ) {\r\n\r\n\t\t\tvar gamepads = navigator.getGamepads && navigator.getGamepads();\r\n\r\n\t\t\tfor ( var i = 0, j = 0, l = gamepads.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar gamepad = gamepads[ i ];\r\n\r\n\t\t\t\tif ( gamepad && ( gamepad.id === 'Daydream Controller' ||\r\n\t\t\t\t\tgamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||\r\n\t\t\t\t\tgamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||\r\n\t\t\t\t\tgamepad.id.startsWith( 'Spatial Controller' ) ) ) {\r\n\r\n\t\t\t\t\tif ( j === id ) return gamepad;\r\n\r\n\t\t\t\t\tj ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateControllers() {\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tvar controller = controllers[ i ];\r\n\r\n\t\t\t\tvar gamepad = findGamepad( i );\r\n\r\n\t\t\t\tif ( gamepad !== undefined && gamepad.pose !== undefined ) {\r\n\r\n\t\t\t\t\tif ( gamepad.pose === null ) return;\r\n\r\n\t\t\t\t\t//  Pose\r\n\r\n\t\t\t\t\tvar pose = gamepad.pose;\r\n\r\n\t\t\t\t\tif ( pose.hasPosition === false ) controller.position.set( 0.2, - 0.6, - 0.05 );\r\n\r\n\t\t\t\t\tif ( pose.position !== null ) controller.position.fromArray( pose.position );\r\n\t\t\t\t\tif ( pose.orientation !== null ) controller.quaternion.fromArray( pose.orientation );\r\n\t\t\t\t\tcontroller.matrix.compose( controller.position, controller.quaternion, controller.scale );\r\n\t\t\t\t\tcontroller.matrix.premultiply( standingMatrix );\r\n\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.quaternion, controller.scale );\r\n\t\t\t\t\tcontroller.matrixWorldNeedsUpdate = true;\r\n\t\t\t\t\tcontroller.visible = true;\r\n\r\n\t\t\t\t\t//  Trigger\r\n\r\n\t\t\t\t\tvar buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;\r\n\r\n\t\t\t\t\tif ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\r\n\r\n\t\t\t\t\t\ttriggers[ i ] = gamepad.buttons[ buttonId ].pressed;\r\n\r\n\t\t\t\t\t\tif ( triggers[ i ] === true ) {\r\n\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectstart' } );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectend' } );\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'select' } );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.enabled = false;\r\n\t\tthis.userHeight = 1.6;\r\n\r\n\t\tthis.getController = function ( id ) {\r\n\r\n\t\t\tvar controller = controllers[ id ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new Group();\r\n\t\t\t\tcontroller.matrixAutoUpdate = false;\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\tcontrollers[ id ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDevice = function () {\r\n\r\n\t\t\treturn device;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDevice = function ( value ) {\r\n\r\n\t\t\tif ( value !== undefined ) device = value;\r\n\r\n\t\t\tanimation.setContext( value );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setPoseTarget = function ( object ) {\r\n\r\n\t\t\tif ( object !== undefined ) poseTarget = object;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getCamera = function ( camera ) {\r\n\r\n\t\t\tif ( device === null ) {\r\n\r\n\t\t\t\tcamera.position.set( 0, scope.userHeight, 0 );\r\n\t\t\t\treturn camera;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdevice.depthNear = camera.near;\r\n\t\t\tdevice.depthFar = camera.far;\r\n\r\n\t\t\tdevice.getFrameData( frameData );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar stageParameters = device.stageParameters;\r\n\r\n\t\t\tif ( stageParameters ) {\r\n\r\n\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstandingMatrix.makeTranslation( 0, scope.userHeight, 0 );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar pose = frameData.pose;\r\n\t\t\tvar poseObject = poseTarget !== null ? poseTarget : camera;\r\n\r\n\t\t\t// We want to manipulate poseObject by its position and quaternion components since users may rely on them.\r\n\t\t\tposeObject.matrix.copy( standingMatrix );\r\n\t\t\tposeObject.matrix.decompose( poseObject.position, poseObject.quaternion, poseObject.scale );\r\n\r\n\t\t\tif ( pose.orientation !== null ) {\r\n\r\n\t\t\t\ttempQuaternion.fromArray( pose.orientation );\r\n\t\t\t\tposeObject.quaternion.multiply( tempQuaternion );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pose.position !== null ) {\r\n\r\n\t\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\r\n\t\t\t\ttempPosition.fromArray( pose.position );\r\n\t\t\t\ttempPosition.applyQuaternion( tempQuaternion );\r\n\t\t\t\tposeObject.position.add( tempPosition );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tposeObject.updateMatrixWorld();\r\n\r\n\t\t\tif ( device.isPresenting === false ) return camera;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcameraL.near = camera.near;\r\n\t\t\tcameraR.near = camera.near;\r\n\r\n\t\t\tcameraL.far = camera.far;\r\n\t\t\tcameraR.far = camera.far;\r\n\r\n\t\t\tcameraVR.matrixWorld.copy( camera.matrixWorld );\r\n\t\t\tcameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );\r\n\r\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\r\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\r\n\r\n\t\t\t// TODO (mrdoob) Double check this code\r\n\r\n\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\r\n\r\n\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\r\n\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\r\n\r\n\t\t\tvar parent = poseObject.parent;\r\n\r\n\t\t\tif ( parent !== null ) {\r\n\r\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\r\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\r\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// envMap and Mirror needs camera.matrixWorld\r\n\r\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\r\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\r\n\r\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\r\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\r\n\r\n\t\t\t// HACK (mrdoob)\r\n\t\t\t// https://github.com/w3c/webvr/issues/203\r\n\r\n\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar layers = device.getLayers();\r\n\r\n\t\t\tif ( layers.length ) {\r\n\r\n\t\t\t\tvar layer = layers[ 0 ];\r\n\r\n\t\t\t\tif ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {\r\n\r\n\t\t\t\t\tcameraL.bounds.fromArray( layer.leftBounds );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {\r\n\r\n\t\t\t\t\tcameraR.bounds.fromArray( layer.rightBounds );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tupdateControllers();\r\n\r\n\t\t\treturn cameraVR;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getStandingMatrix = function () {\r\n\r\n\t\t\treturn standingMatrix;\r\n\r\n\t\t};\r\n\r\n\t\tthis.isPresenting = isPresenting;\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tanimation.setAnimationLoop( callback );\r\n\r\n\t\t};\r\n\r\n\t\tthis.submitFrame = function () {\r\n\r\n\t\t\tif ( isPresenting() ) device.submitFrame();\r\n\r\n\t\t};\r\n\r\n\t\tthis.dispose = function () {\r\n\r\n\t\t\tif ( typeof window !== 'undefined' ) {\r\n\r\n\t\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebXRManager( renderer ) {\r\n\r\n\t\tvar gl = renderer.context;\r\n\r\n\t\tvar device = null;\r\n\t\tvar session = null;\r\n\r\n\t\tvar frameOfRef = null;\r\n\r\n\t\tvar pose = null;\r\n\r\n\t\tvar controllers = [];\r\n\t\tvar inputSources = [];\r\n\r\n\t\tfunction isPresenting() {\r\n\r\n\t\t\treturn session !== null && frameOfRef !== null;\r\n\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar cameraL = new PerspectiveCamera();\r\n\t\tcameraL.layers.enable( 1 );\r\n\t\tcameraL.viewport = new Vector4();\r\n\r\n\t\tvar cameraR = new PerspectiveCamera();\r\n\t\tcameraR.layers.enable( 2 );\r\n\t\tcameraR.viewport = new Vector4();\r\n\r\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\r\n\t\tcameraVR.layers.enable( 1 );\r\n\t\tcameraVR.layers.enable( 2 );\r\n\r\n\t\t//\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.getController = function ( id ) {\r\n\r\n\t\t\tvar controller = controllers[ id ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new Group();\r\n\t\t\t\tcontroller.matrixAutoUpdate = false;\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\tcontrollers[ id ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDevice = function () {\r\n\r\n\t\t\treturn device;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDevice = function ( value ) {\r\n\r\n\t\t\tif ( value !== undefined ) device = value;\r\n\t\t\tif ( value instanceof XRDevice ) gl.setCompatibleXRDevice( value );\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tfunction onSessionEvent( event ) {\r\n\r\n\t\t\tvar controller = controllers[ inputSources.indexOf( event.inputSource ) ];\r\n\t\t\tif ( controller ) controller.dispatchEvent( { type: event.type } );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onSessionEnd() {\r\n\r\n\t\t\trenderer.setFramebuffer( null );\r\n\t\t\tanimation.stop();\r\n\r\n\t\t}\r\n\r\n\t\tthis.setSession = function ( value, options ) {\r\n\r\n\t\t\tsession = value;\r\n\r\n\t\t\tif ( session !== null ) {\r\n\r\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\r\n\r\n\t\t\t\tsession.baseLayer = new XRWebGLLayer( session, gl );\r\n\t\t\t\tsession.requestFrameOfReference( options.frameOfReferenceType ).then( function ( value ) {\r\n\r\n\t\t\t\t\tframeOfRef = value;\r\n\r\n\t\t\t\t\trenderer.setFramebuffer( session.baseLayer.framebuffer );\r\n\r\n\t\t\t\t\tanimation.setContext( session );\r\n\t\t\t\t\tanimation.start();\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tinputSources = session.getInputSources();\r\n\r\n\t\t\t\tsession.addEventListener( 'inputsourceschange', function () {\r\n\r\n\t\t\t\t\tinputSources = session.getInputSources();\r\n\t\t\t\t\tconsole.log( inputSources );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction updateCamera( camera, parent ) {\r\n\r\n\t\t\tif ( parent === null ) {\r\n\r\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tthis.getCamera = function ( camera ) {\r\n\r\n\t\t\tif ( isPresenting() ) {\r\n\r\n\t\t\t\tvar parent = camera.parent;\r\n\t\t\t\tvar cameras = cameraVR.cameras;\r\n\r\n\t\t\t\t// apply camera.parent to cameraVR\r\n\r\n\t\t\t\tupdateCamera( cameraVR, parent );\r\n\r\n\t\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\t\tupdateCamera( cameras[ i ], parent );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// update camera and its children\r\n\r\n\t\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\r\n\r\n\t\t\t\tvar children = camera.children;\r\n\r\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tchildren[ i ].updateMatrixWorld( true );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn cameraVR;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn camera;\r\n\r\n\t\t};\r\n\r\n\t\tthis.isPresenting = isPresenting;\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar onAnimationFrameCallback = null;\r\n\r\n\t\tfunction onAnimationFrame( time, frame ) {\r\n\r\n\t\t\tpose = frame.getDevicePose( frameOfRef );\r\n\r\n\t\t\tif ( pose !== null ) {\r\n\r\n\t\t\t\tvar layer = session.baseLayer;\r\n\t\t\t\tvar views = frame.views;\r\n\r\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar view = views[ i ];\r\n\t\t\t\t\tvar viewport = layer.getViewport( view );\r\n\t\t\t\t\tvar viewMatrix = pose.getViewMatrix( view );\r\n\r\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\r\n\t\t\t\t\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\r\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\r\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\r\n\r\n\t\t\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\r\n\r\n\t\t\t\t\t\t// HACK (mrdoob)\r\n\t\t\t\t\t\t// https://github.com/w3c/webvr/issues/203\r\n\r\n\t\t\t\t\t\tcameraVR.projectionMatrix.copy( camera.projectionMatrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tvar controller = controllers[ i ];\r\n\r\n\t\t\t\tvar inputSource = inputSources[ i ];\r\n\r\n\t\t\t\tif ( inputSource ) {\r\n\r\n\t\t\t\t\tvar inputPose = frame.getInputPose( inputSource, frameOfRef );\r\n\r\n\t\t\t\t\tif ( inputPose !== null ) {\r\n\r\n\t\t\t\t\t\tif ( 'targetRay' in inputPose ) {\r\n\r\n\t\t\t\t\t\t\tcontroller.matrix.elements = inputPose.targetRay.transformMatrix;\r\n\r\n\t\t\t\t\t\t} else if ( 'pointerMatrix' in inputPose ) {\r\n\r\n\t\t\t\t\t\t\t// DEPRECATED\r\n\r\n\t\t\t\t\t\t\tcontroller.matrix.elements = inputPose.pointerMatrix;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\r\n\t\t\t\t\t\tcontroller.visible = true;\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\r\n\r\n\t\t}\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\t\tanimation.setAnimationLoop( onAnimationFrame );\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tonAnimationFrameCallback = callback;\r\n\r\n\t\t};\r\n\r\n\t\tthis.dispose = function () {};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tthis.getStandingMatrix = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );\r\n\t\t\treturn new THREE.Matrix4();\r\n\r\n\t\t};\r\n\r\n\t\tthis.submitFrame = function () {};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction WebGLRenderer( parameters ) {\r\n\r\n\t\tconsole.log( 'THREE.WebGLRenderer', REVISION );\r\n\r\n\t\tparameters = parameters || {};\r\n\r\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\r\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\r\n\r\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\r\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\r\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';\r\n\r\n\t\tvar currentRenderList = null;\r\n\t\tvar currentRenderState = null;\r\n\r\n\t\t// public properties\r\n\r\n\t\tthis.domElement = _canvas;\r\n\t\tthis.context = null;\r\n\r\n\t\t// clearing\r\n\r\n\t\tthis.autoClear = true;\r\n\t\tthis.autoClearColor = true;\r\n\t\tthis.autoClearDepth = true;\r\n\t\tthis.autoClearStencil = true;\r\n\r\n\t\t// scene graph\r\n\r\n\t\tthis.sortObjects = true;\r\n\r\n\t\t// user-defined clipping\r\n\r\n\t\tthis.clippingPlanes = [];\r\n\t\tthis.localClippingEnabled = false;\r\n\r\n\t\t// physically based shading\r\n\r\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\r\n\t\tthis.gammaInput = false;\r\n\t\tthis.gammaOutput = false;\r\n\r\n\t\t// physical lights\r\n\r\n\t\tthis.physicallyCorrectLights = false;\r\n\r\n\t\t// tone mapping\r\n\r\n\t\tthis.toneMapping = LinearToneMapping;\r\n\t\tthis.toneMappingExposure = 1.0;\r\n\t\tthis.toneMappingWhitePoint = 1.0;\r\n\r\n\t\t// morphs\r\n\r\n\t\tthis.maxMorphTargets = 8;\r\n\t\tthis.maxMorphNormals = 4;\r\n\r\n\t\t// internal properties\r\n\r\n\t\tvar _this = this,\r\n\r\n\t\t\t_isContextLost = false,\r\n\r\n\t\t\t// internal state cache\r\n\r\n\t\t\t_framebuffer = null,\r\n\r\n\t\t\t_currentRenderTarget = null,\r\n\t\t\t_currentFramebuffer = null,\r\n\t\t\t_currentMaterialId = - 1,\r\n\r\n\t\t\t// geometry and program caching\r\n\r\n\t\t\t_currentGeometryProgram = {\r\n\t\t\t\tgeometry: null,\r\n\t\t\t\tprogram: null,\r\n\t\t\t\twireframe: false\r\n\t\t\t},\r\n\r\n\t\t\t_currentCamera = null,\r\n\t\t\t_currentArrayCamera = null,\r\n\r\n\t\t\t_currentViewport = new Vector4(),\r\n\t\t\t_currentScissor = new Vector4(),\r\n\t\t\t_currentScissorTest = null,\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_usedTextureUnits = 0,\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_width = _canvas.width,\r\n\t\t\t_height = _canvas.height,\r\n\r\n\t\t\t_pixelRatio = 1,\r\n\r\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\r\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\r\n\t\t\t_scissorTest = false,\r\n\r\n\t\t\t// frustum\r\n\r\n\t\t\t_frustum = new Frustum(),\r\n\r\n\t\t\t// clipping\r\n\r\n\t\t\t_clipping = new WebGLClipping(),\r\n\t\t\t_clippingEnabled = false,\r\n\t\t\t_localClippingEnabled = false,\r\n\r\n\t\t\t// camera matrices cache\r\n\r\n\t\t\t_projScreenMatrix = new Matrix4(),\r\n\r\n\t\t\t_vector3 = new Vector3();\r\n\r\n\t\tfunction getTargetPixelRatio() {\r\n\r\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\r\n\r\n\t\t}\r\n\r\n\t\t// initialize\r\n\r\n\t\tvar _gl;\r\n\r\n\t\ttry {\r\n\r\n\t\t\tvar contextAttributes = {\r\n\t\t\t\talpha: _alpha,\r\n\t\t\t\tdepth: _depth,\r\n\t\t\t\tstencil: _stencil,\r\n\t\t\t\tantialias: _antialias,\r\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\r\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\r\n\t\t\t\tpowerPreference: _powerPreference\r\n\t\t\t};\r\n\r\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\r\n\r\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\r\n\r\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\r\n\r\n\t\t\tif ( _gl === null ) {\r\n\r\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\r\n\r\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\r\n\r\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\r\n\r\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\r\n\r\n\t\t}\r\n\r\n\t\tvar extensions, capabilities, state, info;\r\n\t\tvar properties, textures, attributes, geometries, objects;\r\n\t\tvar programCache, renderLists, renderStates;\r\n\r\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\r\n\r\n\t\tvar utils;\r\n\r\n\t\tfunction initGLContext() {\r\n\r\n\t\t\textensions = new WebGLExtensions( _gl );\r\n\r\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\r\n\r\n\t\t\tif ( ! capabilities.isWebGL2 ) {\r\n\r\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\r\n\t\t\t\textensions.get( 'OES_texture_float' );\r\n\t\t\t\textensions.get( 'OES_texture_half_float' );\r\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\r\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\r\n\t\t\t\textensions.get( 'OES_element_index_uint' );\r\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\textensions.get( 'OES_texture_float_linear' );\r\n\r\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\r\n\r\n\t\t\tstate = new WebGLState( _gl, extensions, utils, capabilities );\r\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\r\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\r\n\r\n\t\t\tinfo = new WebGLInfo( _gl );\r\n\t\t\tproperties = new WebGLProperties();\r\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\r\n\t\t\tattributes = new WebGLAttributes( _gl );\r\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\r\n\t\t\tobjects = new WebGLObjects( geometries, info );\r\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\r\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\r\n\t\t\trenderLists = new WebGLRenderLists();\r\n\t\t\trenderStates = new WebGLRenderStates();\r\n\r\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\r\n\r\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\r\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\r\n\r\n\t\t\tinfo.programs = programCache.programs;\r\n\r\n\t\t\t_this.context = _gl;\r\n\t\t\t_this.capabilities = capabilities;\r\n\t\t\t_this.extensions = extensions;\r\n\t\t\t_this.properties = properties;\r\n\t\t\t_this.renderLists = renderLists;\r\n\t\t\t_this.state = state;\r\n\t\t\t_this.info = info;\r\n\r\n\t\t}\r\n\r\n\t\tinitGLContext();\r\n\r\n\t\t// vr\r\n\r\n\t\tvar vr = ( 'xr' in navigator ) ? new WebXRManager( _this ) : new WebVRManager( _this );\r\n\r\n\t\tthis.vr = vr;\r\n\r\n\t\t// shadow map\r\n\r\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\r\n\r\n\t\tthis.shadowMap = shadowMap;\r\n\r\n\t\t// API\r\n\r\n\t\tthis.getContext = function () {\r\n\r\n\t\t\treturn _gl;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getContextAttributes = function () {\r\n\r\n\t\t\treturn _gl.getContextAttributes();\r\n\r\n\t\t};\r\n\r\n\t\tthis.forceContextLoss = function () {\r\n\r\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\r\n\t\t\tif ( extension ) extension.loseContext();\r\n\r\n\t\t};\r\n\r\n\t\tthis.forceContextRestore = function () {\r\n\r\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\r\n\t\t\tif ( extension ) extension.restoreContext();\r\n\r\n\t\t};\r\n\r\n\t\tthis.getPixelRatio = function () {\r\n\r\n\t\t\treturn _pixelRatio;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setPixelRatio = function ( value ) {\r\n\r\n\t\t\tif ( value === undefined ) return;\r\n\r\n\t\t\t_pixelRatio = value;\r\n\r\n\t\t\tthis.setSize( _width, _height, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getSize = function () {\r\n\r\n\t\t\treturn {\r\n\t\t\t\twidth: _width,\r\n\t\t\t\theight: _height\r\n\t\t\t};\r\n\r\n\t\t};\r\n\r\n\t\tthis.setSize = function ( width, height, updateStyle ) {\r\n\r\n\t\t\tif ( vr.isPresenting() ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\r\n\t\t\t_canvas.width = width * _pixelRatio;\r\n\t\t\t_canvas.height = height * _pixelRatio;\r\n\r\n\t\t\tif ( updateStyle !== false ) {\r\n\r\n\t\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDrawingBufferSize = function () {\r\n\r\n\t\t\treturn {\r\n\t\t\t\twidth: _width * _pixelRatio,\r\n\t\t\t\theight: _height * _pixelRatio\r\n\t\t\t};\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\r\n\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\r\n\t\t\t_pixelRatio = pixelRatio;\r\n\r\n\t\t\t_canvas.width = width * pixelRatio;\r\n\t\t\t_canvas.height = height * pixelRatio;\r\n\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getCurrentViewport = function () {\r\n\r\n\t\t\treturn _currentViewport;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\t\t_viewport.set( x, _height - y - height, width, height );\r\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\t\t_scissor.set( x, _height - y - height, width, height );\r\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setScissorTest = function ( boolean ) {\r\n\r\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\r\n\r\n\t\t};\r\n\r\n\t\t// Clearing\r\n\r\n\t\tthis.getClearColor = function () {\r\n\r\n\t\t\treturn background.getClearColor();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setClearColor = function () {\r\n\r\n\t\t\tbackground.setClearColor.apply( background, arguments );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getClearAlpha = function () {\r\n\r\n\t\t\treturn background.getClearAlpha();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setClearAlpha = function () {\r\n\r\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\t\tvar bits = 0;\r\n\r\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\r\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n\t\t\t_gl.clear( bits );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearColor = function () {\r\n\r\n\t\t\tthis.clear( true, false, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearDepth = function () {\r\n\r\n\t\t\tthis.clear( false, true, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearStencil = function () {\r\n\r\n\t\t\tthis.clear( false, false, true );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\t\tthis.setRenderTarget( renderTarget );\r\n\t\t\tthis.clear( color, depth, stencil );\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tthis.dispose = function () {\r\n\r\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\r\n\r\n\t\t\trenderLists.dispose();\r\n\t\t\trenderStates.dispose();\r\n\t\t\tproperties.dispose();\r\n\t\t\tobjects.dispose();\r\n\r\n\t\t\tvr.dispose();\r\n\r\n\t\t\tanimation.stop();\r\n\r\n\t\t};\r\n\r\n\t\t// Events\r\n\r\n\t\tfunction onContextLost( event ) {\r\n\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\r\n\r\n\t\t\t_isContextLost = true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction onContextRestore( /* event */ ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\r\n\r\n\t\t\t_isContextLost = false;\r\n\r\n\t\t\tinitGLContext();\r\n\r\n\t\t}\r\n\r\n\t\tfunction onMaterialDispose( event ) {\r\n\r\n\t\t\tvar material = event.target;\r\n\r\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\tdeallocateMaterial( material );\r\n\r\n\t\t}\r\n\r\n\t\t// Buffer deallocation\r\n\r\n\t\tfunction deallocateMaterial( material ) {\r\n\r\n\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t\tproperties.remove( material );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction releaseMaterialProgramReference( material ) {\r\n\r\n\t\t\tvar programInfo = properties.get( material ).program;\r\n\r\n\t\t\tmaterial.program = undefined;\r\n\r\n\t\t\tif ( programInfo !== undefined ) {\r\n\r\n\t\t\t\tprogramCache.releaseProgram( programInfo );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Buffer rendering\r\n\r\n\t\tfunction renderObjectImmediate( object, program ) {\r\n\r\n\t\t\tobject.render( function ( object ) {\r\n\r\n\t\t\t\t_this.renderBufferImmediate( object, program );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderBufferImmediate = function ( object, program ) {\r\n\r\n\t\t\tstate.initAttributes();\r\n\r\n\t\t\tvar buffers = properties.get( object );\r\n\r\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\r\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\r\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\r\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasUvs ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasColors ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.color );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\r\n\r\n\t\t\tobject.count = 0;\r\n\r\n\t\t};\r\n\r\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\r\n\r\n\t\t\tvar frontFaceCW = ( object.isMesh && object.normalMatrix.determinant() < 0 );\r\n\r\n\t\t\tstate.setMaterial( material, frontFaceCW );\r\n\r\n\t\t\tvar program = setProgram( camera, fog, material, object );\r\n\r\n\t\t\tvar updateBuffers = false;\r\n\r\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\r\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\r\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\r\n\r\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\r\n\t\t\t\t_currentGeometryProgram.program = program.id;\r\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\r\n\t\t\t\tupdateBuffers = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.morphTargetInfluences ) {\r\n\r\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\r\n\r\n\t\t\t\tupdateBuffers = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar position = geometry.attributes.position;\r\n\t\t\tvar rangeFactor = 1;\r\n\r\n\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\r\n\t\t\t\trangeFactor = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute;\r\n\t\t\tvar renderer = bufferRenderer;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tattribute = attributes.get( index );\r\n\r\n\t\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\t\trenderer.setIndex( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar dataCount = Infinity;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tdataCount = index.count;\r\n\r\n\t\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t\tdataCount = position.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\r\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\r\n\r\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\r\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\r\n\r\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\r\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\r\n\r\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\r\n\r\n\t\t\tif ( drawCount === 0 ) return;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\r\n\t\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tswitch ( object.drawMode ) {\r\n\r\n\t\t\t\t\t\tcase TrianglesDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase TriangleStripDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase TriangleFanDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t} else if ( object.isLine ) {\r\n\r\n\t\t\t\tvar lineWidth = material.linewidth;\r\n\r\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\r\n\r\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\r\n\r\n\t\t\t\tif ( object.isLineSegments ) {\r\n\r\n\t\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t\t} else if ( object.isLineLoop ) {\r\n\r\n\t\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isPoints ) {\r\n\r\n\t\t\t\trenderer.setMode( _gl.POINTS );\r\n\r\n\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry ) {\r\n\r\n\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\r\n\r\n\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction setupVertexAttributes( material, program, geometry ) {\r\n\r\n\t\t\tif ( geometry && geometry.isInstancedBufferGeometry & ! capabilities.isWebGL2 ) {\r\n\r\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.initAttributes();\r\n\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\r\n\t\t\tfor ( var name in programAttributes ) {\r\n\r\n\t\t\t\tvar programAttribute = programAttributes[ name ];\r\n\r\n\t\t\t\tif ( programAttribute >= 0 ) {\r\n\r\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\r\n\r\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\r\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\r\n\r\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\r\n\r\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\r\n\r\n\t\t\t\t\t\tif ( attribute === undefined ) continue;\r\n\r\n\t\t\t\t\t\tvar buffer = attribute.buffer;\r\n\t\t\t\t\t\tvar type = attribute.type;\r\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\r\n\r\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\r\n\t\t\t\t\t\t\tvar stride = data.stride;\r\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\r\n\r\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\r\n\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\r\n\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\r\n\r\n\t\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\t\tswitch ( value.length ) {\r\n\r\n\t\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t}\r\n\r\n\t\t// Compile\r\n\r\n\t\tthis.compile = function ( scene, camera ) {\r\n\r\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\r\n\t\t\tcurrentRenderState.init();\r\n\r\n\t\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\t\tif ( object.isLight ) {\r\n\r\n\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tcurrentRenderState.setupLights( camera );\r\n\r\n\t\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\t\tif ( object.material ) {\r\n\r\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t};\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar onAnimationFrameCallback = null;\r\n\r\n\t\tfunction onAnimationFrame( time ) {\r\n\r\n\t\t\tif ( vr.isPresenting() ) return;\r\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\r\n\r\n\t\t}\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\t\tanimation.setAnimationLoop( onAnimationFrame );\r\n\r\n\t\tif ( typeof window !== 'undefined' ) animation.setContext( window );\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tonAnimationFrameCallback = callback;\r\n\t\t\tvr.setAnimationLoop( callback );\r\n\r\n\t\t\tanimation.start();\r\n\r\n\t\t};\r\n\r\n\t\t// Rendering\r\n\r\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\r\n\r\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _isContextLost ) return;\r\n\r\n\t\t\t// reset caching for this frame\r\n\r\n\t\t\t_currentGeometryProgram.geometry = null;\r\n\t\t\t_currentGeometryProgram.program = null;\r\n\t\t\t_currentGeometryProgram.wireframe = false;\r\n\t\t\t_currentMaterialId = - 1;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\t// update scene graph\r\n\r\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n\r\n\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n\t\t\tif ( vr.enabled ) {\r\n\r\n\t\t\t\tcamera = vr.getCamera( camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\r\n\t\t\tcurrentRenderState.init();\r\n\r\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget );\r\n\r\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\r\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\r\n\r\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\r\n\t\t\tcurrentRenderList.init();\r\n\r\n\t\t\tprojectObject( scene, camera, _this.sortObjects );\r\n\r\n\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\tcurrentRenderList.sort();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( _clippingEnabled ) _clipping.beginShadows();\r\n\r\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\r\n\r\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\r\n\r\n\t\t\tcurrentRenderState.setupLights( camera );\r\n\r\n\t\t\tif ( _clippingEnabled ) _clipping.endShadows();\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.info.autoReset ) this.info.reset();\r\n\r\n\t\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\t\trenderTarget = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\r\n\r\n\t\t\t// render scene\r\n\r\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\r\n\t\t\tvar transparentObjects = currentRenderList.transparent;\r\n\r\n\t\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\r\n\r\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\r\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\r\n\r\n\t\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\t\tif ( renderTarget ) {\r\n\r\n\t\t\t\ttextures.updateRenderTargetMipmap( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\t\tstate.buffers.depth.setTest( true );\r\n\t\t\tstate.buffers.depth.setMask( true );\r\n\t\t\tstate.buffers.color.setMask( true );\r\n\r\n\t\t\tstate.setPolygonOffset( false );\r\n\r\n\t\t\tscene.onAfterRender( _this, scene, camera );\r\n\r\n\t\t\tif ( vr.enabled ) {\r\n\r\n\t\t\t\tvr.submitFrame();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// _gl.finish();\r\n\r\n\t\t\tcurrentRenderList = null;\r\n\t\t\tcurrentRenderState = null;\r\n\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t// TODO Duplicated code (Frustum)\r\n\r\n\t\tvar _sphere = new Sphere();\r\n\r\n\t\tfunction isObjectViewable( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null )\r\n\t\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t\t_sphere.copy( geometry.boundingSphere ).\r\n\t\t\tapplyMatrix4( object.matrixWorld );\r\n\r\n\t\t\treturn isSphereViewable( _sphere );\r\n\r\n\t\t}\r\n\r\n\t\tfunction isSpriteViewable( sprite ) {\r\n\r\n\t\t\t_sphere.center.set( 0, 0, 0 );\r\n\t\t\t_sphere.radius = 0.7071067811865476;\r\n\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\t\treturn isSphereViewable( _sphere );\r\n\r\n\t\t}\r\n\r\n\t\tfunction isSphereViewable( sphere ) {\r\n\r\n\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\r\n\r\n\t\t\tvar numPlanes = _clipping.numPlanes;\r\n\r\n\t\t\tif ( numPlanes === 0 ) return true;\r\n\r\n\t\t\tvar planes = _this.clippingPlanes,\r\n\r\n\t\t\t\tcenter = sphere.center,\r\n\t\t\t\tnegRad = - sphere.radius,\r\n\t\t\t\ti = 0;\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\t// out when deeper than radius in the negative halfspace\r\n\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\r\n\r\n\t\t\t} while ( ++ i !== numPlanes );\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\t\t*/\r\n\r\n\t\tfunction projectObject( object, camera, sortObjects ) {\r\n\r\n\t\t\tif ( object.visible === false ) return;\r\n\r\n\t\t\tvar visible = object.layers.test( camera.layers );\r\n\r\n\t\t\tif ( visible ) {\r\n\r\n\t\t\t\tif ( object.isLight ) {\r\n\r\n\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\r\n\r\n\t\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\t\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\r\n\r\n\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, _vector3.z, null );\r\n\r\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\r\n\r\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\r\n\r\n\t\t\t\t\t\tobject.skeleton.update();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\t\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tprojectObject( children[ i ], camera, sortObjects );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\r\n\r\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar renderItem = renderList[ i ];\r\n\r\n\t\t\t\tvar object = renderItem.object;\r\n\t\t\t\tvar geometry = renderItem.geometry;\r\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\r\n\t\t\t\tvar group = renderItem.group;\r\n\r\n\t\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\t\t_currentArrayCamera = camera;\r\n\r\n\t\t\t\t\tvar cameras = camera.cameras;\r\n\r\n\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tvar camera2 = cameras[ j ];\r\n\r\n\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\r\n\r\n\t\t\t\t\t\t\tif ( 'viewport' in camera2 ) { // XR\r\n\r\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tvar bounds = camera2.bounds;\r\n\r\n\t\t\t\t\t\t\t\tvar x = bounds.x * _width;\r\n\t\t\t\t\t\t\t\tvar y = bounds.y * _height;\r\n\t\t\t\t\t\t\t\tvar width = bounds.z * _width;\r\n\t\t\t\t\t\t\t\tvar height = bounds.w * _height;\r\n\r\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\r\n\r\n\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_currentArrayCamera = null;\r\n\r\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\r\n\r\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\r\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t\t\tif ( object.isImmediateRenderObject ) {\r\n\r\n\t\t\t\tstate.setMaterial( material );\r\n\r\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\r\n\r\n\t\t\t\t_currentGeometryProgram.geometry = null;\r\n\t\t\t\t_currentGeometryProgram.program = null;\r\n\t\t\t\t_currentGeometryProgram.wireframe = false;\r\n\r\n\t\t\t\trenderObjectImmediate( object, program );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\r\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\r\n\r\n\t\t}\r\n\r\n\t\tfunction initMaterial( material, fog, object ) {\r\n\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\t\tvar lights = currentRenderState.state.lights;\r\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\r\n\r\n\t\t\tvar lightsHash = materialProperties.lightsHash;\r\n\t\t\tvar lightsStateHash = lights.state.hash;\r\n\r\n\t\t\tvar parameters = programCache.getParameters(\r\n\t\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\r\n\r\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\r\n\r\n\t\t\tvar program = materialProperties.program;\r\n\t\t\tvar programChange = true;\r\n\r\n\t\t\tif ( program === undefined ) {\r\n\r\n\t\t\t\t// new material\r\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\t} else if ( program.code !== code ) {\r\n\r\n\t\t\t\t// changed glsl or parameters\r\n\t\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t\t} else if ( lightsHash.stateID !== lightsStateHash.stateID ||\r\n\t\t\t\tlightsHash.directionalLength !== lightsStateHash.directionalLength ||\r\n\t\t\t\tlightsHash.pointLength !== lightsStateHash.pointLength ||\r\n\t\t\t\tlightsHash.spotLength !== lightsStateHash.spotLength ||\r\n\t\t\t\tlightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||\r\n\t\t\t\tlightsHash.hemiLength !== lightsStateHash.hemiLength ||\r\n\t\t\t\tlightsHash.shadowsLength !== lightsStateHash.shadowsLength ) {\r\n\r\n\t\t\t\tlightsHash.stateID = lightsStateHash.stateID;\r\n\t\t\t\tlightsHash.directionalLength = lightsStateHash.directionalLength;\r\n\t\t\t\tlightsHash.pointLength = lightsStateHash.pointLength;\r\n\t\t\t\tlightsHash.spotLength = lightsStateHash.spotLength;\r\n\t\t\t\tlightsHash.rectAreaLength = lightsStateHash.rectAreaLength;\r\n\t\t\t\tlightsHash.hemiLength = lightsStateHash.hemiLength;\r\n\t\t\t\tlightsHash.shadowsLength = lightsStateHash.shadowsLength;\r\n\r\n\t\t\t\tprogramChange = false;\r\n\r\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\r\n\r\n\t\t\t\t// same glsl and uniform list\r\n\t\t\t\treturn;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// only rebuild uniform list\r\n\t\t\t\tprogramChange = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( programChange ) {\r\n\r\n\t\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\r\n\r\n\t\t\t\t\tmaterialProperties.shader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\r\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterialProperties.shader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: material.uniforms,\r\n\t\t\t\t\t\tvertexShader: material.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\r\n\r\n\t\t\t\t// Computing code again as onBeforeCompile may have changed the shaders\r\n\t\t\t\tcode = programCache.getProgramCode( material, parameters );\r\n\r\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, code );\r\n\r\n\t\t\t\tmaterialProperties.program = program;\r\n\t\t\t\tmaterial.program = program;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\r\n\r\n\t\t\tif ( ! material.isShaderMaterial &&\r\n\t\t\t\t! material.isRawShaderMaterial ||\r\n\t\t\t\tmaterial.clipping === true ) {\r\n\r\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\r\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\r\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterialProperties.fog = fog;\r\n\r\n\t\t\t// store the light setup it was created for\r\n\t\t\tif ( lightsHash === undefined ) {\r\n\r\n\t\t\t\tmaterialProperties.lightsHash = lightsHash = {};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlightsHash.stateID = lightsStateHash.stateID;\r\n\t\t\tlightsHash.directionalLength = lightsStateHash.directionalLength;\r\n\t\t\tlightsHash.pointLength = lightsStateHash.pointLength;\r\n\t\t\tlightsHash.spotLength = lightsStateHash.spotLength;\r\n\t\t\tlightsHash.rectAreaLength = lightsStateHash.rectAreaLength;\r\n\t\t\tlightsHash.hemiLength = lightsStateHash.hemiLength;\r\n\t\t\tlightsHash.shadowsLength = lightsStateHash.shadowsLength;\r\n\r\n\t\t\tif ( material.lights ) {\r\n\r\n\t\t\t\t// wire up the material to this renderer's lighting state\r\n\r\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\r\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\r\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\r\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\r\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\r\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\r\n\r\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\r\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\r\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\r\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\r\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\r\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\r\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\r\n\t\t\t\tuniformsList =\r\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\r\n\r\n\t\t\tmaterialProperties.uniformsList = uniformsList;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setProgram( camera, fog, material, object ) {\r\n\r\n\t\t\t_usedTextureUnits = 0;\r\n\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\t\t\tvar lights = currentRenderState.state.lights;\r\n\r\n\t\t\tvar lightsHash = materialProperties.lightsHash;\r\n\t\t\tvar lightsStateHash = lights.state.hash;\r\n\r\n\t\t\tif ( _clippingEnabled ) {\r\n\r\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\r\n\r\n\t\t\t\t\tvar useCache =\r\n\t\t\t\t\t\tcamera === _currentCamera &&\r\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\r\n\r\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\r\n\t\t\t\t\t// object instead of the material, once it becomes feasible\r\n\t\t\t\t\t// (#8465, #8379)\r\n\t\t\t\t\t_clipping.setState(\r\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\r\n\t\t\t\t\t\tcamera, materialProperties, useCache );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.needsUpdate === false ) {\r\n\r\n\t\t\t\tif ( materialProperties.program === undefined ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( material.lights && ( lightsHash.stateID !== lightsStateHash.stateID ||\r\n\t\t\t\t\tlightsHash.directionalLength !== lightsStateHash.directionalLength ||\r\n\t\t\t\t\tlightsHash.pointLength !== lightsStateHash.pointLength ||\r\n\t\t\t\t\tlightsHash.spotLength !== lightsStateHash.spotLength ||\r\n\t\t\t\t\tlightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||\r\n\t\t\t\t\tlightsHash.hemiLength !== lightsStateHash.hemiLength ||\r\n\t\t\t\t\tlightsHash.shadowsLength !== lightsStateHash.shadowsLength ) ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\r\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\r\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.needsUpdate ) {\r\n\r\n\t\t\t\tinitMaterial( material, fog, object );\r\n\t\t\t\tmaterial.needsUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar refreshProgram = false;\r\n\t\t\tvar refreshMaterial = false;\r\n\t\t\tvar refreshLights = false;\r\n\r\n\t\t\tvar program = materialProperties.program,\r\n\t\t\t\tp_uniforms = program.getUniforms(),\r\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\r\n\r\n\t\t\tif ( state.useProgram( program.program ) ) {\r\n\r\n\t\t\t\trefreshProgram = true;\r\n\t\t\t\trefreshMaterial = true;\r\n\t\t\t\trefreshLights = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t\t_currentMaterialId = material.id;\r\n\r\n\t\t\t\trefreshMaterial = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\r\n\r\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\r\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _currentCamera !== camera ) {\r\n\r\n\t\t\t\t\t_currentCamera = camera;\r\n\r\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\r\n\t\t\t\t\t// now, in case this material supports lights - or later, when\r\n\t\t\t\t\t// the next material that does gets activated:\r\n\r\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\r\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// load material specific uniforms\r\n\t\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\t\tif ( material.isShaderMaterial ||\r\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.envMap ) {\r\n\r\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\r\n\r\n\t\t\t\t\tif ( uCamPos !== undefined ) {\r\n\r\n\t\t\t\t\t\tuCamPos.setValue( _gl,\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\r\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.isShaderMaterial ||\r\n\t\t\t\t\tmaterial.skinning ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\t\tif ( material.skinning ) {\r\n\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\r\n\r\n\t\t\t\tvar skeleton = object.skeleton;\r\n\r\n\t\t\t\tif ( skeleton ) {\r\n\r\n\t\t\t\t\tvar bones = skeleton.bones;\r\n\r\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\r\n\r\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\r\n\r\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\r\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\r\n\r\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\r\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\r\n\r\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\r\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\r\n\r\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\r\n\t\t\t\t\t\t\tboneTexture.needsUpdate = true;\r\n\r\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\r\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\r\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\r\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\r\n\r\n\t\t\t\tif ( material.lights ) {\r\n\r\n\t\t\t\t\t// the current material requires lighting info\r\n\r\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\r\n\t\t\t\t\t// they simply reference the renderer's state for their\r\n\t\t\t\t\t// values\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\r\n\t\t\t\t\t// the GL state when required\r\n\r\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isMeshToonMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isPointsMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isShadowMaterial ) {\r\n\r\n\t\t\t\t\tm_uniforms.color.value = material.color;\r\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// RectAreaLight Texture\r\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\r\n\r\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\r\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\r\n\r\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\r\n\r\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, _this );\r\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isSpriteMaterial ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// common matrices\r\n\r\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\r\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\r\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\r\n\r\n\t\t\treturn program;\r\n\r\n\t\t}\r\n\r\n\t\t// Uniforms (refresh uniforms objects)\r\n\r\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\r\n\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\t\tif ( material.color ) {\r\n\r\n\t\t\t\tuniforms.diffuse.value = material.color;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.emissive ) {\r\n\r\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.specularMap ) {\r\n\r\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.envMap ) {\r\n\r\n\t\t\t\tuniforms.envMap.value = material.envMap;\r\n\r\n\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\r\n\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\r\n\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\r\n\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\r\n\t\t\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;\r\n\r\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.lightMap ) {\r\n\r\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.aoMap ) {\r\n\r\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. specular map\r\n\t\t\t// 3. normal map\r\n\t\t\t// 4. bump map\r\n\t\t\t// 5. alpha map\r\n\t\t\t// 6. emissive map\r\n\r\n\t\t\tvar uvScaleMap;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t\t} else if ( material.displacementMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.displacementMap;\r\n\r\n\t\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t\t} else if ( material.roughnessMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.roughnessMap;\r\n\r\n\t\t\t} else if ( material.metalnessMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.metalnessMap;\r\n\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t\t} else if ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t\t// backwards compatibility\r\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsLine( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDash( uniforms, material ) {\r\n\r\n\t\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\t\tuniforms.scale.value = material.scale;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\r\n\t\t\tuniforms.scale.value = _height * 0.5;\r\n\r\n\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\tif ( material.map !== null ) {\r\n\r\n\t\t\t\tif ( material.map.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tmaterial.map.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\t\tuniforms.rotation.value = material.rotation;\r\n\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\tif ( material.map !== null ) {\r\n\r\n\t\t\t\tif ( material.map.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tmaterial.map.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( material.map.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\r\n\r\n\t\t\tuniforms.fogColor.value = fog.color;\r\n\r\n\t\t\tif ( fog.isFog ) {\r\n\r\n\t\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t\t} else if ( fog.isFogExp2 ) {\r\n\r\n\t\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\r\n\r\n\t\t\tuniforms.specular.value = material.specular;\r\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsToon( uniforms, material ) {\r\n\r\n\t\t\trefreshUniformsPhong( uniforms, material );\r\n\r\n\t\t\tif ( material.gradientMap ) {\r\n\r\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\r\n\r\n\t\t\tuniforms.roughness.value = material.roughness;\r\n\t\t\tuniforms.metalness.value = material.metalness;\r\n\r\n\t\t\tif ( material.roughnessMap ) {\r\n\r\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.metalnessMap ) {\r\n\r\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.envMap ) {\r\n\r\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\r\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\r\n\r\n\t\t\trefreshUniformsStandard( uniforms, material );\r\n\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\r\n\r\n\t\t\tuniforms.clearCoat.value = material.clearCoat;\r\n\t\t\tuniforms.clearCoatRoughness.value = material.clearCoatRoughness;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\r\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\r\n\t\t\tuniforms.farDistance.value = material.farDistance;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\r\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\r\n\r\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\r\n\t\t\tuniforms.directionalLights.needsUpdate = value;\r\n\t\t\tuniforms.pointLights.needsUpdate = value;\r\n\t\t\tuniforms.spotLights.needsUpdate = value;\r\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\r\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\r\n\r\n\t\t}\r\n\r\n\t\t// Textures\r\n\r\n\t\tfunction allocTextureUnit() {\r\n\r\n\t\t\tvar textureUnit = _usedTextureUnits;\r\n\r\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_usedTextureUnits += 1;\r\n\r\n\t\t\treturn textureUnit;\r\n\r\n\t\t}\r\n\r\n\t\tthis.allocTextureUnit = allocTextureUnit;\r\n\r\n\t\t// this.setTexture2D = setTexture2D;\r\n\t\tthis.setTexture2D = ( function () {\r\n\r\n\t\t\tvar warned = false;\r\n\r\n\t\t\t// backwards compatibility: peel texture.texture\r\n\t\t\treturn function setTexture2D( texture, slot ) {\r\n\r\n\t\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\t\tif ( ! warned ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\t\twarned = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextures.setTexture2D( texture, slot );\r\n\r\n\t\t\t};\r\n\r\n\t\t}() );\r\n\r\n\t\tthis.setTexture = ( function () {\r\n\r\n\t\t\tvar warned = false;\r\n\r\n\t\t\treturn function setTexture( texture, slot ) {\r\n\r\n\t\t\t\tif ( ! warned ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\r\n\t\t\t\t\twarned = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextures.setTexture2D( texture, slot );\r\n\r\n\t\t\t};\r\n\r\n\t\t}() );\r\n\r\n\t\tthis.setTextureCube = ( function () {\r\n\r\n\t\t\tvar warned = false;\r\n\r\n\t\t\treturn function setTextureCube( texture, slot ) {\r\n\r\n\t\t\t\t// backwards compatibility: peel texture.texture\r\n\t\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\tif ( ! warned ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\t\twarned = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\r\n\t\t\t\t// TODO: unify these code paths\r\n\t\t\t\tif ( ( texture && texture.isCubeTexture ) ||\r\n\t\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\r\n\r\n\t\t\t\t\t// CompressedTexture can have Array in image :/\r\n\r\n\t\t\t\t\t// this function alone should take care of cube textures\r\n\t\t\t\t\ttextures.setTextureCube( texture, slot );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\r\n\r\n\t\t\t\t\ttextures.setTextureCubeDynamic( texture, slot );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}() );\r\n\r\n\t\t//\r\n\r\n\t\tthis.setFramebuffer = function ( value ) {\r\n\r\n\t\t\t_framebuffer = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getRenderTarget = function () {\r\n\r\n\t\t\treturn _currentRenderTarget;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setRenderTarget = function ( renderTarget ) {\r\n\r\n\t\t\t_currentRenderTarget = renderTarget;\r\n\r\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\r\n\r\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar framebuffer = _framebuffer;\r\n\t\t\tvar isCube = false;\r\n\r\n\t\t\tif ( renderTarget ) {\r\n\r\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\tframebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];\r\n\t\t\t\t\tisCube = true;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tframebuffer = __webglFramebuffer;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\r\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\r\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\r\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\r\n\t\t\t\t_currentScissorTest = _scissorTest;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.viewport( _currentViewport );\r\n\t\t\tstate.scissor( _currentScissor );\r\n\t\t\tstate.setScissorTest( _currentScissorTest );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\r\n\r\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\t\tif ( framebuffer ) {\r\n\r\n\t\t\t\tvar restore = false;\r\n\r\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\t\t\t\trestore = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tvar texture = renderTarget.texture;\r\n\t\t\t\t\tvar textureFormat = texture.format;\r\n\t\t\t\t\tvar textureType = texture.type;\r\n\r\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\r\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\r\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\r\n\r\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\r\n\r\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\r\n\r\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} finally {\r\n\r\n\t\t\t\t\tif ( restore ) {\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\r\n\r\n\t\t\tvar width = texture.image.width;\r\n\t\t\tvar height = texture.image.height;\r\n\t\t\tvar glFormat = utils.convert( texture.format );\r\n\r\n\t\t\tthis.setTexture2D( texture, 0 );\r\n\r\n\t\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, level || 0, glFormat, position.x, position.y, width, height, 0 );\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\r\n\r\n\t\t\tvar width = srcTexture.image.width;\r\n\t\t\tvar height = srcTexture.image.height;\r\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\r\n\t\t\tvar glType = utils.convert( dstTexture.type );\r\n\r\n\t\t\tthis.setTexture2D( dstTexture, 0 );\r\n\r\n\t\t\tif ( srcTexture.isDataTexture ) {\r\n\r\n\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction FogExp2( color, density ) {\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n\t}\r\n\r\n\tFogExp2.prototype.isFogExp2 = true;\r\n\r\n\tFogExp2.prototype.clone = function () {\r\n\r\n\t\treturn new FogExp2( this.color, this.density );\r\n\r\n\t};\r\n\r\n\tFogExp2.prototype.toJSON = function ( /* meta */ ) {\r\n\r\n\t\treturn {\r\n\t\t\ttype: 'FogExp2',\r\n\t\t\tcolor: this.color.getHex(),\r\n\t\t\tdensity: this.density\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Fog( color, near, far ) {\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.color = new Color( color );\r\n\r\n\t\tthis.near = ( near !== undefined ) ? near : 1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n\t}\r\n\r\n\tFog.prototype.isFog = true;\r\n\r\n\tFog.prototype.clone = function () {\r\n\r\n\t\treturn new Fog( this.color, this.near, this.far );\r\n\r\n\t};\r\n\r\n\tFog.prototype.toJSON = function ( /* meta */ ) {\r\n\r\n\t\treturn {\r\n\t\t\ttype: 'Fog',\r\n\t\t\tcolor: this.color.getHex(),\r\n\t\t\tnear: this.near,\r\n\t\t\tfar: this.far\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Scene() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Scene';\r\n\r\n\t\tthis.background = null;\r\n\t\tthis.fog = null;\r\n\t\tthis.overrideMaterial = null;\r\n\r\n\t\tthis.autoUpdate = true; // checked by the renderer\r\n\r\n\t}\r\n\r\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Scene,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tif ( source.background !== null ) this.background = source.background.clone();\r\n\t\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\r\n\t\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\r\n\r\n\t\t\tthis.autoUpdate = source.autoUpdate;\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tif ( this.background !== null ) data.object.background = this.background.toJSON( meta );\r\n\t\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InterleavedBuffer( array, stride ) {\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.stride = stride;\r\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\r\n\r\n\t\tthis.dynamic = false;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) this.version ++;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBuffer.prototype, {\r\n\r\n\t\tisInterleavedBuffer: true,\r\n\r\n\t\tonUploadCallback: function () {},\r\n\r\n\t\tsetArray: function ( array ) {\r\n\r\n\t\t\tif ( Array.isArray( array ) ) {\r\n\r\n\t\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.count = array !== undefined ? array.length / this.stride : 0;\r\n\t\t\tthis.array = array;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetDynamic: function ( value ) {\r\n\r\n\t\t\tthis.dynamic = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.count = source.count;\r\n\t\t\tthis.stride = source.stride;\r\n\t\t\tthis.dynamic = source.dynamic;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\t\tindex1 *= this.stride;\r\n\t\t\tindex2 *= attribute.stride;\r\n\r\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\t\tthis.array.set( value, offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tonUpload: function ( callback ) {\r\n\r\n\t\t\tthis.onUploadCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\r\n\r\n\t\tthis.data = interleavedBuffer;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.offset = offset;\r\n\r\n\t\tthis.normalized = normalized === true;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\r\n\r\n\t\tcount: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.data.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tarray: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.data.array;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBufferAttribute.prototype, {\r\n\r\n\t\tisInterleavedBufferAttribute: true,\r\n\r\n\t\tsetX: function ( index, x ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( index, y ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( index, z ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( index, w ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetX: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t\t},\r\n\r\n\t\tgetY: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t\t},\r\n\r\n\t\tgetZ: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t\t},\r\n\r\n\t\tgetW: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetXY: function ( index, x, y ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\t\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *  rotation: <float>,\r\n\t *  sizeAttenuation: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction SpriteMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'SpriteMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.lights = false;\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\r\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\r\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\r\n\r\n\tSpriteMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.rotation = source.rotation;\r\n\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar geometry;\r\n\r\n\tfunction Sprite( material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Sprite';\r\n\r\n\t\tif ( geometry === undefined ) {\r\n\r\n\t\t\tgeometry = new BufferGeometry();\r\n\r\n\t\t\tvar float32Array = new Float32Array( [\r\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\r\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\r\n\t\t\t\t0.5, 0.5, 0, 1, 1,\r\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\r\n\t\t\t] );\r\n\r\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\r\n\r\n\t\t\tgeometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\r\n\t\t\tgeometry.addAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\r\n\t\t\tgeometry.addAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.geometry = geometry;\r\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\r\n\r\n\t\tthis.center = new Vector2( 0.5, 0.5 );\r\n\r\n\t}\r\n\r\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Sprite,\r\n\r\n\t\tisSprite: true,\r\n\r\n\t\traycast: ( function () {\r\n\r\n\t\t\tvar intersectPoint = new Vector3();\r\n\t\t\tvar worldScale = new Vector3();\r\n\t\t\tvar mvPosition = new Vector3();\r\n\r\n\t\t\tvar alignedPosition = new Vector2();\r\n\t\t\tvar rotatedPosition = new Vector2();\r\n\t\t\tvar viewWorldMatrix = new Matrix4();\r\n\r\n\t\t\tvar vA = new Vector3();\r\n\t\t\tvar vB = new Vector3();\r\n\t\t\tvar vC = new Vector3();\r\n\r\n\t\t\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\r\n\r\n\t\t\t\t// compute position in camera space\r\n\t\t\t\talignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\r\n\r\n\t\t\t\t// to check if rotation is not zero\r\n\t\t\t\tif ( sin !== undefined ) {\r\n\r\n\t\t\t\t\trotatedPosition.x = ( cos * alignedPosition.x ) - ( sin * alignedPosition.y );\r\n\t\t\t\t\trotatedPosition.y = ( sin * alignedPosition.x ) + ( cos * alignedPosition.y );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trotatedPosition.copy( alignedPosition );\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tvertexPosition.copy( mvPosition );\r\n\t\t\t\tvertexPosition.x += rotatedPosition.x;\r\n\t\t\t\tvertexPosition.y += rotatedPosition.y;\r\n\r\n\t\t\t\t// transform to world space\r\n\t\t\t\tvertexPosition.applyMatrix4( viewWorldMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\t\tworldScale.setFromMatrixScale( this.matrixWorld );\r\n\t\t\t\tviewWorldMatrix.getInverse( this.modelViewMatrix ).premultiply( this.matrixWorld );\r\n\t\t\t\tmvPosition.setFromMatrixPosition( this.modelViewMatrix );\r\n\r\n\t\t\t\tvar rotation = this.material.rotation;\r\n\t\t\t\tvar sin, cos;\r\n\t\t\t\tif ( rotation !== 0 ) {\r\n\r\n\t\t\t\t\tcos = Math.cos( rotation );\r\n\t\t\t\t\tsin = Math.sin( rotation );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar center = this.center;\r\n\r\n\t\t\t\ttransformVertex( vA.set( - 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\r\n\t\t\t\ttransformVertex( vB.set( 0.5, - 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\r\n\t\t\t\ttransformVertex( vC.set( 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\r\n\r\n\t\t\t\t// check first triangle\r\n\t\t\t\tvar intersect = raycaster.ray.intersectTriangle( vA, vB, vC, false, intersectPoint );\r\n\r\n\t\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\t\t// check second triangle\r\n\t\t\t\t\ttransformVertex( vB.set( - 0.5, 0.5, 0 ), mvPosition, center, worldScale, sin, cos );\r\n\t\t\t\t\tintersect = raycaster.ray.intersectTriangle( vA, vC, vB, false, intersectPoint );\r\n\t\t\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\tpoint: intersectPoint.clone(),\r\n\t\t\t\t\tface: null,\r\n\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t};\r\n\r\n\t\t}() ),\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.material ).copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tif ( source.center !== undefined ) this.center.copy( source.center );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction LOD() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'LOD';\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tlevels: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: []\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: LOD,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, false );\r\n\r\n\t\t\tvar levels = source.levels;\r\n\r\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddLevel: function ( object, distance ) {\r\n\r\n\t\t\tif ( distance === undefined ) distance = 0;\r\n\r\n\t\t\tdistance = Math.abs( distance );\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\tif ( distance < levels[ l ].distance ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\r\n\r\n\t\t\tthis.add( object );\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectForDistance: function ( distance ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( distance < levels[ i ].distance ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn levels[ i - 1 ].object;\r\n\r\n\t\t},\r\n\r\n\t\traycast: ( function () {\r\n\r\n\t\t\tvar matrixPosition = new Vector3();\r\n\r\n\t\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\r\n\r\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\r\n\t\t\t};\r\n\r\n\t\t}() ),\r\n\r\n\t\tupdate: function () {\r\n\r\n\t\t\tvar v1 = new Vector3();\r\n\t\t\tvar v2 = new Vector3();\r\n\r\n\t\t\treturn function update( camera ) {\r\n\r\n\t\t\t\tvar levels = this.levels;\r\n\r\n\t\t\t\tif ( levels.length > 1 ) {\r\n\r\n\t\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\t\t\tvar distance = v1.distanceTo( v2 );\r\n\r\n\t\t\t\t\tlevels[ 0 ].object.visible = true;\r\n\r\n\t\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\r\n\r\n\t\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( ; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tlevels[ i ].object.visible = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.levels = [];\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\t\tdata.object.levels.push( {\r\n\t\t\t\t\tobject: level.object.uuid,\r\n\t\t\t\t\tdistance: level.distance\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author michael guerrero / http://realitymeltdown.com\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tfunction Skeleton( bones, boneInverses ) {\r\n\r\n\t\t// copy the bone array\r\n\r\n\t\tbones = bones || [];\r\n\r\n\t\tthis.bones = bones.slice( 0 );\r\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\r\n\r\n\t\t// use the supplied bone inverses or calculate the inverses\r\n\r\n\t\tif ( boneInverses === undefined ) {\r\n\r\n\t\t\tthis.calculateInverses();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this.bones.length === boneInverses.length ) {\r\n\r\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\r\n\r\n\t\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Skeleton.prototype, {\r\n\r\n\t\tcalculateInverses: function () {\r\n\r\n\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar inverse = new Matrix4();\r\n\r\n\t\t\t\tif ( this.bones[ i ] ) {\r\n\r\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tpose: function () {\r\n\r\n\t\t\tvar bone, i, il;\r\n\r\n\t\t\t// recover the bind-time world matrices\r\n\r\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tbone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone ) {\r\n\r\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// compute the local matrices, positions, rotations and scales\r\n\r\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tbone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone ) {\r\n\r\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\r\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdate: ( function () {\r\n\r\n\t\t\tvar offsetMatrix = new Matrix4();\r\n\t\t\tvar identityMatrix = new Matrix4();\r\n\r\n\t\t\treturn function update() {\r\n\r\n\t\t\t\tvar bones = this.bones;\r\n\t\t\t\tvar boneInverses = this.boneInverses;\r\n\t\t\t\tvar boneMatrices = this.boneMatrices;\r\n\t\t\t\tvar boneTexture = this.boneTexture;\r\n\r\n\t\t\t\t// flatten bone matrices to array\r\n\r\n\t\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t// compute the offset between the current and the original transform\r\n\r\n\t\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;\r\n\r\n\t\t\t\t\toffsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\r\n\t\t\t\t\toffsetMatrix.toArray( boneMatrices, i * 16 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( boneTexture !== undefined ) {\r\n\r\n\t\t\t\t\tboneTexture.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t} )(),\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\r\n\r\n\t\t},\r\n\r\n\t\tgetBoneByName: function ( name ) {\r\n\r\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar bone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone.name === name ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tfunction Bone() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Bone';\r\n\r\n\t}\r\n\r\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Bone,\r\n\r\n\t\tisBone: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tfunction SkinnedMesh( geometry, material ) {\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'SkinnedMesh';\r\n\r\n\t\tthis.bindMode = 'attached';\r\n\t\tthis.bindMatrix = new Matrix4();\r\n\t\tthis.bindMatrixInverse = new Matrix4();\r\n\r\n\t\tvar bones = this.initBones();\r\n\t\tvar skeleton = new Skeleton( bones );\r\n\r\n\t\tthis.bind( skeleton, this.matrixWorld );\r\n\r\n\t\tthis.normalizeSkinWeights();\r\n\r\n\t}\r\n\r\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\r\n\r\n\t\tconstructor: SkinnedMesh,\r\n\r\n\t\tisSkinnedMesh: true,\r\n\r\n\t\tinitBones: function () {\r\n\r\n\t\t\tvar bones = [], bone, gbone;\r\n\t\t\tvar i, il;\r\n\r\n\t\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\r\n\r\n\t\t\t\t// first, create array of 'Bone' objects from geometry data\r\n\r\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\r\n\r\n\t\t\t\t\t// create new 'Bone' object\r\n\r\n\t\t\t\t\tbone = new Bone();\r\n\t\t\t\t\tbones.push( bone );\r\n\r\n\t\t\t\t\t// apply values\r\n\r\n\t\t\t\t\tbone.name = gbone.name;\r\n\t\t\t\t\tbone.position.fromArray( gbone.pos );\r\n\t\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\r\n\t\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// second, create bone hierarchy\r\n\r\n\t\t\t\tfor ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tgbone = this.geometry.bones[ i ];\r\n\r\n\t\t\t\t\tif ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {\r\n\r\n\t\t\t\t\t\t// subsequent bones in the hierarchy\r\n\r\n\t\t\t\t\t\tbones[ gbone.parent ].add( bones[ i ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// topmost bone, immediate child of the skinned mesh\r\n\r\n\t\t\t\t\t\tthis.add( bones[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// now the bones are part of the scene graph and children of the skinned mesh.\r\n\t\t\t// let's update the corresponding matrices\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\treturn bones;\r\n\r\n\t\t},\r\n\r\n\t\tbind: function ( skeleton, bindMatrix ) {\r\n\r\n\t\t\tthis.skeleton = skeleton;\r\n\r\n\t\t\tif ( bindMatrix === undefined ) {\r\n\r\n\t\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\t\tthis.skeleton.calculateInverses();\r\n\r\n\t\t\t\tbindMatrix = this.matrixWorld;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.bindMatrix.copy( bindMatrix );\r\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\r\n\r\n\t\t},\r\n\r\n\t\tpose: function () {\r\n\r\n\t\t\tthis.skeleton.pose();\r\n\r\n\t\t},\r\n\r\n\t\tnormalizeSkinWeights: function () {\r\n\r\n\t\t\tvar scale, i;\r\n\r\n\t\t\tif ( this.geometry && this.geometry.isGeometry ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\r\n\r\n\t\t\t\t\tscale = 1.0 / sw.manhattanLength();\r\n\r\n\t\t\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\t\t\tsw.multiplyScalar( scale );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( this.geometry && this.geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar vec = new Vector4();\r\n\r\n\t\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\r\n\r\n\t\t\t\tfor ( i = 0; i < skinWeight.count; i ++ ) {\r\n\r\n\t\t\t\t\tvec.x = skinWeight.getX( i );\r\n\t\t\t\t\tvec.y = skinWeight.getY( i );\r\n\t\t\t\t\tvec.z = skinWeight.getZ( i );\r\n\t\t\t\t\tvec.w = skinWeight.getW( i );\r\n\r\n\t\t\t\t\tscale = 1.0 / vec.manhattanLength();\r\n\r\n\t\t\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\t\t\tvec.multiplyScalar( scale );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tif ( this.bindMode === 'attached' ) {\r\n\r\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\r\n\r\n\t\t\t} else if ( this.bindMode === 'detached' ) {\r\n\r\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *  linecap: \"round\",\r\n\t *  linejoin: \"round\"\r\n\t * }\r\n\t */\r\n\r\n\tfunction LineBasicMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'LineBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.linewidth = 1;\r\n\t\tthis.linecap = 'round';\r\n\t\tthis.linejoin = 'round';\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\r\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\r\n\r\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\r\n\r\n\tLineBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.linewidth = source.linewidth;\r\n\t\tthis.linecap = source.linecap;\r\n\t\tthis.linejoin = source.linejoin;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Line( geometry, material, mode ) {\r\n\r\n\t\tif ( mode === 1 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Line';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t}\r\n\r\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Line,\r\n\r\n\t\tisLine: true,\r\n\r\n\t\tcomputeLineDistances: ( function () {\r\n\r\n\t\t\tvar start = new Vector3();\r\n\t\t\tvar end = new Vector3();\r\n\r\n\t\t\treturn function computeLineDistances() {\r\n\r\n\t\t\t\tvar geometry = this.geometry;\r\n\r\n\t\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\t// we assume non-indexed geometry\r\n\r\n\t\t\t\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\r\n\t\t\t\t\t\tvar lineDistances = [ 0 ];\r\n\r\n\t\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tstart.fromBufferAttribute( positionAttribute, i - 1 );\r\n\t\t\t\t\t\t\tend.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\r\n\t\t\t\t\t\t\tlineDistances[ i ] += start.distanceTo( end );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\t\tvar lineDistances = geometry.lineDistances;\r\n\r\n\t\t\t\t\tlineDistances[ 0 ] = 0;\r\n\r\n\t\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\r\n\t\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}() ),\r\n\r\n\t\traycast: ( function () {\r\n\r\n\t\t\tvar inverseMatrix = new Matrix4();\r\n\t\t\tvar ray = new Ray();\r\n\t\t\tvar sphere = new Sphere();\r\n\r\n\t\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\t\tvar precision = raycaster.linePrecision;\r\n\t\t\t\tvar precisionSq = precision * precision;\r\n\r\n\t\t\t\tvar geometry = this.geometry;\r\n\t\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\t\t\tvar vStart = new Vector3();\r\n\t\t\t\tvar vEnd = new Vector3();\r\n\t\t\t\tvar interSegment = new Vector3();\r\n\t\t\t\tvar interRay = new Vector3();\r\n\t\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\r\n\r\n\t\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\tvar index = geometry.index;\r\n\t\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\t\tvar a = indices[ i ];\r\n\t\t\t\t\t\t\tvar b = indices[ i + 1 ];\r\n\r\n\t\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\r\n\t\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\r\n\r\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\r\n\t\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\r\n\r\n\t\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\t\tvar nbVertices = vertices.length;\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\r\n\r\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}() ),\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction LineSegments( geometry, material ) {\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'LineSegments';\r\n\r\n\t}\r\n\r\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\r\n\r\n\t\tconstructor: LineSegments,\r\n\r\n\t\tisLineSegments: true,\r\n\r\n\t\tcomputeLineDistances: ( function () {\r\n\r\n\t\t\tvar start = new Vector3();\r\n\t\t\tvar end = new Vector3();\r\n\r\n\t\t\treturn function computeLineDistances() {\r\n\r\n\t\t\t\tvar geometry = this.geometry;\r\n\r\n\t\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\t// we assume non-indexed geometry\r\n\r\n\t\t\t\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\r\n\t\t\t\t\t\tvar lineDistances = [];\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t\t\tstart.fromBufferAttribute( positionAttribute, i );\r\n\t\t\t\t\t\t\tend.fromBufferAttribute( positionAttribute, i + 1 );\r\n\r\n\t\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tgeometry.addAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\t\tvar lineDistances = geometry.lineDistances;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t\tstart.copy( vertices[ i ] );\r\n\t\t\t\t\t\tend.copy( vertices[ i + 1 ] );\r\n\r\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + start.distanceTo( end );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}() )\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mgreter / http://github.com/mgreter\r\n\t */\r\n\r\n\tfunction LineLoop( geometry, material ) {\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'LineLoop';\r\n\r\n\t}\r\n\r\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\r\n\r\n\t\tconstructor: LineLoop,\r\n\r\n\t\tisLineLoop: true,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  size: <float>,\r\n\t *  sizeAttenuation: <bool>\r\n\t *\r\n\t *  morphTargets: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction PointsMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'PointsMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.size = 1;\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tPointsMaterial.prototype = Object.create( Material.prototype );\r\n\tPointsMaterial.prototype.constructor = PointsMaterial;\r\n\r\n\tPointsMaterial.prototype.isPointsMaterial = true;\r\n\r\n\tPointsMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.size = source.size;\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Points( geometry, material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Points';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t}\r\n\r\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Points,\r\n\r\n\t\tisPoints: true,\r\n\r\n\t\traycast: ( function () {\r\n\r\n\t\t\tvar inverseMatrix = new Matrix4();\r\n\t\t\tvar ray = new Ray();\r\n\t\t\tvar sphere = new Sphere();\r\n\r\n\t\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\t\tvar object = this;\r\n\t\t\t\tvar geometry = this.geometry;\r\n\t\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\t\t\tvar threshold = raycaster.params.Points.threshold;\r\n\r\n\t\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\t\t\t\tsphere.radius += threshold;\r\n\r\n\t\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\t\tvar localThresholdSq = localThreshold * localThreshold;\r\n\t\t\t\tvar position = new Vector3();\r\n\t\t\t\tvar intersectPoint = new Vector3();\r\n\r\n\t\t\t\tfunction testPoint( point, index ) {\r\n\r\n\t\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\r\n\r\n\t\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\r\n\t\t\t\t\t\tray.closestPointToPoint( point, intersectPoint );\r\n\t\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\t\t\t\t\tpoint: intersectPoint.clone(),\r\n\t\t\t\t\t\t\tindex: index,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tobject: object\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\tvar index = geometry.index;\r\n\t\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar a = indices[ i ];\r\n\r\n\t\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\r\n\r\n\t\t\t\t\t\t\ttestPoint( position, a );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\r\n\r\n\t\t\t\t\t\t\ttestPoint( position, i );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\ttestPoint( vertices[ i ], i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}() ),\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\r\n\r\n\t\tconstructor: VideoTexture,\r\n\r\n\t\tisVideoTexture: true,\r\n\r\n\t\tupdate: function () {\r\n\r\n\t\t\tvar video = this.image;\r\n\r\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\r\n\r\n\t\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\t\tthis.mipmaps = mipmaps;\r\n\r\n\t\t// no flipping for cube textures\r\n\t\t// (also flipping doesn't work for compressed textures )\r\n\r\n\t\tthis.flipY = false;\r\n\r\n\t\t// can't generate mipmaps for compressed textures\r\n\t\t// mips must be embedded in DDS files\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\r\n\tCompressedTexture.prototype.constructor = CompressedTexture;\r\n\r\n\tCompressedTexture.prototype.isCompressedTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\r\n\tCanvasTexture.prototype.constructor = CanvasTexture;\r\n\tCanvasTexture.prototype.isCanvasTexture = true;\r\n\r\n\t/**\r\n\t * @author Matt DesLauriers / @mattdesl\r\n\t * @author atix / arthursilber.de\r\n\t */\r\n\r\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\r\n\r\n\t\tformat = format !== undefined ? format : DepthFormat;\r\n\r\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\r\n\r\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\r\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n\r\n\t\tthis.flipY = false;\r\n\t\tthis.generateMipmaps\t= false;\r\n\r\n\t}\r\n\r\n\tDepthTexture.prototype = Object.create( Texture.prototype );\r\n\tDepthTexture.prototype.constructor = DepthTexture;\r\n\tDepthTexture.prototype.isDepthTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WireframeGeometry( geometry ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'WireframeGeometry';\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, j, l, o, ol;\r\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\r\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\r\n\t\tvar vertex;\r\n\r\n\t\t// different logic for Geometry and BufferGeometry\r\n\r\n\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\t// create a data structure that contains all edges without duplicates\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\r\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\r\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\r\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate vertices\r\n\r\n\t\t\tfor ( key in edges ) {\r\n\r\n\t\t\t\te = edges[ key ];\r\n\r\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\r\n\r\n\t\t\tvar position, indices, groups;\r\n\t\t\tvar group, start, count;\r\n\t\t\tvar index1, index2;\r\n\r\n\t\t\tvertex = new Vector3();\r\n\r\n\t\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t\t// indexed BufferGeometry\r\n\r\n\t\t\t\tposition = geometry.attributes.position;\r\n\t\t\t\tindices = geometry.index;\r\n\t\t\t\tgroups = geometry.groups;\r\n\r\n\t\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create a data structure that contains all eges without duplicates\r\n\r\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\r\n\r\n\t\t\t\t\tgroup = groups[ o ];\r\n\r\n\t\t\t\t\tstart = group.start;\r\n\t\t\t\t\tcount = group.count;\r\n\r\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\r\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\r\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\r\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// generate vertices\r\n\r\n\t\t\t\tfor ( key in edges ) {\r\n\r\n\t\t\t\t\te = edges[ key ];\r\n\r\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\t\tposition = geometry.attributes.position;\r\n\r\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\r\n\r\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\r\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\r\n\r\n\t\t\t\t\t\tindex1 = 3 * i + j;\r\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\r\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\r\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\r\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t}\r\n\r\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\r\n\r\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * Parametric Surfaces Geometry\r\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n\t */\r\n\r\n\t// ParametricGeometry\r\n\r\n\tfunction ParametricGeometry( func, slices, stacks ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ParametricGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tfunc: func,\r\n\t\t\tslices: slices,\r\n\t\t\tstacks: stacks\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\r\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\r\n\r\n\t// ParametricBufferGeometry\r\n\r\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ParametricBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tfunc: func,\r\n\t\t\tslices: slices,\r\n\t\t\tstacks: stacks\r\n\t\t};\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\tvar EPS = 0.00001;\r\n\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\r\n\t\tvar pu = new Vector3(), pv = new Vector3();\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tif ( func.length < 3 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\r\n\r\n\t\t}\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tvar sliceCount = slices + 1;\r\n\r\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\t\tvar v = i / stacks;\r\n\r\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\t\tvar u = j / slices;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tfunc( u, v, p0 );\r\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\t// approximate tangent vectors via finite differences\r\n\r\n\t\t\t\tif ( u - EPS >= 0 ) {\r\n\r\n\t\t\t\t\tfunc( u - EPS, v, p1 );\r\n\t\t\t\t\tpu.subVectors( p0, p1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfunc( u + EPS, v, p1 );\r\n\t\t\t\t\tpu.subVectors( p1, p0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( v - EPS >= 0 ) {\r\n\r\n\t\t\t\t\tfunc( u, v - EPS, p1 );\r\n\t\t\t\t\tpv.subVectors( p0, p1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfunc( u, v + EPS, p1 );\r\n\t\t\t\t\tpv.subVectors( p1, p0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// cross product of tangent vectors returns surface normal\r\n\r\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u, v );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\t\tvar a = i * sliceCount + j;\r\n\t\t\t\tvar b = i * sliceCount + j + 1;\r\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\r\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\r\n\r\n\t\t\t\t// faces one and two\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\r\n\r\n\t/**\r\n\t * @author clockworkgeek / https://github.com/clockworkgeek\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// PolyhedronGeometry\r\n\r\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'PolyhedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\r\n\r\n\t// PolyhedronBufferGeometry\r\n\r\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'PolyhedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\tdetail = detail || 0;\r\n\r\n\t\t// default buffer data\r\n\r\n\t\tvar vertexBuffer = [];\r\n\t\tvar uvBuffer = [];\r\n\r\n\t\t// the subdivision creates the vertex buffer data\r\n\r\n\t\tsubdivide( detail );\r\n\r\n\t\t// all vertices should lie on a conceptual sphere with a given radius\r\n\r\n\t\tappplyRadius( radius );\r\n\r\n\t\t// finally, create the uv data\r\n\r\n\t\tgenerateUVs();\r\n\r\n\t\t// build non-indexed geometry\r\n\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\r\n\r\n\t\tif ( detail === 0 ) {\r\n\r\n\t\t\tthis.computeVertexNormals(); // flat normals\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.normalizeNormals(); // smooth normals\r\n\r\n\t\t}\r\n\r\n\t\t// helper functions\r\n\r\n\t\tfunction subdivide( detail ) {\r\n\r\n\t\t\tvar a = new Vector3();\r\n\t\t\tvar b = new Vector3();\r\n\t\t\tvar c = new Vector3();\r\n\r\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\r\n\r\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t// get the vertices of the face\r\n\r\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\r\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\r\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\r\n\r\n\t\t\t\t// perform subdivision\r\n\r\n\t\t\t\tsubdivideFace( a, b, c, detail );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction subdivideFace( a, b, c, detail ) {\r\n\r\n\t\t\tvar cols = Math.pow( 2, detail );\r\n\r\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\r\n\r\n\t\t\tvar v = [];\r\n\r\n\t\t\tvar i, j;\r\n\r\n\t\t\t// construct all of the vertices for this subdivision\r\n\r\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\r\n\r\n\t\t\t\tv[ i ] = [];\r\n\r\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\r\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\r\n\r\n\t\t\t\tvar rows = cols - i;\r\n\r\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\r\n\r\n\t\t\t\t\tif ( j === 0 && i === cols ) {\r\n\r\n\t\t\t\t\t\tv[ i ][ j ] = aj;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// construct all of the faces\r\n\r\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\r\n\r\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\r\n\t\t\t\t\tvar k = Math.floor( j / 2 );\r\n\r\n\t\t\t\t\tif ( j % 2 === 0 ) {\r\n\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction appplyRadius( radius ) {\r\n\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\r\n\r\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\r\n\r\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\r\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\r\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\r\n\r\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\r\n\r\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\r\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\r\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateUVs() {\r\n\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\r\n\r\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\r\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\r\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\r\n\r\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\r\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\r\n\t\t\t\tuvBuffer.push( u, 1 - v );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcorrectUVs();\r\n\r\n\t\t\tcorrectSeam();\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctSeam() {\r\n\r\n\t\t\t// handle case when face straddles the seam, see #3269\r\n\r\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\r\n\r\n\t\t\t\t// uv data of a single face\r\n\r\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\r\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\r\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\r\n\r\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\r\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\r\n\r\n\t\t\t\t// 0.9 is somewhat arbitrary\r\n\r\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\r\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\r\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\r\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushVertex( vertex ) {\r\n\r\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getVertexByIndex( index, vertex ) {\r\n\r\n\t\t\tvar stride = index * 3;\r\n\r\n\t\t\tvertex.x = vertices[ stride + 0 ];\r\n\t\t\tvertex.y = vertices[ stride + 1 ];\r\n\t\t\tvertex.z = vertices[ stride + 2 ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctUVs() {\r\n\r\n\t\t\tvar a = new Vector3();\r\n\t\t\tvar b = new Vector3();\r\n\t\t\tvar c = new Vector3();\r\n\r\n\t\t\tvar centroid = new Vector3();\r\n\r\n\t\t\tvar uvA = new Vector2();\r\n\t\t\tvar uvB = new Vector2();\r\n\t\t\tvar uvC = new Vector2();\r\n\r\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\r\n\r\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\r\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\r\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\r\n\r\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\r\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\r\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\r\n\r\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\r\n\r\n\t\t\t\tvar azi = azimuth( centroid );\r\n\r\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\r\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\r\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\r\n\r\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\r\n\r\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\r\n\r\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\t\tfunction azimuth( vector ) {\r\n\r\n\t\t\treturn Math.atan2( vector.z, - vector.x );\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// Angle above the XZ plane.\r\n\r\n\t\tfunction inclination( vector ) {\r\n\r\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// TetrahedronGeometry\r\n\r\n\tfunction TetrahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TetrahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\r\n\r\n\t// TetrahedronBufferGeometry\r\n\r\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar vertices = [\r\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'TetrahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// OctahedronGeometry\r\n\r\n\tfunction OctahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'OctahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\r\n\r\n\t// OctahedronBufferGeometry\r\n\r\n\tfunction OctahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar vertices = [\r\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\r\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\r\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\r\n\t\t\t1, 3, 4,\t1, 4, 2\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'OctahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// IcosahedronGeometry\r\n\r\n\tfunction IcosahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'IcosahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\r\n\r\n\t// IcosahedronBufferGeometry\r\n\r\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\t\tvar vertices = [\r\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\r\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\r\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\r\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\r\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\r\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'IcosahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Abe Pazos / https://hamoid.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// DodecahedronGeometry\r\n\r\n\tfunction DodecahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'DodecahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\r\n\r\n\t// DodecahedronBufferGeometry\r\n\r\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\t\tvar r = 1 / t;\r\n\r\n\t\tvar vertices = [\r\n\r\n\t\t\t// (±1, ±1, ±1)\r\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\r\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\r\n\t\t\t1, - 1, - 1, 1, - 1, 1,\r\n\t\t\t1, 1, - 1, 1, 1, 1,\r\n\r\n\t\t\t// (0, ±1/φ, ±φ)\r\n\t\t\t 0, - r, - t, 0, - r, t,\r\n\t\t\t 0, r, - t, 0, r, t,\r\n\r\n\t\t\t// (±1/φ, ±φ, 0)\r\n\t\t\t- r, - t, 0, - r, t, 0,\r\n\t\t\t r, - t, 0, r, t, 0,\r\n\r\n\t\t\t// (±φ, 0, ±1/φ)\r\n\t\t\t- t, 0, - r, t, 0, - r,\r\n\t\t\t- t, 0, r, t, 0, r\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\r\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\r\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\r\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\r\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\r\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\r\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\r\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\r\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\r\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\r\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\r\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'DodecahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\r\n\t * @author WestLangley / https://github.com/WestLangley\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author miningold / https://github.com/miningold\r\n\t * @author jonobr1 / https://github.com/jonobr1\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t */\r\n\r\n\t// TubeGeometry\r\n\r\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TubeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed\r\n\t\t};\r\n\r\n\t\tif ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );\r\n\r\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\r\n\r\n\t\t// expose internals\r\n\r\n\t\tthis.tangents = bufferGeometry.tangents;\r\n\t\tthis.normals = bufferGeometry.normals;\r\n\t\tthis.binormals = bufferGeometry.binormals;\r\n\r\n\t\t// create geometry\r\n\r\n\t\tthis.fromBufferGeometry( bufferGeometry );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTubeGeometry.prototype.constructor = TubeGeometry;\r\n\r\n\t// TubeBufferGeometry\r\n\r\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TubeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed\r\n\t\t};\r\n\r\n\t\ttubularSegments = tubularSegments || 64;\r\n\t\tradius = radius || 1;\r\n\t\tradialSegments = radialSegments || 8;\r\n\t\tclosed = closed || false;\r\n\r\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\r\n\r\n\t\t// expose internals\r\n\r\n\t\tthis.tangents = frames.tangents;\r\n\t\tthis.normals = frames.normals;\r\n\t\tthis.binormals = frames.binormals;\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar P = new Vector3();\r\n\r\n\t\tvar i, j;\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\t\tvar indices = [];\r\n\r\n\t\t// create buffer data\r\n\r\n\t\tgenerateBufferData();\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction generateBufferData() {\r\n\r\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tgenerateSegment( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\r\n\t\t\t// at the regular position on the given path\r\n\t\t\t//\r\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\r\n\r\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\r\n\r\n\t\t\t// uvs are generated in a separate function.\r\n\t\t\t// this makes it easy compute correct values for closed geometries\r\n\r\n\t\t\tgenerateUVs();\r\n\r\n\t\t\t// finally create faces\r\n\r\n\t\t\tgenerateIndices();\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateSegment( i ) {\r\n\r\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\r\n\r\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\r\n\r\n\t\t\t// retrieve corresponding normal and binormal\r\n\r\n\t\t\tvar N = frames.normals[ i ];\r\n\t\t\tvar B = frames.binormals[ i ];\r\n\r\n\t\t\t// generate normals and vertices for the current segment\r\n\r\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\tvar sin = Math.sin( v );\r\n\t\t\t\tvar cos = - Math.cos( v );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\r\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\r\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\r\n\t\t\t\tnormal.normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = P.x + radius * normal.x;\r\n\t\t\t\tvertex.y = P.y + radius * normal.y;\r\n\t\t\t\tvertex.z = P.z + radius * normal.z;\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateIndices() {\r\n\r\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateUVs() {\r\n\r\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\t\t\tuv.x = i / tubularSegments;\r\n\t\t\t\t\tuv.y = j / radialSegments;\r\n\r\n\t\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\r\n\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * based on http://www.blackpawn.com/texts/pqtorus/\r\n\t */\r\n\r\n\t// TorusKnotGeometry\r\n\r\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusKnotGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\r\n\t\tif ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\r\n\r\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\r\n\r\n\t// TorusKnotBufferGeometry\r\n\r\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusKnotBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\ttube = tube || 0.4;\r\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\tp = p || 2;\r\n\t\tq = q || 3;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar P1 = new Vector3();\r\n\t\tvar P2 = new Vector3();\r\n\r\n\t\tvar B = new Vector3();\r\n\t\tvar T = new Vector3();\r\n\t\tvar N = new Vector3();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\r\n\r\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\r\n\r\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\r\n\r\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\r\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\r\n\r\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\r\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\r\n\r\n\t\t\t// calculate orthonormal basis\r\n\r\n\t\t\tT.subVectors( P2, P1 );\r\n\t\t\tN.addVectors( P2, P1 );\r\n\t\t\tB.crossVectors( T, N );\r\n\t\t\tN.crossVectors( B, T );\r\n\r\n\t\t\t// normalize B, N. T can be ignored, we don't use it\r\n\r\n\t\t\tB.normalize();\r\n\t\t\tN.normalize();\r\n\r\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\r\n\r\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\r\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\r\n\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\t\t\t\tvar cx = - tube * Math.cos( v );\r\n\t\t\t\tvar cy = tube * Math.sin( v );\r\n\r\n\t\t\t\t// now calculate the final vertex position.\r\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\r\n\r\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\r\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\r\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\r\n\r\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// this function calculates the current position on the torus curve\r\n\r\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\r\n\r\n\t\t\tvar cu = Math.cos( u );\r\n\t\t\tvar su = Math.sin( u );\r\n\t\t\tvar quOverP = q / p * u;\r\n\t\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\r\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\r\n\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// TorusGeometry\r\n\r\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTorusGeometry.prototype.constructor = TorusGeometry;\r\n\r\n\t// TorusBufferGeometry\r\n\r\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\ttube = tube || 0.4;\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\r\n\t\tarc = arc || Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar center = new Vector3();\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar j, i;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tvar u = i / tubularSegments * arc;\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\t\tvertex.z = tube * Math.sin( v );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\t\tcenter.y = radius * Math.sin( u );\r\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * Port from https://github.com/mapbox/earcut (v2.1.2)\r\n\t */\r\n\r\n\tvar Earcut = {\r\n\r\n\t\ttriangulate: function ( data, holeIndices, dim ) {\r\n\r\n\t\t\tdim = dim || 2;\r\n\r\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\r\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\r\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\r\n\t\t\t\ttriangles = [];\r\n\r\n\t\t\tif ( ! outerNode ) return triangles;\r\n\r\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n\t\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\r\n\r\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n\r\n\t\t\tif ( data.length > 80 * dim ) {\r\n\r\n\t\t\t\tminX = maxX = data[ 0 ];\r\n\t\t\t\tminY = maxY = data[ 1 ];\r\n\r\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\r\n\r\n\t\t\t\t\tx = data[ i ];\r\n\t\t\t\t\ty = data[ i + 1 ];\r\n\t\t\t\t\tif ( x < minX ) minX = x;\r\n\t\t\t\t\tif ( y < minY ) minY = y;\r\n\t\t\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\t\t\tif ( y > maxY ) maxY = y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n\r\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\r\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\treturn triangles;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// create a circular doubly linked list from polygon points in the specified winding order\r\n\r\n\tfunction linkedList( data, start, end, dim, clockwise ) {\r\n\r\n\t\tvar i, last;\r\n\r\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\r\n\r\n\t\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\r\n\r\n\t\t}\r\n\r\n\t\tif ( last && equals( last, last.next ) ) {\r\n\r\n\t\t\tremoveNode( last );\r\n\t\t\tlast = last.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn last;\r\n\r\n\t}\r\n\r\n\t// eliminate colinear or duplicate points\r\n\r\n\tfunction filterPoints( start, end ) {\r\n\r\n\t\tif ( ! start ) return start;\r\n\t\tif ( ! end ) end = start;\r\n\r\n\t\tvar p = start, again;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tagain = false;\r\n\r\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\r\n\r\n\t\t\t\tremoveNode( p );\r\n\t\t\t\tp = end = p.prev;\r\n\t\t\t\tif ( p === p.next ) break;\r\n\t\t\t\tagain = true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp = p.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t} while ( again || p !== end );\r\n\r\n\t\treturn end;\r\n\r\n\t}\r\n\r\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\r\n\r\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\r\n\r\n\t\tif ( ! ear ) return;\r\n\r\n\t\t// interlink polygon nodes in z-order\r\n\r\n\t\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\r\n\r\n\t\tvar stop = ear, prev, next;\r\n\r\n\t\t// iterate through ears, slicing them one by one\r\n\r\n\t\twhile ( ear.prev !== ear.next ) {\r\n\r\n\t\t\tprev = ear.prev;\r\n\t\t\tnext = ear.next;\r\n\r\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\r\n\r\n\t\t\t\t// cut off the triangle\r\n\t\t\t\ttriangles.push( prev.i / dim );\r\n\t\t\t\ttriangles.push( ear.i / dim );\r\n\t\t\t\ttriangles.push( next.i / dim );\r\n\r\n\t\t\t\tremoveNode( ear );\r\n\r\n\t\t\t\t// skipping the next vertice leads to less sliver triangles\r\n\t\t\t\tear = next.next;\r\n\t\t\t\tstop = next.next;\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tear = next;\r\n\r\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\r\n\r\n\t\t\tif ( ear === stop ) {\r\n\r\n\t\t\t\t// try filtering points and slicing again\r\n\r\n\t\t\t\tif ( ! pass ) {\r\n\r\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\r\n\r\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\r\n\r\n\t\t\t\t} else if ( pass === 1 ) {\r\n\r\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\r\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\r\n\r\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\r\n\r\n\t\t\t\t} else if ( pass === 2 ) {\r\n\r\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// check whether a polygon node forms a valid ear with adjacent nodes\r\n\r\n\tfunction isEar( ear ) {\r\n\r\n\t\tvar a = ear.prev,\r\n\t\t\tb = ear,\r\n\t\t\tc = ear.next;\r\n\r\n\t\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\r\n\r\n\t\t// now make sure we don't have other points inside the potential ear\r\n\t\tvar p = ear.next.next;\r\n\r\n\t\twhile ( p !== ear.prev ) {\r\n\r\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\r\n\r\n\t\tvar a = ear.prev,\r\n\t\t\tb = ear,\r\n\t\t\tc = ear.next;\r\n\r\n\t\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\r\n\r\n\t\t// triangle bbox; min & max are calculated like this for speed\r\n\r\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\r\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\r\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\r\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\r\n\r\n\t\t// z-order range for the current triangle bbox;\r\n\r\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\r\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\r\n\r\n\t\t// first look for points inside the triangle in increasing z-order\r\n\r\n\t\tvar p = ear.nextZ;\r\n\r\n\t\twhile ( p && p.z <= maxZ ) {\r\n\r\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\r\n\t\t\tp = p.nextZ;\r\n\r\n\t\t}\r\n\r\n\t\t// then look for points in decreasing z-order\r\n\r\n\t\tp = ear.prevZ;\r\n\r\n\t\twhile ( p && p.z >= minZ ) {\r\n\r\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\r\n\r\n\t\t\tp = p.prevZ;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t// go through all polygon nodes and cure small local self-intersections\r\n\r\n\tfunction cureLocalIntersections( start, triangles, dim ) {\r\n\r\n\t\tvar p = start;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tvar a = p.prev, b = p.next.next;\r\n\r\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\r\n\r\n\t\t\t\ttriangles.push( a.i / dim );\r\n\t\t\t\ttriangles.push( p.i / dim );\r\n\t\t\t\ttriangles.push( b.i / dim );\r\n\r\n\t\t\t\t// remove two nodes involved\r\n\r\n\t\t\t\tremoveNode( p );\r\n\t\t\t\tremoveNode( p.next );\r\n\r\n\t\t\t\tp = start = b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\t// try splitting polygon into two and triangulate them independently\r\n\r\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\r\n\r\n\t\t// look for a valid diagonal that divides the polygon into two\r\n\r\n\t\tvar a = start;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tvar b = a.next.next;\r\n\r\n\t\t\twhile ( b !== a.prev ) {\r\n\r\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\r\n\r\n\t\t\t\t\t// split the polygon in two by the diagonal\r\n\r\n\t\t\t\t\tvar c = splitPolygon( a, b );\r\n\r\n\t\t\t\t\t// filter colinear points around the cuts\r\n\r\n\t\t\t\t\ta = filterPoints( a, a.next );\r\n\t\t\t\t\tc = filterPoints( c, c.next );\r\n\r\n\t\t\t\t\t// run earcut on each half\r\n\r\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\r\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tb = b.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ta = a.next;\r\n\r\n\t\t} while ( a !== start );\r\n\r\n\t}\r\n\r\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\r\n\r\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\r\n\r\n\t\tvar queue = [], i, len, start, end, list;\r\n\r\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\r\n\r\n\t\t\tstart = holeIndices[ i ] * dim;\r\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\r\n\t\t\tlist = linkedList( data, start, end, dim, false );\r\n\t\t\tif ( list === list.next ) list.steiner = true;\r\n\t\t\tqueue.push( getLeftmost( list ) );\r\n\r\n\t\t}\r\n\r\n\t\tqueue.sort( compareX );\r\n\r\n\t\t// process holes from left to right\r\n\r\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\r\n\r\n\t\t\teliminateHole( queue[ i ], outerNode );\r\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\r\n\r\n\t\t}\r\n\r\n\t\treturn outerNode;\r\n\r\n\t}\r\n\r\n\tfunction compareX( a, b ) {\r\n\r\n\t\treturn a.x - b.x;\r\n\r\n\t}\r\n\r\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\r\n\r\n\tfunction eliminateHole( hole, outerNode ) {\r\n\r\n\t\touterNode = findHoleBridge( hole, outerNode );\r\n\r\n\t\tif ( outerNode ) {\r\n\r\n\t\t\tvar b = splitPolygon( outerNode, hole );\r\n\r\n\t\t\tfilterPoints( b, b.next );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\n\r\n\tfunction findHoleBridge( hole, outerNode ) {\r\n\r\n\t\tvar p = outerNode,\r\n\t\t\thx = hole.x,\r\n\t\t\thy = hole.y,\r\n\t\t\tqx = - Infinity,\r\n\t\t\tm;\r\n\r\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\r\n\t\t// segment's endpoint with lesser x will be potential connection point\r\n\r\n\t\tdo {\r\n\r\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\r\n\r\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\r\n\r\n\t\t\t\tif ( x <= hx && x > qx ) {\r\n\r\n\t\t\t\t\tqx = x;\r\n\r\n\t\t\t\t\tif ( x === hx ) {\r\n\r\n\t\t\t\t\t\tif ( hy === p.y ) return p;\r\n\t\t\t\t\t\tif ( hy === p.next.y ) return p.next;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== outerNode );\r\n\r\n\t\tif ( ! m ) return null;\r\n\r\n\t\tif ( hx === qx ) return m.prev; // hole touches outer segment; pick lower endpoint\r\n\r\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\r\n\t\t// if there are no points found, we have a valid connection;\r\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n\t\tvar stop = m,\r\n\t\t\tmx = m.x,\r\n\t\t\tmy = m.y,\r\n\t\t\ttanMin = Infinity,\r\n\t\t\ttan;\r\n\r\n\t\tp = m.next;\r\n\r\n\t\twhile ( p !== stop ) {\r\n\r\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\r\n\t\t\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\r\n\r\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\r\n\r\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\r\n\r\n\t\t\t\t\tm = p;\r\n\t\t\t\t\ttanMin = tan;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn m;\r\n\r\n\t}\r\n\r\n\t// interlink polygon nodes in z-order\r\n\r\n\tfunction indexCurve( start, minX, minY, invSize ) {\r\n\r\n\t\tvar p = start;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\r\n\t\t\tp.prevZ = p.prev;\r\n\t\t\tp.nextZ = p.next;\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\tp.prevZ.nextZ = null;\r\n\t\tp.prevZ = null;\r\n\r\n\t\tsortLinked( p );\r\n\r\n\t}\r\n\r\n\t// Simon Tatham's linked list merge sort algorithm\r\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\n\r\n\tfunction sortLinked( list ) {\r\n\r\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tp = list;\r\n\t\t\tlist = null;\r\n\t\t\ttail = null;\r\n\t\t\tnumMerges = 0;\r\n\r\n\t\t\twhile ( p ) {\r\n\r\n\t\t\t\tnumMerges ++;\r\n\t\t\t\tq = p;\r\n\t\t\t\tpSize = 0;\r\n\r\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\r\n\r\n\t\t\t\t\tpSize ++;\r\n\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\tif ( ! q ) break;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tqSize = inSize;\r\n\r\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\r\n\r\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\r\n\r\n\t\t\t\t\t\te = p;\r\n\t\t\t\t\t\tp = p.nextZ;\r\n\t\t\t\t\t\tpSize --;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\te = q;\r\n\t\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\t\tqSize --;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( tail ) tail.nextZ = e;\r\n\t\t\t\t\telse list = e;\r\n\r\n\t\t\t\t\te.prevZ = tail;\r\n\t\t\t\t\ttail = e;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp = q;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttail.nextZ = null;\r\n\t\t\tinSize *= 2;\r\n\r\n\t\t} while ( numMerges > 1 );\r\n\r\n\t\treturn list;\r\n\r\n\t}\r\n\r\n\t// z-order of a point given coords and inverse of the longer side of data bbox\r\n\r\n\tfunction zOrder( x, y, minX, minY, invSize ) {\r\n\r\n\t\t// coords are transformed into non-negative 15-bit integer range\r\n\r\n\t\tx = 32767 * ( x - minX ) * invSize;\r\n\t\ty = 32767 * ( y - minY ) * invSize;\r\n\r\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\r\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\r\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\r\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\r\n\r\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\r\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\r\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\r\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\r\n\r\n\t\treturn x | ( y << 1 );\r\n\r\n\t}\r\n\r\n\t// find the leftmost node of a polygon ring\r\n\r\n\tfunction getLeftmost( start ) {\r\n\r\n\t\tvar p = start, leftmost = start;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.x < leftmost.x ) leftmost = p;\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\treturn leftmost;\r\n\r\n\t}\r\n\r\n\t// check if a point lies within a convex triangle\r\n\r\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\r\n\r\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\r\n\t\t ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\r\n\t\t ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\r\n\r\n\t}\r\n\r\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\n\r\n\tfunction isValidDiagonal( a, b ) {\r\n\r\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\r\n\t\t\tlocallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\r\n\r\n\t}\r\n\r\n\t// signed area of a triangle\r\n\r\n\tfunction area( p, q, r ) {\r\n\r\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\r\n\r\n\t}\r\n\r\n\t// check if two points are equal\r\n\r\n\tfunction equals( p1, p2 ) {\r\n\r\n\t\treturn p1.x === p2.x && p1.y === p2.y;\r\n\r\n\t}\r\n\r\n\t// check if two segments intersect\r\n\r\n\tfunction intersects( p1, q1, p2, q2 ) {\r\n\r\n\t\tif ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||\r\n\t\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) return true;\r\n\r\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\r\n\t\t\t\t\t area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\r\n\r\n\t}\r\n\r\n\t// check if a polygon diagonal intersects any polygon segments\r\n\r\n\tfunction intersectsPolygon( a, b ) {\r\n\r\n\t\tvar p = a;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n\t\t\t\t\t\t\tintersects( p, p.next, a, b ) ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== a );\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t// check if a polygon diagonal is locally inside the polygon\r\n\r\n\tfunction locallyInside( a, b ) {\r\n\r\n\t\treturn area( a.prev, a, a.next ) < 0 ?\r\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\r\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\r\n\r\n\t}\r\n\r\n\t// check if the middle point of a polygon diagonal is inside the polygon\r\n\r\n\tfunction middleInside( a, b ) {\r\n\r\n\t\tvar p = a,\r\n\t\t\tinside = false,\r\n\t\t\tpx = ( a.x + b.x ) / 2,\r\n\t\t\tpy = ( a.y + b.y ) / 2;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\r\n\t\t\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {\r\n\r\n\t\t\t\tinside = ! inside;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== a );\r\n\r\n\t\treturn inside;\r\n\r\n\t}\r\n\r\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\n\r\n\tfunction splitPolygon( a, b ) {\r\n\r\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\r\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\r\n\t\t\tan = a.next,\r\n\t\t\tbp = b.prev;\r\n\r\n\t\ta.next = b;\r\n\t\tb.prev = a;\r\n\r\n\t\ta2.next = an;\r\n\t\tan.prev = a2;\r\n\r\n\t\tb2.next = a2;\r\n\t\ta2.prev = b2;\r\n\r\n\t\tbp.next = b2;\r\n\t\tb2.prev = bp;\r\n\r\n\t\treturn b2;\r\n\r\n\t}\r\n\r\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\r\n\r\n\tfunction insertNode( i, x, y, last ) {\r\n\r\n\t\tvar p = new Node( i, x, y );\r\n\r\n\t\tif ( ! last ) {\r\n\r\n\t\t\tp.prev = p;\r\n\t\t\tp.next = p;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tp.next = last.next;\r\n\t\t\tp.prev = last;\r\n\t\t\tlast.next.prev = p;\r\n\t\t\tlast.next = p;\r\n\r\n\t\t}\r\n\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\tfunction removeNode( p ) {\r\n\r\n\t\tp.next.prev = p.prev;\r\n\t\tp.prev.next = p.next;\r\n\r\n\t\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\r\n\t\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\r\n\r\n\t}\r\n\r\n\tfunction Node( i, x, y ) {\r\n\r\n\t\t// vertice index in coordinates array\r\n\t\tthis.i = i;\r\n\r\n\t\t// vertex coordinates\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\t// previous and next vertice nodes in a polygon ring\r\n\t\tthis.prev = null;\r\n\t\tthis.next = null;\r\n\r\n\t\t// z-order curve value\r\n\t\tthis.z = null;\r\n\r\n\t\t// previous and next nodes in z-order\r\n\t\tthis.prevZ = null;\r\n\t\tthis.nextZ = null;\r\n\r\n\t\t// indicates whether this is a steiner point\r\n\t\tthis.steiner = false;\r\n\r\n\t}\r\n\r\n\tfunction signedArea( data, start, end, dim ) {\r\n\r\n\t\tvar sum = 0;\r\n\r\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\r\n\r\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\r\n\t\t\tj = i;\r\n\r\n\t\t}\r\n\r\n\t\treturn sum;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\r\n\tvar ShapeUtils = {\r\n\r\n\t\t// calculate area of the contour polygon\r\n\r\n\t\tarea: function ( contour ) {\r\n\r\n\t\t\tvar n = contour.length;\r\n\t\t\tvar a = 0.0;\r\n\r\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\r\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a * 0.5;\r\n\r\n\t\t},\r\n\r\n\t\tisClockWise: function ( pts ) {\r\n\r\n\t\t\treturn ShapeUtils.area( pts ) < 0;\r\n\r\n\t\t},\r\n\r\n\t\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\r\n\t\t\tvar holeIndices = []; // array of hole indices\r\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\r\n\r\n\t\t\tremoveDupEndPts( contour );\r\n\t\t\taddContour( vertices, contour );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar holeIndex = contour.length;\r\n\r\n\t\t\tholes.forEach( removeDupEndPts );\r\n\r\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\r\n\r\n\t\t\t\tholeIndices.push( holeIndex );\r\n\t\t\t\tholeIndex += holes[ i ].length;\r\n\t\t\t\taddContour( vertices, holes[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\r\n\r\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn faces;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction removeDupEndPts( points ) {\r\n\r\n\t\tvar l = points.length;\r\n\r\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\t\tpoints.pop();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction addContour( vertices, contour ) {\r\n\r\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\r\n\r\n\t\t\tvertices.push( contour[ i ].x );\r\n\t\t\tvertices.push( contour[ i ].y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t * Creates extruded geometry from a path shape.\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n\t *  depth: <float>, // Depth to extrude the shape\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n\t *  bevelSize: <float>, // how far from shape outline is bevel\r\n\t *  bevelSegments: <int>, // number of bevel layers\r\n\t *\r\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\r\n\t *\r\n\t *  UVGenerator: <Object> // object that provides UV generator functions\r\n\t *\r\n\t * }\r\n\t */\r\n\r\n\t// ExtrudeGeometry\r\n\r\n\tfunction ExtrudeGeometry( shapes, options ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ExtrudeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\toptions: options\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\r\n\r\n\tExtrudeGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Geometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\t\tvar options = this.parameters.options;\r\n\r\n\t\treturn toJSON( shapes, options, data );\r\n\r\n\t};\r\n\r\n\t// ExtrudeBufferGeometry\r\n\r\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ExtrudeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\toptions: options\r\n\t\t};\r\n\r\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar verticesArray = [];\r\n\t\tvar uvArray = [];\r\n\r\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar shape = shapes[ i ];\r\n\t\t\taddShape( shape );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\r\n\r\n\t\tthis.computeVertexNormals();\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction addShape( shape ) {\r\n\r\n\t\t\tvar placeholder = [];\r\n\r\n\t\t\t// options\r\n\r\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\r\n\r\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\r\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\r\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\r\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\t\t\tvar extrudePath = options.extrudePath;\r\n\r\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\r\n\r\n\t\t\t// deprecated options\r\n\r\n\t\t\tif ( options.amount !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\r\n\t\t\t\tdepth = options.amount;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar extrudePts, extrudeByPath = false;\r\n\t\t\tvar splineTube, binormal, normal, position2;\r\n\r\n\t\t\tif ( extrudePath ) {\r\n\r\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\t\t\textrudeByPath = true;\r\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t\t\t// SETUP TNB variables\r\n\r\n\t\t\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\r\n\r\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\t\t\tbinormal = new Vector3();\r\n\t\t\t\tnormal = new Vector3();\r\n\t\t\t\tposition2 = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Safeguards if bevels are not enabled\r\n\r\n\t\t\tif ( ! bevelEnabled ) {\r\n\r\n\t\t\t\tbevelSegments = 0;\r\n\t\t\t\tbevelThickness = 0;\r\n\t\t\t\tbevelSize = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Variables initialization\r\n\r\n\t\t\tvar ahole, h, hl; // looping of holes\r\n\r\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\t\t\tvar vertices = shapePoints.shape;\r\n\t\t\tvar holes = shapePoints.holes;\r\n\r\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\r\n\r\n\t\t\tif ( reverse ) {\r\n\r\n\t\t\t\tvertices = vertices.reverse();\r\n\r\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t\t\t/* Vertices */\r\n\r\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\tvertices = vertices.concat( ahole );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction scalePt2( pt, vec, size ) {\r\n\r\n\t\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\r\n\r\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar b, bs, t, z,\r\n\t\t\t\tvert, vlen = vertices.length,\r\n\t\t\t\tface, flen = faces.length;\r\n\r\n\r\n\t\t\t// Find directions for point movement\r\n\r\n\r\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\r\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t\t\t//\r\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\r\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\r\n\r\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\r\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\r\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\r\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\r\n\r\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\r\n\t\t\t\t// check for collinear edges\r\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t// not collinear\r\n\r\n\t\t\t\t\t// length of vectors for normalizing\r\n\r\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\r\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\r\n\r\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\r\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\r\n\t\t\t\t\t// scaling factor for v_prev to intersection point\r\n\r\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\r\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\t\t// vector from inPt to intersection point\r\n\r\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\r\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t\t\t//  but prevent crazy spikes\r\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\r\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// handle special case of collinear edges\r\n\r\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\r\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\r\n\t\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( direction_eq ) {\r\n\r\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\t\t\tv_trans_y = v_prev_x;\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar contourMovements = [];\r\n\r\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\tif ( j === il ) j = 0;\r\n\t\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holesMovements = [],\r\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\toneHoleMovements = [];\r\n\r\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\t\tif ( j === il ) j = 0;\r\n\t\t\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tholesMovements.push( oneHoleMovements );\r\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\r\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\t\t\tt = b / bevelSegments;\r\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\r\n\r\n\t\t\t\t// contract shape\r\n\r\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// expand holes\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbs = bevelSize;\r\n\r\n\t\t\t// Back facing vertices\r\n\r\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Add stepped vertices...\r\n\t\t\t// Including front facing vertices\r\n\r\n\t\t\tvar s;\r\n\r\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Add bevel segments planes\r\n\r\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\t\t\tt = b / bevelSegments;\r\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 );\r\n\r\n\t\t\t\t// contract shape\r\n\r\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// expand holes\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* Faces */\r\n\r\n\t\t\t// Top and bottom faces\r\n\r\n\t\t\tbuildLidFaces();\r\n\r\n\t\t\t// Sides faces\r\n\r\n\t\t\tbuildSideFaces();\r\n\r\n\r\n\t\t\t/////  Internal functions\r\n\r\n\t\t\tfunction buildLidFaces() {\r\n\r\n\t\t\t\tvar start = verticesArray.length / 3;\r\n\r\n\t\t\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\t\t\tvar layer = 0; // steps + 1\r\n\t\t\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t\t\t// Top faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Top faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Create faces for the z-sides of the shape\r\n\r\n\t\t\tfunction buildSideFaces() {\r\n\r\n\t\t\t\tvar start = verticesArray.length / 3;\r\n\t\t\t\tvar layeroffset = 0;\r\n\t\t\t\tsidewalls( contour, layeroffset );\r\n\t\t\t\tlayeroffset += contour.length;\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t\t\t//, true\r\n\t\t\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\t\t\tvar j, k;\r\n\t\t\t\ti = contour.length;\r\n\r\n\t\t\t\twhile ( -- i >= 0 ) {\r\n\r\n\t\t\t\t\tj = i;\r\n\t\t\t\t\tk = i - 1;\r\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\r\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\t\t\tvar s = 0,\r\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\r\n\r\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\t\t\tf4( a, b, c, d );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction v( x, y, z ) {\r\n\r\n\t\t\t\tplaceholder.push( x );\r\n\t\t\t\tplaceholder.push( y );\r\n\t\t\t\tplaceholder.push( z );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction f3( a, b, c ) {\r\n\r\n\t\t\t\taddVertex( a );\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( c );\r\n\r\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\r\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction f4( a, b, c, d ) {\r\n\r\n\t\t\t\taddVertex( a );\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( d );\r\n\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( c );\r\n\t\t\t\taddVertex( d );\r\n\r\n\r\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\r\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 2 ] );\r\n\t\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction addVertex( index ) {\r\n\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction addUV( vector2 ) {\r\n\r\n\t\t\t\tuvArray.push( vector2.x );\r\n\t\t\t\tuvArray.push( vector2.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\r\n\r\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\t\tvar options = this.parameters.options;\r\n\r\n\t\treturn toJSON( shapes, options, data );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tvar WorldUVGenerator = {\r\n\r\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\r\n\r\n\t\t\tvar a_x = vertices[ indexA * 3 ];\r\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\r\n\t\t\tvar b_x = vertices[ indexB * 3 ];\r\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\r\n\t\t\tvar c_x = vertices[ indexC * 3 ];\r\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew Vector2( a_x, a_y ),\r\n\t\t\t\tnew Vector2( b_x, b_y ),\r\n\t\t\t\tnew Vector2( c_x, c_y )\r\n\t\t\t];\r\n\r\n\t\t},\r\n\r\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\r\n\r\n\t\t\tvar a_x = vertices[ indexA * 3 ];\r\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\r\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\r\n\t\t\tvar b_x = vertices[ indexB * 3 ];\r\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\r\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\r\n\t\t\tvar c_x = vertices[ indexC * 3 ];\r\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\r\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\r\n\t\t\tvar d_x = vertices[ indexD * 3 ];\r\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\r\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\r\n\r\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\r\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\r\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\r\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\r\n\t\t\t\t];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\r\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\r\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\r\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\r\n\t\t\t\t];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t};\r\n\r\n\tfunction toJSON( shapes, options, data ) {\r\n\r\n\t\t//\r\n\r\n\t\tdata.shapes = [];\r\n\r\n\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * Text = 3D Text\r\n\t *\r\n\t * parameters = {\r\n\t *  font: <THREE.Font>, // font\r\n\t *\r\n\t *  size: <float>, // size of the text\r\n\t *  height: <float>, // thickness to extrude text\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into text bevel goes\r\n\t *  bevelSize: <float> // how far from text outline is bevel\r\n\t * }\r\n\t */\r\n\r\n\t// TextGeometry\r\n\r\n\tfunction TextGeometry( text, parameters ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TextGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\ttext: text,\r\n\t\t\tparameters: parameters\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTextGeometry.prototype.constructor = TextGeometry;\r\n\r\n\t// TextBufferGeometry\r\n\r\n\tfunction TextBufferGeometry( text, parameters ) {\r\n\r\n\t\tparameters = parameters || {};\r\n\r\n\t\tvar font = parameters.font;\r\n\r\n\t\tif ( ! ( font && font.isFont ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\r\n\t\t\treturn new Geometry();\r\n\r\n\t\t}\r\n\r\n\t\tvar shapes = font.generateShapes( text, parameters.size );\r\n\r\n\t\t// translate parameters to ExtrudeGeometry API\r\n\r\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t\t// defaults\r\n\r\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\r\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\r\n\r\n\t\tthis.type = 'TextBufferGeometry';\r\n\r\n\t}\r\n\r\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\r\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// SphereGeometry\r\n\r\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'SphereGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\r\n\tSphereGeometry.prototype.constructor = SphereGeometry;\r\n\r\n\t// SphereBufferGeometry\r\n\r\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'SphereBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\r\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\t\tvar thetaEnd = thetaStart + thetaLength;\r\n\r\n\t\tvar ix, iy;\r\n\r\n\t\tvar index = 0;\r\n\t\tvar grid = [];\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\r\n\r\n\t\t\tvar verticesRow = [];\r\n\r\n\t\t\tvar v = iy / heightSegments;\r\n\r\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tvar u = ix / widthSegments;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.set( vertex.x, vertex.y, vertex.z ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u, 1 - v );\r\n\r\n\t\t\t\tverticesRow.push( index ++ );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgrid.push( verticesRow );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\r\n\t\t\t\tvar b = grid[ iy ][ ix ];\r\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\r\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\r\n\r\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\r\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Kaleb Murphy\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// RingGeometry\r\n\r\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'RingGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\r\n\tRingGeometry.prototype.constructor = RingGeometry;\r\n\r\n\t// RingBufferGeometry\r\n\r\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'RingBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tinnerRadius = innerRadius || 0.5;\r\n\t\touterRadius = outerRadius || 1;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\r\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// some helper variables\r\n\r\n\t\tvar segment;\r\n\t\tvar radius = innerRadius;\r\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar j, i;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\r\n\r\n\t\t\t\t// values are generate from the inside of the ring to the outside\r\n\r\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\r\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\r\n\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// increase the radius for next row of vertices\r\n\r\n\t\t\tradius += radiusStep;\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\r\n\r\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\r\n\r\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\r\n\r\n\t\t\t\tsegment = i + thetaSegmentLevel;\r\n\r\n\t\t\t\tvar a = segment;\r\n\t\t\t\tvar b = segment + thetaSegments + 1;\r\n\t\t\t\tvar c = segment + thetaSegments + 2;\r\n\t\t\t\tvar d = segment + 1;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\r\n\r\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// LatheGeometry\r\n\r\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'LatheGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\r\n\tLatheGeometry.prototype.constructor = LatheGeometry;\r\n\r\n\t// LatheBufferGeometry\r\n\r\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'LatheBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\r\n\t\tsegments = Math.floor( segments ) || 12;\r\n\t\tphiStart = phiStart || 0;\r\n\t\tphiLength = phiLength || Math.PI * 2;\r\n\r\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\r\n\r\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\r\n\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar base;\r\n\t\tvar inverseSegments = 1.0 / segments;\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar i, j;\r\n\r\n\t\t// generate vertices and uvs\r\n\r\n\t\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\t\tvar sin = Math.sin( phi );\r\n\t\t\tvar cos = Math.cos( phi );\r\n\r\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = points[ j ].x * sin;\r\n\t\t\t\tvertex.y = points[ j ].y;\r\n\t\t\t\tvertex.z = points[ j ].x * cos;\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = i / segments;\r\n\t\t\t\tuv.y = j / ( points.length - 1 );\r\n\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t\tbase = j + i * points.length;\r\n\r\n\t\t\t\tvar a = base;\r\n\t\t\t\tvar b = base + points.length;\r\n\t\t\t\tvar c = base + points.length + 1;\r\n\t\t\t\tvar d = base + 1;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// generate normals\r\n\r\n\t\tthis.computeVertexNormals();\r\n\r\n\t\t// if the geometry is closed, we need to average the normals along the seam.\r\n\t\t// because the corresponding vertices are identical (but still have different UVs).\r\n\r\n\t\tif ( phiLength === Math.PI * 2 ) {\r\n\r\n\t\t\tvar normals = this.attributes.normal.array;\r\n\t\t\tvar n1 = new Vector3();\r\n\t\t\tvar n2 = new Vector3();\r\n\t\t\tvar n = new Vector3();\r\n\r\n\t\t\t// this is the buffer offset for the last line of vertices\r\n\r\n\t\t\tbase = segments * points.length * 3;\r\n\r\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\r\n\r\n\t\t\t\t// select the normal of the vertex in the first line\r\n\r\n\t\t\t\tn1.x = normals[ j + 0 ];\r\n\t\t\t\tn1.y = normals[ j + 1 ];\r\n\t\t\t\tn1.z = normals[ j + 2 ];\r\n\r\n\t\t\t\t// select the normal of the vertex in the last line\r\n\r\n\t\t\t\tn2.x = normals[ base + j + 0 ];\r\n\t\t\t\tn2.y = normals[ base + j + 1 ];\r\n\t\t\t\tn2.z = normals[ base + j + 2 ];\r\n\r\n\t\t\t\t// average normals\r\n\r\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\r\n\r\n\t\t\t\t// assign the new values to both normals\r\n\r\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\r\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\r\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\r\n\r\n\t/**\r\n\t * @author jonobr1 / http://jonobr1.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// ShapeGeometry\r\n\r\n\tfunction ShapeGeometry( shapes, curveSegments ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ShapeGeometry';\r\n\r\n\t\tif ( typeof curveSegments === 'object' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\r\n\r\n\t\t\tcurveSegments = curveSegments.curveSegments;\r\n\r\n\t\t}\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\tcurveSegments: curveSegments\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\r\n\r\n\tShapeGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Geometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\r\n\t\treturn toJSON$1( shapes, data );\r\n\r\n\t};\r\n\r\n\t// ShapeBufferGeometry\r\n\r\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ShapeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\tcurveSegments: curveSegments\r\n\t\t};\r\n\r\n\t\tcurveSegments = curveSegments || 12;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar groupStart = 0;\r\n\t\tvar groupCount = 0;\r\n\r\n\t\t// allow single and array values for \"shapes\" parameter\r\n\r\n\t\tif ( Array.isArray( shapes ) === false ) {\r\n\r\n\t\t\taddShape( shapes );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\r\n\r\n\t\t\t\taddShape( shapes[ i ] );\r\n\r\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\r\n\r\n\t\t\t\tgroupStart += groupCount;\r\n\t\t\t\tgroupCount = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\r\n\t\t// helper functions\r\n\r\n\t\tfunction addShape( shape ) {\r\n\r\n\t\t\tvar i, l, shapeHole;\r\n\r\n\t\t\tvar indexOffset = vertices.length / 3;\r\n\t\t\tvar points = shape.extractPoints( curveSegments );\r\n\r\n\t\t\tvar shapeVertices = points.shape;\r\n\t\t\tvar shapeHoles = points.holes;\r\n\r\n\t\t\t// check direction of vertices\r\n\r\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\r\n\r\n\t\t\t\tshapeVertices = shapeVertices.reverse();\r\n\r\n\t\t\t\t// also check if holes are in the opposite direction\r\n\r\n\t\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tshapeHole = shapeHoles[ i ];\r\n\r\n\t\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\r\n\r\n\t\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\r\n\r\n\t\t\t// join vertices of inner and outer paths to a single array\r\n\r\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tshapeHole = shapeHoles[ i ];\r\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// vertices, normals, uvs\r\n\r\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = shapeVertices[ i ];\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// incides\r\n\r\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\r\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\r\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\r\n\r\n\t\t\t\tindices.push( a, b, c );\r\n\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\r\n\r\n\tShapeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\r\n\t\treturn toJSON$1( shapes, data );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction toJSON$1( shapes, data ) {\r\n\r\n\t\tdata.shapes = [];\r\n\r\n\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'EdgesGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tthresholdAngle: thresholdAngle\r\n\t\t};\r\n\r\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\r\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\r\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\r\n\r\n\t\t// prepare source geometry\r\n\r\n\t\tvar geometry2;\r\n\r\n\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\tgeometry2 = new Geometry();\r\n\t\t\tgeometry2.fromBufferGeometry( geometry );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgeometry2 = geometry.clone();\r\n\r\n\t\t}\r\n\r\n\t\tgeometry2.mergeVertices();\r\n\t\tgeometry2.computeFaceNormals();\r\n\r\n\t\tvar sourceVertices = geometry2.vertices;\r\n\t\tvar faces = geometry2.faces;\r\n\r\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\tedge1 = face[ keys[ j ] ];\r\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\r\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tedges[ key ].face2 = i;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate vertices\r\n\r\n\t\tfor ( key in edges ) {\r\n\r\n\t\t\tvar e = edges[ key ];\r\n\r\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\r\n\r\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\r\n\r\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t}\r\n\r\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// CylinderGeometry\r\n\r\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'CylinderGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\r\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\r\n\r\n\t// CylinderBufferGeometry\r\n\r\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'CylinderBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\r\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\r\n\t\theight = height || 1;\r\n\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\theightSegments = Math.floor( heightSegments ) || 1;\r\n\r\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar index = 0;\r\n\t\tvar indexArray = [];\r\n\t\tvar halfHeight = height / 2;\r\n\t\tvar groupStart = 0;\r\n\r\n\t\t// generate geometry\r\n\r\n\t\tgenerateTorso();\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\r\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\tfunction generateTorso() {\r\n\r\n\t\t\tvar x, y;\r\n\t\t\tvar normal = new Vector3();\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tvar groupCount = 0;\r\n\r\n\t\t\t// this will be used to calculate the normal\r\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\r\n\r\n\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\t\t\tvar indexRow = [];\r\n\r\n\t\t\t\tvar v = y / heightSegments;\r\n\r\n\t\t\t\t// calculate the radius of the current row\r\n\r\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\t\tvar u = x / radialSegments;\r\n\r\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\r\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\r\n\r\n\t\t\t\t\t// vertex\r\n\r\n\t\t\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\r\n\t\t\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t// normal\r\n\r\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\r\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t\t// uv\r\n\r\n\t\t\t\t\tuvs.push( u, 1 - v );\r\n\r\n\t\t\t\t\t// save index of vertex in respective row\r\n\r\n\t\t\t\t\tindexRow.push( index ++ );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// now save vertices of the row in our index array\r\n\r\n\t\t\t\tindexArray.push( indexRow );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate indices\r\n\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\t\t\t\t// we use the index array to access the correct indices\r\n\r\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\r\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\r\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\r\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t\t// update group counter\r\n\r\n\t\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateCap( top ) {\r\n\r\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\r\n\r\n\t\t\tvar uv = new Vector2();\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tvar groupCount = 0;\r\n\r\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\r\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\r\n\r\n\t\t\t// save the index of the first center vertex\r\n\t\t\tcenterIndexStart = index;\r\n\r\n\t\t\t// first we generate the center vertex data of the cap.\r\n\t\t\t// because the geometry needs one set of uvs per face,\r\n\t\t\t// we must generate a center vertex per face/segment\r\n\r\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, sign, 0 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( 0.5, 0.5 );\r\n\r\n\t\t\t\t// increase index\r\n\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// save the index of the last center vertex\r\n\r\n\t\t\tcenterIndexEnd = index;\r\n\r\n\t\t\t// now we generate the surrounding vertices, normals and uvs\r\n\r\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar u = x / radialSegments;\r\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\t\tvar cosTheta = Math.cos( theta );\r\n\t\t\t\tvar sinTheta = Math.sin( theta );\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\t\tvertex.y = halfHeight * sign;\r\n\t\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, sign, 0 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\r\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t// increase index\r\n\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate indices\r\n\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar c = centerIndexStart + x;\r\n\t\t\t\tvar i = centerIndexEnd + x;\r\n\r\n\t\t\t\tif ( top === true ) {\r\n\r\n\t\t\t\t\t// face top\r\n\r\n\t\t\t\t\tindices.push( i, i + 1, c );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// face bottom\r\n\r\n\t\t\t\t\tindices.push( i + 1, i, c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t */\r\n\r\n\t// ConeGeometry\r\n\r\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\r\n\r\n\t\tthis.type = 'ConeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\r\n\tConeGeometry.prototype.constructor = ConeGeometry;\r\n\r\n\t// ConeBufferGeometry\r\n\r\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\r\n\r\n\t\tthis.type = 'ConeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\r\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author hughes\r\n\t */\r\n\r\n\t// CircleGeometry\r\n\r\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'CircleGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\r\n\tCircleGeometry.prototype.constructor = CircleGeometry;\r\n\r\n\t// CircleBufferGeometry\r\n\r\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'CircleBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, s;\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\r\n\t\t// center point\r\n\r\n\t\tvertices.push( 0, 0, 0 );\r\n\t\tnormals.push( 0, 0, 1 );\r\n\t\tuvs.push( 0.5, 0.5 );\r\n\r\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\r\n\r\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\r\n\r\n\t\t\t// vertex\r\n\r\n\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\r\n\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\r\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\r\n\r\n\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\tindices.push( i, i + 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\r\n\r\n\r\n\r\n\tvar Geometries = /*#__PURE__*/Object.freeze({\r\n\t\tWireframeGeometry: WireframeGeometry,\r\n\t\tParametricGeometry: ParametricGeometry,\r\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\r\n\t\tTetrahedronGeometry: TetrahedronGeometry,\r\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\r\n\t\tOctahedronGeometry: OctahedronGeometry,\r\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\r\n\t\tIcosahedronGeometry: IcosahedronGeometry,\r\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\r\n\t\tDodecahedronGeometry: DodecahedronGeometry,\r\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\r\n\t\tPolyhedronGeometry: PolyhedronGeometry,\r\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\r\n\t\tTubeGeometry: TubeGeometry,\r\n\t\tTubeBufferGeometry: TubeBufferGeometry,\r\n\t\tTorusKnotGeometry: TorusKnotGeometry,\r\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\r\n\t\tTorusGeometry: TorusGeometry,\r\n\t\tTorusBufferGeometry: TorusBufferGeometry,\r\n\t\tTextGeometry: TextGeometry,\r\n\t\tTextBufferGeometry: TextBufferGeometry,\r\n\t\tSphereGeometry: SphereGeometry,\r\n\t\tSphereBufferGeometry: SphereBufferGeometry,\r\n\t\tRingGeometry: RingGeometry,\r\n\t\tRingBufferGeometry: RingBufferGeometry,\r\n\t\tPlaneGeometry: PlaneGeometry,\r\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\r\n\t\tLatheGeometry: LatheGeometry,\r\n\t\tLatheBufferGeometry: LatheBufferGeometry,\r\n\t\tShapeGeometry: ShapeGeometry,\r\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\r\n\t\tExtrudeGeometry: ExtrudeGeometry,\r\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\r\n\t\tEdgesGeometry: EdgesGeometry,\r\n\t\tConeGeometry: ConeGeometry,\r\n\t\tConeBufferGeometry: ConeBufferGeometry,\r\n\t\tCylinderGeometry: CylinderGeometry,\r\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\r\n\t\tCircleGeometry: CircleGeometry,\r\n\t\tCircleBufferGeometry: CircleBufferGeometry,\r\n\t\tBoxGeometry: BoxGeometry,\r\n\t\tBoxBufferGeometry: BoxBufferGeometry\r\n\t});\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <THREE.Color>\r\n\t * }\r\n\t */\r\n\r\n\tfunction ShadowMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'ShadowMaterial';\r\n\r\n\t\tthis.color = new Color( 0x000000 );\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tShadowMaterial.prototype = Object.create( Material.prototype );\r\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\r\n\r\n\tShadowMaterial.prototype.isShadowMaterial = true;\r\n\r\n\tShadowMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction RawShaderMaterial( parameters ) {\r\n\r\n\t\tShaderMaterial.call( this, parameters );\r\n\r\n\t\tthis.type = 'RawShaderMaterial';\r\n\r\n\t}\r\n\r\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\r\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\r\n\r\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  roughness: <float>,\r\n\t *  metalness: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  roughnessMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  metalnessMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  envMapIntensity: <float>\r\n\t *\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshStandardMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.type = 'MeshStandardMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.roughness = 0.5;\r\n\t\tthis.metalness = 0.5;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.roughnessMap = null;\r\n\r\n\t\tthis.metalnessMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapIntensity = 1.0;\r\n\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\r\n\r\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\r\n\r\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.roughness = source.roughness;\r\n\t\tthis.metalness = source.metalness;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.roughnessMap = source.roughnessMap;\r\n\r\n\t\tthis.metalnessMap = source.metalnessMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapIntensity = source.envMapIntensity;\r\n\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  reflectivity: <float>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshPhysicalMaterial( parameters ) {\r\n\r\n\t\tMeshStandardMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'PHYSICAL': '' };\r\n\r\n\t\tthis.type = 'MeshPhysicalMaterial';\r\n\r\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\r\n\r\n\t\tthis.clearCoat = 0.0;\r\n\t\tthis.clearCoatRoughness = 0.0;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\r\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\r\n\r\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\r\n\r\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = { 'PHYSICAL': '' };\r\n\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\r\n\t\tthis.clearCoat = source.clearCoat;\r\n\t\tthis.clearCoatRoughness = source.clearCoatRoughness;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  specular: <hex>,\r\n\t *  shininess: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshPhongMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshPhongMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.specular = new Color( 0x111111 );\r\n\t\tthis.shininess = 30;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\r\n\r\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\r\n\r\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.specular.copy( source.specular );\r\n\t\tthis.shininess = source.shininess;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author takahirox / http://github.com/takahirox\r\n\t *\r\n\t * parameters = {\r\n\t *  gradientMap: new THREE.Texture( <Image> )\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshToonMaterial( parameters ) {\r\n\r\n\t\tMeshPhongMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'TOON': '' };\r\n\r\n\t\tthis.type = 'MeshToonMaterial';\r\n\r\n\t\tthis.gradientMap = null;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\r\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\r\n\r\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\r\n\r\n\tMeshToonMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.gradientMap = source.gradientMap;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshNormalMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshNormalMaterial';\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false;\r\n\t\tthis.lights = false;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\r\n\r\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\r\n\r\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshLambertMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshLambertMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\r\n\r\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\r\n\r\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *\r\n\t *  scale: <float>,\r\n\t *  dashSize: <float>,\r\n\t *  gapSize: <float>\r\n\t * }\r\n\t */\r\n\r\n\tfunction LineDashedMaterial( parameters ) {\r\n\r\n\t\tLineBasicMaterial.call( this );\r\n\r\n\t\tthis.type = 'LineDashedMaterial';\r\n\r\n\t\tthis.scale = 1;\r\n\t\tthis.dashSize = 3;\r\n\t\tthis.gapSize = 1;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\r\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\r\n\r\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\r\n\r\n\tLineDashedMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.scale = source.scale;\r\n\t\tthis.dashSize = source.dashSize;\r\n\t\tthis.gapSize = source.gapSize;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\r\n\tvar Materials = /*#__PURE__*/Object.freeze({\r\n\t\tShadowMaterial: ShadowMaterial,\r\n\t\tSpriteMaterial: SpriteMaterial,\r\n\t\tRawShaderMaterial: RawShaderMaterial,\r\n\t\tShaderMaterial: ShaderMaterial,\r\n\t\tPointsMaterial: PointsMaterial,\r\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\r\n\t\tMeshStandardMaterial: MeshStandardMaterial,\r\n\t\tMeshPhongMaterial: MeshPhongMaterial,\r\n\t\tMeshToonMaterial: MeshToonMaterial,\r\n\t\tMeshNormalMaterial: MeshNormalMaterial,\r\n\t\tMeshLambertMaterial: MeshLambertMaterial,\r\n\t\tMeshDepthMaterial: MeshDepthMaterial,\r\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\r\n\t\tMeshBasicMaterial: MeshBasicMaterial,\r\n\t\tLineDashedMaterial: LineDashedMaterial,\r\n\t\tLineBasicMaterial: LineBasicMaterial,\r\n\t\tMaterial: Material\r\n\t});\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar Cache = {\r\n\r\n\t\tenabled: false,\r\n\r\n\t\tfiles: {},\r\n\r\n\t\tadd: function ( key, file ) {\r\n\r\n\t\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n\t\t\tthis.files[ key ] = file;\r\n\r\n\t\t},\r\n\r\n\t\tget: function ( key ) {\r\n\r\n\t\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n\t\t\treturn this.files[ key ];\r\n\r\n\t\t},\r\n\r\n\t\tremove: function ( key ) {\r\n\r\n\t\t\tdelete this.files[ key ];\r\n\r\n\t\t},\r\n\r\n\t\tclear: function () {\r\n\r\n\t\t\tthis.files = {};\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar isLoading = false;\r\n\t\tvar itemsLoaded = 0;\r\n\t\tvar itemsTotal = 0;\r\n\t\tvar urlModifier = undefined;\r\n\r\n\t\t// Refer to #5689 for the reason why we don't set .onStart\r\n\t\t// in the constructor\r\n\r\n\t\tthis.onStart = undefined;\r\n\t\tthis.onLoad = onLoad;\r\n\t\tthis.onProgress = onProgress;\r\n\t\tthis.onError = onError;\r\n\r\n\t\tthis.itemStart = function ( url ) {\r\n\r\n\t\t\titemsTotal ++;\r\n\r\n\t\t\tif ( isLoading === false ) {\r\n\r\n\t\t\t\tif ( scope.onStart !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tisLoading = true;\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemEnd = function ( url ) {\r\n\r\n\t\t\titemsLoaded ++;\r\n\r\n\t\t\tif ( scope.onProgress !== undefined ) {\r\n\r\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( itemsLoaded === itemsTotal ) {\r\n\r\n\t\t\t\tisLoading = false;\r\n\r\n\t\t\t\tif ( scope.onLoad !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onLoad();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemError = function ( url ) {\r\n\r\n\t\t\tif ( scope.onError !== undefined ) {\r\n\r\n\t\t\t\tscope.onError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.resolveURL = function ( url ) {\r\n\r\n\t\t\tif ( urlModifier ) {\r\n\r\n\t\t\t\treturn urlModifier( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn url;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setURLModifier = function ( transform ) {\r\n\r\n\t\t\turlModifier = transform;\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar DefaultLoadingManager = new LoadingManager();\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar loading = {};\r\n\r\n\tfunction FileLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t}\r\n\r\n\tObject.assign( FileLoader.prototype, {\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( url === undefined ) url = '';\r\n\r\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check if request is duplicate\r\n\r\n\t\t\tif ( loading[ url ] !== undefined ) {\r\n\r\n\t\t\t\tloading[ url ].push( {\r\n\r\n\t\t\t\t\tonLoad: onLoad,\r\n\t\t\t\t\tonProgress: onProgress,\r\n\t\t\t\t\tonError: onError\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check for data: URI\r\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\r\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\r\n\r\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\r\n\t\t\tif ( dataUriRegexResult ) {\r\n\r\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\r\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\r\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\r\n\r\n\t\t\t\tdata = window.decodeURIComponent( data );\r\n\r\n\t\t\t\tif ( isBase64 ) data = window.atob( data );\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tvar response;\r\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\r\n\r\n\t\t\t\t\tswitch ( responseType ) {\r\n\r\n\t\t\t\t\t\tcase 'arraybuffer':\r\n\t\t\t\t\t\tcase 'blob':\r\n\r\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\r\n\r\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tresponse = view.buffer;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'document':\r\n\r\n\t\t\t\t\t\t\tvar parser = new DOMParser();\r\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'json':\r\n\r\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault: // 'text' or other\r\n\r\n\t\t\t\t\t\t\tresponse = data;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\r\n\t\t\t\t\twindow.setTimeout( function () {\r\n\r\n\t\t\t\t\t\tif ( onLoad ) onLoad( response );\r\n\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t}, 0 );\r\n\r\n\t\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\r\n\t\t\t\t\twindow.setTimeout( function () {\r\n\r\n\t\t\t\t\t\tif ( onError ) onError( error );\r\n\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\t\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t\t\t}, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Initialise array for duplicate requests\r\n\r\n\t\t\t\tloading[ url ] = [];\r\n\r\n\t\t\t\tloading[ url ].push( {\r\n\r\n\t\t\t\t\tonLoad: onLoad,\r\n\t\t\t\t\tonProgress: onProgress,\r\n\t\t\t\t\tonError: onError\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\t\t\trequest.open( 'GET', url, true );\r\n\r\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\t\t\tvar response = this.response;\r\n\r\n\t\t\t\t\tCache.add( url, response );\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\r\n\r\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\r\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\r\n\r\n\t\t\t\t\t\tif ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\t\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\r\n\t\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\r\n\r\n\t\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\r\n\r\n\t\t\t\tfor ( var header in this.requestHeader ) {\r\n\r\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\trequest.send( null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\treturn request;\r\n\r\n\t\t},\r\n\r\n\t\tsetPath: function ( value ) {\r\n\r\n\t\t\tthis.path = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetResponseType: function ( value ) {\r\n\r\n\t\t\tthis.responseType = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetWithCredentials: function ( value ) {\r\n\r\n\t\t\tthis.withCredentials = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMimeType: function ( value ) {\r\n\r\n\t\t\tthis.mimeType = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRequestHeader: function ( value ) {\r\n\r\n\t\t\tthis.requestHeader = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n\t */\r\n\r\n\tfunction CompressedTextureLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t\t// override in sub classes\r\n\t\tthis._parser = null;\r\n\r\n\t}\r\n\r\n\tObject.assign( CompressedTextureLoader.prototype, {\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar images = [];\r\n\r\n\t\t\tvar texture = new CompressedTexture();\r\n\t\t\ttexture.image = images;\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\r\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\r\n\t\t\t\t\timages[ i ] = {\r\n\t\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tloaded += 1;\r\n\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\r\n\t\t\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, onProgress, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\t\tvar loaded = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\r\n\r\n\t\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\r\n\t\t\t\t\tif ( texDatas.isCubemap ) {\r\n\r\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\r\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}, onProgress, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t},\r\n\r\n\t\tsetPath: function ( value ) {\r\n\r\n\t\t\tthis.path = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Nikos M. / https://github.com/foo123/\r\n\t *\r\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n\t */\r\n\r\n\tfunction DataTextureLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t\t// override in sub classes\r\n\t\tthis._parser = null;\r\n\r\n\t}\r\n\r\n\tObject.assign( DataTextureLoader.prototype, {\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar texture = new DataTexture();\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\tvar texData = scope._parser( buffer );\r\n\r\n\t\t\t\tif ( ! texData ) return;\r\n\r\n\t\t\t\tif ( undefined !== texData.image ) {\r\n\r\n\t\t\t\t\ttexture.image = texData.image;\r\n\r\n\t\t\t\t} else if ( undefined !== texData.data ) {\r\n\r\n\t\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\t\ttexture.image.data = texData.data;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\r\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\r\n\r\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\r\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\r\n\r\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\r\n\r\n\t\t\t\tif ( undefined !== texData.format ) {\r\n\r\n\t\t\t\t\ttexture.format = texData.format;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( undefined !== texData.type ) {\r\n\r\n\t\t\t\t\ttexture.type = texData.type;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\r\n\r\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\r\n\r\n\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction ImageLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t}\r\n\r\n\tObject.assign( ImageLoader.prototype, {\r\n\r\n\t\tcrossOrigin: 'anonymous',\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( url === undefined ) url = '';\r\n\r\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\r\n\r\n\t\t\tfunction onImageLoad() {\r\n\r\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\r\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\r\n\r\n\t\t\t\tCache.add( url, this );\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( this );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction onImageError( event ) {\r\n\r\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\r\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\r\n\r\n\t\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\r\n\t\t\timage.addEventListener( 'error', onImageError, false );\r\n\r\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\r\n\r\n\t\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\timage.src = url;\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t},\r\n\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\t\tthis.crossOrigin = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPath: function ( value ) {\r\n\r\n\t\t\tthis.path = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction CubeTextureLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t}\r\n\r\n\tObject.assign( CubeTextureLoader.prototype, {\r\n\r\n\t\tcrossOrigin: 'anonymous',\r\n\r\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar texture = new CubeTexture();\r\n\r\n\t\t\tvar loader = new ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setPath( this.path );\r\n\r\n\t\t\tvar loaded = 0;\r\n\r\n\t\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\r\n\t\t\t\t\ttexture.images[ i ] = image;\r\n\r\n\t\t\t\t\tloaded ++;\r\n\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, undefined, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\r\n\r\n\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t},\r\n\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\t\tthis.crossOrigin = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPath: function ( value ) {\r\n\r\n\t\t\tthis.path = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction TextureLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t}\r\n\r\n\tObject.assign( TextureLoader.prototype, {\r\n\r\n\t\tcrossOrigin: 'anonymous',\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar texture = new Texture();\r\n\r\n\t\t\tvar loader = new ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setPath( this.path );\r\n\r\n\t\t\tloader.load( url, function ( image ) {\r\n\r\n\t\t\t\ttexture.image = image;\r\n\r\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\r\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g$/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\r\n\r\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) {\r\n\r\n\t\t\t\t\tonLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t},\r\n\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\t\tthis.crossOrigin = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPath: function ( value ) {\r\n\r\n\t\t\tthis.path = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Extensible curve object\r\n\t *\r\n\t * Some common of curve methods:\r\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\r\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\r\n\t * .getPoints(), .getSpacedPoints()\r\n\t * .getLength()\r\n\t * .updateArcLengths()\r\n\t *\r\n\t * This following curves inherit from THREE.Curve:\r\n\t *\r\n\t * -- 2D curves --\r\n\t * THREE.ArcCurve\r\n\t * THREE.CubicBezierCurve\r\n\t * THREE.EllipseCurve\r\n\t * THREE.LineCurve\r\n\t * THREE.QuadraticBezierCurve\r\n\t * THREE.SplineCurve\r\n\t *\r\n\t * -- 3D curves --\r\n\t * THREE.CatmullRomCurve3\r\n\t * THREE.CubicBezierCurve3\r\n\t * THREE.LineCurve3\r\n\t * THREE.QuadraticBezierCurve3\r\n\t *\r\n\t * A series of curves can be represented as a THREE.CurvePath.\r\n\t *\r\n\t **/\r\n\r\n\t/**************************************************************\r\n\t *\tAbstract Curve base class\r\n\t **************************************************************/\r\n\r\n\tfunction Curve() {\r\n\r\n\t\tthis.type = 'Curve';\r\n\r\n\t\tthis.arcLengthDivisions = 200;\r\n\r\n\t}\r\n\r\n\tObject.assign( Curve.prototype, {\r\n\r\n\t\t// Virtual base class method to overwrite and implement in subclasses\r\n\t\t//\t- t [0 .. 1]\r\n\r\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\t// Get point at relative position in curve according to arc length\r\n\t\t// - u [0 .. 1]\r\n\r\n\t\tgetPointAt: function ( u, optionalTarget ) {\r\n\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getPoint( t, optionalTarget );\r\n\r\n\t\t},\r\n\r\n\t\t// Get sequence of points using getPoint( t )\r\n\r\n\t\tgetPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) divisions = 5;\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\t// Get sequence of points using getPointAt( u )\r\n\r\n\t\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) divisions = 5;\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\t// Get total curve arc length\r\n\r\n\t\tgetLength: function () {\r\n\r\n\t\t\tvar lengths = this.getLengths();\r\n\t\t\treturn lengths[ lengths.length - 1 ];\r\n\r\n\t\t},\r\n\r\n\t\t// Get list of cumulative segment lengths\r\n\r\n\t\tgetLengths: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) divisions = this.arcLengthDivisions;\r\n\r\n\t\t\tif ( this.cacheArcLengths &&\r\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\r\n\t\t\t\t! this.needsUpdate ) {\r\n\r\n\t\t\t\treturn this.cacheArcLengths;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.needsUpdate = false;\r\n\r\n\t\t\tvar cache = [];\r\n\t\t\tvar current, last = this.getPoint( 0 );\r\n\t\t\tvar p, sum = 0;\r\n\r\n\t\t\tcache.push( 0 );\r\n\r\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\t\t\tcurrent = this.getPoint( p / divisions );\r\n\t\t\t\tsum += current.distanceTo( last );\r\n\t\t\t\tcache.push( sum );\r\n\t\t\t\tlast = current;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cacheArcLengths = cache;\r\n\r\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\r\n\r\n\t\t},\r\n\r\n\t\tupdateArcLengths: function () {\r\n\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\tthis.getLengths();\r\n\r\n\t\t},\r\n\r\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n\t\tgetUtoTmapping: function ( u, distance ) {\r\n\r\n\t\t\tvar arcLengths = this.getLengths();\r\n\r\n\t\t\tvar i = 0, il = arcLengths.length;\r\n\r\n\t\t\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\t\t\tif ( distance ) {\r\n\r\n\t\t\t\ttargetArcLength = distance;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\t\t\tvar low = 0, high = il - 1, comparison;\r\n\r\n\t\t\twhile ( low <= high ) {\r\n\r\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\t\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\t\t\tlow = i + 1;\r\n\r\n\t\t\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\t\t\thigh = i - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\thigh = i;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// DONE\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\ti = high;\r\n\r\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\r\n\t\t\t\treturn i / ( il - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n\t\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\r\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\r\n\t\t\t// determine where we are between the 'before' and 'after' points\r\n\r\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n\t\t\t// add that fractional amount to t\r\n\r\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t},\r\n\r\n\t\t// Returns a unit vector tangent at t\r\n\t\t// In case any sub curve does not implement its tangent derivation,\r\n\t\t// 2 points a small delta apart will be used to find its gradient\r\n\t\t// which seems to give a reasonable approximation\r\n\r\n\t\tgetTangent: function ( t ) {\r\n\r\n\t\t\tvar delta = 0.0001;\r\n\t\t\tvar t1 = t - delta;\r\n\t\t\tvar t2 = t + delta;\r\n\r\n\t\t\t// Capping in case of danger\r\n\r\n\t\t\tif ( t1 < 0 ) t1 = 0;\r\n\t\t\tif ( t2 > 1 ) t2 = 1;\r\n\r\n\t\t\tvar pt1 = this.getPoint( t1 );\r\n\t\t\tvar pt2 = this.getPoint( t2 );\r\n\r\n\t\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\t\treturn vec.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tgetTangentAt: function ( u ) {\r\n\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getTangent( t );\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\r\n\r\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n\r\n\t\t\tvar normal = new Vector3();\r\n\r\n\t\t\tvar tangents = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar binormals = [];\r\n\r\n\t\t\tvar vec = new Vector3();\r\n\t\t\tvar mat = new Matrix4();\r\n\r\n\t\t\tvar i, u, theta;\r\n\r\n\t\t\t// compute the tangent vectors for each segment on the curve\r\n\r\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\t\tu = i / segments;\r\n\r\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\r\n\t\t\t\ttangents[ i ].normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t\t// and in the direction of the minimum tangent xyz component\r\n\r\n\t\t\tnormals[ 0 ] = new Vector3();\r\n\t\t\tbinormals[ 0 ] = new Vector3();\r\n\t\t\tvar min = Number.MAX_VALUE;\r\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\r\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\r\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\t\tif ( tx <= min ) {\r\n\r\n\t\t\t\tmin = tx;\r\n\t\t\t\tnormal.set( 1, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ty <= min ) {\r\n\r\n\t\t\t\tmin = ty;\r\n\t\t\t\tnormal.set( 0, 1, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tz <= min ) {\r\n\r\n\t\t\t\tnormal.set( 0, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\r\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\r\n\r\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\r\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\r\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\r\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tvec.normalize();\r\n\r\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\r\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\t\t\tif ( closed === true ) {\r\n\r\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\r\n\t\t\t\ttheta /= segments;\r\n\r\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\r\n\r\n\t\t\t\t\ttheta = - theta;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\t\t\t// twist a little...\r\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttangents: tangents,\r\n\t\t\t\tnormals: normals,\r\n\t\t\t\tbinormals: binormals\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Curve',\r\n\t\t\t\t\tgenerator: 'Curve.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\r\n\t\t\tdata.type = this.type;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'EllipseCurve';\r\n\r\n\t\tthis.aX = aX || 0;\r\n\t\tthis.aY = aY || 0;\r\n\r\n\t\tthis.xRadius = xRadius || 1;\r\n\t\tthis.yRadius = yRadius || 1;\r\n\r\n\t\tthis.aStartAngle = aStartAngle || 0;\r\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\r\n\r\n\t\tthis.aClockwise = aClockwise || false;\r\n\r\n\t\tthis.aRotation = aRotation || 0;\r\n\r\n\t}\r\n\r\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\r\n\tEllipseCurve.prototype.constructor = EllipseCurve;\r\n\r\n\tEllipseCurve.prototype.isEllipseCurve = true;\r\n\r\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar twoPi = Math.PI * 2;\r\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\r\n\r\n\t\t// ensures that deltaAngle is 0 .. 2 PI\r\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\r\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\r\n\r\n\t\tif ( deltaAngle < Number.EPSILON ) {\r\n\r\n\t\t\tif ( samePoints ) {\r\n\r\n\t\t\t\tdeltaAngle = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aClockwise === true && ! samePoints ) {\r\n\r\n\t\t\tif ( deltaAngle === twoPi ) {\r\n\r\n\t\t\t\tdeltaAngle = - twoPi;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\r\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\t\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\t\tvar cos = Math.cos( this.aRotation );\r\n\t\t\tvar sin = Math.sin( this.aRotation );\r\n\r\n\t\t\tvar tx = x - this.aX;\r\n\t\t\tvar ty = y - this.aY;\r\n\r\n\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\tx = tx * cos - ty * sin + this.aX;\r\n\t\t\ty = tx * sin + ty * cos + this.aY;\r\n\r\n\t\t}\r\n\r\n\t\treturn point.set( x, y );\r\n\r\n\t};\r\n\r\n\tEllipseCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.aX = source.aX;\r\n\t\tthis.aY = source.aY;\r\n\r\n\t\tthis.xRadius = source.xRadius;\r\n\t\tthis.yRadius = source.yRadius;\r\n\r\n\t\tthis.aStartAngle = source.aStartAngle;\r\n\t\tthis.aEndAngle = source.aEndAngle;\r\n\r\n\t\tthis.aClockwise = source.aClockwise;\r\n\r\n\t\tthis.aRotation = source.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\tEllipseCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.aX = this.aX;\r\n\t\tdata.aY = this.aY;\r\n\r\n\t\tdata.xRadius = this.xRadius;\r\n\t\tdata.yRadius = this.yRadius;\r\n\r\n\t\tdata.aStartAngle = this.aStartAngle;\r\n\t\tdata.aEndAngle = this.aEndAngle;\r\n\r\n\t\tdata.aClockwise = this.aClockwise;\r\n\r\n\t\tdata.aRotation = this.aRotation;\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.aX = json.aX;\r\n\t\tthis.aY = json.aY;\r\n\r\n\t\tthis.xRadius = json.xRadius;\r\n\t\tthis.yRadius = json.yRadius;\r\n\r\n\t\tthis.aStartAngle = json.aStartAngle;\r\n\t\tthis.aEndAngle = json.aEndAngle;\r\n\r\n\t\tthis.aClockwise = json.aClockwise;\r\n\r\n\t\tthis.aRotation = json.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\tthis.type = 'ArcCurve';\r\n\r\n\t}\r\n\r\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\r\n\tArcCurve.prototype.constructor = ArcCurve;\r\n\r\n\tArcCurve.prototype.isArcCurve = true;\r\n\r\n\t/**\r\n\t * @author zz85 https://github.com/zz85\r\n\t *\r\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\r\n\t * cusps and self-intersections in non-uniform catmull rom curves.\r\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n\t *\r\n\t * curve.type accepts centripetal(default), chordal and catmullrom\r\n\t * curve.tension is used for catmullrom which defaults to 0.5\r\n\t */\r\n\r\n\r\n\t/*\r\n\tBased on an optimized c++ solution in\r\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t - http://ideone.com/NoEbVM\r\n\r\n\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\twhich can be placed in CurveUtils.\r\n\t*/\r\n\r\n\tfunction CubicPoly() {\r\n\r\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\r\n\r\n\t\t/*\r\n\t\t * Compute coefficients for a cubic polynomial\r\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t\t * such that\r\n\t\t *   p(0) = x0, p(1) = x1\r\n\t\t *  and\r\n\t\t *   p'(0) = t0, p'(1) = t1.\r\n\t\t */\r\n\t\tfunction init( x0, x1, t0, t1 ) {\r\n\r\n\t\t\tc0 = x0;\r\n\t\t\tc1 = t0;\r\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\r\n\r\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t\t\t// rescale tangents for parametrization in [0,1]\r\n\t\t\t\tt1 *= dt1;\r\n\t\t\t\tt2 *= dt1;\r\n\r\n\t\t\t\tinit( x1, x2, t1, t2 );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tcalc: function ( t ) {\r\n\r\n\t\t\t\tvar t2 = t * t;\r\n\t\t\t\tvar t3 = t2 * t;\r\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar tmp = new Vector3();\r\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\r\n\r\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CatmullRomCurve3';\r\n\r\n\t\tthis.points = points || [];\r\n\t\tthis.closed = closed || false;\r\n\t\tthis.curveType = curveType || 'centripetal';\r\n\t\tthis.tension = tension || 0.5;\r\n\r\n\t}\r\n\r\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\r\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\r\n\r\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\r\n\r\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar l = points.length;\r\n\r\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\tvar intPoint = Math.floor( p );\r\n\t\tvar weight = p - intPoint;\r\n\r\n\t\tif ( this.closed ) {\r\n\r\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\r\n\r\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\tintPoint = l - 2;\r\n\t\t\tweight = 1;\r\n\r\n\t\t}\r\n\r\n\t\tvar p0, p1, p2, p3; // 4 points\r\n\r\n\t\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate first point\r\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\tp0 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tp1 = points[ intPoint % l ];\r\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate last point\r\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\tp3 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\r\n\r\n\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\r\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t// safety check for repeated points\r\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\r\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t} else if ( this.curveType === 'catmullrom' ) {\r\n\r\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\r\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\r\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\r\n\r\n\t\t}\r\n\r\n\t\tpoint.set(\r\n\t\t\tpx.calc( weight ),\r\n\t\t\tpy.calc( weight ),\r\n\t\t\tpz.calc( weight )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = source.closed;\r\n\t\tthis.curveType = source.curveType;\r\n\t\tthis.tension = source.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\tdata.closed = this.closed;\r\n\t\tdata.curveType = this.curveType;\r\n\t\tdata.tension = this.tension;\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = json.closed;\r\n\t\tthis.curveType = json.curveType;\r\n\t\tthis.tension = json.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t * Bezier Curves formulas obtained from\r\n\t * http://en.wikipedia.org/wiki/Bézier_curve\r\n\t */\r\n\r\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction QuadraticBezierP0( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezierP1( t, p ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezierP2( t, p ) {\r\n\r\n\t\treturn t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\r\n\r\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\r\n\t\t\tQuadraticBezierP2( t, p2 );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction CubicBezierP0( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * k * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP1( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn 3 * k * k * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP2( t, p ) {\r\n\r\n\t\treturn 3 * ( 1 - t ) * t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP3( t, p ) {\r\n\r\n\t\treturn t * t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\r\n\t\t\tCubicBezierP3( t, p3 );\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CubicBezierCurve';\r\n\r\n\t\tthis.v0 = v0 || new Vector2();\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\t\tthis.v3 = v3 || new Vector2();\r\n\r\n\t}\r\n\r\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\r\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\r\n\r\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\r\n\r\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\t\tpoint.set(\r\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\t\tthis.v3.copy( source.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\t\tdata.v3 = this.v3.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\t\tthis.v3.fromArray( json.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CubicBezierCurve3';\r\n\r\n\t\tthis.v0 = v0 || new Vector3();\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\t\tthis.v3 = v3 || new Vector3();\r\n\r\n\t}\r\n\r\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\r\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\r\n\r\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\r\n\r\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\t\tpoint.set(\r\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\r\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\t\tthis.v3.copy( source.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\t\tdata.v3 = this.v3.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\t\tthis.v3.fromArray( json.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction LineCurve( v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'LineCurve';\r\n\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\r\n\t}\r\n\r\n\tLineCurve.prototype = Object.create( Curve.prototype );\r\n\tLineCurve.prototype.constructor = LineCurve;\r\n\r\n\tLineCurve.prototype.isLineCurve = true;\r\n\r\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tpoint.copy( this.v2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\r\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\r\n\r\n\t\treturn this.getPoint( u, optionalTarget );\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\r\n\r\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\r\n\t\treturn tangent.normalize();\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction LineCurve3( v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'LineCurve3';\r\n\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\r\n\t}\r\n\r\n\tLineCurve3.prototype = Object.create( Curve.prototype );\r\n\tLineCurve3.prototype.constructor = LineCurve3;\r\n\r\n\tLineCurve3.prototype.isLineCurve3 = true;\r\n\r\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tpoint.copy( this.v2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\r\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\r\n\r\n\t\treturn this.getPoint( u, optionalTarget );\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'QuadraticBezierCurve';\r\n\r\n\t\tthis.v0 = v0 || new Vector2();\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\r\n\t}\r\n\r\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\r\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\r\n\r\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\r\n\r\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\t\tpoint.set(\r\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'QuadraticBezierCurve3';\r\n\r\n\t\tthis.v0 = v0 || new Vector3();\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\r\n\t}\r\n\r\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\r\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\r\n\r\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\r\n\r\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\t\tpoint.set(\r\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\r\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'SplineCurve';\r\n\r\n\t\tthis.points = points || [];\r\n\r\n\t}\r\n\r\n\tSplineCurve.prototype = Object.create( Curve.prototype );\r\n\tSplineCurve.prototype.constructor = SplineCurve;\r\n\r\n\tSplineCurve.prototype.isSplineCurve = true;\r\n\r\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar p = ( points.length - 1 ) * t;\r\n\r\n\t\tvar intPoint = Math.floor( p );\r\n\t\tvar weight = p - intPoint;\r\n\r\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\t\tvar p1 = points[ intPoint ];\r\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\t\tpoint.set(\r\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\r\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\r\n\tvar Curves = /*#__PURE__*/Object.freeze({\r\n\t\tArcCurve: ArcCurve,\r\n\t\tCatmullRomCurve3: CatmullRomCurve3,\r\n\t\tCubicBezierCurve: CubicBezierCurve,\r\n\t\tCubicBezierCurve3: CubicBezierCurve3,\r\n\t\tEllipseCurve: EllipseCurve,\r\n\t\tLineCurve: LineCurve,\r\n\t\tLineCurve3: LineCurve3,\r\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\r\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\r\n\t\tSplineCurve: SplineCurve\r\n\t});\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t **/\r\n\r\n\t/**************************************************************\r\n\t *\tCurved Path - a curve path is simply a array of connected\r\n\t *  curves, but retains the api of a curve\r\n\t **************************************************************/\r\n\r\n\tfunction CurvePath() {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CurvePath';\r\n\r\n\t\tthis.curves = [];\r\n\t\tthis.autoClose = false; // Automatically closes the path\r\n\r\n\t}\r\n\r\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\r\n\r\n\t\tconstructor: CurvePath,\r\n\r\n\t\tadd: function ( curve ) {\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t},\r\n\r\n\t\tclosePath: function () {\r\n\r\n\t\t\t// Add a line curve if start and end of lines are not connected\r\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\r\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\r\n\r\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// To get accurate point with reference to\r\n\t\t// entire path distance at time t,\r\n\t\t// following has to be done:\r\n\r\n\t\t// 1. Length of each sub path have to be known\r\n\t\t// 2. Locate and identify type of curve\r\n\t\t// 3. Get t for the curve\r\n\t\t// 4. Return curve.getPointAt(t')\r\n\r\n\t\tgetPoint: function ( t ) {\r\n\r\n\t\t\tvar d = t * this.getLength();\r\n\t\t\tvar curveLengths = this.getCurveLengths();\r\n\t\t\tvar i = 0;\r\n\r\n\t\t\t// To think about boundaries points.\r\n\r\n\t\t\twhile ( i < curveLengths.length ) {\r\n\r\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\t\t\tvar curve = this.curves[ i ];\r\n\r\n\t\t\t\t\tvar segmentLength = curve.getLength();\r\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\r\n\r\n\t\t\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n\t\t},\r\n\r\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n\t\t// getPoint() depends on getLength\r\n\r\n\t\tgetLength: function () {\r\n\r\n\t\t\tvar lens = this.getCurveLengths();\r\n\t\t\treturn lens[ lens.length - 1 ];\r\n\r\n\t\t},\r\n\r\n\t\t// cacheLengths must be recalculated.\r\n\t\tupdateArcLengths: function () {\r\n\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\tthis.cacheLengths = null;\r\n\t\t\tthis.getCurveLengths();\r\n\r\n\t\t},\r\n\r\n\t\t// Compute lengths and cache them\r\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\n\t\tgetCurveLengths: function () {\r\n\r\n\t\t\t// We use cache values if curves and cache array are same length\r\n\r\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\r\n\t\t\t\treturn this.cacheLengths;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Get length of sub-curve\r\n\t\t\t// Push sums into cached array\r\n\r\n\t\t\tvar lengths = [], sums = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tsums += this.curves[ i ].getLength();\r\n\t\t\t\tlengths.push( sums );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cacheLengths = lengths;\r\n\r\n\t\t\treturn lengths;\r\n\r\n\t\t},\r\n\r\n\t\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) divisions = 40;\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.autoClose ) {\r\n\r\n\t\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\tgetPoints: function ( divisions ) {\r\n\r\n\t\t\tdivisions = divisions || 12;\r\n\r\n\t\t\tvar points = [], last;\r\n\r\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\r\n\r\n\t\t\t\tvar curve = curves[ i ];\r\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\r\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\r\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\r\n\t\t\t\t\t\t\t: divisions;\r\n\r\n\t\t\t\tvar pts = curve.getPoints( resolution );\r\n\r\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\r\n\r\n\t\t\t\t\tvar point = pts[ j ];\r\n\r\n\t\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\r\n\r\n\t\t\t\t\tpoints.push( point );\r\n\t\t\t\t\tlast = point;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = source.curves[ i ];\r\n\r\n\t\t\t\tthis.curves.push( curve.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.autoClose = source.autoClose;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.autoClose = this.autoClose;\r\n\t\t\tdata.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = this.curves[ i ];\r\n\t\t\t\tdata.curves.push( curve.toJSON() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.autoClose = json.autoClose;\r\n\t\t\tthis.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = json.curves[ i ];\r\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Creates free form 2d path using series of points, lines or curves.\r\n\t **/\r\n\r\n\tfunction Path( points ) {\r\n\r\n\t\tCurvePath.call( this );\r\n\r\n\t\tthis.type = 'Path';\r\n\r\n\t\tthis.currentPoint = new Vector2();\r\n\r\n\t\tif ( points ) {\r\n\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\r\n\r\n\t\tconstructor: Path,\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\r\n\r\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tmoveTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\r\n\r\n\t\t},\r\n\r\n\t\tlineTo: function ( x, y ) {\r\n\r\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( x, y );\r\n\r\n\t\t},\r\n\r\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\t\tvar curve = new QuadraticBezierCurve(\r\n\t\t\t\tthis.currentPoint.clone(),\r\n\t\t\t\tnew Vector2( aCPx, aCPy ),\r\n\t\t\t\tnew Vector2( aX, aY )\r\n\t\t\t);\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\t},\r\n\r\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\t\tvar curve = new CubicBezierCurve(\r\n\t\t\t\tthis.currentPoint.clone(),\r\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\r\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\r\n\t\t\t\tnew Vector2( aX, aY )\r\n\t\t\t);\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\t},\r\n\r\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\r\n\r\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\r\n\r\n\t\t\tvar curve = new SplineCurve( npts );\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\r\n\r\n\t\t},\r\n\r\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\t\tvar x0 = this.currentPoint.x;\r\n\t\t\tvar y0 = this.currentPoint.y;\r\n\r\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\t},\r\n\r\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\t},\r\n\r\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\t\tvar x0 = this.currentPoint.x;\r\n\t\t\tvar y0 = this.currentPoint.y;\r\n\r\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\t},\r\n\r\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\t\tif ( this.curves.length > 0 ) {\r\n\r\n\t\t\t\t// if a previous curve is present, attempt to join\r\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\r\n\r\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\r\n\r\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tvar lastPoint = curve.getPoint( 1 );\r\n\t\t\tthis.currentPoint.copy( lastPoint );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tCurvePath.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.currentPoint.copy( source.currentPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Defines a 2d shape plane using paths.\r\n\t **/\r\n\r\n\t// STEP 1 Create a path.\r\n\t// STEP 2 Turn path into shape.\r\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n\t// STEP 3a - Extract points from each shape, turn to vertices\r\n\t// STEP 3b - Triangulate each shape, add faces.\r\n\r\n\tfunction Shape( points ) {\r\n\r\n\t\tPath.call( this, points );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.type = 'Shape';\r\n\r\n\t\tthis.holes = [];\r\n\r\n\t}\r\n\r\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\r\n\r\n\t\tconstructor: Shape,\r\n\r\n\t\tgetPointsHoles: function ( divisions ) {\r\n\r\n\t\t\tvar holesPts = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn holesPts;\r\n\r\n\t\t},\r\n\r\n\t\t// get points of shape and holes (keypoints based on segments parameter)\r\n\r\n\t\textractPoints: function ( divisions ) {\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tPath.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = source.holes[ i ];\r\n\r\n\t\t\t\tthis.holes.push( hole.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = Path.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = this.holes[ i ];\r\n\t\t\t\tdata.holes.push( hole.toJSON() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tPath.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.uuid = json.uuid;\r\n\t\t\tthis.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = json.holes[ i ];\r\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Light( color, intensity ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Light';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\r\n\r\n\t\tthis.receiveShadow = undefined;\r\n\r\n\t}\r\n\r\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Light,\r\n\r\n\t\tisLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.color.copy( source.color );\r\n\t\t\tthis.intensity = source.intensity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.color = this.color.getHex();\r\n\t\t\tdata.object.intensity = this.intensity;\r\n\r\n\t\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\r\n\r\n\t\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\r\n\t\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\r\n\t\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\r\n\t\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\r\n\r\n\t\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\r\n\r\n\t\tLight.call( this, skyColor, intensity );\r\n\r\n\t\tthis.type = 'HemisphereLight';\r\n\r\n\t\tthis.castShadow = undefined;\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.groundColor = new Color( groundColor );\r\n\r\n\t}\r\n\r\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: HemisphereLight,\r\n\r\n\t\tisHemisphereLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.groundColor.copy( source.groundColor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction LightShadow( camera ) {\r\n\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.bias = 0;\r\n\t\tthis.radius = 1;\r\n\r\n\t\tthis.mapSize = new Vector2( 512, 512 );\r\n\r\n\t\tthis.map = null;\r\n\t\tthis.matrix = new Matrix4();\r\n\r\n\t}\r\n\r\n\tObject.assign( LightShadow.prototype, {\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.camera = source.camera.clone();\r\n\r\n\t\t\tthis.bias = source.bias;\r\n\t\t\tthis.radius = source.radius;\r\n\r\n\t\t\tthis.mapSize.copy( source.mapSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar object = {};\r\n\r\n\t\t\tif ( this.bias !== 0 ) object.bias = this.bias;\r\n\t\t\tif ( this.radius !== 1 ) object.radius = this.radius;\r\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\r\n\r\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\r\n\t\t\tdelete object.camera.matrix;\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction SpotLightShadow() {\r\n\r\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\r\n\r\n\t}\r\n\r\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: SpotLightShadow,\r\n\r\n\t\tisSpotLightShadow: true,\r\n\r\n\t\tupdate: function ( light ) {\r\n\r\n\t\t\tvar camera = this.camera;\r\n\r\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\r\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\r\n\t\t\tvar far = light.distance || camera.far;\r\n\r\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\r\n\r\n\t\t\t\tcamera.fov = fov;\r\n\t\t\t\tcamera.aspect = aspect;\r\n\t\t\t\tcamera.far = far;\r\n\t\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'SpotLight';\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tObject.defineProperty( this, 'power', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\treturn this.intensity * Math.PI;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( power ) {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\tthis.intensity = power / Math.PI;\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\r\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\t\tthis.shadow = new SpotLightShadow();\r\n\r\n\t}\r\n\r\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: SpotLight,\r\n\r\n\t\tisSpotLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.distance = source.distance;\r\n\t\t\tthis.angle = source.angle;\r\n\t\t\tthis.penumbra = source.penumbra;\r\n\t\t\tthis.decay = source.decay;\r\n\r\n\t\t\tthis.target = source.target.clone();\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction PointLight( color, intensity, distance, decay ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'PointLight';\r\n\r\n\t\tObject.defineProperty( this, 'power', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\treturn this.intensity * 4 * Math.PI;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( power ) {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\t\tthis.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\r\n\r\n\t}\r\n\r\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: PointLight,\r\n\r\n\t\tisPointLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.distance = source.distance;\r\n\t\t\tthis.decay = source.decay;\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction DirectionalLightShadow( ) {\r\n\r\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\r\n\r\n\t}\r\n\r\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: DirectionalLightShadow\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction DirectionalLight( color, intensity ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'DirectionalLight';\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tthis.shadow = new DirectionalLightShadow();\r\n\r\n\t}\r\n\r\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: DirectionalLight,\r\n\r\n\t\tisDirectionalLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.target = source.target.clone();\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AmbientLight( color, intensity ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'AmbientLight';\r\n\r\n\t\tthis.castShadow = undefined;\r\n\r\n\t}\r\n\r\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: AmbientLight,\r\n\r\n\t\tisAmbientLight: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t */\r\n\r\n\tfunction RectAreaLight( color, intensity, width, height ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'RectAreaLight';\r\n\r\n\t\tthis.width = ( width !== undefined ) ? width : 10;\r\n\t\tthis.height = ( height !== undefined ) ? height : 10;\r\n\r\n\t}\r\n\r\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: RectAreaLight,\r\n\r\n\t\tisRectAreaLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.width = source.width;\r\n\t\t\tthis.height = source.height;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.width = this.width;\r\n\t\t\tdata.object.height = this.height;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\r\n\tvar AnimationUtils = {\r\n\r\n\t\t// same as Array.prototype.slice, but also works on typed arrays\r\n\t\tarraySlice: function ( array, from, to ) {\r\n\r\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\r\n\r\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\r\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\r\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array.slice( from, to );\r\n\r\n\t\t},\r\n\r\n\t\t// converts an array to a specific type\r\n\t\tconvertArray: function ( array, type, forceClone ) {\r\n\r\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\r\n\t\t\t\t\t! forceClone && array.constructor === type ) return array;\r\n\r\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\r\n\r\n\t\t\t\treturn new type( array ); // create typed array\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\r\n\r\n\t\t},\r\n\r\n\t\tisTypedArray: function ( object ) {\r\n\r\n\t\t\treturn ArrayBuffer.isView( object ) &&\r\n\t\t\t\t\t! ( object instanceof DataView );\r\n\r\n\t\t},\r\n\r\n\t\t// returns an array by which times and values can be sorted\r\n\t\tgetKeyframeOrder: function ( times ) {\r\n\r\n\t\t\tfunction compareTime( i, j ) {\r\n\r\n\t\t\t\treturn times[ i ] - times[ j ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar n = times.length;\r\n\t\t\tvar result = new Array( n );\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\r\n\r\n\t\t\tresult.sort( compareTime );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\r\n\t\tsortedArray: function ( values, stride, order ) {\r\n\r\n\t\t\tvar nValues = values.length;\r\n\t\t\tvar result = new values.constructor( nValues );\r\n\r\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\r\n\r\n\t\t\t\tvar srcOffset = order[ i ] * stride;\r\n\r\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// function for parsing AOS keyframe formats\r\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\r\n\r\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\r\n\r\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( key === undefined ) return; // no data\r\n\r\n\t\t\tvar value = key[ valuePropertyName ];\r\n\t\t\tif ( value === undefined ) return; // no data\r\n\r\n\t\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t} else if ( value.toArray !== undefined ) {\r\n\r\n\t\t\t\t// ...assume THREE.Math-ish\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalue.toArray( values, values.length );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// otherwise push as-is\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalues.push( value );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Abstract base class of interpolants over parametric samples.\r\n\t *\r\n\t * The parameter domain is one dimensional, typically the time or a path\r\n\t * along a curve defined by the data.\r\n\t *\r\n\t * The sample values can have any dimensionality and derived classes may\r\n\t * apply special interpretations to the data.\r\n\t *\r\n\t * This class provides the interval seek in a Template Method, deferring\r\n\t * the actual interpolation to derived classes.\r\n\t *\r\n\t * Time complexity is O(1) for linear access crossing at most two points\r\n\t * and O(log N) for random access, where N is the number of positions.\r\n\t *\r\n\t * References:\r\n\t *\r\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tthis.parameterPositions = parameterPositions;\r\n\t\tthis._cachedIndex = 0;\r\n\r\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\t\tthis.sampleValues = sampleValues;\r\n\t\tthis.valueSize = sampleSize;\r\n\r\n\t}\r\n\r\n\tObject.assign( Interpolant.prototype, {\r\n\r\n\t\tevaluate: function ( t ) {\r\n\r\n\t\t\tvar pp = this.parameterPositions,\r\n\t\t\t\ti1 = this._cachedIndex,\r\n\r\n\t\t\t\tt1 = pp[ i1 ],\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\tvalidate_interval: {\r\n\r\n\t\t\t\tseek: {\r\n\r\n\t\t\t\t\tvar right;\r\n\r\n\t\t\t\t\tlinear_scan: {\r\n\r\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\r\n\t\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t\t//-\r\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\r\n\r\n\t\t\t\t\t\t\t\t\t// after end\r\n\r\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\r\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\r\n\t\t\t\t\t\t\t// looping?\r\n\r\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t < t1global ) {\r\n\r\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\t\tt0 = t1global;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// linear reverse scan\r\n\r\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// before start\r\n\r\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\r\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// the interval is valid\r\n\r\n\t\t\t\t\t\tbreak validate_interval;\r\n\r\n\t\t\t\t\t} // linear scan\r\n\r\n\t\t\t\t\t// binary search\r\n\r\n\t\t\t\t\twhile ( i1 < right ) {\r\n\r\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\r\n\r\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\r\n\t\t\t\t\t\t\tright = mid;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\ti1 = mid + 1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tt1 = pp[ i1 ];\r\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\t\t\t// check boundary cases, again\r\n\r\n\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // seek\r\n\r\n\t\t\t\tthis._cachedIndex = i1;\r\n\r\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\r\n\t\t\t} // validate_interval\r\n\r\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\r\n\t\t},\r\n\r\n\t\tsettings: null, // optional, subclass-specific settings structure\r\n\t\t// Note: The indirection allows central control of many interpolants.\r\n\r\n\t\t// --- Protected interface\r\n\r\n\t\tDefaultSettings_: {},\r\n\r\n\t\tgetSettings_: function () {\r\n\r\n\t\t\treturn this.settings || this.DefaultSettings_;\r\n\r\n\t\t},\r\n\r\n\t\tcopySampleValue_: function ( index ) {\r\n\r\n\t\t\t// copies a sample value to the result buffer\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\t\t\toffset = index * stride;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] = values[ offset + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// Template methods for derived classes:\r\n\r\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\r\n\r\n\t\t\tthrow new Error( 'call to abstract method' );\r\n\t\t\t// implementations shall return this.resultBuffer\r\n\r\n\t\t},\r\n\r\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\r\n\r\n\t\t\t// empty\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\r\n\tObject.assign( Interpolant.prototype, {\r\n\r\n\t\t//( 0, t, t0 ), returns this.resultBuffer\r\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\r\n\r\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\r\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Fast and simple cubic spline interpolant.\r\n\t *\r\n\t * It was derived from a Hermitian construction setting the first derivative\r\n\t * at each sample position to the linear slope between neighboring positions\r\n\t * over their parameter interval.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t\tthis._weightPrev = - 0;\r\n\t\tthis._offsetPrev = - 0;\r\n\t\tthis._weightNext = - 0;\r\n\t\tthis._offsetNext = - 0;\r\n\r\n\t}\r\n\r\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: CubicInterpolant,\r\n\r\n\t\tDefaultSettings_: {\r\n\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\r\n\t\t},\r\n\r\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\r\n\r\n\t\t\tvar pp = this.parameterPositions,\r\n\t\t\t\tiPrev = i1 - 2,\r\n\t\t\t\tiNext = i1 + 1,\r\n\r\n\t\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\t\ttNext = pp[ iNext ];\r\n\r\n\t\t\tif ( tPrev === undefined ) {\r\n\r\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\r\n\t\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\t\ttPrev = t1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tNext === undefined ) {\r\n\r\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\r\n\t\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\t\ttNext = t0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\t\tstride = this.valueSize;\r\n\r\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\t\tthis._offsetPrev = iPrev * stride;\r\n\t\t\tthis._offsetNext = iNext * stride;\r\n\r\n\t\t},\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\r\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\t\tpp = p * p,\r\n\t\t\t\tppp = pp * p;\r\n\r\n\t\t\t// evaluate polynomials\r\n\r\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\r\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\r\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\r\n\t\t\tvar sN = wN * ppp - wN * pp;\r\n\r\n\t\t\t// combine data linearly\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] =\r\n\t\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\t\tsN * values[ oN + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: LinearInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toffset1 = i1 * stride,\r\n\t\t\t\toffset0 = offset1 - stride,\r\n\r\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\t\tweight0 = 1 - weight1;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] =\r\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Interpolant that evaluates to the sample value at the position preceeding\r\n\t * the parameter.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: DiscreteInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\r\n\r\n\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A timed sequence of keyframes for a specific property.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\r\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\r\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\r\n\r\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\r\n\r\n\t}\r\n\r\n\t// Static methods\r\n\r\n\tObject.assign( KeyframeTrack, {\r\n\r\n\t\t// Serialization (in static context, because of constructor invocation\r\n\t\t// and automatic invocation of .toJSON):\r\n\r\n\t\ttoJSON: function ( track ) {\r\n\r\n\t\t\tvar trackType = track.constructor;\r\n\r\n\t\t\tvar json;\r\n\r\n\t\t\t// derived classes can define a static toJSON method\r\n\t\t\tif ( trackType.toJSON !== undefined ) {\r\n\r\n\t\t\t\tjson = trackType.toJSON( track );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// by default, we assume the data can be serialized as-is\r\n\t\t\t\tjson = {\r\n\r\n\t\t\t\t\t'name': track.name,\r\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\r\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar interpolation = track.getInterpolation();\r\n\r\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\tjson.interpolation = interpolation;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tjson.type = track.ValueTypeName; // mandatory\r\n\r\n\t\t\treturn json;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( KeyframeTrack.prototype, {\r\n\r\n\t\tconstructor: KeyframeTrack,\r\n\r\n\t\tTimeBufferType: Float32Array,\r\n\r\n\t\tValueBufferType: Float32Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateLinear,\r\n\r\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\r\n\r\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\r\n\r\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\r\n\r\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tsetInterpolation: function ( interpolation ) {\r\n\r\n\t\t\tvar factoryMethod;\r\n\r\n\t\t\tswitch ( interpolation ) {\r\n\r\n\t\t\t\tcase InterpolateDiscrete:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase InterpolateLinear:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase InterpolateSmooth:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( factoryMethod === undefined ) {\r\n\r\n\t\t\t\tvar message = \"unsupported interpolation for \" +\r\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\r\n\r\n\t\t\t\tif ( this.createInterpolant === undefined ) {\r\n\r\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\r\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.createInterpolant = factoryMethod;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetInterpolation: function () {\r\n\r\n\t\t\tswitch ( this.createInterpolant ) {\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\r\n\r\n\t\t\t\t\treturn InterpolateDiscrete;\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\r\n\r\n\t\t\t\t\treturn InterpolateLinear;\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\r\n\r\n\t\t\t\t\treturn InterpolateSmooth;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetValueSize: function () {\r\n\r\n\t\t\treturn this.values.length / this.times.length;\r\n\r\n\t\t},\r\n\r\n\t\t// move all keyframes either forwards or backwards in time\r\n\t\tshift: function ( timeOffset ) {\r\n\r\n\t\t\tif ( timeOffset !== 0.0 ) {\r\n\r\n\t\t\t\tvar times = this.times;\r\n\r\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\ttimes[ i ] += timeOffset;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\t\tscale: function ( timeScale ) {\r\n\r\n\t\t\tif ( timeScale !== 1.0 ) {\r\n\r\n\t\t\t\tvar times = this.times;\r\n\r\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\ttimes[ i ] *= timeScale;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\t\ttrim: function ( startTime, endTime ) {\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tnKeys = times.length,\r\n\t\t\t\tfrom = 0,\r\n\t\t\t\tto = nKeys - 1;\r\n\r\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\r\n\r\n\t\t\t\t++ from;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\r\n\r\n\t\t\t\t-- to;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t++ to; // inclusive -> exclusive bound\r\n\r\n\t\t\tif ( from !== 0 || to !== nKeys ) {\r\n\r\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\r\n\t\t\t\tif ( from >= to ) to = Math.max( to, 1 ), from = to - 1;\r\n\r\n\t\t\t\tvar stride = this.getValueSize();\r\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\r\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\t\tvalidate: function () {\r\n\r\n\t\t\tvar valid = true;\r\n\r\n\t\t\tvar valueSize = this.getValueSize();\r\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\r\n\t\t\t\tvalid = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tvalues = this.values,\r\n\r\n\t\t\t\tnKeys = times.length;\r\n\r\n\t\t\tif ( nKeys === 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\r\n\t\t\t\tvalid = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar prevTime = null;\r\n\r\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\r\n\r\n\t\t\t\tvar currTime = times[ i ];\r\n\r\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprevTime = currTime;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( values !== undefined ) {\r\n\r\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tvar value = values[ i ];\r\n\r\n\t\t\t\t\t\tif ( isNaN( value ) ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\r\n\t\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn valid;\r\n\r\n\t\t},\r\n\r\n\t\t// removes equivalent sequential keys as common in morph target sequences\r\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\t\toptimize: function () {\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tvalues = this.values,\r\n\t\t\t\tstride = this.getValueSize(),\r\n\r\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\r\n\r\n\t\t\t\twriteIndex = 1,\r\n\t\t\t\tlastIndex = times.length - 1;\r\n\r\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\r\n\r\n\t\t\t\tvar keep = false;\r\n\r\n\t\t\t\tvar time = times[ i ];\r\n\t\t\t\tvar timeNext = times[ i + 1 ];\r\n\r\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\r\n\r\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\r\n\r\n\t\t\t\t\tif ( ! smoothInterpolation ) {\r\n\r\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\r\n\r\n\t\t\t\t\t\tvar offset = i * stride,\r\n\t\t\t\t\t\t\toffsetP = offset - stride,\r\n\t\t\t\t\t\t\toffsetN = offset + stride;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\r\n\r\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\r\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\r\n\r\n\t\t\t\t\t\t\t\tkeep = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tkeep = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// in-place compaction\r\n\r\n\t\t\t\tif ( keep ) {\r\n\r\n\t\t\t\t\tif ( i !== writeIndex ) {\r\n\r\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\r\n\r\n\t\t\t\t\t\tvar readOffset = i * stride,\r\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// flush last keyframe (compaction looks ahead)\r\n\r\n\t\t\tif ( lastIndex > 0 ) {\r\n\r\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\r\n\r\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( writeIndex !== times.length ) {\r\n\r\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\r\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of Boolean keyframe values.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction BooleanKeyframeTrack( name, times, values ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values );\r\n\r\n\t}\r\n\r\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: BooleanKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'bool',\r\n\t\tValueBufferType: Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateDiscrete,\r\n\r\n\t\tInterpolantFactoryMethodLinear: undefined,\r\n\t\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t\t// Note: Actually this track could have a optimized / compressed\r\n\t\t// representation of a single value and a custom interpolant that\r\n\t\t// computes \"firstValue ^ isOdd( index )\".\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of keyframe values that represent color.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: ColorKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'color'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t\t// Note: Very basic implementation and nothing special yet.\r\n\t\t// However, this is the place for color space parameterization.\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of numeric keyframe values.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: NumberKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'number'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Spherical linear unit quaternion interpolant.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: QuaternionLinearInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toffset = i1 * stride,\r\n\r\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\r\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\r\n\r\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of quaternion keyframe values.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: QuaternionKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'quaternion',\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\tDefaultInterpolation: InterpolateLinear,\r\n\r\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\r\n\r\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track that interpolates Strings\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: StringKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'string',\r\n\t\tValueBufferType: Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateDiscrete,\r\n\r\n\t\tInterpolantFactoryMethodLinear: undefined,\r\n\r\n\t\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of vectored keyframe values.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: VectorKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'vector'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Reusable set of Tracks that represent an animation.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\r\n\tfunction AnimationClip( name, duration, tracks ) {\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.tracks = tracks;\r\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\t// this means it should figure out its duration by scanning the tracks\r\n\t\tif ( this.duration < 0 ) {\r\n\r\n\t\t\tthis.resetDuration();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTrackTypeForValueTypeName( typeName ) {\r\n\r\n\t\tswitch ( typeName.toLowerCase() ) {\r\n\r\n\t\t\tcase 'scalar':\r\n\t\t\tcase 'double':\r\n\t\t\tcase 'float':\r\n\t\t\tcase 'number':\r\n\t\t\tcase 'integer':\r\n\r\n\t\t\t\treturn NumberKeyframeTrack;\r\n\r\n\t\t\tcase 'vector':\r\n\t\t\tcase 'vector2':\r\n\t\t\tcase 'vector3':\r\n\t\t\tcase 'vector4':\r\n\r\n\t\t\t\treturn VectorKeyframeTrack;\r\n\r\n\t\t\tcase 'color':\r\n\r\n\t\t\t\treturn ColorKeyframeTrack;\r\n\r\n\t\t\tcase 'quaternion':\r\n\r\n\t\t\t\treturn QuaternionKeyframeTrack;\r\n\r\n\t\t\tcase 'bool':\r\n\t\t\tcase 'boolean':\r\n\r\n\t\t\t\treturn BooleanKeyframeTrack;\r\n\r\n\t\t\tcase 'string':\r\n\r\n\t\t\t\treturn StringKeyframeTrack;\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\r\n\r\n\t}\r\n\r\n\tfunction parseKeyframeTrack( json ) {\r\n\r\n\t\tif ( json.type === undefined ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\r\n\r\n\t\t}\r\n\r\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\r\n\r\n\t\tif ( json.times === undefined ) {\r\n\r\n\t\t\tvar times = [], values = [];\r\n\r\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\r\n\r\n\t\t\tjson.times = times;\r\n\t\t\tjson.values = values;\r\n\r\n\t\t}\r\n\r\n\t\t// derived classes can define a static parse method\r\n\t\tif ( trackType.parse !== undefined ) {\r\n\r\n\t\t\treturn trackType.parse( json );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we assume a constructor compatible with the base\r\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationClip, {\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar tracks = [],\r\n\t\t\t\tjsonTracks = json.tracks,\r\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\r\n\r\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( clip ) {\r\n\r\n\t\t\tvar tracks = [],\r\n\t\t\t\tclipTracks = clip.tracks;\r\n\r\n\t\t\tvar json = {\r\n\r\n\t\t\t\t'name': clip.name,\r\n\t\t\t\t'duration': clip.duration,\r\n\t\t\t\t'tracks': tracks,\r\n\t\t\t\t'uuid': clip.uuid\r\n\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn json;\r\n\r\n\t\t},\r\n\r\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\r\n\r\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\ttimes.push(\r\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\r\n\t\t\t\t\ti,\r\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\r\n\r\n\t\t\t\tvalues.push( 0, 1, 0 );\r\n\r\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\r\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\r\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\r\n\r\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\r\n\t\t\t\t// last frame as well for perfect loop.\r\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\r\n\r\n\t\t\t\t\ttimes.push( numMorphTargets );\r\n\t\t\t\t\tvalues.push( values[ 0 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttracks.push(\r\n\t\t\t\t\tnew NumberKeyframeTrack(\r\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\r\n\t\t\t\t\t\ttimes, values\r\n\t\t\t\t\t).scale( 1.0 / fps ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( name, - 1, tracks );\r\n\r\n\t\t},\r\n\r\n\t\tfindByName: function ( objectOrClipArray, name ) {\r\n\r\n\t\t\tvar clipArray = objectOrClipArray;\r\n\r\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\r\n\r\n\t\t\t\tvar o = objectOrClipArray;\r\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\r\n\r\n\t\t\t\tif ( clipArray[ i ].name === name ) {\r\n\r\n\t\t\t\t\treturn clipArray[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\r\n\r\n\t\t\tvar animationToMorphTargets = {};\r\n\r\n\t\t\t// tested with https://regex101.com/ on trick sequences\r\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\r\n\t\t\t// sort morph target names into animation groups based\r\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\r\n\r\n\t\t\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\t\t\tvar name = parts[ 1 ];\r\n\r\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\r\n\t\t\t\t\tif ( ! animationMorphTargets ) {\r\n\r\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar clips = [];\r\n\r\n\t\t\tfor ( var name in animationToMorphTargets ) {\r\n\r\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn clips;\r\n\r\n\t\t},\r\n\r\n\t\t// parse the animation.hierarchy format\r\n\t\tparseAnimation: function ( animation, bones ) {\r\n\r\n\t\t\tif ( ! animation ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\r\n\r\n\t\t\t\t// only return track if there are actually keys.\r\n\t\t\t\tif ( animationKeys.length !== 0 ) {\r\n\r\n\t\t\t\t\tvar times = [];\r\n\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\r\n\r\n\t\t\t\t\t// empty keys are filtered out, so check again\r\n\t\t\t\t\tif ( times.length !== 0 ) {\r\n\r\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tvar clipName = animation.name || 'default';\r\n\t\t\t// automatic length determination in AnimationClip.\r\n\t\t\tvar duration = animation.length || - 1;\r\n\t\t\tvar fps = animation.fps || 30;\r\n\r\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\r\n\r\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\r\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\r\n\r\n\t\t\t\t// skip empty tracks\r\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\r\n\r\n\t\t\t\t// process morph targets\r\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\r\n\r\n\t\t\t\t\t// figure out all morph targets used in this track\r\n\t\t\t\t\tvar morphTargetNames = {};\r\n\r\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\r\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// create a track for each morph target with all zero\r\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\r\n\t\t\t\t\t// the morphTarget is named.\r\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\r\n\r\n\t\t\t\t\t\tvar times = [];\r\n\t\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\r\n\r\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\r\n\r\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\r\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// ...assume skeletal animation\r\n\r\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\r\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\r\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\r\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tracks.length === 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\r\n\r\n\t\t\treturn clip;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( AnimationClip.prototype, {\r\n\r\n\t\tresetDuration: function () {\r\n\r\n\t\t\tvar tracks = this.tracks, duration = 0;\r\n\r\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar track = this.tracks[ i ];\r\n\r\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.duration = duration;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttrim: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tvalidate: function () {\r\n\r\n\t\t\tvar valid = true;\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn valid;\r\n\r\n\t\t},\r\n\r\n\t\toptimize: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tthis.tracks[ i ].optimize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction MaterialLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\t\tthis.textures = {};\r\n\r\n\t}\r\n\r\n\tObject.assign( MaterialLoader.prototype, {\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tsetTextures: function ( value ) {\r\n\r\n\t\t\tthis.textures = value;\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar textures = this.textures;\r\n\r\n\t\t\tfunction getTexture( name ) {\r\n\r\n\t\t\t\tif ( textures[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn textures[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar material = new Materials[ json.type ]();\r\n\r\n\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\r\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\r\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\r\n\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\r\n\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\r\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\r\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\r\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\r\n\t\t\tif ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;\r\n\t\t\tif ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;\r\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\r\n\t\t\tif ( json.fog !== undefined ) material.fog = json.fog;\r\n\t\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\r\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\r\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\r\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\r\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\r\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\r\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\r\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\r\n\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\r\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\r\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\r\n\t\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\r\n\t\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\r\n\r\n\t\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\r\n\r\n\t\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\r\n\t\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\r\n\t\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\r\n\t\t\tif ( json.scale !== undefined ) material.scale = json.scale;\r\n\r\n\t\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\r\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\r\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\r\n\r\n\t\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\r\n\t\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\r\n\t\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\r\n\r\n\t\t\tif ( json.visible !== undefined ) material.visible = json.visible;\r\n\t\t\tif ( json.userData !== undefined ) material.userData = json.userData;\r\n\r\n\t\t\t// Shader Material\r\n\r\n\t\t\tif ( json.uniforms !== undefined ) {\r\n\r\n\t\t\t\tfor ( var name in json.uniforms ) {\r\n\r\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\r\n\r\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\r\n\r\n\t\t\t\t\tswitch ( uniform.type ) {\r\n\r\n\t\t\t\t\t\tcase 't':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'c':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v2':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v3':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v4':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'm4':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.defines !== undefined ) material.defines = json.defines;\r\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\r\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\r\n\r\n\t\t\t// Deprecated\r\n\r\n\t\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\r\n\r\n\t\t\t// for PointsMaterial\r\n\r\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\r\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\r\n\r\n\t\t\t// maps\r\n\r\n\t\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\r\n\r\n\t\t\tif ( json.alphaMap !== undefined ) {\r\n\r\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\r\n\t\t\t\tmaterial.transparent = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\r\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\r\n\r\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\r\n\t\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\r\n\t\t\tif ( json.normalScale !== undefined ) {\r\n\r\n\t\t\t\tvar normalScale = json.normalScale;\r\n\r\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\r\n\r\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\r\n\r\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\r\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\r\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\r\n\r\n\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\r\n\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\r\n\r\n\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\r\n\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\r\n\r\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\r\n\r\n\t\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\r\n\r\n\t\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\r\n\r\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\r\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\r\n\r\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\r\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\r\n\r\n\t\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction BufferGeometryLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t}\r\n\r\n\tObject.assign( BufferGeometryLoader.prototype, {\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\t\tvar index = json.data.index;\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\r\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = json.data.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\r\n\t\t\t\tgeometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\r\n\t\t\tif ( groups !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundingSphere = json.data.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== undefined ) {\r\n\r\n\t\t\t\tvar center = new Vector3();\r\n\r\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\r\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar TYPED_ARRAYS = {\r\n\t\tInt8Array: Int8Array,\r\n\t\tUint8Array: Uint8Array,\r\n\t\t// Workaround for IE11 pre KB2929437. See #11440\r\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\r\n\t\tInt16Array: Int16Array,\r\n\t\tUint16Array: Uint16Array,\r\n\t\tInt32Array: Int32Array,\r\n\t\tUint32Array: Uint32Array,\r\n\t\tFloat32Array: Float32Array,\r\n\t\tFloat64Array: Float64Array\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Loader() {}\r\n\r\n\tLoader.Handlers = {\r\n\r\n\t\thandlers: [],\r\n\r\n\t\tadd: function ( regex, loader ) {\r\n\r\n\t\t\tthis.handlers.push( regex, loader );\r\n\r\n\t\t},\r\n\r\n\t\tget: function ( file ) {\r\n\r\n\t\t\tvar handlers = this.handlers;\r\n\r\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\tvar regex = handlers[ i ];\r\n\t\t\t\tvar loader = handlers[ i + 1 ];\r\n\r\n\t\t\t\tif ( regex.test( file ) ) {\r\n\r\n\t\t\t\t\treturn loader;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tObject.assign( Loader.prototype, {\r\n\r\n\t\tcrossOrigin: 'anonymous',\r\n\r\n\t\tonLoadStart: function () {},\r\n\r\n\t\tonLoadProgress: function () {},\r\n\r\n\t\tonLoadComplete: function () {},\r\n\r\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\r\n\r\n\t\t\tvar array = [];\r\n\r\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\r\n\r\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tcreateMaterial: ( function () {\r\n\r\n\t\t\tvar BlendingMode = {\r\n\t\t\t\tNoBlending: NoBlending,\r\n\t\t\t\tNormalBlending: NormalBlending,\r\n\t\t\t\tAdditiveBlending: AdditiveBlending,\r\n\t\t\t\tSubtractiveBlending: SubtractiveBlending,\r\n\t\t\t\tMultiplyBlending: MultiplyBlending,\r\n\t\t\t\tCustomBlending: CustomBlending\r\n\t\t\t};\r\n\r\n\t\t\tvar color = new Color();\r\n\t\t\tvar textureLoader = new TextureLoader();\r\n\t\t\tvar materialLoader = new MaterialLoader();\r\n\r\n\t\t\treturn function createMaterial( m, texturePath, crossOrigin ) {\r\n\r\n\t\t\t\t// convert from old material format\r\n\r\n\t\t\t\tvar textures = {};\r\n\r\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\r\n\r\n\t\t\t\t\tvar fullPath = texturePath + path;\r\n\t\t\t\t\tvar loader = Loader.Handlers.get( fullPath );\r\n\r\n\t\t\t\t\tvar texture;\r\n\r\n\t\t\t\t\tif ( loader !== null ) {\r\n\r\n\t\t\t\t\t\ttexture = loader.load( fullPath );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\r\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( repeat !== undefined ) {\r\n\r\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\r\n\r\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;\r\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( wrap !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;\r\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;\r\n\r\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;\r\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( anisotropy !== undefined ) {\r\n\r\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar uuid = _Math.generateUUID();\r\n\r\n\t\t\t\t\ttextures[ uuid ] = texture;\r\n\r\n\t\t\t\t\treturn uuid;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tvar json = {\r\n\t\t\t\t\tuuid: _Math.generateUUID(),\r\n\t\t\t\t\ttype: 'MeshLambertMaterial'\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfor ( var name in m ) {\r\n\r\n\t\t\t\t\tvar value = m[ name ];\r\n\r\n\t\t\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\t\t\tcase 'DbgColor':\r\n\t\t\t\t\t\tcase 'DbgIndex':\r\n\t\t\t\t\t\tcase 'opticalDensity':\r\n\t\t\t\t\t\tcase 'illumination':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'DbgName':\r\n\t\t\t\t\t\t\tjson.name = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'blending':\r\n\t\t\t\t\t\t\tjson.blending = BlendingMode[ value ];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorAmbient':\r\n\t\t\t\t\t\tcase 'mapAmbient':\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorDiffuse':\r\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorSpecular':\r\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorEmissive':\r\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'specularCoef':\r\n\t\t\t\t\t\t\tjson.shininess = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'shading':\r\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\r\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\r\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapDiffuse':\r\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\r\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\r\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\r\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapEmissive':\r\n\t\t\t\t\t\t\tjson.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapEmissiveRepeat':\r\n\t\t\t\t\t\tcase 'mapEmissiveOffset':\r\n\t\t\t\t\t\tcase 'mapEmissiveWrap':\r\n\t\t\t\t\t\tcase 'mapEmissiveAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapLight':\r\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapLightRepeat':\r\n\t\t\t\t\t\tcase 'mapLightOffset':\r\n\t\t\t\t\t\tcase 'mapLightWrap':\r\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAO':\r\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAORepeat':\r\n\t\t\t\t\t\tcase 'mapAOOffset':\r\n\t\t\t\t\t\tcase 'mapAOWrap':\r\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapBump':\r\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapBumpScale':\r\n\t\t\t\t\t\t\tjson.bumpScale = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapBumpRepeat':\r\n\t\t\t\t\t\tcase 'mapBumpOffset':\r\n\t\t\t\t\t\tcase 'mapBumpWrap':\r\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapNormal':\r\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapNormalFactor':\r\n\t\t\t\t\t\t\tjson.normalScale = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapNormalRepeat':\r\n\t\t\t\t\t\tcase 'mapNormalOffset':\r\n\t\t\t\t\t\tcase 'mapNormalWrap':\r\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapSpecular':\r\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\r\n\t\t\t\t\t\tcase 'mapSpecularOffset':\r\n\t\t\t\t\t\tcase 'mapSpecularWrap':\r\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapMetalness':\r\n\t\t\t\t\t\t\tjson.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapMetalnessRepeat':\r\n\t\t\t\t\t\tcase 'mapMetalnessOffset':\r\n\t\t\t\t\t\tcase 'mapMetalnessWrap':\r\n\t\t\t\t\t\tcase 'mapMetalnessAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapRoughness':\r\n\t\t\t\t\t\t\tjson.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapRoughnessRepeat':\r\n\t\t\t\t\t\tcase 'mapRoughnessOffset':\r\n\t\t\t\t\t\tcase 'mapRoughnessWrap':\r\n\t\t\t\t\t\tcase 'mapRoughnessAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAlpha':\r\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\r\n\t\t\t\t\t\tcase 'mapAlphaOffset':\r\n\t\t\t\t\t\tcase 'mapAlphaWrap':\r\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'flipSided':\r\n\t\t\t\t\t\t\tjson.side = BackSide;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'doubleSided':\r\n\t\t\t\t\t\t\tjson.side = DoubleSide;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'transparency':\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\r\n\t\t\t\t\t\t\tjson.opacity = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'depthTest':\r\n\t\t\t\t\t\tcase 'depthWrite':\r\n\t\t\t\t\t\tcase 'colorWrite':\r\n\t\t\t\t\t\tcase 'opacity':\r\n\t\t\t\t\t\tcase 'reflectivity':\r\n\t\t\t\t\t\tcase 'transparent':\r\n\t\t\t\t\t\tcase 'visible':\r\n\t\t\t\t\t\tcase 'wireframe':\r\n\t\t\t\t\t\t\tjson[ name ] = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'vertexColors':\r\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = VertexColors;\r\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = FaceColors;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\r\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\r\n\r\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\r\n\r\n\t\t\t\tmaterialLoader.setTextures( textures );\r\n\r\n\t\t\t\treturn materialLoader.parse( json );\r\n\r\n\t\t\t};\r\n\r\n\t\t} )()\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Don McCurdy / https://www.donmccurdy.com\r\n\t */\r\n\r\n\tvar LoaderUtils = {\r\n\r\n\t\tdecodeText: function ( array ) {\r\n\r\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\r\n\r\n\t\t\t\treturn new TextDecoder().decode( array );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\r\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\r\n\r\n\t\t\tvar s = '';\r\n\r\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// Implicitly assumes little-endian.\r\n\t\t\t\ts += String.fromCharCode( array[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Merges multi-byte utf-8 characters.\r\n\t\t\treturn decodeURIComponent( escape( s ) );\r\n\r\n\t\t},\r\n\r\n\t\textractUrlBase: function ( url ) {\r\n\r\n\t\t\tvar index = url.lastIndexOf( '/' );\r\n\r\n\t\t\tif ( index === - 1 ) return './';\r\n\r\n\t\t\treturn url.substr( 0, index + 1 );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction JSONLoader( manager ) {\r\n\r\n\t\tif ( typeof manager === 'boolean' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\r\n\t\t\tmanager = undefined;\r\n\r\n\t\t}\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t\tthis.withCredentials = false;\r\n\r\n\t}\r\n\r\n\tObject.assign( JSONLoader.prototype, {\r\n\r\n\t\tcrossOrigin: 'anonymous',\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === 'string' ) ? this.texturePath : LoaderUtils.extractUrlBase( url );\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tvar json = JSON.parse( text );\r\n\t\t\t\tvar metadata = json.metadata;\r\n\r\n\t\t\t\tif ( metadata !== undefined ) {\r\n\r\n\t\t\t\t\tvar type = metadata.type;\r\n\r\n\t\t\t\t\tif ( type !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar object = scope.parse( json, texturePath );\r\n\t\t\t\tonLoad( object.geometry, object.materials );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\t\tthis.crossOrigin = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetTexturePath: function ( value ) {\r\n\r\n\t\t\tthis.texturePath = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tparse: ( function () {\r\n\r\n\t\t\tfunction parseModel( json, geometry ) {\r\n\r\n\t\t\t\tfunction isBitSet( value, position ) {\r\n\r\n\t\t\t\t\treturn value & ( 1 << position );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar i, j, fi,\r\n\r\n\t\t\t\t\toffset, zLength,\r\n\r\n\t\t\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\r\n\r\n\t\t\t\t\ttype,\r\n\t\t\t\t\tisQuad,\r\n\t\t\t\t\thasMaterial,\r\n\t\t\t\t\thasFaceVertexUv,\r\n\t\t\t\t\thasFaceNormal, hasFaceVertexNormal,\r\n\t\t\t\t\thasFaceColor, hasFaceVertexColor,\r\n\r\n\t\t\t\t\tvertex, face, faceA, faceB, hex, normal,\r\n\r\n\t\t\t\t\tuvLayer, uv, u, v,\r\n\r\n\t\t\t\t\tfaces = json.faces,\r\n\t\t\t\t\tvertices = json.vertices,\r\n\t\t\t\t\tnormals = json.normals,\r\n\t\t\t\t\tcolors = json.colors,\r\n\r\n\t\t\t\t\tscale = json.scale,\r\n\r\n\t\t\t\t\tnUvLayers = 0;\r\n\r\n\r\n\t\t\t\tif ( json.uvs !== undefined ) {\r\n\r\n\t\t\t\t\t// disregard empty arrays\r\n\r\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\toffset = 0;\r\n\t\t\t\tzLength = vertices.length;\r\n\r\n\t\t\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\t\t\tvertex = new Vector3();\r\n\r\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\r\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\r\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\r\n\r\n\t\t\t\t\tgeometry.vertices.push( vertex );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\toffset = 0;\r\n\t\t\t\tzLength = faces.length;\r\n\r\n\t\t\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\t\t\ttype = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tisQuad = isBitSet( type, 0 );\r\n\t\t\t\t\thasMaterial = isBitSet( type, 1 );\r\n\t\t\t\t\thasFaceVertexUv = isBitSet( type, 3 );\r\n\t\t\t\t\thasFaceNormal = isBitSet( type, 4 );\r\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\r\n\t\t\t\t\thasFaceColor = isBitSet( type, 6 );\r\n\t\t\t\t\thasFaceVertexColor = isBitSet( type, 7 );\r\n\r\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\r\n\r\n\t\t\t\t\tif ( isQuad ) {\r\n\r\n\t\t\t\t\t\tfaceA = new Face3();\r\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\r\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\r\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\r\n\r\n\t\t\t\t\t\tfaceB = new Face3();\r\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\r\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\r\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\r\n\r\n\t\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\r\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\t\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\r\n\r\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\r\n\r\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\tfaceA.normal.set(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\t\tnormal = new Vector3(\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\r\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\r\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\r\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\r\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );\r\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tgeometry.faces.push( faceA );\r\n\t\t\t\t\t\tgeometry.faces.push( faceB );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tface = new Face3();\r\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\t\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\r\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\t\t\t\tuv = new Vector2( u, v );\r\n\r\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\tface.normal.set(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\t\tnormal = new Vector3(\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\t\tface.vertexColors.push( new Color( colors[ colorIndex ] ) );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tgeometry.faces.push( face );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction parseSkin( json, geometry ) {\r\n\r\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\r\n\r\n\t\t\t\tif ( json.skinWeights ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\r\n\r\n\t\t\t\t\t\tvar x = json.skinWeights[ i ];\r\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\r\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\r\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\r\n\r\n\t\t\t\t\t\tgeometry.skinWeights.push( new Vector4( x, y, z, w ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( json.skinIndices ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\r\n\r\n\t\t\t\t\t\tvar a = json.skinIndices[ i ];\r\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\r\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\r\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\r\n\r\n\t\t\t\t\t\tgeometry.skinIndices.push( new Vector4( a, b, c, d ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.bones = json.bones;\r\n\r\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\r\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction parseMorphing( json, geometry ) {\r\n\r\n\t\t\t\tvar scale = json.scale;\r\n\r\n\t\t\t\tif ( json.morphTargets !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\r\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\r\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\r\n\r\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\r\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\r\n\r\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\r\n\r\n\t\t\t\t\t\t\tvar vertex = new Vector3();\r\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\r\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\r\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\r\n\r\n\t\t\t\t\t\t\tdstVertices.push( vertex );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\r\n\r\n\t\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction parseAnimations( json, geometry ) {\r\n\r\n\t\t\t\tvar outputAnimations = [];\r\n\r\n\t\t\t\t// parse old style Bone/Hierarchy animations\r\n\t\t\t\tvar animations = [];\r\n\r\n\t\t\t\tif ( json.animation !== undefined ) {\r\n\r\n\t\t\t\t\tanimations.push( json.animation );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( json.animations !== undefined ) {\r\n\r\n\t\t\t\t\tif ( json.animations.length ) {\r\n\r\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tanimations.push( json.animations );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );\r\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// parse implicit morph animations\r\n\t\t\t\tif ( geometry.morphTargets ) {\r\n\r\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\r\n\t\t\t\t\tvar morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\r\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn function parse( json, texturePath ) {\r\n\r\n\t\t\t\tif ( json.data !== undefined ) {\r\n\r\n\t\t\t\t\t// Geometry 4.0 spec\r\n\t\t\t\t\tjson = json.data;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( json.scale !== undefined ) {\r\n\r\n\t\t\t\t\tjson.scale = 1.0 / json.scale;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tjson.scale = 1.0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar geometry = new Geometry();\r\n\r\n\t\t\t\tparseModel( json, geometry );\r\n\t\t\t\tparseSkin( json, geometry );\r\n\t\t\t\tparseMorphing( json, geometry );\r\n\t\t\t\tparseAnimations( json, geometry );\r\n\r\n\t\t\t\tgeometry.computeFaceNormals();\r\n\t\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\r\n\r\n\t\t\t\t\treturn { geometry: geometry };\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\r\n\r\n\t\t\t\t\treturn { geometry: geometry, materials: materials };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t} )()\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ObjectLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\t\tthis.texturePath = '';\r\n\r\n\t}\r\n\r\n\tObject.assign( ObjectLoader.prototype, {\r\n\r\n\t\tcrossOrigin: 'anonymous',\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( this.texturePath === '' ) {\r\n\r\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tvar json = null;\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\t\tif ( onError !== undefined ) onError( error );\r\n\r\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar metadata = json.metadata;\r\n\r\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url + '. Use THREE.JSONLoader instead.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.parse( json, onLoad );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tsetTexturePath: function ( value ) {\r\n\r\n\t\t\tthis.texturePath = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\t\tthis.crossOrigin = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json, onLoad ) {\r\n\r\n\t\t\tvar shapes = this.parseShape( json.shapes );\r\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\r\n\r\n\t\t\tvar images = this.parseImages( json.images, function () {\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tvar textures = this.parseTextures( json.textures, images );\r\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\r\n\r\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\r\n\r\n\t\t\tif ( json.animations ) {\r\n\r\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t},\r\n\r\n\t\tparseShape: function ( json ) {\r\n\r\n\t\t\tvar shapes = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\r\n\r\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t},\r\n\r\n\t\tparseGeometries: function ( json, shapes ) {\r\n\r\n\t\t\tvar geometries = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tvar geometryLoader = new JSONLoader();\r\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar geometry;\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\t\t\tcase 'PlaneGeometry':\r\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'BoxGeometry':\r\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\r\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.depth,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.depthSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'CircleGeometry':\r\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'CylinderGeometry':\r\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radiusTop,\r\n\t\t\t\t\t\t\t\tdata.radiusBottom,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'ConeGeometry':\r\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'SphereGeometry':\r\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\r\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\r\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'OctahedronGeometry':\r\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\r\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'RingGeometry':\r\n\t\t\t\t\t\tcase 'RingBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.innerRadius,\r\n\t\t\t\t\t\t\t\tdata.outerRadius,\r\n\t\t\t\t\t\t\t\tdata.thetaSegments,\r\n\t\t\t\t\t\t\t\tdata.phiSegments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TorusGeometry':\r\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.arc\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\r\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.p,\r\n\t\t\t\t\t\t\t\tdata.q\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'LatheGeometry':\r\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.points,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\r\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.vertices,\r\n\t\t\t\t\t\t\t\tdata.indices,\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.details\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'ShapeGeometry':\r\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tvar geometryShapes = [];\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\r\n\r\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tgeometryShapes,\r\n\t\t\t\t\t\t\t\tdata.curveSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\r\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\r\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tvar geometryShapes = [];\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\r\n\r\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\r\n\r\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tgeometryShapes,\r\n\t\t\t\t\t\t\t\tdata.options\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'BufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'Geometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.texturePath ).geometry;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.uuid = data.uuid;\r\n\r\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\r\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;\r\n\r\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometries;\r\n\r\n\t\t},\r\n\r\n\t\tparseMaterials: function ( json, textures ) {\r\n\r\n\t\t\tvar materials = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tvar loader = new MaterialLoader();\r\n\t\t\t\tloader.setTextures( textures );\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\r\n\r\n\t\t\t\t\t\t// Deprecated\r\n\r\n\t\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tarray.push( loader.parse( data.materials[ j ] ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tmaterials[ data.uuid ] = loader.parse( data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn materials;\r\n\r\n\t\t},\r\n\r\n\t\tparseAnimations: function ( json ) {\r\n\r\n\t\t\tvar animations = [];\r\n\r\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tvar clip = AnimationClip.parse( data );\r\n\r\n\t\t\t\tif ( data.uuid !== undefined ) clip.uuid = data.uuid;\r\n\r\n\t\t\t\tanimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn animations;\r\n\r\n\t\t},\r\n\r\n\t\tparseImages: function ( json, onLoad ) {\r\n\r\n\t\t\tvar scope = this;\r\n\t\t\tvar images = {};\r\n\r\n\t\t\tfunction loadImage( url ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\treturn loader.load( url, function () {\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, undefined, function () {\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json !== undefined && json.length > 0 ) {\r\n\r\n\t\t\t\tvar manager = new LoadingManager( onLoad );\r\n\r\n\t\t\t\tvar loader = new ImageLoader( manager );\r\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar image = json[ i ];\r\n\t\t\t\t\tvar url = image.url;\r\n\r\n\t\t\t\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\t\t\t\t// load array of images e.g CubeTexture\r\n\r\n\t\t\t\t\t\timages[ image.uuid ] = [];\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\r\n\r\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.texturePath + currentUrl;\r\n\r\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// load single image\r\n\r\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\r\n\r\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn images;\r\n\r\n\t\t},\r\n\r\n\t\tparseTextures: function ( json, images ) {\r\n\r\n\t\t\tfunction parseConstant( value, type ) {\r\n\r\n\t\t\t\tif ( typeof value === 'number' ) return value;\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\r\n\t\t\t\treturn type[ value ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar textures = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tif ( data.image === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar texture;\r\n\r\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\r\n\r\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\ttexture.uuid = data.uuid;\r\n\r\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\r\n\r\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\r\n\r\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\r\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\r\n\t\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\r\n\t\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\r\n\r\n\t\t\t\t\tif ( data.wrap !== undefined ) {\r\n\r\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\r\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\r\n\r\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\r\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\r\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\r\n\r\n\t\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\r\n\r\n\t\t\t\t\ttextures[ data.uuid ] = texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn textures;\r\n\r\n\t\t},\r\n\r\n\t\tparseObject: function ( data, geometries, materials ) {\r\n\r\n\t\t\tvar object;\r\n\r\n\t\t\tfunction getGeometry( name ) {\r\n\r\n\t\t\t\tif ( geometries[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn geometries[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getMaterial( name ) {\r\n\r\n\t\t\t\tif ( name === undefined ) return undefined;\r\n\r\n\t\t\t\tif ( Array.isArray( name ) ) {\r\n\r\n\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar uuid = name[ i ];\r\n\r\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn array;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( materials[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn materials[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\tcase 'Scene':\r\n\r\n\t\t\t\t\tobject = new Scene();\r\n\r\n\t\t\t\t\tif ( data.background !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\r\n\r\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( data.fog !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\r\n\r\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\r\n\r\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\r\n\r\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PerspectiveCamera':\r\n\r\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\r\n\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\r\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\r\n\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\r\n\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\r\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'OrthographicCamera':\r\n\r\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\r\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\r\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'AmbientLight':\r\n\r\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DirectionalLight':\r\n\r\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointLight':\r\n\r\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'RectAreaLight':\r\n\r\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpotLight':\r\n\r\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'HemisphereLight':\r\n\r\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SkinnedMesh':\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\r\n\r\n\t\t\t\tcase 'Mesh':\r\n\r\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\tvar material = getMaterial( data.material );\r\n\r\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\r\n\r\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LOD':\r\n\r\n\t\t\t\t\tobject = new LOD();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Line':\r\n\r\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LineLoop':\r\n\r\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LineSegments':\r\n\r\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointCloud':\r\n\t\t\t\tcase 'Points':\r\n\r\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Sprite':\r\n\r\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Group':\r\n\r\n\t\t\t\t\tobject = new Group();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tobject = new Object3D();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.uuid = data.uuid;\r\n\r\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\r\n\r\n\t\t\tif ( data.matrix !== undefined ) {\r\n\r\n\t\t\t\tobject.matrix.fromArray( data.matrix );\r\n\r\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\r\n\t\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\r\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\r\n\t\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\r\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\r\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\r\n\r\n\t\t\tif ( data.shadow ) {\r\n\r\n\t\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\r\n\t\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\r\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\r\n\t\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\r\n\t\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\r\n\t\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\r\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\r\n\t\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\r\n\r\n\t\t\tif ( data.children !== undefined ) {\r\n\r\n\t\t\t\tvar children = data.children;\r\n\r\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.type === 'LOD' ) {\r\n\r\n\t\t\t\tvar levels = data.levels;\r\n\r\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\t\tvar level = levels[ l ];\r\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\r\n\r\n\t\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar TEXTURE_MAPPING = {\r\n\t\tUVMapping: UVMapping,\r\n\t\tCubeReflectionMapping: CubeReflectionMapping,\r\n\t\tCubeRefractionMapping: CubeRefractionMapping,\r\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\r\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\r\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\r\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\r\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\r\n\t};\r\n\r\n\tvar TEXTURE_WRAPPING = {\r\n\t\tRepeatWrapping: RepeatWrapping,\r\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\r\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\r\n\t};\r\n\r\n\tvar TEXTURE_FILTER = {\r\n\t\tNearestFilter: NearestFilter,\r\n\t\tNearestMipMapNearestFilter: NearestMipMapNearestFilter,\r\n\t\tNearestMipMapLinearFilter: NearestMipMapLinearFilter,\r\n\t\tLinearFilter: LinearFilter,\r\n\t\tLinearMipMapNearestFilter: LinearMipMapNearestFilter,\r\n\t\tLinearMipMapLinearFilter: LinearMipMapLinearFilter\r\n\t};\r\n\r\n\t/**\r\n\t * @author thespite / http://clicktorelease.com/\r\n\t */\r\n\r\n\r\n\tfunction ImageBitmapLoader( manager ) {\r\n\r\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof fetch === 'undefined' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\r\n\t\tthis.options = undefined;\r\n\r\n\t}\r\n\r\n\tImageBitmapLoader.prototype = {\r\n\r\n\t\tconstructor: ImageBitmapLoader,\r\n\r\n\t\tsetOptions: function setOptions( options ) {\r\n\r\n\t\t\tthis.options = options;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( url === undefined ) url = '';\r\n\r\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( cached );\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfetch( url ).then( function ( res ) {\r\n\r\n\t\t\t\treturn res.blob();\r\n\r\n\t\t\t} ).then( function ( blob ) {\r\n\r\n\t\t\t\treturn createImageBitmap( blob, scope.options );\r\n\r\n\t\t\t} ).then( function ( imageBitmap ) {\r\n\r\n\t\t\t\tCache.add( url, imageBitmap );\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( imageBitmap );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} ).catch( function ( e ) {\r\n\r\n\t\t\t\tif ( onError ) onError( e );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\t},\r\n\r\n\t\tsetCrossOrigin: function ( /* value */ ) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPath: function ( value ) {\r\n\r\n\t\t\tthis.path = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\r\n\t **/\r\n\r\n\tfunction ShapePath() {\r\n\r\n\t\tthis.type = 'ShapePath';\r\n\r\n\t\tthis.color = new Color();\r\n\r\n\t\tthis.subPaths = [];\r\n\t\tthis.currentPath = null;\r\n\r\n\t}\r\n\r\n\tObject.assign( ShapePath.prototype, {\r\n\r\n\t\tmoveTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPath = new Path();\r\n\t\t\tthis.subPaths.push( this.currentPath );\r\n\t\t\tthis.currentPath.moveTo( x, y );\r\n\r\n\t\t},\r\n\r\n\t\tlineTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPath.lineTo( x, y );\r\n\r\n\t\t},\r\n\r\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\r\n\r\n\t\t},\r\n\r\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\r\n\r\n\t\t},\r\n\r\n\t\tsplineThru: function ( pts ) {\r\n\r\n\t\t\tthis.currentPath.splineThru( pts );\r\n\r\n\t\t},\r\n\r\n\t\ttoShapes: function ( isCCW, noHoles ) {\r\n\r\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\r\n\r\n\t\t\t\tvar shapes = [];\r\n\r\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\r\n\r\n\t\t\t\t\tvar tmpShape = new Shape();\r\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t\t\tshapes.push( tmpShape );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn shapes;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\r\n\t\t\t\tvar polyLen = inPolygon.length;\r\n\r\n\t\t\t\t// inPt on polygon contour => immediate success    or\r\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\t\t\tvar inside = false;\r\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\r\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\r\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\r\n\r\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t// not parallel\r\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\r\n\r\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\r\n\r\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\r\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\r\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\r\n\t\t\t\t\t\t// continue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\tinside;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\r\n\r\n\t\t\tvar subPaths = this.subPaths;\r\n\t\t\tif ( subPaths.length === 0 ) return [];\r\n\r\n\t\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\r\n\r\n\t\t\tif ( subPaths.length === 1 ) {\r\n\r\n\t\t\t\ttmpPath = subPaths[ 0 ];\r\n\t\t\t\ttmpShape = new Shape();\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\treturn shapes;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\r\n\t\t\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\t\t\tvar betterShapeHoles = [];\r\n\t\t\tvar newShapes = [];\r\n\t\t\tvar newShapeHoles = [];\r\n\t\t\tvar mainIdx = 0;\r\n\t\t\tvar tmpPoints;\r\n\r\n\t\t\tnewShapes[ mainIdx ] = undefined;\r\n\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\ttmpPath = subPaths[ i ];\r\n\t\t\t\ttmpPoints = tmpPath.getPoints();\r\n\t\t\t\tsolid = isClockWise( tmpPoints );\r\n\t\t\t\tsolid = isCCW ? ! solid : solid;\r\n\r\n\t\t\t\tif ( solid ) {\r\n\r\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\r\n\r\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\r\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\r\n\t\t\t\t\tif ( holesFirst )\tmainIdx ++;\r\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\t\t\t//console.log('cw', i);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\r\n\t\t\t\t\t//console.log('ccw', i);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\r\n\t\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\t\t\tif ( newShapes.length > 1 ) {\r\n\r\n\t\t\t\tvar ambiguous = false;\r\n\t\t\t\tvar toChange = [];\r\n\r\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\r\n\r\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\r\n\t\t\t\t\t\tvar hole_unassigned = true;\r\n\r\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\r\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tambiguous = true;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\r\n\t\t\t\tif ( toChange.length > 0 ) {\r\n\r\n\t\t\t\t\t// console.log(\"to change: \", toChange);\r\n\t\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tmpHoles;\r\n\r\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\ttmpShape = newShapes[ i ].s;\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction Font( data ) {\r\n\r\n\t\tthis.type = 'Font';\r\n\r\n\t\tthis.data = data;\r\n\r\n\t}\r\n\r\n\tObject.assign( Font.prototype, {\r\n\r\n\t\tisFont: true,\r\n\r\n\t\tgenerateShapes: function ( text, size ) {\r\n\r\n\t\t\tif ( size === undefined ) size = 100;\r\n\r\n\t\t\tvar shapes = [];\r\n\t\t\tvar paths = createPaths( text, size, this.data );\r\n\r\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction createPaths( text, size, data ) {\r\n\r\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\r\n\t\tvar scale = size / data.resolution;\r\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\r\n\r\n\t\tvar paths = [];\r\n\r\n\t\tvar offsetX = 0, offsetY = 0;\r\n\r\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\r\n\r\n\t\t\tvar char = chars[ i ];\r\n\r\n\t\t\tif ( char === '\\n' ) {\r\n\r\n\t\t\t\toffsetX = 0;\r\n\t\t\t\toffsetY -= line_height;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\r\n\t\t\t\toffsetX += ret.offsetX;\r\n\t\t\t\tpaths.push( ret.path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn paths;\r\n\r\n\t}\r\n\r\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\r\n\r\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\r\n\r\n\t\tif ( ! glyph ) return;\r\n\r\n\t\tvar path = new ShapePath();\r\n\r\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\r\n\r\n\t\tif ( glyph.o ) {\r\n\r\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\r\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\r\n\r\n\t\t\t\tvar action = outline[ i ++ ];\r\n\r\n\t\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\t\tcase 'm': // moveTo\r\n\r\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.moveTo( x, y );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'l': // lineTo\r\n\r\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.lineTo( x, y );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'q': // quadraticCurveTo\r\n\r\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'b': // bezierCurveTo\r\n\r\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { offsetX: glyph.ha * scale, path: path };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction FontLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t}\r\n\r\n\tObject.assign( FontLoader.prototype, {\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tvar json;\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\r\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar font = scope.parse( json );\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( font );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\treturn new Font( json );\r\n\r\n\t\t},\r\n\r\n\t\tsetPath: function ( value ) {\r\n\r\n\t\t\tthis.path = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar context;\r\n\r\n\tvar AudioContext = {\r\n\r\n\t\tgetContext: function () {\r\n\r\n\t\t\tif ( context === undefined ) {\r\n\r\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn context;\r\n\r\n\t\t},\r\n\r\n\t\tsetContext: function ( value ) {\r\n\r\n\t\t\tcontext = value;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n\t */\r\n\r\n\tfunction AudioLoader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t}\r\n\r\n\tObject.assign( AudioLoader.prototype, {\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\r\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\r\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\r\n\r\n\t\t\t\tvar context = AudioContext.getContext();\r\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\r\n\r\n\t\t\t\t\tonLoad( audioBuffer );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction StereoCamera() {\r\n\r\n\t\tthis.type = 'StereoCamera';\r\n\r\n\t\tthis.aspect = 1;\r\n\r\n\t\tthis.eyeSep = 0.064;\r\n\r\n\t\tthis.cameraL = new PerspectiveCamera();\r\n\t\tthis.cameraL.layers.enable( 1 );\r\n\t\tthis.cameraL.matrixAutoUpdate = false;\r\n\r\n\t\tthis.cameraR = new PerspectiveCamera();\r\n\t\tthis.cameraR.layers.enable( 2 );\r\n\t\tthis.cameraR.matrixAutoUpdate = false;\r\n\r\n\t}\r\n\r\n\tObject.assign( StereoCamera.prototype, {\r\n\r\n\t\tupdate: ( function () {\r\n\r\n\t\t\tvar instance, focus, fov, aspect, near, far, zoom, eyeSep;\r\n\r\n\t\t\tvar eyeRight = new Matrix4();\r\n\t\t\tvar eyeLeft = new Matrix4();\r\n\r\n\t\t\treturn function update( camera ) {\r\n\r\n\t\t\t\tvar needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\r\n\r\n\t\t\t\tif ( needsUpdate ) {\r\n\r\n\t\t\t\t\tinstance = this;\r\n\t\t\t\t\tfocus = camera.focus;\r\n\t\t\t\t\tfov = camera.fov;\r\n\t\t\t\t\taspect = camera.aspect * this.aspect;\r\n\t\t\t\t\tnear = camera.near;\r\n\t\t\t\t\tfar = camera.far;\r\n\t\t\t\t\tzoom = camera.zoom;\r\n\r\n\t\t\t\t\t// Off-axis stereoscopic effect based on\r\n\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\r\n\r\n\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\r\n\t\t\t\t\teyeSep = this.eyeSep / 2;\r\n\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\r\n\t\t\t\t\tvar ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;\r\n\t\t\t\t\tvar xmin, xmax;\r\n\r\n\t\t\t\t\t// translate xOffset\r\n\r\n\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\r\n\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\r\n\r\n\t\t\t\t\t// for left eye\r\n\r\n\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\r\n\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\r\n\r\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\r\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t\t\t// for right eye\r\n\r\n\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\r\n\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\r\n\r\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\r\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\r\n\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\r\n\r\n\t\t\t};\r\n\r\n\t\t} )()\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Camera for rendering cube maps\r\n\t *\t- renders scene into axis-aligned cube\r\n\t *\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction CubeCamera( near, far, cubeResolution ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'CubeCamera';\r\n\r\n\t\tvar fov = 90, aspect = 1;\r\n\r\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPX.up.set( 0, - 1, 0 );\r\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\r\n\t\tthis.add( cameraPX );\r\n\r\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNX.up.set( 0, - 1, 0 );\r\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\r\n\t\tthis.add( cameraNX );\r\n\r\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPY.up.set( 0, 0, 1 );\r\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\r\n\t\tthis.add( cameraPY );\r\n\r\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNY.up.set( 0, 0, - 1 );\r\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\r\n\t\tthis.add( cameraNY );\r\n\r\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPZ.up.set( 0, - 1, 0 );\r\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\r\n\t\tthis.add( cameraPZ );\r\n\r\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNZ.up.set( 0, - 1, 0 );\r\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\r\n\t\tthis.add( cameraNZ );\r\n\r\n\t\tvar options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\r\n\r\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\r\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\r\n\r\n\t\tthis.update = function ( renderer, scene ) {\r\n\r\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\r\n\r\n\t\t\tvar renderTarget = this.renderTarget;\r\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\r\n\t\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t\t\trenderTarget.activeCubeFace = 0;\r\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\r\n\r\n\t\t\trenderTarget.activeCubeFace = 1;\r\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\r\n\r\n\t\t\trenderTarget.activeCubeFace = 2;\r\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\r\n\r\n\t\t\trenderTarget.activeCubeFace = 3;\r\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\r\n\r\n\t\t\trenderTarget.activeCubeFace = 4;\r\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\r\n\r\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\r\n\t\t\trenderTarget.activeCubeFace = 5;\r\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\r\n\r\n\t\t\tvar renderTarget = this.renderTarget;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\trenderTarget.activeCubeFace = i;\r\n\t\t\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\t\t\trenderer.clear( color, depth, stencil );\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\r\n\tCubeCamera.prototype.constructor = CubeCamera;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AudioListener() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'AudioListener';\r\n\r\n\t\tthis.context = AudioContext.getContext();\r\n\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( this.context.destination );\r\n\r\n\t\tthis.filter = null;\r\n\r\n\t}\r\n\r\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: AudioListener,\r\n\r\n\t\tgetInput: function () {\r\n\r\n\t\t\treturn this.gain;\r\n\r\n\t\t},\r\n\r\n\t\tremoveFilter: function ( ) {\r\n\r\n\t\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\t\tthis.filter.disconnect( this.context.destination );\r\n\t\t\t\tthis.gain.connect( this.context.destination );\r\n\t\t\t\tthis.filter = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilter: function () {\r\n\r\n\t\t\treturn this.filter;\r\n\r\n\t\t},\r\n\r\n\t\tsetFilter: function ( value ) {\r\n\r\n\t\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\t\tthis.filter.disconnect( this.context.destination );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.context.destination );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.filter = value;\r\n\t\t\tthis.gain.connect( this.filter );\r\n\t\t\tthis.filter.connect( this.context.destination );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMasterVolume: function () {\r\n\r\n\t\t\treturn this.gain.gain.value;\r\n\r\n\t\t},\r\n\r\n\t\tsetMasterVolume: function ( value ) {\r\n\r\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: ( function () {\r\n\r\n\t\t\tvar position = new Vector3();\r\n\t\t\tvar quaternion = new Quaternion();\r\n\t\t\tvar scale = new Vector3();\r\n\r\n\t\t\tvar orientation = new Vector3();\r\n\r\n\t\t\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\t\tvar listener = this.context.listener;\r\n\t\t\t\tvar up = this.up;\r\n\r\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\r\n\r\n\t\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\r\n\t\t\t\tif ( listener.positionX ) {\r\n\r\n\t\t\t\t\tlistener.positionX.setValueAtTime( position.x, this.context.currentTime );\r\n\t\t\t\t\tlistener.positionY.setValueAtTime( position.y, this.context.currentTime );\r\n\t\t\t\t\tlistener.positionZ.setValueAtTime( position.z, this.context.currentTime );\r\n\t\t\t\t\tlistener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );\r\n\t\t\t\t\tlistener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );\r\n\t\t\t\t\tlistener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );\r\n\t\t\t\t\tlistener.upX.setValueAtTime( up.x, this.context.currentTime );\r\n\t\t\t\t\tlistener.upY.setValueAtTime( up.y, this.context.currentTime );\r\n\t\t\t\t\tlistener.upZ.setValueAtTime( up.z, this.context.currentTime );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlistener.setPosition( position.x, position.y, position.z );\r\n\t\t\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t} )()\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n\t */\r\n\r\n\tfunction Audio( listener ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Audio';\r\n\r\n\t\tthis.context = listener.context;\r\n\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( listener.getInput() );\r\n\r\n\t\tthis.autoplay = false;\r\n\r\n\t\tthis.buffer = null;\r\n\t\tthis.loop = false;\r\n\t\tthis.startTime = 0;\r\n\t\tthis.offset = 0;\r\n\t\tthis.playbackRate = 1;\r\n\t\tthis.isPlaying = false;\r\n\t\tthis.hasPlaybackControl = true;\r\n\t\tthis.sourceType = 'empty';\r\n\r\n\t\tthis.filters = [];\r\n\r\n\t}\r\n\r\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Audio,\r\n\r\n\t\tgetOutput: function () {\r\n\r\n\t\t\treturn this.gain;\r\n\r\n\t\t},\r\n\r\n\t\tsetNodeSource: function ( audioNode ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'audioNode';\r\n\t\t\tthis.source = audioNode;\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMediaElementSource: function ( mediaElement ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'mediaNode';\r\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetBuffer: function ( audioBuffer ) {\r\n\r\n\t\t\tthis.buffer = audioBuffer;\r\n\t\t\tthis.sourceType = 'buffer';\r\n\r\n\t\t\tif ( this.autoplay ) this.play();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tplay: function () {\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar source = this.context.createBufferSource();\r\n\r\n\t\t\tsource.buffer = this.buffer;\r\n\t\t\tsource.loop = this.loop;\r\n\t\t\tsource.onended = this.onEnded.bind( this );\r\n\t\t\tsource.playbackRate.setValueAtTime( this.playbackRate, this.startTime );\r\n\t\t\tthis.startTime = this.context.currentTime;\r\n\t\t\tsource.start( this.startTime, this.offset );\r\n\r\n\t\t\tthis.isPlaying = true;\r\n\r\n\t\t\tthis.source = source;\r\n\r\n\t\t\treturn this.connect();\r\n\r\n\t\t},\r\n\r\n\t\tpause: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.stop();\r\n\t\t\t\tthis.source.onended = null;\r\n\t\t\t\tthis.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;\r\n\t\t\t\tthis.isPlaying = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.source.stop();\r\n\t\t\tthis.source.onended = null;\r\n\t\t\tthis.offset = 0;\r\n\t\t\tthis.isPlaying = false;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconnect: function () {\r\n\r\n\t\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\r\n\r\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.source.connect( this.getOutput() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdisconnect: function () {\r\n\r\n\t\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\r\n\r\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.source.disconnect( this.getOutput() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilters: function () {\r\n\r\n\t\t\treturn this.filters;\r\n\r\n\t\t},\r\n\r\n\t\tsetFilters: function ( value ) {\r\n\r\n\t\t\tif ( ! value ) value = [];\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.disconnect();\r\n\t\t\t\tthis.filters = value;\r\n\t\t\t\tthis.connect();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.filters = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilter: function () {\r\n\r\n\t\t\treturn this.getFilters()[ 0 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetFilter: function ( filter ) {\r\n\r\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\r\n\r\n\t\t},\r\n\r\n\t\tsetPlaybackRate: function ( value ) {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.playbackRate = value;\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetPlaybackRate: function () {\r\n\r\n\t\t\treturn this.playbackRate;\r\n\r\n\t\t},\r\n\r\n\t\tonEnded: function () {\r\n\r\n\t\t\tthis.isPlaying = false;\r\n\r\n\t\t},\r\n\r\n\t\tgetLoop: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.loop;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoop: function ( value ) {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.loop = value;\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.loop = this.loop;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetVolume: function () {\r\n\r\n\t\t\treturn this.gain.gain.value;\r\n\r\n\t\t},\r\n\r\n\t\tsetVolume: function ( value ) {\r\n\r\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction PositionalAudio( listener ) {\r\n\r\n\t\tAudio.call( this, listener );\r\n\r\n\t\tthis.panner = this.context.createPanner();\r\n\t\tthis.panner.connect( this.gain );\r\n\r\n\t}\r\n\r\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\r\n\r\n\t\tconstructor: PositionalAudio,\r\n\r\n\t\tgetOutput: function () {\r\n\r\n\t\t\treturn this.panner;\r\n\r\n\t\t},\r\n\r\n\t\tgetRefDistance: function () {\r\n\r\n\t\t\treturn this.panner.refDistance;\r\n\r\n\t\t},\r\n\r\n\t\tsetRefDistance: function ( value ) {\r\n\r\n\t\t\tthis.panner.refDistance = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetRolloffFactor: function () {\r\n\r\n\t\t\treturn this.panner.rolloffFactor;\r\n\r\n\t\t},\r\n\r\n\t\tsetRolloffFactor: function ( value ) {\r\n\r\n\t\t\tthis.panner.rolloffFactor = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetDistanceModel: function () {\r\n\r\n\t\t\treturn this.panner.distanceModel;\r\n\r\n\t\t},\r\n\r\n\t\tsetDistanceModel: function ( value ) {\r\n\r\n\t\t\tthis.panner.distanceModel = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMaxDistance: function () {\r\n\r\n\t\t\treturn this.panner.maxDistance;\r\n\r\n\t\t},\r\n\r\n\t\tsetMaxDistance: function ( value ) {\r\n\r\n\t\t\tthis.panner.maxDistance = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\r\n\r\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\r\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\r\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: ( function () {\r\n\r\n\t\t\tvar position = new Vector3();\r\n\t\t\tvar quaternion = new Quaternion();\r\n\t\t\tvar scale = new Vector3();\r\n\r\n\t\t\tvar orientation = new Vector3();\r\n\r\n\t\t\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\t\tvar panner = this.panner;\r\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\r\n\r\n\t\t\t\torientation.set( 0, 0, 1 ).applyQuaternion( quaternion );\r\n\r\n\t\t\t\tpanner.setPosition( position.x, position.y, position.z );\r\n\t\t\t\tpanner.setOrientation( orientation.x, orientation.y, orientation.z );\r\n\r\n\t\t\t};\r\n\r\n\t\t} )()\r\n\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AudioAnalyser( audio, fftSize ) {\r\n\r\n\t\tthis.analyser = audio.context.createAnalyser();\r\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\r\n\r\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\r\n\r\n\t\taudio.getOutput().connect( this.analyser );\r\n\r\n\t}\r\n\r\n\tObject.assign( AudioAnalyser.prototype, {\r\n\r\n\t\tgetFrequencyData: function () {\r\n\r\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\r\n\r\n\t\t\treturn this.data;\r\n\r\n\t\t},\r\n\r\n\t\tgetAverageFrequency: function () {\r\n\r\n\t\t\tvar value = 0, data = this.getFrequencyData();\r\n\r\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tvalue += data[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn value / data.length;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Buffered scene graph property that allows weighted accumulation.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\r\n\r\n\t\tthis.binding = binding;\r\n\t\tthis.valueSize = valueSize;\r\n\r\n\t\tvar bufferType = Float64Array,\r\n\t\t\tmixFunction;\r\n\r\n\t\tswitch ( typeName ) {\r\n\r\n\t\t\tcase 'quaternion':\r\n\t\t\t\tmixFunction = this._slerp;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'string':\r\n\t\t\tcase 'bool':\r\n\t\t\t\tbufferType = Array;\r\n\t\t\t\tmixFunction = this._select;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tmixFunction = this._lerp;\r\n\r\n\t\t}\r\n\r\n\t\tthis.buffer = new bufferType( valueSize * 4 );\r\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\r\n\t\t//\r\n\t\t// interpolators can use .buffer as their .result\r\n\t\t// the data then goes to 'incoming'\r\n\t\t//\r\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\r\n\t\t// the cumulative result and are compared to detect\r\n\t\t// changes\r\n\t\t//\r\n\t\t// 'orig' stores the original state of the property\r\n\r\n\t\tthis._mixBufferRegion = mixFunction;\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\tthis.useCount = 0;\r\n\t\tthis.referenceCount = 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( PropertyMixer.prototype, {\r\n\r\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\r\n\t\taccumulate: function ( accuIndex, weight ) {\r\n\r\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\r\n\t\t\t// the weight and shouldn't have made the call in the first place\r\n\r\n\t\t\tvar buffer = this.buffer,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\r\n\r\n\t\t\tif ( currentWeight === 0 ) {\r\n\r\n\t\t\t\t// accuN := incoming * weight\r\n\r\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentWeight = weight;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// accuN := accuN + incoming * weight\r\n\r\n\t\t\t\tcurrentWeight += weight;\r\n\t\t\t\tvar mix = weight / currentWeight;\r\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cumulativeWeight = currentWeight;\r\n\r\n\t\t},\r\n\r\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\r\n\t\tapply: function ( accuIndex ) {\r\n\r\n\t\t\tvar stride = this.valueSize,\r\n\t\t\t\tbuffer = this.buffer,\r\n\t\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\t\tweight = this.cumulativeWeight,\r\n\r\n\t\t\t\tbinding = this.binding;\r\n\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\t\tif ( weight < 1 ) {\r\n\r\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\r\n\r\n\t\t\t\tvar originalValueOffset = stride * 3;\r\n\r\n\t\t\t\tthis._mixBufferRegion(\r\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\r\n\r\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\r\n\r\n\t\t\t\t\t// value has changed -> update scene graph\r\n\r\n\t\t\t\t\tbinding.setValue( buffer, offset );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// remember the state of the bound property and copy it to both accus\r\n\t\tsaveOriginalState: function () {\r\n\r\n\t\t\tvar binding = this.binding;\r\n\r\n\t\t\tvar buffer = this.buffer,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toriginalValueOffset = stride * 3;\r\n\r\n\t\t\tbinding.getValue( buffer, originalValueOffset );\r\n\r\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\r\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\t},\r\n\r\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\r\n\t\trestoreOriginalState: function () {\r\n\r\n\t\t\tvar originalValueOffset = this.valueSize * 3;\r\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\r\n\r\n\t\t},\r\n\r\n\r\n\t\t// mix functions\r\n\r\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\t\tif ( t >= 0.5 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\r\n\r\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\r\n\r\n\t\t},\r\n\r\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\t\tvar s = 1 - t;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tvar j = dstOffset + i;\r\n\r\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A reference to a real property in the scene graph.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\t// Characters [].:/ are reserved for track binding syntax.\r\n\tvar RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\r\n\r\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\r\n\r\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\r\n\r\n\t\tthis._targetGroup = targetGroup;\r\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\r\n\r\n\t}\r\n\r\n\tObject.assign( Composite.prototype, {\r\n\r\n\t\tgetValue: function ( array, offset ) {\r\n\r\n\t\t\tthis.bind(); // bind all binding\r\n\r\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\r\n\r\n\t\t\t// and only call .getValue on the first\r\n\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\r\n\r\n\t\t},\r\n\r\n\t\tsetValue: function ( array, offset ) {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].setValue( array, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tbind: function () {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].bind();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tunbind: function () {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\t\t  n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].unbind();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\r\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\r\n\r\n\t\tthis.path = path;\r\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\r\n\r\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\r\n\r\n\t\tthis.rootNode = rootNode;\r\n\r\n\t}\r\n\r\n\tObject.assign( PropertyBinding, {\r\n\r\n\t\tComposite: Composite,\r\n\r\n\t\tcreate: function ( root, path, parsedPath ) {\r\n\r\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\r\n\r\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Replaces spaces with underscores and removes unsupported characters from\r\n\t\t * node names, to ensure compatibility with parseTrackName().\r\n\t\t *\r\n\t\t * @param  {string} name Node name to be sanitized.\r\n\t\t * @return {string}\r\n\t\t */\r\n\t\tsanitizeNodeName: ( function () {\r\n\r\n\t\t\tvar reservedRe = new RegExp( '[' + RESERVED_CHARS_RE + ']', 'g' );\r\n\r\n\t\t\treturn function sanitizeNodeName( name ) {\r\n\r\n\t\t\t\treturn name.replace( /\\s/g, '_' ).replace( reservedRe, '' );\r\n\r\n\t\t\t};\r\n\r\n\t\t}() ),\r\n\r\n\t\tparseTrackName: function () {\r\n\r\n\t\t\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\r\n\t\t\t// only latin characters, and the unicode \\p{L} is not yet supported. So\r\n\t\t\t// instead, we exclude reserved characters and match everything else.\r\n\t\t\tvar wordChar = '[^' + RESERVED_CHARS_RE + ']';\r\n\t\t\tvar wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\r\n\r\n\t\t\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\r\n\t\t\t// be matched to parse the rest of the track name.\r\n\t\t\tvar directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', wordChar );\r\n\r\n\t\t\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\r\n\t\t\tvar nodeRe = /(WCOD+)?/.source.replace( 'WCOD', wordCharOrDot );\r\n\r\n\t\t\t// Object on target node, and accessor. May not contain reserved\r\n\t\t\t// characters. Accessor may contain any character except closing bracket.\r\n\t\t\tvar objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', wordChar );\r\n\r\n\t\t\t// Property and accessor. May not contain reserved characters. Accessor may\r\n\t\t\t// contain any non-bracket characters.\r\n\t\t\tvar propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', wordChar );\r\n\r\n\t\t\tvar trackRe = new RegExp( ''\r\n\t\t\t\t+ '^'\r\n\t\t\t\t+ directoryRe\r\n\t\t\t\t+ nodeRe\r\n\t\t\t\t+ objectRe\r\n\t\t\t\t+ propertyRe\r\n\t\t\t\t+ '$'\r\n\t\t\t);\r\n\r\n\t\t\tvar supportedObjectNames = [ 'material', 'materials', 'bones' ];\r\n\r\n\t\t\treturn function parseTrackName( trackName ) {\r\n\r\n\t\t\t\tvar matches = trackRe.exec( trackName );\r\n\r\n\t\t\t\tif ( ! matches ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar results = {\r\n\t\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\r\n\t\t\t\t\tnodeName: matches[ 2 ],\r\n\t\t\t\t\tobjectName: matches[ 3 ],\r\n\t\t\t\t\tobjectIndex: matches[ 4 ],\r\n\t\t\t\t\tpropertyName: matches[ 5 ], // required\r\n\t\t\t\t\tpropertyIndex: matches[ 6 ]\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\r\n\r\n\t\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\r\n\r\n\t\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\r\n\r\n\t\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\r\n\t\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\r\n\t\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\r\n\t\t\t\t\t// include '.' characters).\r\n\t\t\t\t\tif ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {\r\n\r\n\t\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\r\n\t\t\t\t\t\tresults.objectName = objectName;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn results;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tfindNode: function ( root, nodeName ) {\r\n\r\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\r\n\t\t\t\treturn root;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// search into skeleton bones.\r\n\t\t\tif ( root.skeleton ) {\r\n\r\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\r\n\r\n\t\t\t\tif ( bone !== undefined ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// search into node subtree.\r\n\t\t\tif ( root.children ) {\r\n\r\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar childNode = children[ i ];\r\n\r\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\r\n\r\n\t\t\t\t\t\t\treturn childNode;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\r\n\r\n\t\t\t\t\t\tif ( result ) return result;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\r\n\r\n\t\t\t\tif ( subTreeNode ) {\r\n\r\n\t\t\t\t\treturn subTreeNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\r\n\r\n\t\t// these are used to \"bind\" a nonexistent property\r\n\t\t_getValue_unavailable: function () {},\r\n\t\t_setValue_unavailable: function () {},\r\n\r\n\t\tBindingType: {\r\n\t\t\tDirect: 0,\r\n\t\t\tEntireArray: 1,\r\n\t\t\tArrayElement: 2,\r\n\t\t\tHasFromToArray: 3\r\n\t\t},\r\n\r\n\t\tVersioning: {\r\n\t\t\tNone: 0,\r\n\t\t\tNeedsUpdate: 1,\r\n\t\t\tMatrixWorldNeedsUpdate: 2\r\n\t\t},\r\n\r\n\t\tGetterByBindingType: [\r\n\r\n\t\t\tfunction getValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_array( buffer, offset ) {\r\n\r\n\t\t\t\tvar source = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_toArray( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t],\r\n\r\n\t\tSetterByBindingTypeAndVersioning: [\r\n\r\n\t\t\t[\r\n\t\t\t\t// Direct\r\n\r\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// EntireArray\r\n\r\n\t\t\t\tfunction setValue_array( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// ArrayElement\r\n\r\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// HasToFromArray\r\n\r\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t]\r\n\r\n\t\t],\r\n\r\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\r\n\r\n\t\t\tthis.bind();\r\n\t\t\tthis.getValue( targetArray, offset );\r\n\r\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\r\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\r\n\t\t\t// prototype version of these methods with one that represents\r\n\t\t\t// the bound state. When the property is not found, the methods\r\n\t\t\t// become no-ops.\r\n\r\n\t\t},\r\n\r\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\r\n\r\n\t\t\tthis.bind();\r\n\t\t\tthis.setValue( sourceArray, offset );\r\n\r\n\t\t},\r\n\r\n\t\t// create getter / setter pair for a property in the scene graph\r\n\t\tbind: function () {\r\n\r\n\t\t\tvar targetObject = this.node,\r\n\t\t\t\tparsedPath = this.parsedPath,\r\n\r\n\t\t\t\tobjectName = parsedPath.objectName,\r\n\t\t\t\tpropertyName = parsedPath.propertyName,\r\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\r\n\r\n\t\t\tif ( ! targetObject ) {\r\n\r\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\r\n\r\n\t\t\t\tthis.node = targetObject;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// set fail state so we can just 'return' on error\r\n\t\t\tthis.getValue = this._getValue_unavailable;\r\n\t\t\tthis.setValue = this._setValue_unavailable;\r\n\r\n\t\t\t// ensure there is a value node\r\n\t\t\tif ( ! targetObject ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( objectName ) {\r\n\r\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\r\n\r\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\t\tswitch ( objectName ) {\r\n\r\n\t\t\t\t\tcase 'materials':\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.material ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'bones':\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\r\n\t\t\t\t\t\t// and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\r\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tobjectIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ( objectIndex !== undefined ) {\r\n\r\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// resolve property\r\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\r\n\r\n\t\t\tif ( nodeProperty === undefined ) {\r\n\r\n\t\t\t\tvar nodeName = parsedPath.nodeName;\r\n\r\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\r\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// determine versioning scheme\r\n\t\t\tvar versioning = this.Versioning.None;\r\n\r\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\r\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\r\n\t\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\r\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\r\n\t\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// determine how the property gets bound\r\n\t\t\tvar bindingType = this.BindingType.Direct;\r\n\r\n\t\t\tif ( propertyIndex !== undefined ) {\r\n\r\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\r\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\r\n\r\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tif ( ! targetObject.geometry ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\t\t\tthis.propertyIndex = propertyIndex;\r\n\r\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\r\n\r\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\r\n\r\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\r\n\r\n\t\t\t\tbindingType = this.BindingType.EntireArray;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.propertyName = propertyName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// select getter / setter\r\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\r\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\r\n\r\n\t\t},\r\n\r\n\t\tunbind: function () {\r\n\r\n\t\t\tthis.node = null;\r\n\r\n\t\t\t// back to the prototype version of getValue / setValue\r\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\r\n\t\t\tthis.getValue = this._getValue_unbound;\r\n\t\t\tthis.setValue = this._setValue_unbound;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\r\n\tObject.assign( PropertyBinding.prototype, {\r\n\r\n\t\t// initial state of these methods that calls 'bind'\r\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\r\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A group of objects that receives a shared animation state.\r\n\t *\r\n\t * Usage:\r\n\t *\r\n\t * \t-\tAdd objects you would otherwise pass as 'root' to the\r\n\t * \t\tconstructor or the .clipAction method of AnimationMixer.\r\n\t *\r\n\t * \t-\tInstead pass this object as 'root'.\r\n\t *\r\n\t * \t-\tYou can also add and remove objects later when the mixer\r\n\t * \t\tis running.\r\n\t *\r\n\t * Note:\r\n\t *\r\n\t *  \tObjects of this class appear as one object to the mixer,\r\n\t *  \tso cache control of the individual objects must be done\r\n\t *  \ton the group.\r\n\t *\r\n\t * Limitation:\r\n\t *\r\n\t * \t- \tThe animated properties must be compatible among the\r\n\t * \t\tall objects in the group.\r\n\t *\r\n\t *  -\tA single property can either be controlled through a\r\n\t *  \ttarget group or directly, but not both.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction AnimationObjectGroup() {\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\t// cached objects followed by the active ones\r\n\t\tthis._objects = Array.prototype.slice.call( arguments );\r\n\r\n\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\r\n\t\t// note: read by PropertyBinding.Composite\r\n\r\n\t\tvar indices = {};\r\n\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tindices[ arguments[ i ].uuid ] = i;\r\n\r\n\t\t}\r\n\r\n\t\tthis._paths = [];\t\t\t\t\t// inside: string\r\n\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\r\n\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\r\n\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.stats = {\r\n\r\n\t\t\tobjects: {\r\n\t\t\t\tget total() {\r\n\r\n\t\t\t\t\treturn scope._objects.length;\r\n\r\n\t\t\t\t},\r\n\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tget bindingsPerObject() {\r\n\r\n\t\t\t\treturn scope._bindings.length;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationObjectGroup.prototype, {\r\n\r\n\t\tisAnimationObjectGroup: true,\r\n\r\n\t\tadd: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tpaths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length,\r\n\t\t\t\tknownObject = undefined;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index === undefined ) {\r\n\r\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\r\n\r\n\t\t\t\t\tindex = nObjects ++;\r\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\r\n\t\t\t\t\tobjects.push( object );\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\tknownObject = objects[ index ];\r\n\r\n\t\t\t\t\t// move existing object to the ACTIVE region\r\n\r\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\r\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\r\n\t\t\t\t\t\tif ( binding === undefined ) {\r\n\r\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\r\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\r\n\t\t\t\t\t\t\t// or may not exist\r\n\r\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\r\n\t\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\r\n\r\n\t\t\t\t} // else the object is already where we want it to be\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\tremove: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\r\n\r\n\t\t\t\t\t// move existing object into the CACHED region\r\n\r\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\r\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\r\n\r\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\r\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\r\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\r\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\t// remove & forget\r\n\t\tuncache: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\r\n\r\n\t\t\t\t\tif ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\r\n\r\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\r\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t\t// last cached object takes this object's place\r\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\t\t// last object goes to the activated slot and pop\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\r\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\r\n\t\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\r\n\r\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\r\n\t\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// object is active, just swap with the last and pop\r\n\r\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\r\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\r\n\t\t\t\t\t\tobjects[ index ] = lastObject;\r\n\t\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\r\n\r\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\r\n\t\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} // cached or active\r\n\r\n\t\t\t\t} // if object is known\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\r\n\r\n\t\tsubscribe_: function ( path, parsedPath ) {\r\n\r\n\t\t\t// returns an array of bindings for the given path that is changed\r\n\t\t\t// according to the contained objects in the group\r\n\r\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\t\tindex = indicesByPath[ path ],\r\n\t\t\t\tbindings = this._bindings;\r\n\r\n\t\t\tif ( index !== undefined ) return bindings[ index ];\r\n\r\n\t\t\tvar paths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tobjects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tbindingsForPath = new Array( nObjects );\r\n\r\n\t\t\tindex = bindings.length;\r\n\r\n\t\t\tindicesByPath[ path ] = index;\r\n\r\n\t\t\tpaths.push( path );\r\n\t\t\tparsedPaths.push( parsedPath );\r\n\t\t\tbindings.push( bindingsForPath );\r\n\r\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = objects[ i ];\r\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn bindingsForPath;\r\n\r\n\t\t},\r\n\r\n\t\tunsubscribe_: function ( path ) {\r\n\r\n\t\t\t// tells the group to forget about a property path and no longer\r\n\t\t\t// update the array previously obtained with 'subscribe_'\r\n\r\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\t\tindex = indicesByPath[ path ];\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tvar paths = this._paths,\r\n\t\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\t\tbindings = this._bindings,\r\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\r\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\r\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\r\n\r\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\r\n\r\n\t\t\t\tbindings[ index ] = lastBindings;\r\n\t\t\t\tbindings.pop();\r\n\r\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\r\n\t\t\t\tparsedPaths.pop();\r\n\r\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\r\n\t\t\t\tpaths.pop();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\r\n\t * objects.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t *\r\n\t */\r\n\r\n\tfunction AnimationAction( mixer, clip, localRoot ) {\r\n\r\n\t\tthis._mixer = mixer;\r\n\t\tthis._clip = clip;\r\n\t\tthis._localRoot = localRoot || null;\r\n\r\n\t\tvar tracks = clip.tracks,\r\n\t\t\tnTracks = tracks.length,\r\n\t\t\tinterpolants = new Array( nTracks );\r\n\r\n\t\tvar interpolantSettings = {\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\r\n\t\t\tinterpolants[ i ] = interpolant;\r\n\t\t\tinterpolant.settings = interpolantSettings;\r\n\r\n\t\t}\r\n\r\n\t\tthis._interpolantSettings = interpolantSettings;\r\n\r\n\t\tthis._interpolants = interpolants;\t// bound by the mixer\r\n\r\n\t\t// inside: PropertyMixer (managed by the mixer)\r\n\t\tthis._propertyBindings = new Array( nTracks );\r\n\r\n\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\r\n\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\r\n\r\n\t\tthis._timeScaleInterpolant = null;\r\n\t\tthis._weightInterpolant = null;\r\n\r\n\t\tthis.loop = LoopRepeat;\r\n\t\tthis._loopCount = - 1;\r\n\r\n\t\t// global mixer time when the action is to be started\r\n\t\t// it's set back to 'null' upon start of the action\r\n\t\tthis._startTime = null;\r\n\r\n\t\t// scaled local time of the action\r\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\r\n\t\tthis.time = 0;\r\n\r\n\t\tthis.timeScale = 1;\r\n\t\tthis._effectiveTimeScale = 1;\r\n\r\n\t\tthis.weight = 1;\r\n\t\tthis._effectiveWeight = 1;\r\n\r\n\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\r\n\r\n\t\tthis.paused = false;\t\t\t\t// true -> zero effective time scale\r\n\t\tthis.enabled = true;\t\t\t\t// false -> zero effective weight\r\n\r\n\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\r\n\r\n\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\r\n\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationAction.prototype, {\r\n\r\n\t\t// State & Scheduling\r\n\r\n\t\tplay: function () {\r\n\r\n\t\t\tthis._mixer._activateAction( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tthis._mixer._deactivateAction( this );\r\n\r\n\t\t\treturn this.reset();\r\n\r\n\t\t},\r\n\r\n\t\treset: function () {\r\n\r\n\t\t\tthis.paused = false;\r\n\t\t\tthis.enabled = true;\r\n\r\n\t\t\tthis.time = 0;\t\t\t// restart clip\r\n\t\t\tthis._loopCount = - 1;\t// forget previous loops\r\n\t\t\tthis._startTime = null;\t// forget scheduling\r\n\r\n\t\t\treturn this.stopFading().stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\tisRunning: function () {\r\n\r\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\r\n\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\r\n\r\n\t\t},\r\n\r\n\t\t// return true when play has been called\r\n\t\tisScheduled: function () {\r\n\r\n\t\t\treturn this._mixer._isActiveAction( this );\r\n\r\n\t\t},\r\n\r\n\t\tstartAt: function ( time ) {\r\n\r\n\t\t\tthis._startTime = time;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoop: function ( mode, repetitions ) {\r\n\r\n\t\t\tthis.loop = mode;\r\n\t\t\tthis.repetitions = repetitions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Weight\r\n\r\n\t\t// set the weight stopping any scheduled fading\r\n\t\t// although .enabled = false yields an effective weight of zero, this\r\n\t\t// method does *not* change .enabled, because it would be confusing\r\n\t\tsetEffectiveWeight: function ( weight ) {\r\n\r\n\t\t\tthis.weight = weight;\r\n\r\n\t\t\t// note: same logic as when updated at runtime\r\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\r\n\r\n\t\t\treturn this.stopFading();\r\n\r\n\t\t},\r\n\r\n\t\t// return the weight considering fading and .enabled\r\n\t\tgetEffectiveWeight: function () {\r\n\r\n\t\t\treturn this._effectiveWeight;\r\n\r\n\t\t},\r\n\r\n\t\tfadeIn: function ( duration ) {\r\n\r\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\r\n\r\n\t\t},\r\n\r\n\t\tfadeOut: function ( duration ) {\r\n\r\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\r\n\r\n\t\t},\r\n\r\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\r\n\r\n\t\t\tfadeOutAction.fadeOut( duration );\r\n\t\t\tthis.fadeIn( duration );\r\n\r\n\t\t\tif ( warp ) {\r\n\r\n\t\t\t\tvar fadeInDuration = this._clip.duration,\r\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\r\n\r\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\r\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\r\n\r\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\r\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\r\n\r\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\r\n\r\n\t\t},\r\n\r\n\t\tstopFading: function () {\r\n\r\n\t\t\tvar weightInterpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( weightInterpolant !== null ) {\r\n\r\n\t\t\t\tthis._weightInterpolant = null;\r\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Time Scale Control\r\n\r\n\t\t// set the time scale stopping any scheduled warping\r\n\t\t// although .paused = true yields an effective time scale of zero, this\r\n\t\t// method does *not* change .paused, because it would be confusing\r\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\r\n\r\n\t\t\tthis.timeScale = timeScale;\r\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\t// return the time scale considering warping and .paused\r\n\t\tgetEffectiveTimeScale: function () {\r\n\r\n\t\t\treturn this._effectiveTimeScale;\r\n\r\n\t\t},\r\n\r\n\t\tsetDuration: function ( duration ) {\r\n\r\n\t\t\tthis.timeScale = this._clip.duration / duration;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\tsyncWith: function ( action ) {\r\n\r\n\t\t\tthis.time = action.time;\r\n\t\t\tthis.timeScale = action.timeScale;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\thalt: function ( duration ) {\r\n\r\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\r\n\r\n\t\t},\r\n\r\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\r\n\r\n\t\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\r\n\r\n\t\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\tif ( interpolant === null ) {\r\n\r\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\r\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = interpolant.parameterPositions,\r\n\t\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\t\ttimes[ 0 ] = now;\r\n\t\t\ttimes[ 1 ] = now + duration;\r\n\r\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\r\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstopWarping: function () {\r\n\r\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\tif ( timeScaleInterpolant !== null ) {\r\n\r\n\t\t\t\tthis._timeScaleInterpolant = null;\r\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Object Accessors\r\n\r\n\t\tgetMixer: function () {\r\n\r\n\t\t\treturn this._mixer;\r\n\r\n\t\t},\r\n\r\n\t\tgetClip: function () {\r\n\r\n\t\t\treturn this._clip;\r\n\r\n\t\t},\r\n\r\n\t\tgetRoot: function () {\r\n\r\n\t\t\treturn this._localRoot || this._mixer._root;\r\n\r\n\t\t},\r\n\r\n\t\t// Interna\r\n\r\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\r\n\r\n\t\t\t// called by the mixer\r\n\r\n\t\t\tif ( ! this.enabled ) {\r\n\r\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\r\n\r\n\t\t\t\tthis._updateWeight( time );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar startTime = this._startTime;\r\n\r\n\t\t\tif ( startTime !== null ) {\r\n\r\n\t\t\t\t// check for scheduled start of action\r\n\r\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\r\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\r\n\r\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// start\r\n\r\n\t\t\t\tthis._startTime = null; // unschedule\r\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// apply time scale and advance time\r\n\r\n\t\t\tdeltaTime *= this._updateTimeScale( time );\r\n\t\t\tvar clipTime = this._updateTime( deltaTime );\r\n\r\n\t\t\t// note: _updateTime may disable the action resulting in\r\n\t\t\t// an effective weight of 0\r\n\r\n\t\t\tvar weight = this._updateWeight( time );\r\n\r\n\t\t\tif ( weight > 0 ) {\r\n\r\n\t\t\t\tvar interpolants = this._interpolants;\r\n\t\t\t\tvar propertyMixers = this._propertyBindings;\r\n\r\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\r\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_updateWeight: function ( time ) {\r\n\r\n\t\t\tvar weight = 0;\r\n\r\n\t\t\tif ( this.enabled ) {\r\n\r\n\t\t\t\tweight = this.weight;\r\n\t\t\t\tvar interpolant = this._weightInterpolant;\r\n\r\n\t\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\t\tweight *= interpolantValue;\r\n\r\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\t\tthis.stopFading();\r\n\r\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\r\n\r\n\t\t\t\t\t\t\t// faded out, disable\r\n\t\t\t\t\t\t\tthis.enabled = false;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._effectiveWeight = weight;\r\n\t\t\treturn weight;\r\n\r\n\t\t},\r\n\r\n\t\t_updateTimeScale: function ( time ) {\r\n\r\n\t\t\tvar timeScale = 0;\r\n\r\n\t\t\tif ( ! this.paused ) {\r\n\r\n\t\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\t\ttimeScale *= interpolantValue;\r\n\r\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\t\tthis.stopWarping();\r\n\r\n\t\t\t\t\t\tif ( timeScale === 0 ) {\r\n\r\n\t\t\t\t\t\t\t// motion has halted, pause\r\n\t\t\t\t\t\t\tthis.paused = true;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// warp done - apply final time scale\r\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._effectiveTimeScale = timeScale;\r\n\t\t\treturn timeScale;\r\n\r\n\t\t},\r\n\r\n\t\t_updateTime: function ( deltaTime ) {\r\n\r\n\t\t\tvar time = this.time + deltaTime;\r\n\t\t\tvar duration = this._clip.duration;\r\n\t\t\tvar loop = this.loop;\r\n\t\t\tvar loopCount = this._loopCount;\r\n\r\n\t\t\tvar pingPong = ( loop === LoopPingPong );\r\n\r\n\t\t\tif ( deltaTime === 0 ) {\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) return time;\r\n\r\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( loop === LoopOnce ) {\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) {\r\n\r\n\t\t\t\t\t// just started\r\n\r\n\t\t\t\t\tthis._loopCount = 0;\r\n\t\t\t\t\tthis._setEndings( true, true, false );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\thandle_stop: {\r\n\r\n\t\t\t\t\tif ( time >= duration ) {\r\n\r\n\t\t\t\t\t\ttime = duration;\r\n\r\n\t\t\t\t\t} else if ( time < 0 ) {\r\n\r\n\t\t\t\t\t\ttime = 0;\r\n\r\n\t\t\t\t\t} else break handle_stop;\r\n\r\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\r\n\t\t\t\t\telse this.enabled = false;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else { // repetitive Repeat or PingPong\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) {\r\n\r\n\t\t\t\t\t// just started\r\n\r\n\t\t\t\t\tif ( deltaTime >= 0 ) {\r\n\r\n\t\t\t\t\t\tloopCount = 0;\r\n\r\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// when looping in reverse direction, the initial\r\n\t\t\t\t\t\t// transition through zero counts as a repetition,\r\n\t\t\t\t\t\t// so leave loopCount at -1\r\n\r\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( time >= duration || time < 0 ) {\r\n\r\n\t\t\t\t\t// wrap around\r\n\r\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\r\n\t\t\t\t\ttime -= duration * loopDelta;\r\n\r\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\r\n\r\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\r\n\r\n\t\t\t\t\tif ( pending <= 0 ) {\r\n\r\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\r\n\r\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\r\n\t\t\t\t\t\telse this.enabled = false;\r\n\r\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\r\n\r\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// keep running\r\n\r\n\t\t\t\t\t\tif ( pending === 1 ) {\r\n\r\n\t\t\t\t\t\t\t// entering the last round\r\n\r\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\r\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._loopCount = loopCount;\r\n\r\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\r\n\r\n\t\t\t\t\t// invert time for the \"pong round\"\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\t\t\t\t\treturn duration - time;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.time = time;\r\n\t\t\treturn time;\r\n\r\n\t\t},\r\n\r\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\r\n\r\n\t\t\tvar settings = this._interpolantSettings;\r\n\r\n\t\t\tif ( pingPong ) {\r\n\r\n\t\t\t\tsettings.endingStart \t= ZeroSlopeEnding;\r\n\t\t\t\tsettings.endingEnd\t\t= ZeroSlopeEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\r\n\r\n\t\t\t\tif ( atStart ) {\r\n\r\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( atEnd ) {\r\n\r\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\r\n\r\n\t\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\t\tinterpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( interpolant === null ) {\r\n\r\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\r\n\t\t\t\tthis._weightInterpolant = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = interpolant.parameterPositions,\r\n\t\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\r\n\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Player for AnimationClips.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction AnimationMixer( root ) {\r\n\r\n\t\tthis._root = root;\r\n\t\tthis._initMemoryManager();\r\n\t\tthis._accuIndex = 0;\r\n\r\n\t\tthis.time = 0;\r\n\r\n\t\tthis.timeScale = 1.0;\r\n\r\n\t}\r\n\r\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: AnimationMixer,\r\n\r\n\t\t_bindAction: function ( action, prototypeAction ) {\r\n\r\n\t\t\tvar root = action._localRoot || this._root,\r\n\t\t\t\ttracks = action._clip.tracks,\r\n\t\t\t\tnTracks = tracks.length,\r\n\t\t\t\tbindings = action._propertyBindings,\r\n\t\t\t\tinterpolants = action._interpolants,\r\n\t\t\t\trootUuid = root.uuid,\r\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( bindingsByName === undefined ) {\r\n\r\n\t\t\t\tbindingsByName = {};\r\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\t\tvar track = tracks[ i ],\r\n\t\t\t\t\ttrackName = track.name,\r\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\r\n\r\n\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbinding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\t\t// existing binding, make sure the cache knows\r\n\r\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\r\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\r\n\r\n\t\t\t\t\tbinding = new PropertyMixer(\r\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\r\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\r\n\r\n\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_activateAction: function ( action ) {\r\n\r\n\t\t\tif ( ! this._isActiveAction( action ) ) {\r\n\r\n\t\t\t\tif ( action._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\r\n\t\t\t\t\t// appears to be still using it -> rebind\r\n\r\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\r\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\r\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\t\t\tthis._bindAction( action,\r\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\r\n\r\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t\t// increment reference counts / sort out state\r\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\r\n\r\n\t\t\t\t\t\tthis._lendBinding( binding );\r\n\t\t\t\t\t\tbinding.saveOriginalState();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._lendAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_deactivateAction: function ( action ) {\r\n\r\n\t\t\tif ( this._isActiveAction( action ) ) {\r\n\r\n\t\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t\t// decrement reference counts / sort out state\r\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\r\n\r\n\t\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\t\tthis._takeBackBinding( binding );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._takeBackAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// Memory manager\r\n\r\n\t\t_initMemoryManager: function () {\r\n\r\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\r\n\t\t\tthis._nActiveActions = 0;\r\n\r\n\t\t\tthis._actionsByClip = {};\r\n\t\t\t// inside:\r\n\t\t\t// {\r\n\t\t\t// \t\tknownActions: Array< AnimationAction >\t- used as prototypes\r\n\t\t\t// \t\tactionByRoot: AnimationAction\t\t\t- lookup\r\n\t\t\t// }\r\n\r\n\r\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\r\n\t\t\tthis._nActiveBindings = 0;\r\n\r\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\r\n\r\n\r\n\t\t\tthis._controlInterpolants = []; // same game as above\r\n\t\t\tthis._nActiveControlInterpolants = 0;\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tthis.stats = {\r\n\r\n\t\t\t\tactions: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._actions.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveActions;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tbindings: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._bindings.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveBindings;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tcontrolInterpolants: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\t// Memory management for AnimationAction objects\r\n\r\n\t\t_isActiveAction: function ( action ) {\r\n\r\n\t\t\tvar index = action._cacheIndex;\r\n\t\t\treturn index !== null && index < this._nActiveActions;\r\n\r\n\t\t},\r\n\r\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip === undefined ) {\r\n\r\n\t\t\t\tactionsForClip = {\r\n\r\n\t\t\t\t\tknownActions: [ action ],\r\n\t\t\t\t\tactionByRoot: {}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\taction._byClipCacheIndex = 0;\r\n\r\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\r\n\r\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\r\n\t\t\t\tknownActions.push( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t\taction._cacheIndex = actions.length;\r\n\t\t\tactions.push( action );\r\n\r\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveAction: function ( action ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\r\n\t\t\t\tcacheIndex = action._cacheIndex;\r\n\r\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\tactions.pop();\r\n\r\n\t\t\taction._cacheIndex = null;\r\n\r\n\r\n\t\t\tvar clipUuid = action._clip.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\r\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\r\n\r\n\t\t\t\tlastKnownAction =\r\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\r\n\r\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\r\n\r\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\r\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\r\n\t\t\tknownActionsForClip.pop();\r\n\r\n\t\t\taction._byClipCacheIndex = null;\r\n\r\n\r\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\r\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\r\n\r\n\t\t\tdelete actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( knownActionsForClip.length === 0 ) {\r\n\r\n\t\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveBindingsForAction: function ( action ) {\r\n\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\r\n\r\n\t\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_lendAction: function ( action ) {\r\n\r\n\t\t\t// [ active actions |  inactive actions  ]\r\n\t\t\t// [  active actions >| inactive actions ]\r\n\t\t\t//                 s        a\r\n\t\t\t//                  <-swap->\r\n\t\t\t//                 a        s\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\r\n\r\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\r\n\r\n\t\t\taction._cacheIndex = lastActiveIndex;\r\n\t\t\tactions[ lastActiveIndex ] = action;\r\n\r\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\r\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackAction: function ( action ) {\r\n\r\n\t\t\t// [  active actions  | inactive actions ]\r\n\t\t\t// [ active actions |< inactive actions  ]\r\n\t\t\t//        a        s\r\n\t\t\t//         <-swap->\r\n\t\t\t//        s        a\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\r\n\r\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\r\n\r\n\t\t\taction._cacheIndex = firstInactiveIndex;\r\n\t\t\tactions[ firstInactiveIndex ] = action;\r\n\r\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\r\n\t\t\tactions[ prevIndex ] = lastActiveAction;\r\n\r\n\t\t},\r\n\r\n\t\t// Memory management for PropertyMixer objects\r\n\r\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\r\n\r\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\t\tbindings = this._bindings;\r\n\r\n\t\t\tif ( bindingByName === undefined ) {\r\n\r\n\t\t\t\tbindingByName = {};\r\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbindingByName[ trackName ] = binding;\r\n\r\n\t\t\tbinding._cacheIndex = bindings.length;\r\n\t\t\tbindings.push( binding );\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tpropBinding = binding.binding,\r\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\r\n\t\t\t\ttrackName = propBinding.path,\r\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\r\n\t\t\t\tcacheIndex = binding._cacheIndex;\r\n\r\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\r\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\r\n\t\t\tbindings.pop();\r\n\r\n\t\t\tdelete bindingByName[ trackName ];\r\n\r\n\t\t\tremove_empty_map: {\r\n\r\n\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars\r\n\r\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_lendBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\r\n\r\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\r\n\r\n\t\t\tbinding._cacheIndex = lastActiveIndex;\r\n\t\t\tbindings[ lastActiveIndex ] = binding;\r\n\r\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\r\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\r\n\r\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\r\n\r\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\r\n\t\t\tbindings[ firstInactiveIndex ] = binding;\r\n\r\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\r\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\r\n\r\n\t\t},\r\n\r\n\r\n\t\t// Memory management of Interpolants for weight and time scale\r\n\r\n\t\t_lendControlInterpolant: function () {\r\n\r\n\t\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\r\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\r\n\r\n\t\t\tif ( interpolant === undefined ) {\r\n\r\n\t\t\t\tinterpolant = new LinearInterpolant(\r\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\r\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\r\n\r\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\r\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn interpolant;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\r\n\r\n\t\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\r\n\r\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\r\n\r\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\r\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\r\n\r\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\r\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\r\n\r\n\t\t},\r\n\r\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\r\n\r\n\t\t// return an action for a clip optionally using a custom root target\r\n\t\t// object (this method allocates a lot of dynamic memory in case a\r\n\t\t// previously unknown clip/root combination is specified)\r\n\t\tclipAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar root = optionalRoot || this._root,\r\n\t\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\r\n\r\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\r\n\t\t\t\tprototypeAction = null;\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\tvar existingAction =\r\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\r\n\r\n\t\t\t\tif ( existingAction !== undefined ) {\r\n\r\n\t\t\t\t\treturn existingAction;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// we know the clip, so we don't have to parse all\r\n\t\t\t\t// the bindings again but can just copy\r\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\r\n\r\n\t\t\t\t// also, take the clip from the prototype action\r\n\t\t\t\tif ( clipObject === null )\r\n\t\t\t\t\tclipObject = prototypeAction._clip;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// clip must be known when specified via string\r\n\t\t\tif ( clipObject === null ) return null;\r\n\r\n\t\t\t// allocate all resources required to run it\r\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\r\n\r\n\t\t\tthis._bindAction( newAction, prototypeAction );\r\n\r\n\t\t\t// and make the action known to the memory manager\r\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\r\n\r\n\t\t\treturn newAction;\r\n\r\n\t\t},\r\n\r\n\t\t// get an existing action\r\n\t\texistingAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar root = optionalRoot || this._root,\r\n\t\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\r\n\r\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\t// deactivates all previously scheduled actions\r\n\t\tstopAllAction: function () {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tnActions = this._nActiveActions,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\t\tthis._nActiveActions = 0;\r\n\t\t\tthis._nActiveBindings = 0;\r\n\r\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\t\tactions[ i ].reset();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].useCount = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// advance the time and update apply the animation\r\n\t\tupdate: function ( deltaTime ) {\r\n\r\n\t\t\tdeltaTime *= this.timeScale;\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tnActions = this._nActiveActions,\r\n\r\n\t\t\t\ttime = this.time += deltaTime,\r\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\r\n\r\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\r\n\r\n\t\t\t// run active actions\r\n\r\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\t\tvar action = actions[ i ];\r\n\r\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update scene graph\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].apply( accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// return this mixer's root target object\r\n\t\tgetRoot: function () {\r\n\r\n\t\t\treturn this._root;\r\n\r\n\t\t},\r\n\r\n\t\t// free all resources specific to a particular clip\r\n\t\tuncacheClip: function ( clip ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tclipUuid = clip.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\r\n\t\t\t\t// iteration state and also require updating the state we can\r\n\t\t\t\t// just throw away\r\n\r\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\r\n\r\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar action = actionsToRemove[ i ];\r\n\r\n\t\t\t\t\tthis._deactivateAction( action );\r\n\r\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\r\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\r\n\r\n\t\t\t\t\taction._cacheIndex = null;\r\n\t\t\t\t\taction._byClipCacheIndex = null;\r\n\r\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\t\t\tactions.pop();\r\n\r\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// free all resources specific to a particular root target object\r\n\t\tuncacheRoot: function ( root ) {\r\n\r\n\t\t\tvar rootUuid = root.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip;\r\n\r\n\t\t\tfor ( var clipUuid in actionsByClip ) {\r\n\r\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\r\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\r\n\r\n\t\t\t\tif ( action !== undefined ) {\r\n\r\n\t\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( bindingByName !== undefined ) {\r\n\r\n\t\t\t\tfor ( var trackName in bindingByName ) {\r\n\r\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\r\n\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// remove a targeted clip from the cache\r\n\t\tuncacheAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\r\n\r\n\t\t\tif ( action !== null ) {\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Uniform( value ) {\r\n\r\n\t\tif ( typeof value === 'string' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\r\n\t\t\tvalue = arguments[ 1 ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.value = value;\r\n\r\n\t}\r\n\r\n\tUniform.prototype.clone = function () {\r\n\r\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedBufferGeometry() {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'InstancedBufferGeometry';\r\n\t\tthis.maxInstancedCount = undefined;\r\n\r\n\t}\r\n\r\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\r\n\r\n\t\tconstructor: InstancedBufferGeometry,\r\n\r\n\t\tisInstancedBufferGeometry: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\r\n\r\n\t\tInterleavedBuffer.call( this, array, stride );\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n\t}\r\n\r\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\r\n\r\n\t\tconstructor: InstancedInterleavedBuffer,\r\n\r\n\t\tisInstancedInterleavedBuffer: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {\r\n\r\n\t\tBufferAttribute.call( this, array, itemSize );\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n\t}\r\n\r\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\r\n\r\n\t\tconstructor: InstancedBufferAttribute,\r\n\r\n\t\tisInstancedBufferAttribute: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author bhouston / http://clara.io/\r\n\t * @author stephomi / http://stephaneginier.com/\r\n\t */\r\n\r\n\tfunction Raycaster( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new Ray( origin, direction );\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\r\n\t\tthis.params = {\r\n\t\t\tMesh: {},\r\n\t\t\tLine: {},\r\n\t\t\tLOD: {},\r\n\t\t\tPoints: { threshold: 1 },\r\n\t\t\tSprite: {}\r\n\t\t};\r\n\r\n\t\tObject.defineProperties( this.params, {\r\n\t\t\tPointCloud: {\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\t\treturn this.Points;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tfunction ascSort( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t}\r\n\r\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tobject.raycast( raycaster, intersects );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Raycaster.prototype, {\r\n\r\n\t\tlinePrecision: 1,\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCamera: function ( coords, camera ) {\r\n\r\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\r\n\r\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\r\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\r\n\r\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\r\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\r\n\r\n\t\t\tvar intersects = optionalTarget || [];\r\n\r\n\t\t\tintersectObject( object, this, intersects, recursive );\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t},\r\n\r\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\r\n\r\n\t\t\tvar intersects = optionalTarget || [];\r\n\r\n\t\t\tif ( Array.isArray( objects ) === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Clock( autoStart ) {\r\n\r\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\t\tthis.startTime = 0;\r\n\t\tthis.oldTime = 0;\r\n\t\tthis.elapsedTime = 0;\r\n\r\n\t\tthis.running = false;\r\n\r\n\t}\r\n\r\n\tObject.assign( Clock.prototype, {\r\n\r\n\t\tstart: function () {\r\n\r\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\r\n\r\n\t\t\tthis.oldTime = this.startTime;\r\n\t\t\tthis.elapsedTime = 0;\r\n\t\t\tthis.running = true;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tthis.getElapsedTime();\r\n\t\t\tthis.running = false;\r\n\t\t\tthis.autoStart = false;\r\n\r\n\t\t},\r\n\r\n\t\tgetElapsedTime: function () {\r\n\r\n\t\t\tthis.getDelta();\r\n\t\t\treturn this.elapsedTime;\r\n\r\n\t\t},\r\n\r\n\t\tgetDelta: function () {\r\n\r\n\t\t\tvar diff = 0;\r\n\r\n\t\t\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\t\t\tthis.start();\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.running ) {\r\n\r\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\r\n\r\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\r\n\t\t\t\tthis.oldTime = newTime;\r\n\r\n\t\t\t\tthis.elapsedTime += diff;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn diff;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n\t *\r\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\r\n\t * The azimuthal angle (theta) is measured from the positive z-axiz.\r\n\t */\r\n\r\n\tfunction Spherical( radius, phi, theta ) {\r\n\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\r\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\r\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tObject.assign( Spherical.prototype, {\r\n\r\n\t\tset: function ( radius, phi, theta ) {\r\n\r\n\t\t\tthis.radius = radius;\r\n\t\t\tthis.phi = phi;\r\n\t\t\tthis.theta = theta;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( other ) {\r\n\r\n\t\t\tthis.radius = other.radius;\r\n\t\t\tthis.phi = other.phi;\r\n\t\t\tthis.theta = other.theta;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// restrict phi to be betwee EPS and PI-EPS\r\n\t\tmakeSafe: function () {\r\n\r\n\t\t\tvar EPS = 0.000001;\r\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v ) {\r\n\r\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\r\n\r\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tif ( this.radius === 0 ) {\r\n\r\n\t\t\t\tthis.theta = 0;\r\n\t\t\t\tthis.phi = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.theta = Math.atan2( x, z );\r\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\r\n\t *\r\n\t */\r\n\r\n\tfunction Cylindrical( radius, theta, y ) {\r\n\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\r\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\r\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tObject.assign( Cylindrical.prototype, {\r\n\r\n\t\tset: function ( radius, theta, y ) {\r\n\r\n\t\t\tthis.radius = radius;\r\n\t\t\tthis.theta = theta;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( other ) {\r\n\r\n\t\t\tthis.radius = other.radius;\r\n\t\t\tthis.theta = other.theta;\r\n\t\t\tthis.y = other.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v ) {\r\n\r\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\r\n\r\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\r\n\t\t\tthis.theta = Math.atan2( x, z );\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Box2( min, max ) {\r\n\r\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\r\n\r\n\t}\r\n\r\n\tObject.assign( Box2.prototype, {\r\n\r\n\t\tset: function ( min, max ) {\r\n\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCenterAndSize: function () {\r\n\r\n\t\t\tvar v1 = new Vector2();\r\n\r\n\t\t\treturn function setFromCenterAndSize( center, size ) {\r\n\r\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( box ) {\r\n\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeEmpty: function () {\r\n\r\n\t\t\tthis.min.x = this.min.y = + Infinity;\r\n\t\t\tthis.max.x = this.max.y = - Infinity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tisEmpty: function () {\r\n\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tgetSize: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t\t},\r\n\r\n\t\texpandByPoint: function ( point ) {\r\n\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByVector: function ( vector ) {\r\n\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsBox: function ( box ) {\r\n\r\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\r\n\r\n\t\t},\r\n\r\n\t\tgetParameter: function ( point, target ) {\r\n\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\t// using 4 splitting planes to rule out intersections\r\n\r\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function () {\r\n\r\n\t\t\tvar v1 = new Vector2();\r\n\r\n\t\t\treturn function distanceToPoint( point ) {\r\n\r\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tintersect: function ( box ) {\r\n\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tunion: function ( box ) {\r\n\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( box ) {\r\n\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Line3( start, end ) {\r\n\r\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\r\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\r\n\r\n\t}\r\n\r\n\tObject.assign( Line3.prototype, {\r\n\r\n\t\tset: function ( start, end ) {\r\n\r\n\t\t\tthis.start.copy( start );\r\n\t\t\tthis.end.copy( end );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( line ) {\r\n\r\n\t\t\tthis.start.copy( line.start );\r\n\t\t\tthis.end.copy( line.end );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tdelta: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.subVectors( this.end, this.start );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSq: function () {\r\n\r\n\t\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t\t},\r\n\r\n\t\tdistance: function () {\r\n\r\n\t\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t\t},\r\n\r\n\t\tat: function ( t, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPointParameter: function () {\r\n\r\n\t\t\tvar startP = new Vector3();\r\n\t\t\tvar startEnd = new Vector3();\r\n\r\n\t\t\treturn function closestPointToPointParameter( point, clampToLine ) {\r\n\r\n\t\t\t\tstartP.subVectors( point, this.start );\r\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\r\n\r\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\r\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\r\n\r\n\t\t\t\tvar t = startEnd_startP / startEnd2;\r\n\r\n\t\t\t\tif ( clampToLine ) {\r\n\r\n\t\t\t\t\tt = _Math.clamp( t, 0, 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn t;\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\r\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\r\n\r\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\tthis.start.applyMatrix4( matrix );\r\n\t\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( line ) {\r\n\r\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction ImmediateRenderObject( material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.material = material;\r\n\t\tthis.render = function ( /* renderCallback */ ) {};\r\n\r\n\t}\r\n\r\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\r\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\r\n\r\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\r\n\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t\t//\r\n\r\n\t\tvar nNormals = 0;\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.faces.length * 3;\r\n\r\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.attributes.normal.count;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\r\n\r\n\t\tgeometry.addAttribute( 'position', positions );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t\t//\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\r\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\r\n\r\n\tVertexNormalsHelper.prototype.update = ( function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\t\tvar v2 = new Vector3();\r\n\t\tvar normalMatrix = new Matrix3();\r\n\r\n\t\treturn function update() {\r\n\r\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\t\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\t\t\tvar faces = objGeometry.faces;\r\n\r\n\t\t\t\tvar idx = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\r\n\r\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\r\n\r\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar objPos = objGeometry.attributes.position;\r\n\r\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\r\n\r\n\t\t\t\tvar idx = 0;\r\n\r\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\r\n\r\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\r\n\r\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t};\r\n\r\n\t}() );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction SpotLightHelper( light, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = [\r\n\t\t\t0, 0, 0, \t0, 0, 1,\r\n\t\t\t0, 0, 0, \t1, 0, 1,\r\n\t\t\t0, 0, 0,\t- 1, 0, 1,\r\n\t\t\t0, 0, 0, \t0, 1, 1,\r\n\t\t\t0, 0, 0, \t0, - 1, 1\r\n\t\t];\r\n\r\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\r\n\r\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\r\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\r\n\r\n\t\t\tpositions.push(\r\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\r\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tthis.cone = new LineSegments( geometry, material );\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\r\n\r\n\tSpotLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.cone.geometry.dispose();\r\n\t\tthis.cone.material.dispose();\r\n\r\n\t};\r\n\r\n\tSpotLightHelper.prototype.update = function () {\r\n\r\n\t\tvar vector = new Vector3();\r\n\t\tvar vector2 = new Vector3();\r\n\r\n\t\treturn function update() {\r\n\r\n\t\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\r\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\r\n\r\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\r\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\r\n\r\n\t\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\t\tthis.cone.material.color.set( this.color );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.cone.material.color.copy( this.light.color );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\t/**\r\n\t * @author Sean Griffin / http://twitter.com/sgrif\r\n\t * @author Michael Guerrero / http://realitymeltdown.com\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author ikerr / http://verold.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction getBoneList( object ) {\r\n\r\n\t\tvar boneList = [];\r\n\r\n\t\tif ( object && object.isBone ) {\r\n\r\n\t\t\tboneList.push( object );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\r\n\r\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn boneList;\r\n\r\n\t}\r\n\r\n\tfunction SkeletonHelper( object ) {\r\n\r\n\t\tvar bones = getBoneList( object );\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar color1 = new Color( 0, 0, 1 );\r\n\t\tvar color2 = new Color( 0, 1, 0 );\r\n\r\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\r\n\r\n\t\t\tvar bone = bones[ i ];\r\n\r\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\r\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t\tthis.root = object;\r\n\t\tthis.bones = bones;\r\n\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t}\r\n\r\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\r\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\r\n\r\n\tSkeletonHelper.prototype.updateMatrixWorld = function () {\r\n\r\n\t\tvar vector = new Vector3();\r\n\r\n\t\tvar boneMatrix = new Matrix4();\r\n\t\tvar matrixWorldInv = new Matrix4();\r\n\r\n\t\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\t\tvar bones = this.bones;\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar position = geometry.getAttribute( 'position' );\r\n\r\n\t\t\tmatrixWorldInv.getInverse( this.root.matrixWorld );\r\n\r\n\t\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\r\n\r\n\t\t\t\tvar bone = bones[ i ];\r\n\r\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\r\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\r\n\t\t\t\t\tposition.setXYZ( j, vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\t\t\tvector.setFromMatrixPosition( boneMatrix );\r\n\t\t\t\t\tposition.setXYZ( j + 1, vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\tj += 2;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction PointLightHelper( light, sphereSize, color ) {\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\r\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.matrix = this.light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\r\n\t\t/*\r\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\t\tvar d = light.distance;\r\n\r\n\t\tif ( d === 0.0 ) {\r\n\r\n\t\t\tthis.lightDistance.visible = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t\t}\r\n\r\n\t\tthis.add( this.lightDistance );\r\n\t\t*/\r\n\r\n\t}\r\n\r\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\r\n\tPointLightHelper.prototype.constructor = PointLightHelper;\r\n\r\n\tPointLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t};\r\n\r\n\tPointLightHelper.prototype.update = function () {\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tvar d = this.light.distance;\r\n\r\n\t\tif ( d === 0.0 ) {\r\n\r\n\t\t\tthis.lightDistance.visible = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightDistance.visible = true;\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t\t}\r\n\t\t*/\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction RectAreaLightHelper( light, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );\r\n\r\n\t\tthis.line = new Line( geometry, material );\r\n\t\tthis.add( this.line );\r\n\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tRectAreaLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\r\n\r\n\tRectAreaLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t};\r\n\r\n\tRectAreaLightHelper.prototype.update = function () {\r\n\r\n\t\t// calculate new dimensions of the helper\r\n\r\n\t\tvar hx = this.light.width * 0.5;\r\n\t\tvar hy = this.light.height * 0.5;\r\n\r\n\t\tvar position = this.line.geometry.attributes.position;\r\n\t\tvar array = position.array;\r\n\r\n\t\t// update vertices\r\n\r\n\t\tarray[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;\r\n\t\tarray[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;\r\n\t\tarray[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;\r\n\t\tarray[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;\r\n\t\tarray[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.line.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.line.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction HemisphereLightHelper( light, size, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new OctahedronBufferGeometry( size );\r\n\t\tgeometry.rotateY( Math.PI * 0.5 );\r\n\r\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\t\tif ( this.color === undefined ) this.material.vertexColors = VertexColors;\r\n\r\n\t\tvar position = geometry.getAttribute( 'position' );\r\n\t\tvar colors = new Float32Array( position.count * 3 );\r\n\r\n\t\tgeometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );\r\n\r\n\t\tthis.add( new Mesh( geometry, this.material ) );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\r\n\r\n\tHemisphereLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t};\r\n\r\n\tHemisphereLightHelper.prototype.update = function () {\r\n\r\n\t\tvar vector = new Vector3();\r\n\r\n\t\tvar color1 = new Color();\r\n\t\tvar color2 = new Color();\r\n\r\n\t\treturn function update() {\r\n\r\n\t\t\tvar mesh = this.children[ 0 ];\r\n\r\n\t\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\t\tthis.material.color.set( this.color );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\r\n\r\n\t\t\t\tcolor1.copy( this.light.color );\r\n\t\t\t\tcolor2.copy( this.light.groundColor );\r\n\r\n\t\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar color = ( i < ( l / 2 ) ) ? color1 : color2;\r\n\r\n\t\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolors.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction GridHelper( size, divisions, color1, color2 ) {\r\n\r\n\t\tsize = size || 10;\r\n\t\tdivisions = divisions || 10;\r\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\r\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\r\n\r\n\t\tvar center = divisions / 2;\r\n\t\tvar step = size / divisions;\r\n\t\tvar halfSize = size / 2;\r\n\r\n\t\tvar vertices = [], colors = [];\r\n\r\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\r\n\r\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\r\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\r\n\r\n\t\t\tvar color = i === center ? color1 : color2;\r\n\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tGridHelper.prototype = Object.create( LineSegments.prototype );\r\n\tGridHelper.prototype.constructor = GridHelper;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t * @author Hectate / http://www.github.com/Hectate\r\n\t */\r\n\r\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\r\n\r\n\t\tradius = radius || 10;\r\n\t\tradials = radials || 16;\r\n\t\tcircles = circles || 8;\r\n\t\tdivisions = divisions || 64;\r\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\r\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar x, z;\r\n\t\tvar v, i, j, r, color;\r\n\r\n\t\t// create the radials\r\n\r\n\t\tfor ( i = 0; i <= radials; i ++ ) {\r\n\r\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\r\n\r\n\t\t\tx = Math.sin( v ) * radius;\r\n\t\t\tz = Math.cos( v ) * radius;\r\n\r\n\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\tvertices.push( x, 0, z );\r\n\r\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t}\r\n\r\n\t\t// create the circles\r\n\r\n\t\tfor ( i = 0; i <= circles; i ++ ) {\r\n\r\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tr = radius - ( radius / circles * i );\r\n\r\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\r\n\r\n\t\t\t\t// first vertex\r\n\r\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tx = Math.sin( v ) * r;\r\n\t\t\t\tz = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t\t// second vertex\r\n\r\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tx = Math.sin( v ) * r;\r\n\t\t\t\tz = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\r\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\r\n\r\n\t\t// FaceNormalsHelper only supports THREE.Geometry\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t\t//\r\n\r\n\t\tvar nNormals = 0;\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.faces.length;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\r\n\r\n\t\tgeometry.addAttribute( 'position', positions );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t\t//\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\r\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\r\n\r\n\tFaceNormalsHelper.prototype.update = ( function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\t\tvar v2 = new Vector3();\r\n\t\tvar normalMatrix = new Matrix3();\r\n\r\n\t\treturn function update() {\r\n\r\n\t\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\t\tvar faces = objGeometry.faces;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t\tv1.copy( vertices[ face.a ] )\r\n\t\t\t\t\t.add( vertices[ face.b ] )\r\n\t\t\t\t\t.add( vertices[ face.c ] )\r\n\t\t\t\t\t.divideScalar( 3 )\r\n\t\t\t\t\t.applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t};\r\n\r\n\t}() );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction DirectionalLightHelper( light, size, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tif ( size === undefined ) size = 1;\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [\r\n\t\t\t- size, size, 0,\r\n\t\t\tsize, size, 0,\r\n\t\t\tsize, - size, 0,\r\n\t\t\t- size, - size, 0,\r\n\t\t\t- size, size, 0\r\n\t\t], 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tthis.lightPlane = new Line( geometry, material );\r\n\t\tthis.add( this.lightPlane );\r\n\r\n\t\tgeometry = new BufferGeometry();\r\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\r\n\r\n\t\tthis.targetLine = new Line( geometry, material );\r\n\t\tthis.add( this.targetLine );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\r\n\r\n\tDirectionalLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.lightPlane.geometry.dispose();\r\n\t\tthis.lightPlane.material.dispose();\r\n\t\tthis.targetLine.geometry.dispose();\r\n\t\tthis.targetLine.material.dispose();\r\n\r\n\t};\r\n\r\n\tDirectionalLightHelper.prototype.update = function () {\r\n\r\n\t\tvar v1 = new Vector3();\r\n\t\tvar v2 = new Vector3();\r\n\t\tvar v3 = new Vector3();\r\n\r\n\t\treturn function update() {\r\n\r\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\t\tv3.subVectors( v2, v1 );\r\n\r\n\t\t\tthis.lightPlane.lookAt( v3 );\r\n\r\n\t\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\t\tthis.lightPlane.material.color.set( this.color );\r\n\t\t\t\tthis.targetLine.material.color.set( this.color );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.lightPlane.material.color.copy( this.light.color );\r\n\t\t\t\tthis.targetLine.material.color.copy( this.light.color );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.targetLine.lookAt( v3 );\r\n\t\t\tthis.targetLine.scale.z = v3.length();\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t *\t- shows frustum, line of sight and up of the camera\r\n\t *\t- suitable for fast updates\r\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\r\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n\t */\r\n\r\n\tfunction CameraHelper( camera ) {\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar pointMap = {};\r\n\r\n\t\t// colors\r\n\r\n\t\tvar colorFrustum = new Color( 0xffaa00 );\r\n\t\tvar colorCone = new Color( 0xff0000 );\r\n\t\tvar colorUp = new Color( 0x00aaff );\r\n\t\tvar colorTarget = new Color( 0xffffff );\r\n\t\tvar colorCross = new Color( 0x333333 );\r\n\r\n\t\t// near\r\n\r\n\t\taddLine( 'n1', 'n2', colorFrustum );\r\n\t\taddLine( 'n2', 'n4', colorFrustum );\r\n\t\taddLine( 'n4', 'n3', colorFrustum );\r\n\t\taddLine( 'n3', 'n1', colorFrustum );\r\n\r\n\t\t// far\r\n\r\n\t\taddLine( 'f1', 'f2', colorFrustum );\r\n\t\taddLine( 'f2', 'f4', colorFrustum );\r\n\t\taddLine( 'f4', 'f3', colorFrustum );\r\n\t\taddLine( 'f3', 'f1', colorFrustum );\r\n\r\n\t\t// sides\r\n\r\n\t\taddLine( 'n1', 'f1', colorFrustum );\r\n\t\taddLine( 'n2', 'f2', colorFrustum );\r\n\t\taddLine( 'n3', 'f3', colorFrustum );\r\n\t\taddLine( 'n4', 'f4', colorFrustum );\r\n\r\n\t\t// cone\r\n\r\n\t\taddLine( 'p', 'n1', colorCone );\r\n\t\taddLine( 'p', 'n2', colorCone );\r\n\t\taddLine( 'p', 'n3', colorCone );\r\n\t\taddLine( 'p', 'n4', colorCone );\r\n\r\n\t\t// up\r\n\r\n\t\taddLine( 'u1', 'u2', colorUp );\r\n\t\taddLine( 'u2', 'u3', colorUp );\r\n\t\taddLine( 'u3', 'u1', colorUp );\r\n\r\n\t\t// target\r\n\r\n\t\taddLine( 'c', 't', colorTarget );\r\n\t\taddLine( 'p', 'c', colorCross );\r\n\r\n\t\t// cross\r\n\r\n\t\taddLine( 'cn1', 'cn2', colorCross );\r\n\t\taddLine( 'cn3', 'cn4', colorCross );\r\n\r\n\t\taddLine( 'cf1', 'cf2', colorCross );\r\n\t\taddLine( 'cf3', 'cf4', colorCross );\r\n\r\n\t\tfunction addLine( a, b, color ) {\r\n\r\n\t\t\taddPoint( a, color );\r\n\t\t\taddPoint( b, color );\r\n\r\n\t\t}\r\n\r\n\t\tfunction addPoint( id, color ) {\r\n\r\n\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\tif ( pointMap[ id ] === undefined ) {\r\n\r\n\t\t\t\tpointMap[ id ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t\tthis.camera = camera;\r\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\r\n\r\n\t\tthis.matrix = camera.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.pointMap = pointMap;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\r\n\tCameraHelper.prototype.constructor = CameraHelper;\r\n\r\n\tCameraHelper.prototype.update = function () {\r\n\r\n\t\tvar geometry, pointMap;\r\n\r\n\t\tvar vector = new Vector3();\r\n\t\tvar camera = new Camera();\r\n\r\n\t\tfunction setPoint( point, x, y, z ) {\r\n\r\n\t\t\tvector.set( x, y, z ).unproject( camera );\r\n\r\n\t\t\tvar points = pointMap[ point ];\r\n\r\n\t\t\tif ( points !== undefined ) {\r\n\r\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\r\n\r\n\t\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tposition.setXYZ( points[ i ], vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn function update() {\r\n\r\n\t\t\tgeometry = this.geometry;\r\n\t\t\tpointMap = this.pointMap;\r\n\r\n\t\t\tvar w = 1, h = 1;\r\n\r\n\t\t\t// we need just camera projection matrix\r\n\t\t\t// world matrix must be identity\r\n\r\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\r\n\t\t\t// center / target\r\n\r\n\t\t\tsetPoint( 'c', 0, 0, - 1 );\r\n\t\t\tsetPoint( 't', 0, 0, 1 );\r\n\r\n\t\t\t// near\r\n\r\n\t\t\tsetPoint( 'n1', - w, - h, - 1 );\r\n\t\t\tsetPoint( 'n2', w, - h, - 1 );\r\n\t\t\tsetPoint( 'n3', - w, h, - 1 );\r\n\t\t\tsetPoint( 'n4', w, h, - 1 );\r\n\r\n\t\t\t// far\r\n\r\n\t\t\tsetPoint( 'f1', - w, - h, 1 );\r\n\t\t\tsetPoint( 'f2', w, - h, 1 );\r\n\t\t\tsetPoint( 'f3', - w, h, 1 );\r\n\t\t\tsetPoint( 'f4', w, h, 1 );\r\n\r\n\t\t\t// up\r\n\r\n\t\t\tsetPoint( 'u1', w * 0.7, h * 1.1, - 1 );\r\n\t\t\tsetPoint( 'u2', - w * 0.7, h * 1.1, - 1 );\r\n\t\t\tsetPoint( 'u3', 0, h * 2, - 1 );\r\n\r\n\t\t\t// cross\r\n\r\n\t\t\tsetPoint( 'cf1', - w, 0, 1 );\r\n\t\t\tsetPoint( 'cf2', w, 0, 1 );\r\n\t\t\tsetPoint( 'cf3', 0, - h, 1 );\r\n\t\t\tsetPoint( 'cf4', 0, h, 1 );\r\n\r\n\t\t\tsetPoint( 'cn1', - w, 0, - 1 );\r\n\t\t\tsetPoint( 'cn2', w, 0, - 1 );\r\n\t\t\tsetPoint( 'cn3', 0, - h, - 1 );\r\n\t\t\tsetPoint( 'cn4', 0, h, - 1 );\r\n\r\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction BoxHelper( object, color ) {\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tif ( color === undefined ) color = 0xffff00;\r\n\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\t\tvar positions = new Float32Array( 8 * 3 );\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\t\tgeometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\r\n\tBoxHelper.prototype.constructor = BoxHelper;\r\n\r\n\tBoxHelper.prototype.update = ( function () {\r\n\r\n\t\tvar box = new Box3();\r\n\r\n\t\treturn function update( object ) {\r\n\r\n\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.object !== undefined ) {\r\n\r\n\t\t\t\tbox.setFromObject( this.object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( box.isEmpty() ) return;\r\n\r\n\t\t\tvar min = box.min;\r\n\t\t\tvar max = box.max;\r\n\r\n\t\t\t/*\r\n\t\t\t  5____4\r\n\t\t\t1/___0/|\r\n\t\t\t| 6__|_7\r\n\t\t\t2/___3/\r\n\r\n\t\t\t0: max.x, max.y, max.z\r\n\t\t\t1: min.x, max.y, max.z\r\n\t\t\t2: min.x, min.y, max.z\r\n\t\t\t3: max.x, min.y, max.z\r\n\t\t\t4: max.x, max.y, min.z\r\n\t\t\t5: min.x, max.y, min.z\r\n\t\t\t6: min.x, min.y, min.z\r\n\t\t\t7: max.x, min.y, min.z\r\n\t\t\t*/\r\n\r\n\t\t\tvar position = this.geometry.attributes.position;\r\n\t\t\tvar array = position.array;\r\n\r\n\t\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\r\n\t\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\r\n\t\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\r\n\t\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t\t};\r\n\r\n\t} )();\r\n\r\n\tBoxHelper.prototype.setFromObject = function ( object ) {\r\n\r\n\t\tthis.object = object;\r\n\t\tthis.update();\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Box3Helper( box, hex ) {\r\n\r\n\t\tthis.type = 'Box3Helper';\r\n\r\n\t\tthis.box = box;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\r\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\r\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t}\r\n\r\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\r\n\tBox3Helper.prototype.constructor = Box3Helper;\r\n\r\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar box = this.box;\r\n\r\n\t\tif ( box.isEmpty() ) return;\r\n\r\n\t\tbox.getCenter( this.position );\r\n\r\n\t\tbox.getSize( this.scale );\r\n\r\n\t\tthis.scale.multiplyScalar( 0.5 );\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction PlaneHelper( plane, size, hex ) {\r\n\r\n\t\tthis.type = 'PlaneHelper';\r\n\r\n\t\tthis.plane = plane;\r\n\r\n\t\tthis.size = ( size === undefined ) ? 1 : size;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\t//\r\n\r\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\r\n\r\n\t\tvar geometry2 = new BufferGeometry();\r\n\t\tgeometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\r\n\t\tgeometry2.computeBoundingSphere();\r\n\r\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\r\n\r\n\t}\r\n\r\n\tPlaneHelper.prototype = Object.create( Line.prototype );\r\n\tPlaneHelper.prototype.constructor = PlaneHelper;\r\n\r\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar scale = - this.plane.constant;\r\n\r\n\t\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\r\n\r\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\r\n\r\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\r\n\r\n\t\tthis.lookAt( this.plane.normal );\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author zz85 / http://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t *\r\n\t * Creates an arrow for visualizing directions\r\n\t *\r\n\t * Parameters:\r\n\t *  dir - Vector3\r\n\t *  origin - Vector3\r\n\t *  length - Number\r\n\t *  color - color in hex value\r\n\t *  headLength - Number\r\n\t *  headWidth - Number\r\n\t */\r\n\r\n\tvar lineGeometry, coneGeometry;\r\n\r\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tif ( color === undefined ) color = 0xffff00;\r\n\t\tif ( length === undefined ) length = 1;\r\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\r\n\t\tif ( lineGeometry === undefined ) {\r\n\r\n\t\t\tlineGeometry = new BufferGeometry();\r\n\t\t\tlineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\r\n\r\n\t\t\tconeGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\r\n\t\t\tconeGeometry.translate( 0, - 0.5, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.position.copy( origin );\r\n\r\n\t\tthis.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );\r\n\t\tthis.line.matrixAutoUpdate = false;\r\n\t\tthis.add( this.line );\r\n\r\n\t\tthis.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );\r\n\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.setDirection( dir );\r\n\t\tthis.setLength( length, headLength, headWidth );\r\n\r\n\t}\r\n\r\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\r\n\tArrowHelper.prototype.constructor = ArrowHelper;\r\n\r\n\tArrowHelper.prototype.setDirection = ( function () {\r\n\r\n\t\tvar axis = new Vector3();\r\n\t\tvar radians;\r\n\r\n\t\treturn function setDirection( dir ) {\r\n\r\n\t\t\t// dir is assumed to be normalized\r\n\r\n\t\t\tif ( dir.y > 0.99999 ) {\r\n\r\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\r\n\t\t\t} else if ( dir.y < - 0.99999 ) {\r\n\r\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\r\n\r\n\t\t\t\tradians = Math.acos( dir.y );\r\n\r\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}() );\r\n\r\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\r\n\r\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\r\n\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\r\n\t\tthis.line.updateMatrix();\r\n\r\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\t\tthis.cone.position.y = length;\r\n\t\tthis.cone.updateMatrix();\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.setColor = function ( color ) {\r\n\r\n\t\tthis.line.material.color.copy( color );\r\n\t\tthis.cone.material.color.copy( color );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author sroucheray / http://sroucheray.org/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AxesHelper( size ) {\r\n\r\n\t\tsize = size || 1;\r\n\r\n\t\tvar vertices = [\r\n\t\t\t0, 0, 0,\tsize, 0, 0,\r\n\t\t\t0, 0, 0,\t0, size, 0,\r\n\t\t\t0, 0, 0,\t0, 0, size\r\n\t\t];\r\n\r\n\t\tvar colors = [\r\n\t\t\t1, 0, 0,\t1, 0.6, 0,\r\n\t\t\t0, 1, 0,\t0.6, 1, 0,\r\n\t\t\t0, 0, 1,\t0, 0.6, 1\r\n\t\t];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\r\n\tAxesHelper.prototype.constructor = AxesHelper;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\r\n\r\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\r\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\r\n\r\n\t}\r\n\r\n\tvar LineStrip = 0;\r\n\r\n\tvar LinePieces = 1;\r\n\r\n\tfunction MeshFaceMaterial( materials ) {\r\n\r\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tfunction MultiMaterial( materials ) {\r\n\r\n\t\tif ( materials === undefined ) materials = [];\r\n\r\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\r\n\t\tmaterials.isMultiMaterial = true;\r\n\t\tmaterials.materials = materials;\r\n\t\tmaterials.clone = function () {\r\n\r\n\t\t\treturn materials.slice();\r\n\r\n\t\t};\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tfunction PointCloud( geometry, material ) {\r\n\r\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\r\n\t\treturn new Points( geometry, material );\r\n\r\n\t}\r\n\r\n\tfunction Particle( material ) {\r\n\r\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\r\n\t\treturn new Sprite( material );\r\n\r\n\t}\r\n\r\n\tfunction ParticleSystem( geometry, material ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\r\n\t\treturn new Points( geometry, material );\r\n\r\n\t}\r\n\r\n\tfunction PointCloudMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction ParticleBasicMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction ParticleSystemMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction Vertex( x, y, z ) {\r\n\r\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\r\n\t\treturn new Vector3( x, y, z );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction DynamicBufferAttribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\r\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\r\n\r\n\t}\r\n\r\n\tfunction Int8Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\r\n\t\treturn new Int8BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint8Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\r\n\t\treturn new Uint8BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\r\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Int16Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\r\n\t\treturn new Int16BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint16Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\r\n\t\treturn new Uint16BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Int32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\r\n\t\treturn new Int32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\r\n\t\treturn new Uint32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Float32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\r\n\t\treturn new Float32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Float64Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\r\n\t\treturn new Float64BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tCurve.create = function ( construct, getPoint ) {\r\n\r\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\r\n\r\n\t\tconstruct.prototype = Object.create( Curve.prototype );\r\n\t\tconstruct.prototype.constructor = construct;\r\n\t\tconstruct.prototype.getPoint = getPoint;\r\n\r\n\t\treturn construct;\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tObject.assign( CurvePath.prototype, {\r\n\r\n\t\tcreatePointsGeometry: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\t// generate geometry from path points (for Line or Points objects)\r\n\r\n\t\t\tvar pts = this.getPoints( divisions );\r\n\t\t\treturn this.createGeometry( pts );\r\n\r\n\t\t},\r\n\r\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\t// generate geometry from equidistant sampling along the path\r\n\r\n\t\t\tvar pts = this.getSpacedPoints( divisions );\r\n\t\t\treturn this.createGeometry( pts );\r\n\r\n\t\t},\r\n\r\n\t\tcreateGeometry: function ( points ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\tvar geometry = new Geometry();\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Path.prototype, {\r\n\r\n\t\tfromPoints: function ( points ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction ClosedSplineCurve3( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\t\tthis.closed = true;\r\n\r\n\t}\r\n\r\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\t//\r\n\r\n\tfunction SplineCurve3( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\r\n\t}\r\n\r\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\t//\r\n\r\n\tfunction Spline( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\r\n\t}\r\n\r\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\tObject.assign( Spline.prototype, {\r\n\r\n\t\tinitFromArray: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction AxisHelper( size ) {\r\n\r\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\r\n\t\treturn new AxesHelper( size );\r\n\r\n\t}\r\n\r\n\tfunction BoundingBoxHelper( object, color ) {\r\n\r\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\r\n\t\treturn new BoxHelper( object, color );\r\n\r\n\t}\r\n\r\n\tfunction EdgesHelper( object, hex ) {\r\n\r\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\r\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\r\n\r\n\t}\r\n\r\n\tGridHelper.prototype.setColors = function () {\r\n\r\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\r\n\r\n\t};\r\n\r\n\tSkeletonHelper.prototype.update = function () {\r\n\r\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\r\n\r\n\t};\r\n\r\n\tfunction WireframeHelper( object, hex ) {\r\n\r\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\r\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tObject.assign( Loader.prototype, {\r\n\r\n\t\textractUrlBase: function ( url ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\r\n\t\t\treturn LoaderUtils.extractUrlBase( url );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction XHRLoader( manager ) {\r\n\r\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\r\n\t\treturn new FileLoader( manager );\r\n\r\n\t}\r\n\r\n\tfunction BinaryTextureLoader( manager ) {\r\n\r\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\r\n\t\treturn new DataTextureLoader( manager );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tObject.assign( Box2.prototype, {\r\n\r\n\t\tcenter: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\r\n\t\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t\t},\r\n\t\tempty: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\r\n\t\t\treturn this.isEmpty();\r\n\r\n\t\t},\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tsize: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\r\n\t\t\treturn this.getSize( optionalTarget );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.assign( Box3.prototype, {\r\n\r\n\t\tcenter: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\r\n\t\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t\t},\r\n\t\tempty: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\r\n\t\t\treturn this.isEmpty();\r\n\r\n\t\t},\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tisIntersectionSphere: function ( sphere ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t},\r\n\t\tsize: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\r\n\t\t\treturn this.getSize( optionalTarget );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tLine3.prototype.center = function ( optionalTarget ) {\r\n\r\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\r\n\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t};\r\n\r\n\tObject.assign( _Math, {\r\n\r\n\t\trandom16: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\r\n\t\t\treturn Math.random();\r\n\r\n\t\t},\r\n\r\n\t\tnearestPowerOfTwo: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\r\n\t\t\treturn _Math.floorPowerOfTwo( value );\r\n\r\n\t\t},\r\n\r\n\t\tnextPowerOfTwo: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\r\n\t\t\treturn _Math.ceilPowerOfTwo( value );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Matrix3.prototype, {\r\n\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\r\n\t\t\treturn this.toArray( array, offset );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix3( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3Array: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\r\n\t\t\treturn this.applyToBufferAttribute( buffer );\r\n\r\n\t\t},\r\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Matrix4.prototype, {\r\n\r\n\t\textractPosition: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\r\n\t\t\treturn this.copyPosition( m );\r\n\r\n\t\t},\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\r\n\t\t\treturn this.toArray( array, offset );\r\n\r\n\t\t},\r\n\t\tgetPosition: function () {\r\n\r\n\t\t\tvar v1;\r\n\r\n\t\t\treturn function getPosition() {\r\n\r\n\t\t\t\tif ( v1 === undefined ) v1 = new Vector3();\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\r\n\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\r\n\r\n\t\t\t};\r\n\r\n\t\t}(),\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\r\n\t\t\treturn this.makeRotationFromQuaternion( q );\r\n\r\n\t\t},\r\n\t\tmultiplyToArray: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector4: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3Array: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateAxis: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\r\n\t\t\tv.transformDirection( this );\r\n\r\n\t\t},\r\n\t\tcrossVector: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\ttranslate: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateX: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateY: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateZ: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateByAxis: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\r\n\r\n\t\t},\r\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\r\n\t\t\treturn this.applyToBufferAttribute( buffer );\r\n\r\n\t\t},\r\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\r\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tPlane.prototype.isIntersectionLine = function ( line ) {\r\n\r\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\r\n\t\treturn this.intersectsLine( line );\r\n\r\n\t};\r\n\r\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\r\n\r\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\treturn vector.applyQuaternion( this );\r\n\r\n\t};\r\n\r\n\tObject.assign( Ray.prototype, {\r\n\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tisIntersectionPlane: function ( plane ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\r\n\t\t\treturn this.intersectsPlane( plane );\r\n\r\n\t\t},\r\n\t\tisIntersectionSphere: function ( sphere ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle.prototype, {\r\n\r\n\t\tarea: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\r\n\t\t\treturn this.getArea();\r\n\r\n\t\t},\r\n\t\tbarycoordFromPoint: function ( point, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\r\n\t\t\treturn this.getBarycoord( point, target );\r\n\r\n\t\t},\r\n\t\tmidpoint: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\r\n\t\t\treturn this.getMidpoint( target );\r\n\r\n\t\t},\r\n\t\tnormal: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\r\n\t\t\treturn this.getNormal( target );\r\n\r\n\t\t},\r\n\t\tplane: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\r\n\t\t\treturn this.getPlane( target );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle, {\r\n\r\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\r\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\r\n\r\n\t\t},\r\n\t\tnormal: function ( a, b, c, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\r\n\t\t\treturn Triangle.getNormal( a, b, c, target );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Shape.prototype, {\r\n\r\n\t\textractAllPoints: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\r\n\t\t\treturn this.extractPoints( divisions );\r\n\r\n\t\t},\r\n\t\textrude: function ( options ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\r\n\t\t\treturn new ExtrudeGeometry( this, options );\r\n\r\n\t\t},\r\n\t\tmakeGeometry: function ( options ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\r\n\t\t\treturn new ShapeGeometry( this, options );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector2.prototype, {\r\n\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tdistanceToManhattan: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\r\n\t\t\treturn this.manhattanDistanceTo( v );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector3.prototype, {\r\n\r\n\t\tsetEulerFromRotationMatrix: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\r\n\r\n\t\t},\r\n\t\tsetEulerFromQuaternion: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\r\n\r\n\t\t},\r\n\t\tgetPositionFromMatrix: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\r\n\t\t\treturn this.setFromMatrixPosition( m );\r\n\r\n\t\t},\r\n\t\tgetScaleFromMatrix: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\r\n\t\t\treturn this.setFromMatrixScale( m );\r\n\r\n\t\t},\r\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\r\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\r\n\r\n\t\t},\r\n\t\tapplyProjection: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\r\n\t\t\treturn this.applyMatrix4( m );\r\n\r\n\t\t},\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tdistanceToManhattan: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\r\n\t\t\treturn this.manhattanDistanceTo( v );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector4.prototype, {\r\n\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Geometry.prototype, {\r\n\r\n\t\tcomputeTangents: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\r\n\r\n\t\t},\r\n\t\tcomputeLineDistances: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Object3D.prototype, {\r\n\r\n\t\tgetChildByName: function ( name ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\r\n\t\t\treturn this.getObjectByName( name );\r\n\r\n\t\t},\r\n\t\trenderDepth: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\r\n\r\n\t\t},\r\n\t\ttranslate: function ( distance, axis ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\r\n\t\t\treturn this.translateOnAxis( axis, distance );\r\n\r\n\t\t},\r\n\t\tgetWorldRotation: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( Object3D.prototype, {\r\n\r\n\t\teulerOrder: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\t\treturn this.rotation.order;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\t\tthis.rotation.order = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tuseQuaternion: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( LOD.prototype, {\r\n\r\n\t\tobjects: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\r\n\t\t\t\treturn this.levels;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\r\n\r\n\t\t},\r\n\t\tset: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\r\n\t\t\treturn this.arcLengthDivisions;\r\n\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\r\n\t\t\tthis.arcLengthDivisions = value;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\r\n\r\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\r\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\r\n\r\n\t\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\r\n\t\tthis.setFocalLength( focalLength );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Light.prototype, {\r\n\t\tonlyShadow: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFov: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\r\n\t\t\t\tthis.shadow.camera.fov = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraLeft: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\r\n\t\t\t\tthis.shadow.camera.left = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraRight: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\r\n\t\t\t\tthis.shadow.camera.right = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraTop: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\r\n\t\t\t\tthis.shadow.camera.top = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraBottom: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\r\n\t\t\t\tthis.shadow.camera.bottom = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraNear: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\r\n\t\t\t\tthis.shadow.camera.near = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFar: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\r\n\t\t\t\tthis.shadow.camera.far = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraVisible: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowBias: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\r\n\t\t\t\tthis.shadow.bias = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowDarkness: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapWidth: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\r\n\t\t\t\tthis.shadow.mapSize.width = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapHeight: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\r\n\t\t\t\tthis.shadow.mapSize.height = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( BufferAttribute.prototype, {\r\n\r\n\t\tlength: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\r\n\t\t\t\treturn this.array.length;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tcopyIndicesArray: function ( /* indices */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( BufferGeometry.prototype, {\r\n\r\n\t\taddIndex: function ( index ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\r\n\t\t\tthis.setIndex( index );\r\n\r\n\t\t},\r\n\t\taddDrawCall: function ( start, count, indexOffset ) {\r\n\r\n\t\t\tif ( indexOffset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\r\n\r\n\t\t\t}\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\r\n\t\t\tthis.addGroup( start, count );\r\n\r\n\t\t},\r\n\t\tclearDrawCalls: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\r\n\t\t\tthis.clearGroups();\r\n\r\n\t\t},\r\n\t\tcomputeTangents: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\r\n\r\n\t\t},\r\n\t\tcomputeOffsets: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( BufferGeometry.prototype, {\r\n\r\n\t\tdrawcalls: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\r\n\t\t\t\treturn this.groups;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\toffsets: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\r\n\t\t\t\treturn this.groups;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\r\n\r\n\t\tgetArrays: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\r\n\r\n\t\t},\r\n\r\n\t\taddShapeList: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\r\n\r\n\t\t},\r\n\r\n\t\taddShape: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Uniform.prototype, {\r\n\r\n\t\tdynamic: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tonUpdate: {\r\n\t\t\tvalue: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Material.prototype, {\r\n\r\n\t\twrapAround: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\twrapRGB: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\r\n\t\t\t\treturn new Color();\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tshading: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\t\t\t\tthis.flatShading = ( value === FlatShading );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\r\n\r\n\t\tmetal: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( ShaderMaterial.prototype, {\r\n\r\n\t\tderivatives: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\t\treturn this.extensions.derivatives;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\t\tthis.extensions.derivatives = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( WebGLRenderer.prototype, {\r\n\r\n\t\tanimate: function ( callback ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\r\n\t\t\tthis.setAnimationLoop( callback );\r\n\r\n\t\t},\r\n\r\n\t\tgetCurrentRenderTarget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\r\n\t\t\treturn this.getRenderTarget();\r\n\r\n\t\t},\r\n\r\n\t\tgetMaxAnisotropy: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\r\n\t\t\treturn this.capabilities.getMaxAnisotropy();\r\n\r\n\t\t},\r\n\r\n\t\tgetPrecision: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\r\n\t\t\treturn this.capabilities.precision;\r\n\r\n\t\t},\r\n\r\n\t\tresetGLState: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\r\n\t\t\treturn this.state.reset();\r\n\r\n\t\t},\r\n\r\n\t\tsupportsFloatTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\r\n\r\n\t\t},\r\n\t\tsupportsHalfFloatTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\t},\r\n\t\tsupportsStandardDerivatives: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\r\n\r\n\t\t},\r\n\t\tsupportsCompressedTextureS3TC: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\r\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\t},\r\n\t\tsupportsCompressedTexturePVRTC: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\r\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\t},\r\n\t\tsupportsBlendMinMax: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\r\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\t},\r\n\t\tsupportsVertexTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\r\n\t\t\treturn this.capabilities.vertexTextures;\r\n\r\n\t\t},\r\n\t\tsupportsInstancedArrays: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\r\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t},\r\n\t\tenableScissorTest: function ( boolean ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\r\n\t\t\tthis.setScissorTest( boolean );\r\n\r\n\t\t},\r\n\t\tinitMaterial: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\r\n\r\n\t\t},\r\n\t\taddPrePlugin: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\r\n\r\n\t\t},\r\n\t\taddPostPlugin: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\r\n\r\n\t\t},\r\n\t\tupdateShadowMap: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetFaceCulling: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( WebGLRenderer.prototype, {\r\n\r\n\t\tshadowMapEnabled: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.shadowMap.enabled;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\r\n\t\t\t\tthis.shadowMap.enabled = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapType: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.shadowMap.type;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\r\n\t\t\t\tthis.shadowMap.type = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapCullFace: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.defineProperties( WebGLShadowMap.prototype, {\r\n\r\n\t\tcullFace: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* cullFace */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trenderReverseSided: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trenderSingleSided: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\r\n\r\n\t\twrapS: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\t\treturn this.texture.wrapS;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\t\tthis.texture.wrapS = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\twrapT: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\t\treturn this.texture.wrapT;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\t\tthis.texture.wrapT = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tmagFilter: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\t\treturn this.texture.magFilter;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\t\tthis.texture.magFilter = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tminFilter: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\t\treturn this.texture.minFilter;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\t\tthis.texture.minFilter = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tanisotropy: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\t\treturn this.texture.anisotropy;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\t\tthis.texture.anisotropy = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\toffset: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\t\treturn this.texture.offset;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\t\tthis.texture.offset = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trepeat: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\t\treturn this.texture.repeat;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\t\tthis.texture.repeat = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tformat: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\t\treturn this.texture.format;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\t\tthis.texture.format = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\ttype: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\t\treturn this.texture.type;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\t\tthis.texture.type = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tgenerateMipmaps: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\t\treturn this.texture.generateMipmaps;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\t\tthis.texture.generateMipmaps = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebVRManager.prototype, {\r\n\r\n\t\tstanding: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tAudio.prototype.load = function ( file ) {\r\n\r\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\r\n\t\tvar scope = this;\r\n\t\tvar audioLoader = new AudioLoader();\r\n\t\taudioLoader.load( file, function ( buffer ) {\r\n\r\n\t\t\tscope.setBuffer( buffer );\r\n\r\n\t\t} );\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tAudioAnalyser.prototype.getData = function () {\r\n\r\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\r\n\t\treturn this.getFrequencyData();\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\r\n\t\treturn this.update( renderer, scene );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tvar GeometryUtils = {\r\n\r\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\r\n\t\t\tvar matrix;\r\n\r\n\t\t\tif ( geometry2.isMesh ) {\r\n\r\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\r\n\r\n\t\t\t\tmatrix = geometry2.matrix;\r\n\t\t\t\tgeometry2 = geometry2.geometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function ( geometry ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\r\n\t\t\treturn geometry.center();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tImageUtils.crossOrigin = undefined;\r\n\r\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\r\n\r\n\t\tvar loader = new TextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t};\r\n\r\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\r\n\r\n\t\tvar loader = new CubeTextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t};\r\n\r\n\tImageUtils.loadCompressedTexture = function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t};\r\n\r\n\tImageUtils.loadCompressedTextureCube = function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction Projector() {\r\n\r\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\r\n\r\n\t\tthis.projectVector = function ( vector, camera ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\r\n\t\t\tvector.project( camera );\r\n\r\n\t\t};\r\n\r\n\t\tthis.unprojectVector = function ( vector, camera ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\r\n\t\t\tvector.unproject( camera );\r\n\r\n\t\t};\r\n\r\n\t\tthis.pickingRay = function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction CanvasRenderer() {\r\n\r\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\r\n\r\n\t\tthis.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\r\n\t\tthis.clear = function () {};\r\n\t\tthis.render = function () {};\r\n\t\tthis.setClearColor = function () {};\r\n\t\tthis.setSize = function () {};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar SceneUtils = {\r\n\r\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t},\r\n\r\n\t\tdetach: function ( /* child, parent, scene */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t},\r\n\r\n\t\tattach: function ( /* child, scene, parent */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction LensFlare() {\r\n\r\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\r\n\r\n\t}\r\n\r\n\tvar exports = {};\r\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\r\n\texports.WebGLRenderTarget = WebGLRenderTarget;\r\n\texports.WebGLRenderer = WebGLRenderer;\r\n\texports.ShaderLib = ShaderLib;\r\n\texports.UniformsLib = UniformsLib;\r\n\texports.UniformsUtils = UniformsUtils;\r\n\texports.ShaderChunk = ShaderChunk;\r\n\texports.FogExp2 = FogExp2;\r\n\texports.Fog = Fog;\r\n\texports.Scene = Scene;\r\n\texports.Sprite = Sprite;\r\n\texports.LOD = LOD;\r\n\texports.SkinnedMesh = SkinnedMesh;\r\n\texports.Skeleton = Skeleton;\r\n\texports.Bone = Bone;\r\n\texports.Mesh = Mesh;\r\n\texports.LineSegments = LineSegments;\r\n\texports.LineLoop = LineLoop;\r\n\texports.Line = Line;\r\n\texports.Points = Points;\r\n\texports.Group = Group;\r\n\texports.VideoTexture = VideoTexture;\r\n\texports.DataTexture = DataTexture;\r\n\texports.CompressedTexture = CompressedTexture;\r\n\texports.CubeTexture = CubeTexture;\r\n\texports.CanvasTexture = CanvasTexture;\r\n\texports.DepthTexture = DepthTexture;\r\n\texports.Texture = Texture;\r\n\texports.CompressedTextureLoader = CompressedTextureLoader;\r\n\texports.DataTextureLoader = DataTextureLoader;\r\n\texports.CubeTextureLoader = CubeTextureLoader;\r\n\texports.TextureLoader = TextureLoader;\r\n\texports.ObjectLoader = ObjectLoader;\r\n\texports.MaterialLoader = MaterialLoader;\r\n\texports.BufferGeometryLoader = BufferGeometryLoader;\r\n\texports.DefaultLoadingManager = DefaultLoadingManager;\r\n\texports.LoadingManager = LoadingManager;\r\n\texports.JSONLoader = JSONLoader;\r\n\texports.ImageLoader = ImageLoader;\r\n\texports.ImageBitmapLoader = ImageBitmapLoader;\r\n\texports.FontLoader = FontLoader;\r\n\texports.FileLoader = FileLoader;\r\n\texports.Loader = Loader;\r\n\texports.LoaderUtils = LoaderUtils;\r\n\texports.Cache = Cache;\r\n\texports.AudioLoader = AudioLoader;\r\n\texports.SpotLightShadow = SpotLightShadow;\r\n\texports.SpotLight = SpotLight;\r\n\texports.PointLight = PointLight;\r\n\texports.RectAreaLight = RectAreaLight;\r\n\texports.HemisphereLight = HemisphereLight;\r\n\texports.DirectionalLightShadow = DirectionalLightShadow;\r\n\texports.DirectionalLight = DirectionalLight;\r\n\texports.AmbientLight = AmbientLight;\r\n\texports.LightShadow = LightShadow;\r\n\texports.Light = Light;\r\n\texports.StereoCamera = StereoCamera;\r\n\texports.PerspectiveCamera = PerspectiveCamera;\r\n\texports.OrthographicCamera = OrthographicCamera;\r\n\texports.CubeCamera = CubeCamera;\r\n\texports.ArrayCamera = ArrayCamera;\r\n\texports.Camera = Camera;\r\n\texports.AudioListener = AudioListener;\r\n\texports.PositionalAudio = PositionalAudio;\r\n\texports.AudioContext = AudioContext;\r\n\texports.AudioAnalyser = AudioAnalyser;\r\n\texports.Audio = Audio;\r\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\r\n\texports.StringKeyframeTrack = StringKeyframeTrack;\r\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\r\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\r\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\r\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\r\n\texports.PropertyMixer = PropertyMixer;\r\n\texports.PropertyBinding = PropertyBinding;\r\n\texports.KeyframeTrack = KeyframeTrack;\r\n\texports.AnimationUtils = AnimationUtils;\r\n\texports.AnimationObjectGroup = AnimationObjectGroup;\r\n\texports.AnimationMixer = AnimationMixer;\r\n\texports.AnimationClip = AnimationClip;\r\n\texports.Uniform = Uniform;\r\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\r\n\texports.BufferGeometry = BufferGeometry;\r\n\texports.Geometry = Geometry;\r\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\r\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\r\n\texports.InterleavedBuffer = InterleavedBuffer;\r\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\r\n\texports.Face3 = Face3;\r\n\texports.Object3D = Object3D;\r\n\texports.Raycaster = Raycaster;\r\n\texports.Layers = Layers;\r\n\texports.EventDispatcher = EventDispatcher;\r\n\texports.Clock = Clock;\r\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\r\n\texports.LinearInterpolant = LinearInterpolant;\r\n\texports.DiscreteInterpolant = DiscreteInterpolant;\r\n\texports.CubicInterpolant = CubicInterpolant;\r\n\texports.Interpolant = Interpolant;\r\n\texports.Triangle = Triangle;\r\n\texports.Math = _Math;\r\n\texports.Spherical = Spherical;\r\n\texports.Cylindrical = Cylindrical;\r\n\texports.Plane = Plane;\r\n\texports.Frustum = Frustum;\r\n\texports.Sphere = Sphere;\r\n\texports.Ray = Ray;\r\n\texports.Matrix4 = Matrix4;\r\n\texports.Matrix3 = Matrix3;\r\n\texports.Box3 = Box3;\r\n\texports.Box2 = Box2;\r\n\texports.Line3 = Line3;\r\n\texports.Euler = Euler;\r\n\texports.Vector4 = Vector4;\r\n\texports.Vector3 = Vector3;\r\n\texports.Vector2 = Vector2;\r\n\texports.Quaternion = Quaternion;\r\n\texports.Color = Color;\r\n\texports.ImmediateRenderObject = ImmediateRenderObject;\r\n\texports.VertexNormalsHelper = VertexNormalsHelper;\r\n\texports.SpotLightHelper = SpotLightHelper;\r\n\texports.SkeletonHelper = SkeletonHelper;\r\n\texports.PointLightHelper = PointLightHelper;\r\n\texports.RectAreaLightHelper = RectAreaLightHelper;\r\n\texports.HemisphereLightHelper = HemisphereLightHelper;\r\n\texports.GridHelper = GridHelper;\r\n\texports.PolarGridHelper = PolarGridHelper;\r\n\texports.FaceNormalsHelper = FaceNormalsHelper;\r\n\texports.DirectionalLightHelper = DirectionalLightHelper;\r\n\texports.CameraHelper = CameraHelper;\r\n\texports.BoxHelper = BoxHelper;\r\n\texports.Box3Helper = Box3Helper;\r\n\texports.PlaneHelper = PlaneHelper;\r\n\texports.ArrowHelper = ArrowHelper;\r\n\texports.AxesHelper = AxesHelper;\r\n\texports.Shape = Shape;\r\n\texports.Path = Path;\r\n\texports.ShapePath = ShapePath;\r\n\texports.Font = Font;\r\n\texports.CurvePath = CurvePath;\r\n\texports.Curve = Curve;\r\n\texports.ImageUtils = ImageUtils;\r\n\texports.ShapeUtils = ShapeUtils;\r\n\texports.WebGLUtils = WebGLUtils;\r\n\texports.WireframeGeometry = WireframeGeometry;\r\n\texports.ParametricGeometry = ParametricGeometry;\r\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\r\n\texports.TetrahedronGeometry = TetrahedronGeometry;\r\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\r\n\texports.OctahedronGeometry = OctahedronGeometry;\r\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\r\n\texports.IcosahedronGeometry = IcosahedronGeometry;\r\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\r\n\texports.DodecahedronGeometry = DodecahedronGeometry;\r\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\r\n\texports.PolyhedronGeometry = PolyhedronGeometry;\r\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\r\n\texports.TubeGeometry = TubeGeometry;\r\n\texports.TubeBufferGeometry = TubeBufferGeometry;\r\n\texports.TorusKnotGeometry = TorusKnotGeometry;\r\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\r\n\texports.TorusGeometry = TorusGeometry;\r\n\texports.TorusBufferGeometry = TorusBufferGeometry;\r\n\texports.TextGeometry = TextGeometry;\r\n\texports.TextBufferGeometry = TextBufferGeometry;\r\n\texports.SphereGeometry = SphereGeometry;\r\n\texports.SphereBufferGeometry = SphereBufferGeometry;\r\n\texports.RingGeometry = RingGeometry;\r\n\texports.RingBufferGeometry = RingBufferGeometry;\r\n\texports.PlaneGeometry = PlaneGeometry;\r\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\r\n\texports.LatheGeometry = LatheGeometry;\r\n\texports.LatheBufferGeometry = LatheBufferGeometry;\r\n\texports.ShapeGeometry = ShapeGeometry;\r\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\r\n\texports.ExtrudeGeometry = ExtrudeGeometry;\r\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\r\n\texports.EdgesGeometry = EdgesGeometry;\r\n\texports.ConeGeometry = ConeGeometry;\r\n\texports.ConeBufferGeometry = ConeBufferGeometry;\r\n\texports.CylinderGeometry = CylinderGeometry;\r\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\r\n\texports.CircleGeometry = CircleGeometry;\r\n\texports.CircleBufferGeometry = CircleBufferGeometry;\r\n\texports.BoxGeometry = BoxGeometry;\r\n\texports.BoxBufferGeometry = BoxBufferGeometry;\r\n\texports.ShadowMaterial = ShadowMaterial;\r\n\texports.SpriteMaterial = SpriteMaterial;\r\n\texports.RawShaderMaterial = RawShaderMaterial;\r\n\texports.ShaderMaterial = ShaderMaterial;\r\n\texports.PointsMaterial = PointsMaterial;\r\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\r\n\texports.MeshStandardMaterial = MeshStandardMaterial;\r\n\texports.MeshPhongMaterial = MeshPhongMaterial;\r\n\texports.MeshToonMaterial = MeshToonMaterial;\r\n\texports.MeshNormalMaterial = MeshNormalMaterial;\r\n\texports.MeshLambertMaterial = MeshLambertMaterial;\r\n\texports.MeshDepthMaterial = MeshDepthMaterial;\r\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\r\n\texports.MeshBasicMaterial = MeshBasicMaterial;\r\n\texports.LineDashedMaterial = LineDashedMaterial;\r\n\texports.LineBasicMaterial = LineBasicMaterial;\r\n\texports.Material = Material;\r\n\texports.Float64BufferAttribute = Float64BufferAttribute;\r\n\texports.Float32BufferAttribute = Float32BufferAttribute;\r\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\r\n\texports.Int32BufferAttribute = Int32BufferAttribute;\r\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\r\n\texports.Int16BufferAttribute = Int16BufferAttribute;\r\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\r\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\r\n\texports.Int8BufferAttribute = Int8BufferAttribute;\r\n\texports.BufferAttribute = BufferAttribute;\r\n\texports.ArcCurve = ArcCurve;\r\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\r\n\texports.CubicBezierCurve = CubicBezierCurve;\r\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\r\n\texports.EllipseCurve = EllipseCurve;\r\n\texports.LineCurve = LineCurve;\r\n\texports.LineCurve3 = LineCurve3;\r\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\r\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\r\n\texports.SplineCurve = SplineCurve;\r\n\texports.REVISION = REVISION;\r\n\texports.MOUSE = MOUSE;\r\n\texports.CullFaceNone = CullFaceNone;\r\n\texports.CullFaceBack = CullFaceBack;\r\n\texports.CullFaceFront = CullFaceFront;\r\n\texports.CullFaceFrontBack = CullFaceFrontBack;\r\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\r\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\r\n\texports.BasicShadowMap = BasicShadowMap;\r\n\texports.PCFShadowMap = PCFShadowMap;\r\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\r\n\texports.FrontSide = FrontSide;\r\n\texports.BackSide = BackSide;\r\n\texports.DoubleSide = DoubleSide;\r\n\texports.FlatShading = FlatShading;\r\n\texports.SmoothShading = SmoothShading;\r\n\texports.NoColors = NoColors;\r\n\texports.FaceColors = FaceColors;\r\n\texports.VertexColors = VertexColors;\r\n\texports.NoBlending = NoBlending;\r\n\texports.NormalBlending = NormalBlending;\r\n\texports.AdditiveBlending = AdditiveBlending;\r\n\texports.SubtractiveBlending = SubtractiveBlending;\r\n\texports.MultiplyBlending = MultiplyBlending;\r\n\texports.CustomBlending = CustomBlending;\r\n\texports.AddEquation = AddEquation;\r\n\texports.SubtractEquation = SubtractEquation;\r\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\r\n\texports.MinEquation = MinEquation;\r\n\texports.MaxEquation = MaxEquation;\r\n\texports.ZeroFactor = ZeroFactor;\r\n\texports.OneFactor = OneFactor;\r\n\texports.SrcColorFactor = SrcColorFactor;\r\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\r\n\texports.SrcAlphaFactor = SrcAlphaFactor;\r\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\r\n\texports.DstAlphaFactor = DstAlphaFactor;\r\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\r\n\texports.DstColorFactor = DstColorFactor;\r\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\r\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\r\n\texports.NeverDepth = NeverDepth;\r\n\texports.AlwaysDepth = AlwaysDepth;\r\n\texports.LessDepth = LessDepth;\r\n\texports.LessEqualDepth = LessEqualDepth;\r\n\texports.EqualDepth = EqualDepth;\r\n\texports.GreaterEqualDepth = GreaterEqualDepth;\r\n\texports.GreaterDepth = GreaterDepth;\r\n\texports.NotEqualDepth = NotEqualDepth;\r\n\texports.MultiplyOperation = MultiplyOperation;\r\n\texports.MixOperation = MixOperation;\r\n\texports.AddOperation = AddOperation;\r\n\texports.NoToneMapping = NoToneMapping;\r\n\texports.LinearToneMapping = LinearToneMapping;\r\n\texports.ReinhardToneMapping = ReinhardToneMapping;\r\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\r\n\texports.CineonToneMapping = CineonToneMapping;\r\n\texports.UVMapping = UVMapping;\r\n\texports.CubeReflectionMapping = CubeReflectionMapping;\r\n\texports.CubeRefractionMapping = CubeRefractionMapping;\r\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\r\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\r\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\r\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\r\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\r\n\texports.RepeatWrapping = RepeatWrapping;\r\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\r\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\r\n\texports.NearestFilter = NearestFilter;\r\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\r\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\r\n\texports.LinearFilter = LinearFilter;\r\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\r\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\r\n\texports.UnsignedByteType = UnsignedByteType;\r\n\texports.ByteType = ByteType;\r\n\texports.ShortType = ShortType;\r\n\texports.UnsignedShortType = UnsignedShortType;\r\n\texports.IntType = IntType;\r\n\texports.UnsignedIntType = UnsignedIntType;\r\n\texports.FloatType = FloatType;\r\n\texports.HalfFloatType = HalfFloatType;\r\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\r\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\r\n\texports.UnsignedShort565Type = UnsignedShort565Type;\r\n\texports.UnsignedInt248Type = UnsignedInt248Type;\r\n\texports.AlphaFormat = AlphaFormat;\r\n\texports.RGBFormat = RGBFormat;\r\n\texports.RGBAFormat = RGBAFormat;\r\n\texports.LuminanceFormat = LuminanceFormat;\r\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\r\n\texports.RGBEFormat = RGBEFormat;\r\n\texports.DepthFormat = DepthFormat;\r\n\texports.DepthStencilFormat = DepthStencilFormat;\r\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\r\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\r\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\r\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\r\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\r\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\r\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\r\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\r\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\r\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\r\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\r\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\r\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\r\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\r\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\r\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\r\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\r\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\r\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\r\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\r\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\r\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\r\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\r\n\texports.LoopOnce = LoopOnce;\r\n\texports.LoopRepeat = LoopRepeat;\r\n\texports.LoopPingPong = LoopPingPong;\r\n\texports.InterpolateDiscrete = InterpolateDiscrete;\r\n\texports.InterpolateLinear = InterpolateLinear;\r\n\texports.InterpolateSmooth = InterpolateSmooth;\r\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\r\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\r\n\texports.WrapAroundEnding = WrapAroundEnding;\r\n\texports.TrianglesDrawMode = TrianglesDrawMode;\r\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\r\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\r\n\texports.LinearEncoding = LinearEncoding;\r\n\texports.sRGBEncoding = sRGBEncoding;\r\n\texports.GammaEncoding = GammaEncoding;\r\n\texports.RGBEEncoding = RGBEEncoding;\r\n\texports.LogLuvEncoding = LogLuvEncoding;\r\n\texports.RGBM7Encoding = RGBM7Encoding;\r\n\texports.RGBM16Encoding = RGBM16Encoding;\r\n\texports.RGBDEncoding = RGBDEncoding;\r\n\texports.BasicDepthPacking = BasicDepthPacking;\r\n\texports.RGBADepthPacking = RGBADepthPacking;\r\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\r\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\r\n\texports.CubeGeometry = BoxGeometry;\r\n\texports.Face4 = Face4;\r\n\texports.LineStrip = LineStrip;\r\n\texports.LinePieces = LinePieces;\r\n\texports.MeshFaceMaterial = MeshFaceMaterial;\r\n\texports.MultiMaterial = MultiMaterial;\r\n\texports.PointCloud = PointCloud;\r\n\texports.Particle = Particle;\r\n\texports.ParticleSystem = ParticleSystem;\r\n\texports.PointCloudMaterial = PointCloudMaterial;\r\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\r\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\r\n\texports.Vertex = Vertex;\r\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\r\n\texports.Int8Attribute = Int8Attribute;\r\n\texports.Uint8Attribute = Uint8Attribute;\r\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\r\n\texports.Int16Attribute = Int16Attribute;\r\n\texports.Uint16Attribute = Uint16Attribute;\r\n\texports.Int32Attribute = Int32Attribute;\r\n\texports.Uint32Attribute = Uint32Attribute;\r\n\texports.Float32Attribute = Float32Attribute;\r\n\texports.Float64Attribute = Float64Attribute;\r\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\r\n\texports.SplineCurve3 = SplineCurve3;\r\n\texports.Spline = Spline;\r\n\texports.AxisHelper = AxisHelper;\r\n\texports.BoundingBoxHelper = BoundingBoxHelper;\r\n\texports.EdgesHelper = EdgesHelper;\r\n\texports.WireframeHelper = WireframeHelper;\r\n\texports.XHRLoader = XHRLoader;\r\n\texports.BinaryTextureLoader = BinaryTextureLoader;\r\n\texports.GeometryUtils = GeometryUtils;\r\n\texports.Projector = Projector;\r\n\texports.CanvasRenderer = CanvasRenderer;\r\n\texports.SceneUtils = SceneUtils;\r\n\texports.LensFlare = LensFlare;\r\n\r\n\treturn exports;\t\r\n\r\n});\r\n\ndefine('skylark-graphics-webgl/main',[\r\n    \"skylark-langx/langx\",\r\n    \"./webgl\",\r\n    \"./primitives/three\"\r\n], function(langx,webgl,threejs) {\r\n    langx.mixin(webgl,threejs);\r\n\r\n    return webgl;\r\n});\r\n\ndefine('skylark-graphics-webgl', ['skylark-graphics-webgl/main'], function (main) { return main; });\n\n"]}